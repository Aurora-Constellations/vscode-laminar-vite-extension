2024.01.03 12:18:36 INFO  Started: Metals version 1.2.0 in folders 'C:\Users\yashb\Documents\hello-world' for client Visual Studio Code 1.85.1.
2024.01.03 12:18:37 WARN  Build server is not auto-connectable.
2024.01.03 12:18:37 WARN  no build target for: C:\Users\yashb\Documents\hello-world\livechart\project\plugins.sbt
2024.01.03 12:18:40 INFO  no build target found for C:\Users\yashb\Documents\hello-world\livechart\project\plugins.sbt. Using presentation compiler with project's scala-library version: 3.3.1
2024.01.03 12:18:41 WARN  Could not find semantic tokens for: file:///C:/Users/yashb/Documents/hello-world/livechart/project/plugins.sbt
2024.01.03 12:18:41 INFO  time: code lens generation in 3.91s
2024.01.03 12:18:41 WARN  Could not find semantic tokens for: file:///C:/Users/yashb/Documents/hello-world/livechart/project/plugins.sbt
2024.01.03 12:18:45 WARN  no build target for: C:\Users\yashb\Documents\hello-world\livechart\build.sbt
2024.01.03 12:18:45 WARN  Could not find semantic tokens for: file:///C:/Users/yashb/Documents/hello-world/livechart/build.sbt
2024.01.03 12:18:45 WARN  Could not find semantic tokens for: file:///C:/Users/yashb/Documents/hello-world/livechart/build.sbt
2024.01.03 12:18:53 WARN  no build target for: C:\Users\yashb\Documents\hello-world\livechart\build.sbt
2024.01.03 12:18:55 INFO  running 'C:\Program Files\Java\jdk-11\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\yashb\AppData\Local\Temp\metals18310921777262954886\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'
2024.01.03 12:18:57 INFO  [info] welcome to sbt 1.8.2 (Oracle Corporation Java 11.0.18)
2024.01.03 12:18:59 INFO  [info] loading settings for project livechart-build-build-build from metals.sbt ...
2024.01.03 12:18:59 INFO  [info] loading project definition from C:\Users\yashb\Documents\hello-world\livechart\project\project\project
2024.01.03 12:19:01 INFO  [info] loading settings for project livechart-build-build from metals.sbt ...
2024.01.03 12:19:01 INFO  [info] loading project definition from C:\Users\yashb\Documents\hello-world\livechart\project\project
2024.01.03 12:19:03 INFO  [success] Generated .bloop\livechart-build-build.json
2024.01.03 12:19:03 INFO  [success] Total time: 2 s, completed Jan. 3, 2024, 12:19:03 p.m.
2024.01.03 12:19:03 INFO  [info] loading settings for project livechart-build from metals.sbt,plugins.sbt ...
2024.01.03 12:19:03 INFO  [info] loading project definition from C:\Users\yashb\Documents\hello-world\livechart\project
2024.01.03 12:19:06 INFO  [success] Generated .bloop\livechart-build.json
2024.01.03 12:19:06 INFO  [success] Total time: 2 s, completed Jan. 3, 2024, 12:19:06 p.m.
2024.01.03 12:19:07 INFO  [info] loading settings for project livechart from build.sbt ...
2024.01.03 12:19:07 INFO  [info] set current project to livechart (in build file:/C:/Users/yashb/Documents/hello-world/livechart/)
2024.01.03 12:19:08 INFO  [success] Generated .bloop\livechart-test.json
2024.01.03 12:19:08 INFO  [success] Generated .bloop\livechart.json
2024.01.03 12:19:08 INFO  [success] Total time: 1 s, completed Jan. 3, 2024, 12:19:08 p.m.
2024.01.03 12:19:08 INFO  time: ran 'sbt bloopInstall' in 12s
2024.01.03 12:19:08 INFO  Attempting to connect to the build server...
2024.01.03 12:19:08 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.03 12:19:08 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\hello-world\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.03 12:19:08 INFO  time: Connected to build server in 0.67s
2024.01.03 12:19:08 INFO  Connected to Build server: Bloop v1.5.13
2024.01.03 12:19:11 INFO  time: indexed workspace in 2.51s
2024.01.03 12:19:11 WARN  no build target for: C:\Users\yashb\Documents\hello-world\livechart\build.sbt
2024.01.03 12:19:11 WARN  no build target for: C:\Users\yashb\Documents\hello-world\livechart\project\plugins.sbt
2024.01.03 12:19:14 INFO  Generated JavaScript file 'C:\Users\yashb\Documents\hello-world\livechart\.bloop\livechart\livechart-test.js'
2024.01.03 12:19:52 INFO  compiling livechart (1 scala source)
2024.01.03 12:19:52 WARN  Could not find semantic tokens for: file:///C:/Users/yashb/Documents/hello-world/livechart/src/main/scala/livechart/LiveChart.scala
2024.01.03 12:19:53 INFO  time: compiled livechart in 1.69s
Jan. 03, 2024 12:22:14 P.M. scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\Users\yashb\Documents\hello-world\.metals\.reports\metals-full\2024-01-03\r_compiler-error_(livechart)_12-22-14-518.md
Jan. 03, 2024 12:28:34 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 74
Jan. 03, 2024 12:28:40 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 80
2024.01.03 12:29:22 INFO  running 'C:\Program Files\Java\jdk-11\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\yashb\AppData\Local\Temp\metals17251473741995116355\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'
2024.01.03 12:29:24 INFO  [info] welcome to sbt 1.8.2 (Oracle Corporation Java 11.0.18)
2024.01.03 12:29:24 INFO  [info] loading settings for project livechart-build-build-build from metals.sbt ...
2024.01.03 12:29:25 INFO  [info] loading project definition from C:\Users\yashb\Documents\hello-world\livechart\project\project\project
2024.01.03 12:29:25 INFO  [info] loading settings for project livechart-build-build from metals.sbt ...
2024.01.03 12:29:25 INFO  [info] loading project definition from C:\Users\yashb\Documents\hello-world\livechart\project\project
2024.01.03 12:29:27 INFO  [success] Generated .bloop\livechart-build-build.json
2024.01.03 12:29:27 INFO  [success] Total time: 2 s, completed Jan. 3, 2024, 12:29:27 p.m.
2024.01.03 12:29:27 INFO  [info] loading settings for project livechart-build from metals.sbt,plugins.sbt ...
2024.01.03 12:29:27 INFO  [info] loading project definition from C:\Users\yashb\Documents\hello-world\livechart\project
2024.01.03 12:29:28 INFO  [success] Generated .bloop\livechart-build.json
2024.01.03 12:29:28 INFO  [success] Total time: 1 s, completed Jan. 3, 2024, 12:29:28 p.m.
2024.01.03 12:29:30 INFO  [info] loading settings for project livechart from build.sbt ...
2024.01.03 12:29:30 INFO  [info] set current project to livechart (in build file:/C:/Users/yashb/Documents/hello-world/livechart/)
2024.01.03 12:29:30 INFO  [success] Generated .bloop\livechart.json
2024.01.03 12:29:30 INFO  [success] Generated .bloop\livechart-test.json
2024.01.03 12:29:30 INFO  [success] Total time: 0 s, completed Jan. 3, 2024, 12:29:31 p.m.
2024.01.03 12:29:31 INFO  time: ran 'sbt bloopInstall' in 8.59s
2024.01.03 12:29:31 INFO  Disconnecting from Bloop session...
2024.01.03 12:29:31 INFO  Cancelling compilation on Bloop server
2024.01.03 12:29:33 ERROR timeout: build server 'bloop' during shutdown
2024.01.03 12:29:33 INFO  Attempting to connect to the build server...
2024.01.03 12:29:33 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.03 12:29:33 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\hello-world\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.03 12:29:33 INFO  time: Connected to build server in 39ms
2024.01.03 12:29:33 INFO  Connected to Build server: Bloop v1.5.13
2024.01.03 12:29:34 INFO  time: indexed workspace in 1.38s
2024.01.03 12:29:34 WARN  no build target for: C:\Users\yashb\Documents\hello-world\livechart\build.sbt
2024.01.03 12:29:34 WARN  no build target for: C:\Users\yashb\Documents\hello-world\livechart\project\plugins.sbt
Jan. 03, 2024 12:32:31 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 123
Exception in thread "pool-8-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.03 12:32:37 WARN  no build target for: C:\Users\yashb\Documents\hello-world\livechart\build.sbt
2024.01.03 12:32:38 INFO  compiling livechart (1 scala source)
2024.01.03 12:32:40 INFO  time: compiled livechart in 2.37s
2024.01.03 12:32:40 INFO  running 'C:\Program Files\Java\jdk-11\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\yashb\AppData\Local\Temp\metals15133540960227084633\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'
2024.01.03 12:32:42 INFO  [info] welcome to sbt 1.8.2 (Oracle Corporation Java 11.0.18)
2024.01.03 12:32:42 INFO  [info] loading settings for project livechart-build-build-build from metals.sbt ...
2024.01.03 12:32:43 INFO  [info] loading project definition from C:\Users\yashb\Documents\hello-world\livechart\project\project\project
2024.01.03 12:32:43 INFO  [info] loading settings for project livechart-build-build from metals.sbt ...
2024.01.03 12:32:43 INFO  [info] loading project definition from C:\Users\yashb\Documents\hello-world\livechart\project\project
2024.01.03 12:32:46 INFO  [success] Generated .bloop\livechart-build-build.json
2024.01.03 12:32:46 INFO  [success] Total time: 2 s, completed Jan. 3, 2024, 12:32:46 p.m.
2024.01.03 12:32:46 INFO  [info] loading settings for project livechart-build from metals.sbt,plugins.sbt ...
2024.01.03 12:32:46 INFO  [info] loading project definition from C:\Users\yashb\Documents\hello-world\livechart\project
2024.01.03 12:32:47 INFO  [success] Generated .bloop\livechart-build.json
2024.01.03 12:32:47 INFO  [success] Total time: 1 s, completed Jan. 3, 2024, 12:32:47 p.m.
2024.01.03 12:32:49 INFO  [info] loading settings for project livechart from build.sbt ...
2024.01.03 12:32:49 INFO  [info] set current project to livechart (in build file:/C:/Users/yashb/Documents/hello-world/livechart/)
2024.01.03 12:32:49 INFO  [success] Generated .bloop\livechart-test.json
2024.01.03 12:32:49 INFO  [success] Generated .bloop\livechart.json
2024.01.03 12:32:49 INFO  [success] Total time: 0 s, completed Jan. 3, 2024, 12:32:49 p.m.
2024.01.03 12:32:49 INFO  time: ran 'sbt bloopInstall' in 9.18s
2024.01.03 12:32:49 INFO  Disconnecting from Bloop session...
2024.01.03 12:32:49 INFO  Shut down connection with build server.
2024.01.03 12:32:49 INFO  Attempting to connect to the build server...
2024.01.03 12:32:49 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.03 12:32:49 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\hello-world\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.03 12:32:49 INFO  time: Connected to build server in 44ms
2024.01.03 12:32:49 INFO  Connected to Build server: Bloop v1.5.13
2024.01.03 12:32:50 INFO  time: indexed workspace in 0.95s
2024.01.03 12:32:50 WARN  no build target for: C:\Users\yashb\Documents\hello-world\livechart\project\plugins.sbt
2024.01.03 12:32:50 WARN  no build target for: C:\Users\yashb\Documents\hello-world\livechart\build.sbt
2024.01.03 12:32:51 INFO  no build target found for C:\Users\yashb\Documents\hello-world\livechart\build.sbt. Using presentation compiler with project's scala-library version: 3.2.2
2024.01.03 12:32:51 INFO  Generated JavaScript file 'C:\Users\yashb\Documents\hello-world\livechart\.bloop\livechart\livechart-test.js'
2024.01.03 12:32:51 INFO  time: code lens generation in 1.43s
Jan. 03, 2024 12:34:05 P.M. scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\Users\yashb\Documents\hello-world\.metals\.reports\metals-full\2024-01-03\r_compiler-error_(livechart)_12-34-05-176.md
2024.01.03 12:34:10 INFO  compiling livechart (1 scala source)
2024.01.03 12:34:10 INFO  time: compiled livechart in 0.63s
2024.01.03 12:37:14 INFO  Disconnecting from Bloop session...
2024.01.03 12:37:14 INFO  Cancelling compilation on Bloop server
2024.01.03 12:37:16 ERROR timeout: build server 'bloop' during shutdown
2024.01.03 12:37:16 INFO  Attempting to connect to the build server...
2024.01.03 12:37:16 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.03 12:37:19 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\hello-world\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.03 12:37:20 INFO  time: Connected to build server in 3.57s
2024.01.03 12:37:20 INFO  Connected to Build server: Bloop v1.5.13
2024.01.03 12:37:21 INFO  time: indexed workspace in 0.84s
2024.01.03 12:37:20 WARN  no build target for: C:\Users\yashb\Documents\hello-world\livechart\build.sbt
2024.01.03 12:37:23 INFO  Generated JavaScript file 'C:\Users\yashb\Documents\hello-world\livechart\.bloop\livechart\livechart-test.js'
2024.01.03 12:43:09 INFO  Shutting down server
2024.01.03 12:43:09 INFO  shutting down Metals
2024.01.03 12:43:09 INFO  Scala test classes not supported by server
2024.01.03 12:43:09 INFO  Failed to run request with params InverseSourcesResult
2024.01.03 12:43:09 INFO  Scala main classes not supported by server
2024.01.03 12:43:09 INFO  Cancelling compilation on Bloop server
2024.01.03 12:43:09 INFO  Cancelling compilation on Bloop server
2024.01.03 12:43:09 INFO  Scala test classes not supported by server
2024.01.03 12:43:09 INFO  Cancelling compilation on Bloop server
2024.01.03 12:43:09 INFO  Scala test classes not supported by server
2024.01.03 12:43:09 INFO  Cancelling compilation on Bloop server
2024.01.03 12:43:09 INFO  Bloop should support `buildTarget/jvmRunEnvironment`, but it fails.
2024.01.03 12:43:09 INFO  Scala test classes not supported by server
2024.01.03 12:43:09 INFO  Cancelling compilation on Bloop server
2024.01.03 12:43:09 INFO  Scala main classes not supported by server
2024.01.03 12:43:09 INFO  Cancelling compilation on Bloop server
2024.01.03 12:43:09 INFO  Bloop should support `buildTarget/jvmRunEnvironment`, but it fails.
Jan. 03, 2024 12:43:09 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint notify
INFO: Failed to send notification message.
org.eclipse.lsp4j.jsonrpc.JsonRpcException: java.nio.channels.AsynchronousCloseException
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:72)
	at scala.meta.internal.metals.RequestMonitorImpl$$anon$1.consume(ServerLivenessMonitor.scala:39)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.notify(RemoteEndpoint.java:126)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.sendCancelNotification(RemoteEndpoint.java:180)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint$1.cancel(RemoteEndpoint.java:150)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$register$2(BuildServerConnection.scala:425)
	at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.scala:17)
	at scala.util.Try$.apply(Try.scala:210)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$register$1(BuildServerConnection.scala:425)
	at scala.meta.internal.metals.Cancelable$$anon$1.cancel(Cancelable.scala:18)
	at scala.meta.internal.metals.Cancelable$.$anonfun$cancelAll$1(Cancelable.scala:29)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.metals.Cancelable$.cancelAll(Cancelable.scala:28)
	at scala.meta.internal.metals.MutableCancelable.cancel(MutableCancelable.scala:25)
	at scala.meta.internal.metals.BuildServerConnection.cancel(BuildServerConnection.scala:365)
	at scala.meta.internal.bsp.BspSession.$anonfun$cancel$1(BspSession.scala:34)
	at scala.meta.internal.bsp.BspSession.$anonfun$cancel$1$adapted(BspSession.scala:34)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.bsp.BspSession.cancel(BspSession.scala:34)
	at scala.meta.internal.metals.Cancelable$.$anonfun$cancelAll$1(Cancelable.scala:29)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.metals.Cancelable$.cancelAll(Cancelable.scala:28)
	at scala.meta.internal.metals.MutableCancelable.cancel(MutableCancelable.scala:25)
	at scala.meta.internal.metals.MetalsLspService.cancel(MetalsLspService.scala:160)
	at scala.meta.internal.metals.MetalsLspService.onShutdown(MetalsLspService.scala:933)
	at scala.meta.internal.metals.WorkspaceLspService.$anonfun$shutdown$2(WorkspaceLspService.scala:1198)
	at scala.meta.internal.metals.WorkspaceLspService.$anonfun$shutdown$2$adapted(WorkspaceLspService.scala:1198)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.metals.WorkspaceLspService.shutdown(WorkspaceLspService.scala:1198)
	at scala.meta.metals.MetalsLanguageServer.shutdown(MetalsLanguageServer.scala:260)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.nio.channels.AsynchronousCloseException
	at java.base/java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:202)
	at java.base/sun.nio.ch.SocketChannelImpl.endWrite(SocketChannelImpl.java:447)
	at java.base/sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:469)
	at java.base/sun.nio.ch.SinkChannelImpl.write(SinkChannelImpl.java:114)
	at java.base/java.nio.channels.Channels.writeFullyImpl(Channels.java:74)
	at java.base/java.nio.channels.Channels.writeFully(Channels.java:94)
	at java.base/java.nio.channels.Channels$1.write(Channels.java:172)
	at java.base/java.io.OutputStream.write(OutputStream.java:122)
	at java.base/java.nio.channels.Channels$1.write(Channels.java:152)
	at scala.meta.internal.metals.ClosableOutputStream.write(ClosableOutputStream.scala:26)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:137)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:108)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:67)
	... 45 more

2024.01.03 12:43:09 INFO  Scala test classes not supported by server
2024.01.03 12:43:09 INFO  Cancelling compilation on Bloop server
2024.01.03 12:43:09 INFO  Exiting server
2024.01.03 12:52:54 INFO  Started: Metals version 1.2.0 in folders 'C:\Users\yashb\Documents\hello-world' for client Visual Studio Code 1.85.1.
2024.01.03 12:52:55 INFO  Attempting to connect to the build server...
2024.01.03 12:52:55 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.03 12:52:58 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\hello-world\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.03 12:52:59 INFO  no build target found for C:\Users\yashb\Documents\hello-world\webview-ui\src\main\scala\livechart\LiveChart.scala. Using presentation compiler with project's scala-library version: 3.3.1
2024.01.03 12:52:59 INFO  time: Connected to build server in 4.3s
2024.01.03 12:52:59 INFO  Connected to Build server: Bloop v1.5.13
2024.01.03 12:52:59 INFO  time: Imported build in 0.12s
2024.01.03 12:53:01 INFO  time: indexed workspace in 1.64s
2024.01.03 12:53:01 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.03 12:53:05 INFO  Generated JavaScript file 'C:\Users\yashb\Documents\hello-world\livechart\.bloop\livechart\livechart-test.js'
2024.01.03 12:53:18 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.03 12:55:34 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.03 12:55:36 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.03 12:57:44 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.03 12:57:49 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.03 12:57:57 WARN  Using indexes to guess the definition of dom
2024.01.03 12:58:39 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\hello-world\webview-ui\src\main\scala\livechart\LiveChart.scala
scala.meta.tokenizers.TokenizeException: <input>:15: error: unclosed string literal
        ick me!",
               ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getStringLit(LegacyScanner.scala:553)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchDoubleQuote$1(LegacyScanner.scala:372)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:376)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.03 12:58:46 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.03 12:59:31 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.03 12:59:34 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\build.sbt
2024.01.03 13:00:20 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\build.sbt
2024.01.03 13:00:21 INFO  running 'C:\Program Files\Java\jdk-11\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\yashb\AppData\Local\Temp\metals14929412099014532452\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'
2024.01.03 13:00:22 INFO  [info] welcome to sbt 1.8.2 (Oracle Corporation Java 11.0.18)
2024.01.03 13:00:22 INFO  [info] loading settings for project webview-ui-build-build-build from metals.sbt ...
2024.01.03 13:00:23 INFO  [info] loading project definition from C:\Users\yashb\Documents\hello-world\webview-ui\project\project\project
2024.01.03 13:00:23 INFO  [info] loading settings for project webview-ui-build-build from metals.sbt ...
2024.01.03 13:00:23 INFO  [info] loading project definition from C:\Users\yashb\Documents\hello-world\webview-ui\project\project
2024.01.03 13:00:26 INFO  [success] Generated .bloop\webview-ui-build-build.json
2024.01.03 13:00:26 INFO  [success] Total time: 2 s, completed Jan. 3, 2024, 1:00:27 p.m.
2024.01.03 13:00:26 INFO  [info] loading settings for project webview-ui-build from metals.sbt,plugins.sbt ...
2024.01.03 13:00:26 INFO  [info] loading project definition from C:\Users\yashb\Documents\hello-world\webview-ui\project
2024.01.03 13:00:28 INFO  [success] Generated .bloop\webview-ui-build.json
2024.01.03 13:00:28 INFO  [success] Total time: 1 s, completed Jan. 3, 2024, 1:00:28 p.m.
2024.01.03 13:00:30 INFO  [info] loading settings for project livechart from build.sbt ...
2024.01.03 13:00:30 INFO  [info] set current project to livechart (in build file:/C:/Users/yashb/Documents/hello-world/webview-ui/)
2024.01.03 13:00:30 INFO  [success] Generated .bloop\livechart-test.json
2024.01.03 13:00:30 INFO  [success] Generated .bloop\livechart.json
2024.01.03 13:00:30 INFO  [success] Total time: 1 s, completed Jan. 3, 2024, 1:00:31 p.m.
2024.01.03 13:00:31 INFO  time: ran 'sbt bloopInstall' in 9.65s
2024.01.03 13:00:31 INFO  Disconnecting from Bloop session...
2024.01.03 13:00:31 INFO  Shut down connection with build server.
2024.01.03 13:00:31 INFO  Attempting to connect to the build server...
2024.01.03 13:00:31 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.03 13:00:31 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\hello-world\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.03 13:00:31 INFO  time: Connected to build server in 50ms
2024.01.03 13:00:31 INFO  Connected to Build server: Bloop v1.5.13
2024.01.03 13:00:32 INFO  time: indexed workspace in 1.23s
2024.01.03 13:00:32 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\build.sbt
2024.01.03 13:00:32 INFO  compiling livechart (1 scala source)
2024.01.03 13:00:33 INFO  Generated JavaScript file 'C:\Users\yashb\Documents\hello-world\webview-ui\.bloop\livechart\livechart-test.js'
exception caught when loading class Deprecated: java.lang.AssertionError: assertion failed: asTerm called on not-a-Term val <none>
2024.01.03 13:00:36 INFO  time: compiled livechart in 3.74s
exception caught when loading class Deprecated: java.lang.AssertionError: assertion failed: asTerm called on not-a-Term val <none>
2024.01.03 13:01:34 WARN  Using indexes to guess the definition of dom
Jan. 03, 2024 1:01:34 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 416
Jan. 03, 2024 1:03:16 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 487
2024.01.03 13:03:48 INFO  running 'C:\Program Files\Java\jdk-11\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\yashb\AppData\Local\Temp\metals712196420231793759\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'
2024.01.03 13:03:49 INFO  [info] welcome to sbt 1.8.2 (Oracle Corporation Java 11.0.18)
2024.01.03 13:03:49 INFO  [info] loading settings for project webview-ui-build-build-build from metals.sbt ...
2024.01.03 13:03:50 INFO  [info] loading project definition from C:\Users\yashb\Documents\hello-world\webview-ui\project\project\project
2024.01.03 13:03:50 INFO  Cancelling compilation on Bloop server
2024.01.03 13:03:50 INFO  [info] loading settings for project webview-ui-build-build from metals.sbt ...
2024.01.03 13:03:51 INFO  Disconnecting from Bloop session...
2024.01.03 13:03:50 INFO  [info] loading project definition from C:\Users\yashb\Documents\hello-world\webview-ui\project\project
2024.01.03 13:03:52 INFO  [success] Generated .bloop\webview-ui-build-build.json
2024.01.03 13:03:52 INFO  [success] Total time: 2 s, completed Jan. 3, 2024, 1:03:52 p.m.
2024.01.03 13:03:52 INFO  [info] loading settings for project webview-ui-build from metals.sbt,plugins.sbt ...
2024.01.03 13:03:53 ERROR timeout: build server 'bloop' during shutdown
2024.01.03 13:03:53 INFO  Attempting to connect to the build server...
2024.01.03 13:03:53 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.03 13:03:52 INFO  [info] loading project definition from C:\Users\yashb\Documents\hello-world\webview-ui\project
2024.01.03 13:03:54 INFO  [success] Generated .bloop\webview-ui-build.json
2024.01.03 13:03:54 INFO  [success] Total time: 1 s, completed Jan. 3, 2024, 1:03:54 p.m.
2024.01.03 13:03:54 INFO  [info] loading settings for project livechart from build.sbt ...
2024.01.03 13:03:54 INFO  [info] set current project to livechart (in build file:/C:/Users/yashb/Documents/hello-world/webview-ui/)
2024.01.03 13:03:54 INFO  [success] Generated .bloop\livechart.json
2024.01.03 13:03:54 INFO  [success] Generated .bloop\livechart-test.json
2024.01.03 13:03:54 INFO  [success] Total time: 0 s, completed Jan. 3, 2024, 1:03:54 p.m.
2024.01.03 13:03:55 INFO  time: ran 'sbt bloopInstall' in 6.87s
2024.01.03 13:03:55 INFO  Attempting to connect to the build server...
2024.01.03 13:03:55 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.03 13:03:55 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\hello-world\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.03 13:03:55 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\hello-world\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.03 13:03:56 INFO  time: Connected to build server in 3.26s
2024.01.03 13:03:56 INFO  time: Connected to build server in 1.31s
2024.01.03 13:03:56 INFO  Connected to Build server: Bloop v1.5.13
2024.01.03 13:03:56 INFO  Connected to Build server: Bloop v1.5.13
2024.01.03 13:03:56 INFO  time: Imported build in 0.39s
2024.01.03 13:03:56 INFO  time: indexed workspace in 0.76s
2024.01.03 13:03:57 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\build.sbt
2024.01.03 13:03:58 INFO  time: indexed workspace in 1.52s
exception caught when loading class Deprecated: java.lang.AssertionError: assertion failed: asTerm called on not-a-Term val <none>
2024.01.03 13:03:59 INFO  Generated JavaScript file 'C:\Users\yashb\Documents\hello-world\webview-ui\.bloop\livechart\livechart-test.js'
2024.01.03 13:04:42 WARN  Using indexes to guess the definition of document
2024.01.03 13:04:42 WARN  Using indexes to guess the definition of document
2024.01.03 13:04:43 WARN  Using indexes to guess the definition of document
2024.01.03 13:05:25 INFO  Disconnecting from Bloop session...
2024.01.03 13:05:25 INFO  Cancelling compilation on Bloop server
2024.01.03 13:05:25 INFO  Cancelling compilation on Bloop server
2024.01.03 13:05:27 ERROR timeout: build server 'bloop' during shutdown
2024.01.03 13:05:27 INFO  Attempting to connect to the build server...
2024.01.03 13:05:27 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.03 13:05:29 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\hello-world\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.03 13:05:29 INFO  Deleted directories inside .bloop
2024.01.03 13:05:29 INFO  Attempting to connect to the build server...
2024.01.03 13:05:29 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.03 13:05:31 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\hello-world\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.03 13:05:31 INFO  time: Connected to build server in 2.43s
2024.01.03 13:05:31 INFO  Connected to Build server: Bloop v1.5.13
exception caught when loading class Deprecated: java.lang.AssertionError: assertion failed: asTerm called on not-a-Term val <none>
2024.01.03 13:05:33 INFO  time: indexed workspace in 0.84s
2024.01.03 13:05:33 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\build.sbt
2024.01.03 13:05:33 INFO  compiling livechart (1 scala source)
2024.01.03 13:05:36 INFO  Generated JavaScript file 'C:\Users\yashb\Documents\hello-world\webview-ui\.bloop\livechart\livechart-test.js'
2024.01.03 13:05:37 INFO  time: compiled livechart in 4.33s
exception caught when loading class Deprecated: java.lang.AssertionError: assertion failed: asTerm called on not-a-Term val <none>
2024.01.03 13:05:49 ERROR Timeout waiting for 'build/initialize' response
2024.01.03 13:05:49 WARN  Retrying connection to the build server Bloop
2024.01.03 13:05:49 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.03 13:05:49 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\hello-world\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.03 13:05:49 INFO  time: Connected to build server in 21s
2024.01.03 13:05:49 INFO  Connected to Build server: Bloop v1.5.13
exception caught when loading class Deprecated: java.lang.AssertionError: assertion failed: asTerm called on not-a-Term val <none>
2024.01.03 13:05:50 INFO  time: indexed workspace in 0.91s
2024.01.03 13:05:50 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\build.sbt
2024.01.03 13:05:50 INFO  compiling livechart (1 scala source)
2024.01.03 13:05:51 INFO  time: compiled livechart in 1.18s
exception caught when loading class Deprecated: java.lang.AssertionError: assertion failed: asTerm called on not-a-Term val <none>
2024.01.03 13:05:56 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.03 13:05:56 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\hello-world\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.03 13:05:56 INFO  Connected to Build server: Bloop v1.5.13
exception caught when loading class Deprecated: java.lang.AssertionError: assertion failed: asTerm called on not-a-Term val <none>
2024.01.03 13:05:56 INFO  time: indexed workspace in 0.91s
2024.01.03 13:05:57 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\build.sbt
2024.01.03 13:05:57 INFO  compiling livechart (1 scala source)
2024.01.03 13:05:58 INFO  time: compiled livechart in 1.05s
exception caught when loading class Deprecated: java.lang.AssertionError: assertion failed: asTerm called on not-a-Term val <none>
2024.01.03 13:06:47 INFO  compiling livechart (1 scala source)
2024.01.03 13:06:47 INFO  time: compiled livechart in 0.18s
exception caught when loading class Deprecated: java.lang.AssertionError: assertion failed: asTerm called on not-a-Term val <none>
2024.01.03 13:07:09 INFO  compiling livechart (1 scala source)
2024.01.03 13:07:09 INFO  time: compiled livechart in 0.16s
exception caught when loading class Deprecated: java.lang.AssertionError: assertion failed: asTerm called on not-a-Term val <none>
2024.01.03 13:07:15 INFO  compiling livechart (1 scala source)
2024.01.03 13:07:15 INFO  time: compiled livechart in 0.73s
exception caught when loading class Deprecated: java.lang.AssertionError: assertion failed: asTerm called on not-a-Term val <none>
2024.01.03 13:09:33 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\project\Dependencies.scala
2024.01.03 13:09:34 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\project\Dependencies.scala
2024.01.03 13:09:35 INFO  running 'C:\Program Files\Java\jdk-11\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\yashb\AppData\Local\Temp\metals7810210825426474898\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'
2024.01.03 13:09:36 INFO  [info] welcome to sbt 1.8.2 (Oracle Corporation Java 11.0.18)
2024.01.03 13:09:36 INFO  [info] loading settings for project webview-ui-build-build-build from metals.sbt ...
2024.01.03 13:09:38 INFO  [info] loading project definition from C:\Users\yashb\Documents\hello-world\webview-ui\project\project\project
2024.01.03 13:09:38 INFO  [info] loading settings for project webview-ui-build-build from metals.sbt ...
2024.01.03 13:09:38 INFO  [info] loading project definition from C:\Users\yashb\Documents\hello-world\webview-ui\project\project
2024.01.03 13:09:40 INFO  [success] Generated .bloop\webview-ui-build-build.json
2024.01.03 13:09:40 INFO  [success] Total time: 2 s, completed Jan. 3, 2024, 1:09:40 p.m.
2024.01.03 13:09:40 INFO  [info] loading settings for project webview-ui-build from metals.sbt,plugins.sbt ...
2024.01.03 13:09:40 INFO  [info] loading project definition from C:\Users\yashb\Documents\hello-world\webview-ui\project
2024.01.03 13:09:41 INFO  [success] Generated .bloop\webview-ui-build.json
2024.01.03 13:09:41 INFO  [info] compiling 1 Scala source to C:\Users\yashb\Documents\hello-world\webview-ui\project\target\scala-2.12\sbt-1.0\classes ...
2024.01.03 13:09:43 INFO  [error] C:\Users\yashb\Documents\hello-world\webview-ui\project\Dependencies.scala:12:42: not found: value DependencyVersions
2024.01.03 13:09:43 INFO  [error]       "org.scalactic" %%% "scalactic"  % DependencyVersions.scalatest,
2024.01.03 13:09:43 INFO  [error]                                          ^
2024.01.03 13:09:43 INFO  [error] C:\Users\yashb\Documents\hello-world\webview-ui\project\Dependencies.scala:13:41: not found: value DependencyVersions
2024.01.03 13:09:43 INFO  [error]       "org.scalatest" %%% "scalatest" % DependencyVersions.scalatest % "test"
2024.01.03 13:09:43 INFO  [error]                                         ^
2024.01.03 13:09:43 INFO  [error] C:\Users\yashb\Documents\hello-world\webview-ui\project\Dependencies.scala:20:35: not found: value DependencyVersions
2024.01.03 13:09:43 INFO  [error]       "com.raquo" %%% "laminar" % DependencyVersions.laminar
2024.01.03 13:09:43 INFO  [error]                                   ^
2024.01.03 13:09:43 INFO  [error] C:\Users\yashb\Documents\hello-world\webview-ui\project\Dependencies.scala:26:37: not found: value DependencyVersions
2024.01.03 13:09:43 INFO  [error]       "com.lihaoyi" %%% "upickle" % DependencyVersions.`upickle`
2024.01.03 13:09:43 INFO  [error]                                     ^
2024.01.03 13:09:43 INFO  [error] four errors found
2024.01.03 13:09:43 INFO  [success] Total time: 3 s, completed Jan. 3, 2024, 1:09:44 p.m.
2024.01.03 13:09:43 INFO  [info] compiling 1 Scala source to C:\Users\yashb\Documents\hello-world\webview-ui\project\target\scala-2.12\sbt-1.0\classes ...
2024.01.03 13:09:43 INFO  [error] C:\Users\yashb\Documents\hello-world\webview-ui\project\Dependencies.scala:12:42: not found: value DependencyVersions
2024.01.03 13:09:43 INFO  [error]       "org.scalactic" %%% "scalactic"  % DependencyVersions.scalatest,
2024.01.03 13:09:43 INFO  [error]                                          ^
2024.01.03 13:09:43 INFO  [error] C:\Users\yashb\Documents\hello-world\webview-ui\project\Dependencies.scala:13:41: not found: value DependencyVersions
2024.01.03 13:09:43 INFO  [error]       "org.scalatest" %%% "scalatest" % DependencyVersions.scalatest % "test"
2024.01.03 13:09:43 INFO  [error]                                         ^
2024.01.03 13:09:43 INFO  [error] C:\Users\yashb\Documents\hello-world\webview-ui\project\Dependencies.scala:20:35: not found: value DependencyVersions
2024.01.03 13:09:43 INFO  [error]       "com.raquo" %%% "laminar" % DependencyVersions.laminar
2024.01.03 13:09:43 INFO  [error]                                   ^
2024.01.03 13:09:43 INFO  [error] C:\Users\yashb\Documents\hello-world\webview-ui\project\Dependencies.scala:26:37: not found: value DependencyVersions
2024.01.03 13:09:43 INFO  [error]       "com.lihaoyi" %%% "upickle" % DependencyVersions.`upickle`
2024.01.03 13:09:43 INFO  [error]                                     ^
2024.01.03 13:09:43 INFO  [error] four errors found
2024.01.03 13:09:43 INFO  [error] (Compile / compileIncremental) Compilation failed
2024.01.03 13:09:43 INFO  [warn] Project loading failed: (r)etry, (q)uit, (l)ast, or (i)gnore? (default: r)
2024.01.03 13:09:44 INFO  time: ran 'sbt bloopInstall' in 9.04s
2024.01.03 13:09:44 ERROR sbt command failed: C:\Program Files\Java\jdk-11\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\yashb\AppData\Local\Temp\metals7810210825426474898\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall
2024.01.03 13:09:44 INFO  Disconnecting from Bloop session...
2024.01.03 13:09:44 INFO  Shut down connection with build server.
2024.01.03 13:09:44 INFO  Attempting to connect to the build server...
2024.01.03 13:09:44 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.03 13:09:44 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\hello-world\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.03 13:09:44 INFO  time: Connected to build server in 44ms
2024.01.03 13:09:44 INFO  Connected to Build server: Bloop v1.5.13
exception caught when loading class Deprecated: java.lang.AssertionError: assertion failed: asTerm called on not-a-Term val <none>
2024.01.03 13:09:45 INFO  time: indexed workspace in 0.85s
2024.01.03 13:09:45 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\project\Dependencies.scala
2024.01.03 13:09:45 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\build.sbt
2024.01.03 13:09:45 INFO  compiling livechart (1 scala source)
2024.01.03 13:09:45 INFO  Generated JavaScript file 'C:\Users\yashb\Documents\hello-world\webview-ui\.bloop\livechart\livechart-test.js'
2024.01.03 13:09:47 INFO  time: compiled livechart in 1.51s
Jan. 03, 2024 1:09:47 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 973
exception caught when loading class Deprecated: java.lang.AssertionError: assertion failed: asTerm called on not-a-Term val <none>
2024.01.03 13:10:11 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\project\DependencyVersions.scala
2024.01.03 13:10:11 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\project\DependencyVersions.scala
2024.01.03 13:10:14 INFO  running 'C:\Program Files\Java\jdk-11\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\yashb\AppData\Local\Temp\metals16684237901471400824\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'
2024.01.03 13:10:15 INFO  [info] welcome to sbt 1.8.2 (Oracle Corporation Java 11.0.18)
2024.01.03 13:10:15 INFO  [info] loading settings for project webview-ui-build-build-build from metals.sbt ...
2024.01.03 13:10:16 INFO  [info] loading project definition from C:\Users\yashb\Documents\hello-world\webview-ui\project\project\project
2024.01.03 13:10:16 INFO  [info] loading settings for project webview-ui-build-build from metals.sbt ...
2024.01.03 13:10:16 INFO  [info] loading project definition from C:\Users\yashb\Documents\hello-world\webview-ui\project\project
2024.01.03 13:10:19 INFO  [success] Generated .bloop\webview-ui-build-build.json
2024.01.03 13:10:19 INFO  [success] Total time: 2 s, completed Jan. 3, 2024, 1:10:19 p.m.
2024.01.03 13:10:19 INFO  [info] loading settings for project webview-ui-build from metals.sbt,plugins.sbt ...
2024.01.03 13:10:19 INFO  [info] loading project definition from C:\Users\yashb\Documents\hello-world\webview-ui\project
2024.01.03 13:10:20 WARN  Using indexes to guess the definition of DependencyVersions
2024.01.03 13:10:20 WARN  Using indexes to guess the definition of DependencyVersions
2024.01.03 13:10:20 INFO  [success] Generated .bloop\webview-ui-build.json
2024.01.03 13:10:20 INFO  [info] compiling 2 Scala sources to C:\Users\yashb\Documents\hello-world\webview-ui\project\target\scala-2.12\sbt-1.0\classes ...
2024.01.03 13:10:23 INFO  [info] done compiling
2024.01.03 13:10:23 INFO  [success] Total time: 4 s, completed Jan. 3, 2024, 1:10:23 p.m.
2024.01.03 13:10:25 INFO  [info] loading settings for project livechart from build.sbt ...
2024.01.03 13:10:25 INFO  [info] set current project to livechart (in build file:/C:/Users/yashb/Documents/hello-world/webview-ui/)
2024.01.03 13:10:25 INFO  [success] Generated .bloop\livechart.json
2024.01.03 13:10:25 INFO  [success] Generated .bloop\livechart-test.json
2024.01.03 13:10:25 INFO  [success] Total time: 0 s, completed Jan. 3, 2024, 1:10:25 p.m.
2024.01.03 13:10:26 INFO  time: ran 'sbt bloopInstall' in 11s
2024.01.03 13:10:26 INFO  Disconnecting from Bloop session...
2024.01.03 13:10:26 INFO  Cancelling compilation on Bloop server
2024.01.03 13:10:28 ERROR timeout: build server 'bloop' during shutdown
2024.01.03 13:10:28 INFO  Attempting to connect to the build server...
2024.01.03 13:10:28 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.03 13:10:28 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\hello-world\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.03 13:10:28 INFO  time: Connected to build server in 37ms
2024.01.03 13:10:28 INFO  Connected to Build server: Bloop v1.5.13
exception caught when loading class Deprecated: java.lang.AssertionError: assertion failed: asTerm called on not-a-Term val <none>
2024.01.03 13:10:29 INFO  time: indexed workspace in 0.94s
2024.01.03 13:10:29 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\build.sbt
2024.01.03 13:10:29 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\project\Dependencies.scala
2024.01.03 13:10:29 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\project\DependencyVersions.scala
2024.01.03 13:10:29 INFO  compiling livechart (1 scala source)
2024.01.03 13:10:30 INFO  time: compiled livechart in 1.12s
2024.01.03 13:10:30 INFO  skipping build import with status 'Installed'
exception caught when loading class Deprecated: java.lang.AssertionError: assertion failed: asTerm called on not-a-Term val <none>
2024.01.03 13:10:40 INFO  compiling livechart (1 scala source)
2024.01.03 13:10:40 INFO  time: compiled livechart in 0.11s
exception caught when loading class Deprecated: java.lang.AssertionError: assertion failed: asTerm called on not-a-Term val <none>
Jan. 03, 2024 1:11:01 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1189
Jan. 03, 2024 1:11:41 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1219
Jan. 03, 2024 1:11:41 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1220
Jan. 03, 2024 1:11:41 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1221
Jan. 03, 2024 1:11:41 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1223
2024.01.03 13:11:48 INFO  Disconnecting from Bloop session...
2024.01.03 13:11:48 INFO  Shut down connection with build server.
2024.01.03 13:11:48 INFO  Attempting to connect to the build server...
2024.01.03 13:11:48 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.03 13:11:49 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.03 13:11:49 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\hello-world\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.03 13:11:49 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\hello-world\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.03 13:11:50 INFO  Connected to Build server: Bloop v1.5.13
2024.01.03 13:11:50 INFO  time: Connected to build server in 2.47s
2024.01.03 13:11:50 INFO  Connected to Build server: Bloop v1.5.13
2024.01.03 13:11:50 INFO  time: Imported build in 0.1s
exception caught when loading class Deprecated: java.lang.AssertionError: assertion failed: asTerm called on not-a-Term val <none>
2024.01.03 13:11:51 INFO  time: indexed workspace in 0.96s
2024.01.03 13:11:51 INFO  time: indexed workspace in 0.96s
2024.01.03 13:11:51 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\project\Dependencies.scala
2024.01.03 13:11:51 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\project\Dependencies.scala
2024.01.03 13:11:51 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\build.sbt
2024.01.03 13:11:54 INFO  Generated JavaScript file 'C:\Users\yashb\Documents\hello-world\webview-ui\.bloop\livechart\livechart-test.js'
2024.01.03 13:12:32 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.03 13:12:32 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\hello-world\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.03 13:12:32 INFO  Connected to Build server: Bloop v1.5.13
2024.01.03 13:12:33 INFO  time: indexed workspace in 1.06s
2024.01.03 13:12:33 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\build.sbt
2024.01.03 13:12:33 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\project\DependencyVersions.scala
2024.01.03 13:12:33 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\project\Dependencies.scala
exception caught when loading class Deprecated: java.lang.AssertionError: assertion failed: asTerm called on not-a-Term val <none>
2024.01.03 13:12:46 INFO  compiling livechart (1 scala source)
2024.01.03 13:12:47 INFO  time: compiled livechart in 1.75s
exception caught when loading class Deprecated: java.lang.AssertionError: assertion failed: asTerm called on not-a-Term val <none>
2024.01.03 13:12:56 WARN  Using indexes to guess the definition of laminar
2024.01.03 13:12:56 WARN  Using indexes to guess the definition of laminar
2024.01.03 13:13:12 WARN  Using indexes to guess the definition of DependencyVersions
2024.01.03 13:13:12 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\build.sbt
2024.01.03 13:13:17 INFO  running 'C:\Program Files\Java\jdk-11\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\yashb\AppData\Local\Temp\metals6992169441277392314\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'
2024.01.03 13:13:19 INFO  [info] welcome to sbt 1.8.2 (Oracle Corporation Java 11.0.18)
2024.01.03 13:13:19 INFO  [info] loading settings for project webview-ui-build-build-build from metals.sbt ...
2024.01.03 13:13:20 INFO  [info] loading project definition from C:\Users\yashb\Documents\hello-world\webview-ui\project\project\project
2024.01.03 13:13:20 INFO  [info] loading settings for project webview-ui-build-build from metals.sbt ...
2024.01.03 13:13:20 INFO  [info] loading project definition from C:\Users\yashb\Documents\hello-world\webview-ui\project\project
2024.01.03 13:13:22 INFO  [success] Generated .bloop\webview-ui-build-build.json
2024.01.03 13:13:22 INFO  [success] Total time: 2 s, completed Jan. 3, 2024, 1:13:23 p.m.
2024.01.03 13:13:22 INFO  [info] loading settings for project webview-ui-build from metals.sbt,plugins.sbt ...
2024.01.03 13:13:22 INFO  [info] loading project definition from C:\Users\yashb\Documents\hello-world\webview-ui\project
2024.01.03 13:13:23 INFO  [success] Generated .bloop\webview-ui-build.json
2024.01.03 13:13:23 INFO  [success] Total time: 1 s, completed Jan. 3, 2024, 1:13:24 p.m.
2024.01.03 13:13:26 INFO  [info] loading settings for project livechart from build.sbt ...
2024.01.03 13:13:26 INFO  [info] set current project to livechart (in build file:/C:/Users/yashb/Documents/hello-world/webview-ui/)
2024.01.03 13:13:26 INFO  [success] Generated .bloop\livechart-test.json
2024.01.03 13:13:26 INFO  [success] Generated .bloop\livechart.json
2024.01.03 13:13:26 INFO  [success] Total time: 0 s, completed Jan. 3, 2024, 1:13:26 p.m.
2024.01.03 13:13:26 INFO  time: ran 'sbt bloopInstall' in 8.66s
2024.01.03 13:13:26 INFO  Disconnecting from Bloop session...
2024.01.03 13:13:26 INFO  Shut down connection with build server.
2024.01.03 13:13:26 INFO  Scala test classes not supported by server
2024.01.03 13:13:26 INFO  Attempting to connect to the build server...
2024.01.03 13:13:26 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.03 13:13:26 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\hello-world\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.03 13:13:26 INFO  time: Connected to build server in 47ms
2024.01.03 13:13:26 INFO  Connected to Build server: Bloop v1.5.13
exception caught when loading class Deprecated: java.lang.AssertionError: assertion failed: asTerm called on not-a-Term val <none>
2024.01.03 13:13:26 INFO  time: indexed workspace in 0.78s
2024.01.03 13:13:26 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\project\Dependencies.scala
2024.01.03 13:13:26 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\build.sbt
2024.01.03 13:13:27 INFO  Generated JavaScript file 'C:\Users\yashb\Documents\hello-world\webview-ui\.bloop\livechart\livechart-test.js'
Jan. 03, 2024 1:13:32 P.M. scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\Users\yashb\Documents\hello-world\.metals\.reports\metals-full\2024-01-03\r_compiler-error_(livechart)_13-13-32-463.md
2024.01.03 13:13:32 WARN  Using indexes to guess the definition of Unit
exception caught when loading class Deprecated: java.lang.AssertionError: assertion failed: asTerm called on not-a-Term val <none>
2024.01.03 13:14:17 WARN  Using indexes to guess the definition of document
2024.01.03 13:14:17 WARN  Using indexes to guess the definition of document
2024.01.03 13:14:22 INFO  running 'C:\Program Files\Java\jdk-11\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\yashb\AppData\Local\Temp\metals15469776216209069922\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'
2024.01.03 13:14:24 INFO  [info] welcome to sbt 1.8.2 (Oracle Corporation Java 11.0.18)
2024.01.03 13:14:24 INFO  [info] loading settings for project webview-ui-build-build-build from metals.sbt ...
2024.01.03 13:14:25 INFO  [info] loading project definition from C:\Users\yashb\Documents\hello-world\webview-ui\project\project\project
2024.01.03 13:14:25 INFO  [info] loading settings for project webview-ui-build-build from metals.sbt ...
2024.01.03 13:14:25 INFO  [info] loading project definition from C:\Users\yashb\Documents\hello-world\webview-ui\project\project
2024.01.03 13:14:27 INFO  [success] Generated .bloop\webview-ui-build-build.json
2024.01.03 13:14:27 INFO  [success] Total time: 2 s, completed Jan. 3, 2024, 1:14:27 p.m.
2024.01.03 13:14:27 INFO  [info] loading settings for project webview-ui-build from metals.sbt,plugins.sbt ...
2024.01.03 13:14:27 INFO  [info] loading project definition from C:\Users\yashb\Documents\hello-world\webview-ui\project
2024.01.03 13:14:29 INFO  [success] Generated .bloop\webview-ui-build.json
2024.01.03 13:14:29 INFO  [success] Total time: 1 s, completed Jan. 3, 2024, 1:14:29 p.m.
2024.01.03 13:14:29 INFO  [info] loading settings for project livechart from build.sbt ...
2024.01.03 13:14:29 INFO  [info] set current project to livechart (in build file:/C:/Users/yashb/Documents/hello-world/webview-ui/)
2024.01.03 13:14:29 INFO  [success] Generated .bloop\livechart.json
2024.01.03 13:14:29 INFO  [success] Generated .bloop\livechart-test.json
2024.01.03 13:14:29 INFO  [success] Total time: 0 s, completed Jan. 3, 2024, 1:14:30 p.m.
2024.01.03 13:14:30 INFO  time: ran 'sbt bloopInstall' in 7.5s
2024.01.03 13:14:30 INFO  Disconnecting from Bloop session...
2024.01.03 13:14:30 INFO  Cancelling compilation on Bloop server
2024.01.03 13:14:32 ERROR timeout: build server 'bloop' during shutdown
2024.01.03 13:14:32 INFO  Attempting to connect to the build server...
2024.01.03 13:14:32 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.03 13:14:32 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\hello-world\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.03 13:14:32 INFO  time: Connected to build server in 37ms
2024.01.03 13:14:32 INFO  Connected to Build server: Bloop v1.5.13
2024.01.03 13:14:33 INFO  time: indexed workspace in 0.79s
2024.01.03 13:14:33 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\build.sbt
2024.01.03 13:14:33 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\project\DependencyVersions.scala
2024.01.03 13:14:33 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\project\Dependencies.scala
2024.01.03 13:14:33 INFO  compiling livechart (1 scala source)
2024.01.03 13:14:34 INFO  time: compiled livechart in 1.07s
exception caught when loading class Deprecated: java.lang.AssertionError: assertion failed: asTerm called on not-a-Term val <none>
exception caught when loading class Deprecated: java.lang.AssertionError: assertion failed: asTerm called on not-a-Term val <none>
2024.01.03 13:15:27 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\build.sbt
2024.01.03 13:15:28 INFO  running 'C:\Program Files\Java\jdk-11\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\yashb\AppData\Local\Temp\metals655276638678758146\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'
2024.01.03 13:15:29 INFO  [info] welcome to sbt 1.8.2 (Oracle Corporation Java 11.0.18)
2024.01.03 13:15:29 INFO  [info] loading settings for project webview-ui-build-build-build from metals.sbt ...
2024.01.03 13:15:30 INFO  [info] loading project definition from C:\Users\yashb\Documents\hello-world\webview-ui\project\project\project
2024.01.03 13:15:30 INFO  [info] loading settings for project webview-ui-build-build from metals.sbt ...
2024.01.03 13:15:30 INFO  [info] loading project definition from C:\Users\yashb\Documents\hello-world\webview-ui\project\project
2024.01.03 13:15:33 INFO  [success] Generated .bloop\webview-ui-build-build.json
2024.01.03 13:15:33 INFO  [success] Total time: 2 s, completed Jan. 3, 2024, 1:15:33 p.m.
2024.01.03 13:15:33 INFO  [info] loading settings for project webview-ui-build from metals.sbt,plugins.sbt ...
2024.01.03 13:15:33 INFO  [info] loading project definition from C:\Users\yashb\Documents\hello-world\webview-ui\project
2024.01.03 13:15:35 INFO  [success] Generated .bloop\webview-ui-build.json
2024.01.03 13:15:35 INFO  [success] Total time: 1 s, completed Jan. 3, 2024, 1:15:35 p.m.
2024.01.03 13:15:37 INFO  [info] loading settings for project livechart from build.sbt ...
2024.01.03 13:15:37 INFO  [info] set current project to livechart (in build file:/C:/Users/yashb/Documents/hello-world/webview-ui/)
2024.01.03 13:15:37 INFO  [success] Generated .bloop\livechart-test.json
2024.01.03 13:15:37 INFO  [success] Generated .bloop\livechart.json
2024.01.03 13:15:37 INFO  [success] Total time: 1 s, completed Jan. 3, 2024, 1:15:38 p.m.
2024.01.03 13:15:38 INFO  time: ran 'sbt bloopInstall' in 9.41s
2024.01.03 13:15:38 INFO  Disconnecting from Bloop session...
2024.01.03 13:15:38 INFO  Shut down connection with build server.
2024.01.03 13:15:38 INFO  Attempting to connect to the build server...
2024.01.03 13:15:38 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.03 13:15:38 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\hello-world\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.03 13:15:38 INFO  time: Connected to build server in 35ms
2024.01.03 13:15:38 INFO  Connected to Build server: Bloop v1.5.13
2024.01.03 13:15:39 INFO  time: indexed workspace in 0.93s
2024.01.03 13:15:39 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\project\DependencyVersions.scala
2024.01.03 13:15:39 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\project\Dependencies.scala
2024.01.03 13:15:39 WARN  no build target for: C:\Users\yashb\Documents\hello-world\webview-ui\build.sbt
2024.01.03 13:15:39 INFO  Generated JavaScript file 'C:\Users\yashb\Documents\hello-world\webview-ui\.bloop\livechart\livechart-test.js'
2024.01.03 13:15:39 INFO  no build target found for C:\Users\yashb\Documents\hello-world\webview-ui\build.sbt. Using presentation compiler with project's scala-library version: 3.3.1
2024.01.03 13:15:39 INFO  time: code lens generation in 1.54s
2024.01.03 14:27:42 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\hello-world\webview-ui\src\main\scala\livechart\LiveChart.scala
scala.meta.tokenizers.TokenizeException: <input>:18: error: unclosed character literal
        id := ''
              ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.03 14:27:42 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\hello-world\webview-ui\src\main\scala\livechart\LiveChart.scala
scala.meta.tokenizers.TokenizeException: <input>:18: error: unclosed character literal
        id := 'count'
                    ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.03 14:27:43 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\hello-world\webview-ui\src\main\scala\livechart\LiveChart.scala
scala.meta.tokenizers.TokenizeException: <input>:18: error: unclosed character literal
        id := 'counter'
                      ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

Exception in thread "pool-48-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.04 10:06:53 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\hello-world\webview-ui\src\main\scala\livechart\LiveChart.scala
scala.meta.tokenizers.TokenizeException: <input>:35: error: unclosed character literal
      width := '100'
                   ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.04 10:06:53 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\hello-world\webview-ui\src\main\scala\livechart\LiveChart.scala
scala.meta.tokenizers.TokenizeException: <input>:35: error: unclosed character literal
      width := '100%'
                    ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.04 10:07:45 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\hello-world\webview-ui\src\main\scala\livechart\LiveChart.scala
scala.meta.tokenizers.TokenizeException: <input>:35: error: unclosed string literal
      width := "100%'
               ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getStringLit(LegacyScanner.scala:553)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchDoubleQuote$1(LegacyScanner.scala:372)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:376)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.04 10:07:47 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\hello-world\webview-ui\src\main\scala\livechart\LiveChart.scala
scala.meta.tokenizers.TokenizeException: <input>:35: error: unclosed string literal
      width := "100%""
                     ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getStringLit(LegacyScanner.scala:553)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchDoubleQuote$1(LegacyScanner.scala:372)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:376)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

Jan. 04, 2024 11:39:14 A.M. scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\Users\yashb\Documents\hello-world\.metals\.reports\metals-full\2024-01-04\r_compiler-error_(livechart)_11-39-14-821.md
2024.01.04 11:39:34 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\hello-world\webview-ui\src\main\scala\livechart\LiveChart.scala
scala.meta.tokenizers.TokenizeException: <input>:18: error: unclosed character literal
      width := ''
               ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.04 11:50:40 INFO  Shutting down server
2024.01.04 11:50:40 INFO  shutting down Metals
2024.01.04 11:50:40 INFO  Failed to run request with params CleanCacheResult
2024.01.04 11:50:40 INFO  Failed to run request with params InverseSourcesResult
2024.01.04 11:50:40 INFO  Cancelling compilation on Bloop server
2024.01.04 11:50:40 INFO  Scala test classes not supported by server
2024.01.04 11:50:40 INFO  Scala main classes not supported by server
2024.01.04 11:50:40 INFO  Bloop should support `buildTarget/jvmRunEnvironment`, but it fails.
2024.01.04 11:50:40 INFO  Scala test classes not supported by server
2024.01.04 11:50:40 INFO  Scala test classes not supported by server
Jan. 04, 2024 11:50:40 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: scala.meta.internal.metals.MetalsBspException: BSP connection failed in the attempt to get: CleanCacheResult
java.util.concurrent.CompletionException: scala.meta.internal.metals.MetalsBspException: BSP connection failed in the attempt to get: CleanCacheResult
	at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:331)
	at java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:346)
	at java.base/java.util.concurrent.CompletableFuture$UniAccept.tryFire(CompletableFuture.java:704)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:506)
	at java.base/java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:2088)
	at scala.concurrent.java8.FuturesConvertersImpl$CF.apply(FutureConvertersImpl.scala:29)
	at scala.concurrent.java8.FuturesConvertersImpl$CF.apply(FutureConvertersImpl.scala:26)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:484)
	at scala.concurrent.ExecutionContext$parasitic$.execute(ExecutionContext.scala:222)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:429)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:504)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: scala.meta.internal.metals.MetalsBspException: BSP connection failed in the attempt to get: CleanCacheResult
	at scala.meta.internal.metals.BuildServerConnection$$anonfun$1.$anonfun$applyOrElse$9(BuildServerConnection.scala:468)
	at scala.Option.getOrElse(Option.scala:201)
	at scala.meta.internal.metals.BuildServerConnection$$anonfun$1.applyOrElse(BuildServerConnection.scala:468)
	at scala.meta.internal.metals.BuildServerConnection$$anonfun$1.applyOrElse(BuildServerConnection.scala:443)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:490)
	... 3 more
Caused by: java.util.concurrent.CancellationException
	at java.base/java.util.concurrent.CompletableFuture.cancel(CompletableFuture.java:2396)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint$1.cancel(RemoteEndpoint.java:151)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$register$2(BuildServerConnection.scala:425)
	at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.scala:17)
	at scala.util.Try$.apply(Try.scala:210)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$register$1(BuildServerConnection.scala:425)
	at scala.meta.internal.metals.Cancelable$$anon$1.cancel(Cancelable.scala:18)
	at scala.meta.internal.metals.Cancelable$.$anonfun$cancelAll$1(Cancelable.scala:29)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.metals.Cancelable$.cancelAll(Cancelable.scala:28)
	at scala.meta.internal.metals.MutableCancelable.cancel(MutableCancelable.scala:25)
	at scala.meta.internal.metals.BuildServerConnection.cancel(BuildServerConnection.scala:365)
	at scala.meta.internal.bsp.BspSession.$anonfun$cancel$1(BspSession.scala:34)
	at scala.meta.internal.bsp.BspSession.$anonfun$cancel$1$adapted(BspSession.scala:34)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.bsp.BspSession.cancel(BspSession.scala:34)
	at scala.meta.internal.metals.Cancelable$.$anonfun$cancelAll$1(Cancelable.scala:29)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.metals.Cancelable$.cancelAll(Cancelable.scala:28)
	at scala.meta.internal.metals.MutableCancelable.cancel(MutableCancelable.scala:25)
	at scala.meta.internal.metals.MetalsLspService.cancel(MetalsLspService.scala:160)
	at scala.meta.internal.metals.MetalsLspService.onShutdown(MetalsLspService.scala:933)
	at scala.meta.internal.metals.WorkspaceLspService.$anonfun$shutdown$2(WorkspaceLspService.scala:1198)
	at scala.meta.internal.metals.WorkspaceLspService.$anonfun$shutdown$2$adapted(WorkspaceLspService.scala:1198)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.metals.WorkspaceLspService.shutdown(WorkspaceLspService.scala:1198)
	at scala.meta.metals.MetalsLanguageServer.shutdown(MetalsLanguageServer.scala:260)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	... 3 more

Jan. 04, 2024 11:50:40 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint notify
INFO: Failed to send notification message.
org.eclipse.lsp4j.jsonrpc.JsonRpcException: java.nio.channels.AsynchronousCloseException
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:72)
	at scala.meta.internal.metals.RequestMonitorImpl$$anon$1.consume(ServerLivenessMonitor.scala:39)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.notify(RemoteEndpoint.java:126)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.sendCancelNotification(RemoteEndpoint.java:180)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint$1.cancel(RemoteEndpoint.java:150)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$register$2(BuildServerConnection.scala:425)
	at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.scala:17)
	at scala.util.Try$.apply(Try.scala:210)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$register$1(BuildServerConnection.scala:425)
	at scala.meta.internal.metals.Cancelable$$anon$1.cancel(Cancelable.scala:18)
	at scala.meta.internal.metals.Cancelable$.$anonfun$cancelAll$1(Cancelable.scala:29)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.metals.Cancelable$.cancelAll(Cancelable.scala:28)
	at scala.meta.internal.metals.MutableCancelable.cancel(MutableCancelable.scala:25)
	at scala.meta.internal.metals.BuildServerConnection.cancel(BuildServerConnection.scala:365)
	at scala.meta.internal.bsp.BspSession.$anonfun$cancel$1(BspSession.scala:34)
	at scala.meta.internal.bsp.BspSession.$anonfun$cancel$1$adapted(BspSession.scala:34)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.bsp.BspSession.cancel(BspSession.scala:34)
	at scala.meta.internal.metals.Cancelable$.$anonfun$cancelAll$1(Cancelable.scala:29)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.metals.Cancelable$.cancelAll(Cancelable.scala:28)
	at scala.meta.internal.metals.MutableCancelable.cancel(MutableCancelable.scala:25)
	at scala.meta.internal.metals.MetalsLspService.cancel(MetalsLspService.scala:160)
	at scala.meta.internal.metals.MetalsLspService.onShutdown(MetalsLspService.scala:933)
	at scala.meta.internal.metals.WorkspaceLspService.$anonfun$shutdown$2(WorkspaceLspService.scala:1198)
	at scala.meta.internal.metals.WorkspaceLspService.$anonfun$shutdown$2$adapted(WorkspaceLspService.scala:1198)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.metals.WorkspaceLspService.shutdown(WorkspaceLspService.scala:1198)
	at scala.meta.metals.MetalsLanguageServer.shutdown(MetalsLanguageServer.scala:260)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.nio.channels.AsynchronousCloseException
	at java.base/java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:202)
	at java.base/sun.nio.ch.SocketChannelImpl.endWrite(SocketChannelImpl.java:447)
	at java.base/sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:469)
	at java.base/sun.nio.ch.SinkChannelImpl.write(SinkChannelImpl.java:114)
	at java.base/java.nio.channels.Channels.writeFullyImpl(Channels.java:74)
	at java.base/java.nio.channels.Channels.writeFully(Channels.java:94)
	at java.base/java.nio.channels.Channels$1.write(Channels.java:172)
	at java.base/java.io.OutputStream.write(OutputStream.java:122)
	at java.base/java.nio.channels.Channels$1.write(Channels.java:152)
	at scala.meta.internal.metals.ClosableOutputStream.write(ClosableOutputStream.scala:26)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:137)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:108)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:67)
	... 45 more

2024.01.04 11:50:40 INFO  Failed to run request with params InverseSourcesResult
2024.01.04 11:50:40 INFO  Failed to run request with params InverseSourcesResult
2024.01.04 11:50:40 INFO  Bloop should support `buildTarget/jvmRunEnvironment`, but it fails.
2024.01.04 11:50:40 INFO  Scala main classes not supported by server
2024.01.04 11:50:40 INFO  Failed to run request with params InverseSourcesResult
Jan. 04, 2024 11:50:40 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: scala.meta.internal.metals.MetalsBspException: BSP connection failed in the attempt to get: InverseSourcesResult
java.util.concurrent.CompletionException: scala.meta.internal.metals.MetalsBspException: BSP connection failed in the attempt to get: InverseSourcesResult
	at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:331)
	at java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:346)
	at java.base/java.util.concurrent.CompletableFuture$UniAccept.tryFire(CompletableFuture.java:704)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:506)
	at java.base/java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:2088)
	at scala.concurrent.java8.FuturesConvertersImpl$CF.apply(FutureConvertersImpl.scala:29)
	at scala.concurrent.java8.FuturesConvertersImpl$CF.apply(FutureConvertersImpl.scala:26)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:484)
	at scala.concurrent.ExecutionContext$parasitic$.execute(ExecutionContext.scala:222)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:429)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:504)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: scala.meta.internal.metals.MetalsBspException: BSP connection failed in the attempt to get: InverseSourcesResult
	at scala.meta.internal.metals.BuildServerConnection$$anonfun$1.$anonfun$applyOrElse$9(BuildServerConnection.scala:468)
	at scala.Option.getOrElse(Option.scala:201)
	at scala.meta.internal.metals.BuildServerConnection$$anonfun$1.applyOrElse(BuildServerConnection.scala:468)
	at scala.meta.internal.metals.BuildServerConnection$$anonfun$1.applyOrElse(BuildServerConnection.scala:443)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:490)
	... 3 more
Caused by: java.util.concurrent.CancellationException
	at java.base/java.util.concurrent.CompletableFuture.cancel(CompletableFuture.java:2396)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint$1.cancel(RemoteEndpoint.java:151)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$register$2(BuildServerConnection.scala:425)
	at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.scala:17)
	at scala.util.Try$.apply(Try.scala:210)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$register$1(BuildServerConnection.scala:425)
	at scala.meta.internal.metals.Cancelable$$anon$1.cancel(Cancelable.scala:18)
	at scala.meta.internal.metals.Cancelable$.$anonfun$cancelAll$1(Cancelable.scala:29)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.metals.Cancelable$.cancelAll(Cancelable.scala:28)
	at scala.meta.internal.metals.MutableCancelable.cancel(MutableCancelable.scala:25)
	at scala.meta.internal.metals.BuildServerConnection.cancel(BuildServerConnection.scala:365)
	at scala.meta.internal.bsp.BspSession.$anonfun$cancel$1(BspSession.scala:34)
	at scala.meta.internal.bsp.BspSession.$anonfun$cancel$1$adapted(BspSession.scala:34)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.bsp.BspSession.cancel(BspSession.scala:34)
	at scala.meta.internal.metals.Cancelable$.$anonfun$cancelAll$1(Cancelable.scala:29)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.metals.Cancelable$.cancelAll(Cancelable.scala:28)
	at scala.meta.internal.metals.MutableCancelable.cancel(MutableCancelable.scala:25)
	at scala.meta.internal.metals.MetalsLspService.cancel(MetalsLspService.scala:160)
	at scala.meta.internal.metals.MetalsLspService.onShutdown(MetalsLspService.scala:933)
	at scala.meta.internal.metals.WorkspaceLspService.$anonfun$shutdown$2(WorkspaceLspService.scala:1198)
	at scala.meta.internal.metals.WorkspaceLspService.$anonfun$shutdown$2$adapted(WorkspaceLspService.scala:1198)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.metals.WorkspaceLspService.shutdown(WorkspaceLspService.scala:1198)
	at scala.meta.metals.MetalsLanguageServer.shutdown(MetalsLanguageServer.scala:260)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	... 3 more

2024.01.04 11:50:40 INFO  Scala test classes not supported by server
2024.01.04 11:50:40 INFO  Scala test classes not supported by server
2024.01.04 11:50:40 INFO  Bloop should support `buildTarget/jvmRunEnvironment`, but it fails.
2024.01.04 11:50:40 INFO  Scala test classes not supported by server
2024.01.04 11:50:40 INFO  Scala main classes not supported by server
2024.01.04 11:50:40 INFO  Failed to run request with params InverseSourcesResult
Jan. 04, 2024 11:50:40 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint notify
INFO: Failed to send notification message.
org.eclipse.lsp4j.jsonrpc.JsonRpcException: java.nio.channels.AsynchronousCloseException
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:72)
	at scala.meta.internal.metals.RequestMonitorImpl$$anon$1.consume(ServerLivenessMonitor.scala:39)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.notify(RemoteEndpoint.java:126)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.sendCancelNotification(RemoteEndpoint.java:180)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint$1.cancel(RemoteEndpoint.java:150)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$register$2(BuildServerConnection.scala:425)
	at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.scala:17)
	at scala.util.Try$.apply(Try.scala:210)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$register$1(BuildServerConnection.scala:425)
	at scala.meta.internal.metals.Cancelable$$anon$1.cancel(Cancelable.scala:18)
	at scala.meta.internal.metals.Cancelable$.$anonfun$cancelAll$1(Cancelable.scala:29)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.metals.Cancelable$.cancelAll(Cancelable.scala:28)
	at scala.meta.internal.metals.MutableCancelable.cancel(MutableCancelable.scala:25)
	at scala.meta.internal.metals.BuildServerConnection.cancel(BuildServerConnection.scala:365)
	at scala.meta.internal.bsp.BspSession.$anonfun$cancel$1(BspSession.scala:34)
	at scala.meta.internal.bsp.BspSession.$anonfun$cancel$1$adapted(BspSession.scala:34)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.bsp.BspSession.cancel(BspSession.scala:34)
	at scala.meta.internal.metals.Cancelable$.$anonfun$cancelAll$1(Cancelable.scala:29)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.metals.Cancelable$.cancelAll(Cancelable.scala:28)
	at scala.meta.internal.metals.MutableCancelable.cancel(MutableCancelable.scala:25)
	at scala.meta.internal.metals.MetalsLspService.cancel(MetalsLspService.scala:160)
	at scala.meta.internal.metals.MetalsLspService.onShutdown(MetalsLspService.scala:933)
	at scala.meta.internal.metals.WorkspaceLspService.$anonfun$shutdown$2(WorkspaceLspService.scala:1198)
	at scala.meta.internal.metals.WorkspaceLspService.$anonfun$shutdown$2$adapted(WorkspaceLspService.scala:1198)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.metals.WorkspaceLspService.shutdown(WorkspaceLspService.scala:1198)
	at scala.meta.metals.MetalsLanguageServer.shutdown(MetalsLanguageServer.scala:260)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.nio.channels.AsynchronousCloseException
	at java.base/java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:202)
	at java.base/sun.nio.ch.SocketChannelImpl.endWrite(SocketChannelImpl.java:447)
	at java.base/sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:469)
	at java.base/sun.nio.ch.SinkChannelImpl.write(SinkChannelImpl.java:114)
	at java.base/java.nio.channels.Channels.writeFullyImpl(Channels.java:74)
	at java.base/java.nio.channels.Channels.writeFully(Channels.java:94)
	at java.base/java.nio.channels.Channels$1.write(Channels.java:172)
	at java.base/java.io.OutputStream.write(OutputStream.java:122)
	at java.base/java.nio.channels.Channels$1.write(Channels.java:152)
	at scala.meta.internal.metals.ClosableOutputStream.write(ClosableOutputStream.scala:26)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:137)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:108)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:67)
	... 45 more

2024.01.04 11:50:40 INFO  Scala main classes not supported by server
2024.01.04 11:50:40 INFO  Scala main classes not supported by server
2024.01.04 11:50:40 INFO  Scala test classes not supported by server
2024.01.04 11:50:40 INFO  Failed to run request with params InverseSourcesResult
2024.01.04 11:50:40 INFO  Bloop should support `buildTarget/jvmRunEnvironment`, but it fails.
2024.01.04 11:50:40 INFO  Scala test classes not supported by server
Jan. 04, 2024 11:50:40 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: scala.meta.internal.metals.MetalsBspException: BSP connection failed in the attempt to get: InverseSourcesResult
java.util.concurrent.CompletionException: scala.meta.internal.metals.MetalsBspException: BSP connection failed in the attempt to get: InverseSourcesResult
	at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:331)
	at java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:346)
	at java.base/java.util.concurrent.CompletableFuture$UniAccept.tryFire(CompletableFuture.java:704)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:506)
	at java.base/java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:2088)
	at scala.concurrent.java8.FuturesConvertersImpl$CF.apply(FutureConvertersImpl.scala:29)
	at scala.concurrent.java8.FuturesConvertersImpl$CF.apply(FutureConvertersImpl.scala:26)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:484)
	at scala.concurrent.ExecutionContext$parasitic$.execute(ExecutionContext.scala:222)
	at scala.concurrent.impl.Promise$Transformation.submitWithValue(Promise.scala:429)
	at scala.concurrent.impl.Promise$DefaultPromise.submitWithValue(Promise.scala:338)
	at scala.concurrent.impl.Promise$DefaultPromise.tryComplete0(Promise.scala:285)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:504)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: scala.meta.internal.metals.MetalsBspException: BSP connection failed in the attempt to get: InverseSourcesResult
	at scala.meta.internal.metals.BuildServerConnection$$anonfun$1.$anonfun$applyOrElse$9(BuildServerConnection.scala:468)
	at scala.Option.getOrElse(Option.scala:201)
	at scala.meta.internal.metals.BuildServerConnection$$anonfun$1.applyOrElse(BuildServerConnection.scala:468)
	at scala.meta.internal.metals.BuildServerConnection$$anonfun$1.applyOrElse(BuildServerConnection.scala:443)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:490)
	... 3 more
Caused by: java.util.concurrent.CancellationException
	at java.base/java.util.concurrent.CompletableFuture.cancel(CompletableFuture.java:2396)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint$1.cancel(RemoteEndpoint.java:151)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$register$2(BuildServerConnection.scala:425)
	at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.scala:17)
	at scala.util.Try$.apply(Try.scala:210)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$register$1(BuildServerConnection.scala:425)
	at scala.meta.internal.metals.Cancelable$$anon$1.cancel(Cancelable.scala:18)
	at scala.meta.internal.metals.Cancelable$.$anonfun$cancelAll$1(Cancelable.scala:29)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.metals.Cancelable$.cancelAll(Cancelable.scala:28)
	at scala.meta.internal.metals.MutableCancelable.cancel(MutableCancelable.scala:25)
	at scala.meta.internal.metals.BuildServerConnection.cancel(BuildServerConnection.scala:365)
	at scala.meta.internal.bsp.BspSession.$anonfun$cancel$1(BspSession.scala:34)
	at scala.meta.internal.bsp.BspSession.$anonfun$cancel$1$adapted(BspSession.scala:34)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.bsp.BspSession.cancel(BspSession.scala:34)
	at scala.meta.internal.metals.Cancelable$.$anonfun$cancelAll$1(Cancelable.scala:29)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.metals.Cancelable$.cancelAll(Cancelable.scala:28)
	at scala.meta.internal.metals.MutableCancelable.cancel(MutableCancelable.scala:25)
	at scala.meta.internal.metals.MetalsLspService.cancel(MetalsLspService.scala:160)
	at scala.meta.internal.metals.MetalsLspService.onShutdown(MetalsLspService.scala:933)
	at scala.meta.internal.metals.WorkspaceLspService.$anonfun$shutdown$2(WorkspaceLspService.scala:1198)
	at scala.meta.internal.metals.WorkspaceLspService.$anonfun$shutdown$2$adapted(WorkspaceLspService.scala:1198)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.metals.WorkspaceLspService.shutdown(WorkspaceLspService.scala:1198)
	at scala.meta.metals.MetalsLanguageServer.shutdown(MetalsLanguageServer.scala:260)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	... 3 more

Jan. 04, 2024 11:50:40 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint notify
INFO: Failed to send notification message.
org.eclipse.lsp4j.jsonrpc.JsonRpcException: java.nio.channels.AsynchronousCloseException
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:72)
	at scala.meta.internal.metals.RequestMonitorImpl$$anon$1.consume(ServerLivenessMonitor.scala:39)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.notify(RemoteEndpoint.java:126)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.sendCancelNotification(RemoteEndpoint.java:180)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint$1.cancel(RemoteEndpoint.java:150)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$register$2(BuildServerConnection.scala:425)
	at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.scala:17)
	at scala.util.Try$.apply(Try.scala:210)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$register$1(BuildServerConnection.scala:425)
	at scala.meta.internal.metals.Cancelable$$anon$1.cancel(Cancelable.scala:18)
	at scala.meta.internal.metals.Cancelable$.$anonfun$cancelAll$1(Cancelable.scala:29)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.metals.Cancelable$.cancelAll(Cancelable.scala:28)
	at scala.meta.internal.metals.MutableCancelable.cancel(MutableCancelable.scala:25)
	at scala.meta.internal.metals.BuildServerConnection.cancel(BuildServerConnection.scala:365)
	at scala.meta.internal.bsp.BspSession.$anonfun$cancel$1(BspSession.scala:34)
	at scala.meta.internal.bsp.BspSession.$anonfun$cancel$1$adapted(BspSession.scala:34)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.bsp.BspSession.cancel(BspSession.scala:34)
	at scala.meta.internal.metals.Cancelable$.$anonfun$cancelAll$1(Cancelable.scala:29)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.metals.Cancelable$.cancelAll(Cancelable.scala:28)
	at scala.meta.internal.metals.MutableCancelable.cancel(MutableCancelable.scala:25)
	at scala.meta.internal.metals.MetalsLspService.cancel(MetalsLspService.scala:160)
	at scala.meta.internal.metals.MetalsLspService.onShutdown(MetalsLspService.scala:933)
	at scala.meta.internal.metals.WorkspaceLspService.$anonfun$shutdown$2(WorkspaceLspService.scala:1198)
	at scala.meta.internal.metals.WorkspaceLspService.$anonfun$shutdown$2$adapted(WorkspaceLspService.scala:1198)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.metals.WorkspaceLspService.shutdown(WorkspaceLspService.scala:1198)
	at scala.meta.metals.MetalsLanguageServer.shutdown(MetalsLanguageServer.scala:260)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.nio.channels.AsynchronousCloseException
	at java.base/java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:202)
	at java.base/sun.nio.ch.SocketChannelImpl.endWrite(SocketChannelImpl.java:447)
	at java.base/sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:469)
	at java.base/sun.nio.ch.SinkChannelImpl.write(SinkChannelImpl.java:114)
	at java.base/java.nio.channels.Channels.writeFullyImpl(Channels.java:74)
	at java.base/java.nio.channels.Channels.writeFully(Channels.java:94)
	at java.base/java.nio.channels.Channels$1.write(Channels.java:172)
	at java.base/java.io.OutputStream.write(OutputStream.java:122)
	at java.base/java.nio.channels.Channels$1.write(Channels.java:152)
	at scala.meta.internal.metals.ClosableOutputStream.write(ClosableOutputStream.scala:26)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:137)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:108)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:67)
	... 45 more

2024.01.04 11:50:40 INFO  Bloop should support `buildTarget/jvmRunEnvironment`, but it fails.
2024.01.04 11:50:40 INFO  Cancelling compilation on Bloop server
2024.01.04 11:50:40 INFO  Cancelling compilation on Bloop server
2024.01.04 11:50:40 INFO  Cancelling compilation on Bloop server
2024.01.04 11:50:40 INFO  Cancelling compilation on Bloop server
2024.01.04 11:50:40 INFO  Cancelling compilation on Bloop server
2024.01.04 11:50:40 INFO  Cancelling compilation on Bloop server
2024.01.04 11:50:40 INFO  Scala main classes not supported by server
2024.01.04 11:50:40 INFO  Scala test classes not supported by server
2024.01.04 11:50:40 INFO  Cancelling compilation on Bloop server
2024.01.04 11:50:40 INFO  Cancelling compilation on Bloop server
2024.01.04 11:50:40 INFO  Cancelling compilation on Bloop server
2024.01.04 11:50:40 INFO  Cancelling compilation on Bloop server
2024.01.04 11:50:40 INFO  Cancelling compilation on Bloop server
2024.01.04 11:50:40 INFO  Cancelling compilation on Bloop server
2024.01.04 11:50:40 INFO  Cancelling compilation on Bloop server
2024.01.04 11:50:40 INFO  Cancelling compilation on Bloop server
2024.01.04 11:50:40 INFO  Cancelling compilation on Bloop server
2024.01.04 11:50:40 INFO  Cancelling compilation on Bloop server
2024.01.04 11:50:40 INFO  Cancelling compilation on Bloop server
2024.01.04 11:50:40 INFO  Cancelling compilation on Bloop server
2024.01.04 11:50:40 INFO  Cancelling compilation on Bloop server
2024.01.04 11:50:40 INFO  Cancelling compilation on Bloop server
2024.01.04 11:50:40 INFO  Cancelling compilation on Bloop server
2024.01.04 11:50:40 INFO  Cancelling compilation on Bloop server
2024.01.04 11:50:40 INFO  Cancelling compilation on Bloop server
2024.01.04 11:50:40 INFO  Cancelling compilation on Bloop server
2024.01.04 11:50:40 INFO  Cancelling compilation on Bloop server
2024.01.04 11:50:40 INFO  Cancelling compilation on Bloop server
2024.01.04 11:50:40 INFO  Cancelling compilation on Bloop server
2024.01.04 11:50:40 INFO  Cancelling compilation on Bloop server
2024.01.04 11:50:40 INFO  Cancelling compilation on Bloop server
2024.01.04 11:50:40 INFO  Exiting server
2024.01.04 12:17:45 INFO  Started: Metals version 1.2.0 in folders 'C:\Users\yashb\Documents\vscode-laminar-vite-extension' for client Visual Studio Code 1.85.1.
2024.01.04 12:17:46 INFO  Attempting to connect to the build server...
2024.01.04 12:17:46 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.04 12:17:46 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.04 12:17:46 INFO  time: Connected to build server in 0.43s
2024.01.04 12:17:46 INFO  Connected to Build server: Bloop v1.5.13
2024.01.04 12:17:48 INFO  no build target found for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala. Using presentation compiler with project's scala-library version: 3.3.1
2024.01.04 12:17:48 INFO  running 'C:\Program Files\Java\jdk-11\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\yashb\AppData\Local\Temp\metals9387390872343589238\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'
2024.01.04 12:17:51 INFO  [info] welcome to sbt 1.8.2 (Oracle Corporation Java 11.0.18)
2024.01.04 12:17:51 INFO  [info] loading settings for project webview-ui-build-build-build from metals.sbt ...
2024.01.04 12:17:52 INFO  [info] loading project definition from C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\project\project\project
2024.01.04 12:17:52 INFO  time: indexed workspace in 3.45s
2024.01.04 12:17:52 WARN  no build target for: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.04 12:17:53 WARN  no build target for: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.04 12:17:53 INFO  [info] loading settings for project webview-ui-build-build from metals.sbt ...
2024.01.04 12:17:53 INFO  [info] loading project definition from C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\project\project
2024.01.04 12:17:55 INFO  Generated JavaScript file 'C:\Users\yashb\Documents\hello-world\webview-ui\.bloop\livechart\livechart-test.js'
2024.01.04 12:17:56 INFO  [success] Generated .bloop\webview-ui-build-build.json
2024.01.04 12:17:56 INFO  [success] Total time: 3 s, completed Jan. 4, 2024, 12:17:56 p.m.
2024.01.04 12:17:56 INFO  [info] loading settings for project webview-ui-build from metals.sbt,plugins.sbt ...
2024.01.04 12:17:56 INFO  [info] loading project definition from C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\project
2024.01.04 12:17:58 INFO  [success] Generated .bloop\webview-ui-build.json
2024.01.04 12:17:58 INFO  [success] Total time: 1 s, completed Jan. 4, 2024, 12:17:58 p.m.
2024.01.04 12:17:58 INFO  [info] loading settings for project livechart from build.sbt ...
2024.01.04 12:17:58 INFO  [info] set current project to livechart (in build file:/C:/Users/yashb/Documents/vscode-laminar-vite-extension/webview-ui/)
2024.01.04 12:17:58 INFO  time: code lens generation in 5.88s
2024.01.04 12:17:58 INFO  time: code lens generation in 5.88s
2024.01.04 12:17:58 INFO  time: code lens generation in 2.65s
2024.01.04 12:17:59 INFO  [success] Generated .bloop\livechart.json
2024.01.04 12:17:59 INFO  [success] Generated .bloop\livechart-test.json
2024.01.04 12:17:59 INFO  [success] Total time: 0 s, completed Jan. 4, 2024, 12:17:59 p.m.
2024.01.04 12:17:58 INFO  time: ran 'sbt bloopInstall' in 10s
2024.01.04 12:17:59 INFO  Disconnecting from Bloop session...
2024.01.04 12:17:59 INFO  Shut down connection with build server.
2024.01.04 12:17:59 INFO  Attempting to connect to the build server...
2024.01.04 12:17:59 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.04 12:17:59 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.04 12:17:59 INFO  time: Connected to build server in 47ms
2024.01.04 12:17:59 INFO  Connected to Build server: Bloop v1.5.13
2024.01.04 12:18:00 INFO  time: indexed workspace in 1.01s
2024.01.04 12:18:01 INFO  compiling livechart (1 scala source)
2024.01.04 12:18:01 INFO  Generated JavaScript file 'C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\.bloop\livechart\livechart-test.js'
2024.01.04 12:18:06 INFO  time: compiled livechart in 4.79s
Jan. 04, 2024 12:19:33 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 26
2024.01.04 12:22:14 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
scala.meta.tokenizers.TokenizeException: <input>:20: error: unclosed character literal
        display := 'le'
                      ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.04 12:22:14 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
scala.meta.tokenizers.TokenizeException: <input>:20: error: unclosed character literal
        display := 'lex'
                       ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.04 12:22:15 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
scala.meta.tokenizers.TokenizeException: <input>:20: error: unclosed character literal
        display := ''
                   ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.04 12:27:58 WARN  Using indexes to guess the definition of Button
2024.01.04 12:27:58 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java

Uri: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:703)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 04, 2024 12:27:58 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.desktop/java/awt/Button.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 1995, 2015, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.awt;\n\nimport java.awt.peer.ButtonPeer;\nimport java.beans.BeanProperty;\nimport java.util.EventListener;\nimport java.awt.event.*;\nimport java.io.ObjectOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.IOException;\nimport javax.accessibility.*;\n\n/**\n * This class creates a labeled button. The application can cause\n * some action to happen when the button is pushed. This image\n * depicts three views of a \"{@code Quit}\" button as it appears\n * under the Solaris operating system:\n * \u003cp\u003e\n * \u003cimg src\u003d\"doc-files/Button-1.gif\" alt\u003d\"The following context describes the graphic\"\n * style\u003d\"float:center; margin: 7px 10px;\"\u003e\n * \u003cp\u003e\n * The first view shows the button as it appears normally.\n * The second view shows the button\n * when it has input focus. Its outline is darkened to let the\n * user know that it is an active object. The third view shows the\n * button when the user clicks the mouse over the button, and thus\n * requests that an action be performed.\n * \u003cp\u003e\n * The gesture of clicking on a button with the mouse\n * is associated with one instance of {@code ActionEvent},\n * which is sent out when the mouse is both pressed and released\n * over the button. If an application is interested in knowing\n * when the button has been pressed but not released, as a separate\n * gesture, it can specialize {@code processMouseEvent},\n * or it can register itself as a listener for mouse events by\n * calling {@code addMouseListener}. Both of these methods are\n * defined by {@code Component}, the abstract superclass of\n * all components.\n * \u003cp\u003e\n * When a button is pressed and released, AWT sends an instance\n * of {@code ActionEvent} to the button, by calling\n * {@code processEvent} on the button. The button\u0027s\n * {@code processEvent} method receives all events\n * for the button; it passes an action event along by\n * calling its own {@code processActionEvent} method.\n * The latter method passes the action event on to any action\n * listeners that have registered an interest in action\n * events generated by this button.\n * \u003cp\u003e\n * If an application wants to perform some action based on\n * a button being pressed and released, it should implement\n * {@code ActionListener} and register the new listener\n * to receive events from this button, by calling the button\u0027s\n * {@code addActionListener} method. The application can\n * make use of the button\u0027s action command as a messaging protocol.\n *\n * @author      Sami Shaio\n * @see         java.awt.event.ActionEvent\n * @see         java.awt.event.ActionListener\n * @see         java.awt.Component#processMouseEvent\n * @see         java.awt.Component#addMouseListener\n * @since       1.0\n */\npublic class Button extends Component implements Accessible {\n\n    /**\n     * The button\u0027s label.  This value may be null.\n     * @serial\n     * @see #getLabel()\n     * @see #setLabel(String)\n     */\n    String label;\n\n    /**\n     * The action to be performed once a button has been\n     * pressed.  This value may be null.\n     * @serial\n     * @see #getActionCommand()\n     * @see #setActionCommand(String)\n     */\n    String actionCommand;\n\n    transient ActionListener actionListener;\n\n    private static final String base \u003d \"button\";\n    private static int nameCounter \u003d 0;\n\n    /*\n     * JDK 1.1 serialVersionUID\n     */\n    private static final long serialVersionUID \u003d -8774683716313001058L;\n\n\n    static {\n        /* ensure that the necessary native libraries are loaded */\n        Toolkit.loadLibraries();\n        if (!GraphicsEnvironment.isHeadless()) {\n            initIDs();\n        }\n    }\n\n    /**\n     * Initialize JNI field and method IDs for fields that may be\n     * accessed from C.\n     */\n    private static native void initIDs();\n\n    /**\n     * Constructs a button with an empty string for its label.\n     *\n     * @exception HeadlessException if GraphicsEnvironment.isHeadless()\n     * returns true\n     * @see java.awt.GraphicsEnvironment#isHeadless\n     */\n    public Button() throws HeadlessException {\n        this(\"\");\n    }\n\n    /**\n     * Constructs a button with the specified label.\n     *\n     * @param label  a string label for the button, or\n     *               {@code null} for no label\n     * @exception HeadlessException if GraphicsEnvironment.isHeadless()\n     * returns true\n     * @see java.awt.GraphicsEnvironment#isHeadless\n     */\n    public Button(String label) throws HeadlessException {\n        GraphicsEnvironment.checkHeadless();\n        this.label \u003d label;\n    }\n\n    /**\n     * Construct a name for this component.  Called by getName() when the\n     * name is null.\n     */\n    String constructComponentName() {\n        synchronized (Button.class) {\n            return base + nameCounter++;\n        }\n    }\n\n    /**\n     * Creates the peer of the button.  The button\u0027s peer allows the\n     * application to change the look of the button without changing\n     * its functionality.\n     *\n     * @see     java.awt.Component#getToolkit()\n     */\n    public void addNotify() {\n        synchronized(getTreeLock()) {\n            if (peer \u003d\u003d null)\n                peer \u003d getComponentFactory().createButton(this);\n            super.addNotify();\n        }\n    }\n\n    /**\n     * Gets the label of this button.\n     *\n     * @return    the button\u0027s label, or {@code null}\n     *                if the button has no label.\n     * @see       java.awt.Button#setLabel\n     */\n    public String getLabel() {\n        return label;\n    }\n\n    /**\n     * Sets the button\u0027s label to be the specified string.\n     *\n     * @param     label   the new label, or {@code null}\n     *                if the button has no label.\n     * @see       java.awt.Button#getLabel\n     */\n    public void setLabel(String label) {\n        boolean testvalid \u003d false;\n\n        synchronized (this) {\n            if (label !\u003d this.label \u0026\u0026 (this.label \u003d\u003d null ||\n                                        !this.label.equals(label))) {\n                this.label \u003d label;\n                ButtonPeer peer \u003d (ButtonPeer)this.peer;\n                if (peer !\u003d null) {\n                    peer.setLabel(label);\n                }\n                testvalid \u003d true;\n            }\n        }\n\n        // This could change the preferred size of the Component.\n        if (testvalid) {\n            invalidateIfValid();\n        }\n    }\n\n    /**\n     * Sets the command name for the action event fired\n     * by this button. By default this action command is\n     * set to match the label of the button.\n     *\n     * @param     command  a string used to set the button\u0027s\n     *                  action command.\n     *            If the string is {@code null} then the action command\n     *            is set to match the label of the button.\n     * @see       java.awt.event.ActionEvent\n     * @since     1.1\n     */\n    public void setActionCommand(String command) {\n        actionCommand \u003d command;\n    }\n\n    /**\n     * Returns the command name of the action event fired by this button.\n     * If the command name is {@code null} (default) then this method\n     * returns the label of the button.\n     *\n     * @return the action command name (or label) for this button\n     */\n    public String getActionCommand() {\n        return (actionCommand \u003d\u003d null? label : actionCommand);\n    }\n\n    /**\n     * Adds the specified action listener to receive action events from\n     * this button. Action events occur when a user presses or releases\n     * the mouse over this button.\n     * If l is null, no exception is thrown and no action is performed.\n     * \u003cp\u003eRefer to \u003ca href\u003d\"doc-files/AWTThreadIssues.html#ListenersThreads\"\n     * \u003eAWT Threading Issues\u003c/a\u003e for details on AWT\u0027s threading model.\n     *\n     * @param         l the action listener\n     * @see           #removeActionListener\n     * @see           #getActionListeners\n     * @see           java.awt.event.ActionListener\n     * @since         1.1\n     */\n    public synchronized void addActionListener(ActionListener l) {\n        if (l \u003d\u003d null) {\n            return;\n        }\n        actionListener \u003d AWTEventMulticaster.add(actionListener, l);\n        newEventsOnly \u003d true;\n    }\n\n    /**\n     * Removes the specified action listener so that it no longer\n     * receives action events from this button. Action events occur\n     * when a user presses or releases the mouse over this button.\n     * If l is null, no exception is thrown and no action is performed.\n     * \u003cp\u003eRefer to \u003ca href\u003d\"doc-files/AWTThreadIssues.html#ListenersThreads\"\n     * \u003eAWT Threading Issues\u003c/a\u003e for details on AWT\u0027s threading model.\n     *\n     * @param           l     the action listener\n     * @see             #addActionListener\n     * @see             #getActionListeners\n     * @see             java.awt.event.ActionListener\n     * @since           1.1\n     */\n    public synchronized void removeActionListener(ActionListener l) {\n        if (l \u003d\u003d null) {\n            return;\n        }\n        actionListener \u003d AWTEventMulticaster.remove(actionListener, l);\n    }\n\n    /**\n     * Returns an array of all the action listeners\n     * registered on this button.\n     *\n     * @return all of this button\u0027s {@code ActionListener}s\n     *         or an empty array if no action\n     *         listeners are currently registered\n     *\n     * @see             #addActionListener\n     * @see             #removeActionListener\n     * @see             java.awt.event.ActionListener\n     * @since 1.4\n     */\n    public synchronized ActionListener[] getActionListeners() {\n        return getListeners(ActionListener.class);\n    }\n\n    /**\n     * Returns an array of all the objects currently registered\n     * as \u003ccode\u003e\u003cem\u003eFoo\u003c/em\u003eListener\u003c/code\u003es\n     * upon this {@code Button}.\n     * \u003ccode\u003e\u003cem\u003eFoo\u003c/em\u003eListener\u003c/code\u003es are registered using the\n     * \u003ccode\u003eadd\u003cem\u003eFoo\u003c/em\u003eListener\u003c/code\u003e method.\n     *\n     * \u003cp\u003e\n     * You can specify the {@code listenerType} argument\n     * with a class literal, such as\n     * \u003ccode\u003e\u003cem\u003eFoo\u003c/em\u003eListener.class\u003c/code\u003e.\n     * For example, you can query a\n     * {@code Button b}\n     * for its action listeners with the following code:\n     *\n     * \u003cpre\u003eActionListener[] als \u003d (ActionListener[])(b.getListeners(ActionListener.class));\u003c/pre\u003e\n     *\n     * If no such listeners exist, this method returns an empty array.\n     *\n     * @param listenerType the type of listeners requested; this parameter\n     *          should specify an interface that descends from\n     *          {@code java.util.EventListener}\n     * @return an array of all objects registered as\n     *          \u003ccode\u003e\u003cem\u003eFoo\u003c/em\u003eListener\u003c/code\u003es on this button,\n     *          or an empty array if no such\n     *          listeners have been added\n     * @exception ClassCastException if {@code listenerType}\n     *          doesn\u0027t specify a class or interface that implements\n     *          {@code java.util.EventListener}\n     *\n     * @see #getActionListeners\n     * @since 1.3\n     */\n    public \u003cT extends EventListener\u003e T[] getListeners(Class\u003cT\u003e listenerType) {\n        EventListener l \u003d null;\n        if  (listenerType \u003d\u003d ActionListener.class) {\n            l \u003d actionListener;\n        } else {\n            return super.getListeners(listenerType);\n        }\n        return AWTEventMulticaster.getListeners(l, listenerType);\n    }\n\n    // REMIND: remove when filtering is done at lower level\n    boolean eventEnabled(AWTEvent e) {\n        if (e.id \u003d\u003d ActionEvent.ACTION_PERFORMED) {\n            if ((eventMask \u0026 AWTEvent.ACTION_EVENT_MASK) !\u003d 0 ||\n                actionListener !\u003d null) {\n                return true;\n            }\n            return false;\n        }\n        return super.eventEnabled(e);\n    }\n\n    /**\n     * Processes events on this button. If an event is\n     * an instance of {@code ActionEvent}, this method invokes\n     * the {@code processActionEvent} method. Otherwise,\n     * it invokes {@code processEvent} on the superclass.\n     * \u003cp\u003eNote that if the event parameter is {@code null}\n     * the behavior is unspecified and may result in an\n     * exception.\n     *\n     * @param        e the event\n     * @see          java.awt.event.ActionEvent\n     * @see          java.awt.Button#processActionEvent\n     * @since        1.1\n     */\n    protected void processEvent(AWTEvent e) {\n        if (e instanceof ActionEvent) {\n            processActionEvent((ActionEvent)e);\n            return;\n        }\n        super.processEvent(e);\n    }\n\n    /**\n     * Processes action events occurring on this button\n     * by dispatching them to any registered\n     * {@code ActionListener} objects.\n     * \u003cp\u003e\n     * This method is not called unless action events are\n     * enabled for this button. Action events are enabled\n     * when one of the following occurs:\n     * \u003cul\u003e\n     * \u003cli\u003eAn {@code ActionListener} object is registered\n     * via {@code addActionListener}.\n     * \u003cli\u003eAction events are enabled via {@code enableEvents}.\n     * \u003c/ul\u003e\n     * \u003cp\u003eNote that if the event parameter is {@code null}\n     * the behavior is unspecified and may result in an\n     * exception.\n     *\n     * @param       e the action event\n     * @see         java.awt.event.ActionListener\n     * @see         java.awt.Button#addActionListener\n     * @see         java.awt.Component#enableEvents\n     * @since       1.1\n     */\n    protected void processActionEvent(ActionEvent e) {\n        ActionListener listener \u003d actionListener;\n        if (listener !\u003d null) {\n            listener.actionPerformed(e);\n        }\n    }\n\n    /**\n     * Returns a string representing the state of this {@code Button}.\n     * This method is intended to be used only for debugging purposes, and the\n     * content and format of the returned string may vary between\n     * implementations. The returned string may be empty but may not be\n     * {@code null}.\n     *\n     * @return     the parameter string of this button\n     */\n    protected String paramString() {\n        return super.paramString() + \",label\u003d\" + label;\n    }\n\n\n    /* Serialization support.\n     */\n\n    /*\n     * Button Serial Data Version.\n     * @serial\n     */\n    private int buttonSerializedDataVersion \u003d 1;\n\n    /**\n     * Writes default serializable fields to stream.  Writes\n     * a list of serializable {@code ActionListeners}\n     * as optional data.  The non-serializable\n     * {@code ActionListeners} are detected and\n     * no attempt is made to serialize them.\n     *\n     * @serialData {@code null} terminated sequence of 0 or\n     *   more pairs: the pair consists of a {@code String}\n     *   and an {@code Object}; the {@code String}\n     *   indicates the type of object and is one of the following:\n     *   {@code actionListenerK} indicating an\n     *     {@code ActionListener} object\n     *\n     * @param s the {@code ObjectOutputStream} to write\n     * @see AWTEventMulticaster#save(ObjectOutputStream, String, EventListener)\n     * @see java.awt.Component#actionListenerK\n     * @see #readObject(ObjectInputStream)\n     */\n    private void writeObject(ObjectOutputStream s)\n      throws IOException\n    {\n      s.defaultWriteObject();\n\n      AWTEventMulticaster.save(s, actionListenerK, actionListener);\n      s.writeObject(null);\n    }\n\n    /**\n     * Reads the {@code ObjectInputStream} and if\n     * it isn\u0027t {@code null} adds a listener to\n     * receive action events fired by the button.\n     * Unrecognized keys or values will be ignored.\n     *\n     * @param s the {@code ObjectInputStream} to read\n     * @exception HeadlessException if\n     *   {@code GraphicsEnvironment.isHeadless} returns\n     *   {@code true}\n     * @serial\n     * @see #removeActionListener(ActionListener)\n     * @see #addActionListener(ActionListener)\n     * @see java.awt.GraphicsEnvironment#isHeadless\n     * @see #writeObject(ObjectOutputStream)\n     */\n    private void readObject(ObjectInputStream s)\n      throws ClassNotFoundException, IOException, HeadlessException\n    {\n      GraphicsEnvironment.checkHeadless();\n      s.defaultReadObject();\n\n      Object keyOrNull;\n      while(null !\u003d (keyOrNull \u003d s.readObject())) {\n        String key \u003d ((String)keyOrNull).intern();\n\n        if (actionListenerK \u003d\u003d key)\n          addActionListener((ActionListener)(s.readObject()));\n\n        else // skip value for unrecognized key\n          s.readObject();\n      }\n    }\n\n\n/////////////////\n// Accessibility support\n////////////////\n\n    /**\n     * Gets the {@code AccessibleContext} associated with\n     * this {@code Button}. For buttons, the\n     * {@code AccessibleContext} takes the form of an\n     * {@code AccessibleAWTButton}.\n     * A new {@code AccessibleAWTButton} instance is\n     * created if necessary.\n     *\n     * @return an {@code AccessibleAWTButton} that serves as the\n     *         {@code AccessibleContext} of this {@code Button}\n     * @since 1.3\n     */\n    @BeanProperty(expert \u003d true, description\n            \u003d \"The AccessibleContext associated with this Button.\")\n    public AccessibleContext getAccessibleContext() {\n        if (accessibleContext \u003d\u003d null) {\n            accessibleContext \u003d new AccessibleAWTButton();\n        }\n        return accessibleContext;\n    }\n\n    /**\n     * This class implements accessibility support for the\n     * {@code Button} class.  It provides an implementation of the\n     * Java Accessibility API appropriate to button user-interface elements.\n     * @since 1.3\n     */\n    protected class AccessibleAWTButton extends AccessibleAWTComponent\n        implements AccessibleAction, AccessibleValue\n    {\n        /*\n         * JDK 1.3 serialVersionUID\n         */\n        private static final long serialVersionUID \u003d -5932203980244017102L;\n\n        /**\n         * Get the accessible name of this object.\n         *\n         * @return the localized name of the object -- can be null if this\n         * object does not have a name\n         */\n        public String getAccessibleName() {\n            if (accessibleName !\u003d null) {\n                return accessibleName;\n            } else {\n                if (getLabel() \u003d\u003d null) {\n                    return super.getAccessibleName();\n                } else {\n                    return getLabel();\n                }\n            }\n        }\n\n        /**\n         * Get the AccessibleAction associated with this object.  In the\n         * implementation of the Java Accessibility API for this class,\n         * return this object, which is responsible for implementing the\n         * AccessibleAction interface on behalf of itself.\n         *\n         * @return this object\n         */\n        public AccessibleAction getAccessibleAction() {\n            return this;\n        }\n\n        /**\n         * Get the AccessibleValue associated with this object.  In the\n         * implementation of the Java Accessibility API for this class,\n         * return this object, which is responsible for implementing the\n         * AccessibleValue interface on behalf of itself.\n         *\n         * @return this object\n         */\n        public AccessibleValue getAccessibleValue() {\n            return this;\n        }\n\n        /**\n         * Returns the number of Actions available in this object.  The\n         * default behavior of a button is to have one action - toggle\n         * the button.\n         *\n         * @return 1, the number of Actions in this object\n         */\n        public int getAccessibleActionCount() {\n            return 1;\n        }\n\n        /**\n         * Return a description of the specified action of the object.\n         *\n         * @param i zero-based index of the actions\n         */\n        public String getAccessibleActionDescription(int i) {\n            if (i \u003d\u003d 0) {\n                // [[[PENDING:  WDW -- need to provide a localized string]]]\n                return \"click\";\n            } else {\n                return null;\n            }\n        }\n\n        /**\n         * Perform the specified Action on the object\n         *\n         * @param i zero-based index of actions\n         * @return true if the action was performed; else false.\n         */\n        public boolean doAccessibleAction(int i) {\n            if (i \u003d\u003d 0) {\n                // Simulate a button click\n                Toolkit.getEventQueue().postEvent(\n                        new ActionEvent(Button.this,\n                                        ActionEvent.ACTION_PERFORMED,\n                                        Button.this.getActionCommand()));\n                return true;\n            } else {\n                return false;\n            }\n        }\n\n        /**\n         * Get the value of this object as a Number.\n         *\n         * @return An Integer of 0 if this isn\u0027t selected or an Integer of 1 if\n         * this is selected.\n         * @see javax.swing.AbstractButton#isSelected()\n         */\n        public Number getCurrentAccessibleValue() {\n            return Integer.valueOf(0);\n        }\n\n        /**\n         * Set the value of this object as a Number.\n         *\n         * @return True if the value was set.\n         */\n        public boolean setCurrentAccessibleValue(Number n) {\n            return false;\n        }\n\n        /**\n         * Get the minimum value of this object as a Number.\n         *\n         * @return An Integer of 0.\n         */\n        public Number getMinimumAccessibleValue() {\n            return Integer.valueOf(0);\n        }\n\n        /**\n         * Get the maximum value of this object as a Number.\n         *\n         * @return An Integer of 0.\n         */\n        public Number getMaximumAccessibleValue() {\n            return Integer.valueOf(0);\n        }\n\n        /**\n         * Get the role of this object.\n         *\n         * @return an instance of AccessibleRole describing the role of the\n         * object\n         * @see AccessibleRole\n         */\n        public AccessibleRole getAccessibleRole() {\n            return AccessibleRole.PUSH_BUTTON;\n        }\n    } // inner class AccessibleAWTButton\n\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:339)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 16 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 24 more

Jan. 04, 2024 12:27:58 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.desktop/java/awt/Button.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:358)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 16 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 24 more

Jan. 04, 2024 12:27:59 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 720
Exception in thread "pool-7-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Jan. 04, 2024 12:27:59 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 723
2024.01.04 12:27:59 WARN  Using indexes to guess the definition of Button
2024.01.04 12:27:59 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java

Uri: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:703)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 04, 2024 12:27:59 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.desktop/java/awt/Button.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 1995, 2015, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.awt;\n\nimport java.awt.peer.ButtonPeer;\nimport java.beans.BeanProperty;\nimport java.util.EventListener;\nimport java.awt.event.*;\nimport java.io.ObjectOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.IOException;\nimport javax.accessibility.*;\n\n/**\n * This class creates a labeled button. The application can cause\n * some action to happen when the button is pushed. This image\n * depicts three views of a \"{@code Quit}\" button as it appears\n * under the Solaris operating system:\n * \u003cp\u003e\n * \u003cimg src\u003d\"doc-files/Button-1.gif\" alt\u003d\"The following context describes the graphic\"\n * style\u003d\"float:center; margin: 7px 10px;\"\u003e\n * \u003cp\u003e\n * The first view shows the button as it appears normally.\n * The second view shows the button\n * when it has input focus. Its outline is darkened to let the\n * user know that it is an active object. The third view shows the\n * button when the user clicks the mouse over the button, and thus\n * requests that an action be performed.\n * \u003cp\u003e\n * The gesture of clicking on a button with the mouse\n * is associated with one instance of {@code ActionEvent},\n * which is sent out when the mouse is both pressed and released\n * over the button. If an application is interested in knowing\n * when the button has been pressed but not released, as a separate\n * gesture, it can specialize {@code processMouseEvent},\n * or it can register itself as a listener for mouse events by\n * calling {@code addMouseListener}. Both of these methods are\n * defined by {@code Component}, the abstract superclass of\n * all components.\n * \u003cp\u003e\n * When a button is pressed and released, AWT sends an instance\n * of {@code ActionEvent} to the button, by calling\n * {@code processEvent} on the button. The button\u0027s\n * {@code processEvent} method receives all events\n * for the button; it passes an action event along by\n * calling its own {@code processActionEvent} method.\n * The latter method passes the action event on to any action\n * listeners that have registered an interest in action\n * events generated by this button.\n * \u003cp\u003e\n * If an application wants to perform some action based on\n * a button being pressed and released, it should implement\n * {@code ActionListener} and register the new listener\n * to receive events from this button, by calling the button\u0027s\n * {@code addActionListener} method. The application can\n * make use of the button\u0027s action command as a messaging protocol.\n *\n * @author      Sami Shaio\n * @see         java.awt.event.ActionEvent\n * @see         java.awt.event.ActionListener\n * @see         java.awt.Component#processMouseEvent\n * @see         java.awt.Component#addMouseListener\n * @since       1.0\n */\npublic class Button extends Component implements Accessible {\n\n    /**\n     * The button\u0027s label.  This value may be null.\n     * @serial\n     * @see #getLabel()\n     * @see #setLabel(String)\n     */\n    String label;\n\n    /**\n     * The action to be performed once a button has been\n     * pressed.  This value may be null.\n     * @serial\n     * @see #getActionCommand()\n     * @see #setActionCommand(String)\n     */\n    String actionCommand;\n\n    transient ActionListener actionListener;\n\n    private static final String base \u003d \"button\";\n    private static int nameCounter \u003d 0;\n\n    /*\n     * JDK 1.1 serialVersionUID\n     */\n    private static final long serialVersionUID \u003d -8774683716313001058L;\n\n\n    static {\n        /* ensure that the necessary native libraries are loaded */\n        Toolkit.loadLibraries();\n        if (!GraphicsEnvironment.isHeadless()) {\n            initIDs();\n        }\n    }\n\n    /**\n     * Initialize JNI field and method IDs for fields that may be\n     * accessed from C.\n     */\n    private static native void initIDs();\n\n    /**\n     * Constructs a button with an empty string for its label.\n     *\n     * @exception HeadlessException if GraphicsEnvironment.isHeadless()\n     * returns true\n     * @see java.awt.GraphicsEnvironment#isHeadless\n     */\n    public Button() throws HeadlessException {\n        this(\"\");\n    }\n\n    /**\n     * Constructs a button with the specified label.\n     *\n     * @param label  a string label for the button, or\n     *               {@code null} for no label\n     * @exception HeadlessException if GraphicsEnvironment.isHeadless()\n     * returns true\n     * @see java.awt.GraphicsEnvironment#isHeadless\n     */\n    public Button(String label) throws HeadlessException {\n        GraphicsEnvironment.checkHeadless();\n        this.label \u003d label;\n    }\n\n    /**\n     * Construct a name for this component.  Called by getName() when the\n     * name is null.\n     */\n    String constructComponentName() {\n        synchronized (Button.class) {\n            return base + nameCounter++;\n        }\n    }\n\n    /**\n     * Creates the peer of the button.  The button\u0027s peer allows the\n     * application to change the look of the button without changing\n     * its functionality.\n     *\n     * @see     java.awt.Component#getToolkit()\n     */\n    public void addNotify() {\n        synchronized(getTreeLock()) {\n            if (peer \u003d\u003d null)\n                peer \u003d getComponentFactory().createButton(this);\n            super.addNotify();\n        }\n    }\n\n    /**\n     * Gets the label of this button.\n     *\n     * @return    the button\u0027s label, or {@code null}\n     *                if the button has no label.\n     * @see       java.awt.Button#setLabel\n     */\n    public String getLabel() {\n        return label;\n    }\n\n    /**\n     * Sets the button\u0027s label to be the specified string.\n     *\n     * @param     label   the new label, or {@code null}\n     *                if the button has no label.\n     * @see       java.awt.Button#getLabel\n     */\n    public void setLabel(String label) {\n        boolean testvalid \u003d false;\n\n        synchronized (this) {\n            if (label !\u003d this.label \u0026\u0026 (this.label \u003d\u003d null ||\n                                        !this.label.equals(label))) {\n                this.label \u003d label;\n                ButtonPeer peer \u003d (ButtonPeer)this.peer;\n                if (peer !\u003d null) {\n                    peer.setLabel(label);\n                }\n                testvalid \u003d true;\n            }\n        }\n\n        // This could change the preferred size of the Component.\n        if (testvalid) {\n            invalidateIfValid();\n        }\n    }\n\n    /**\n     * Sets the command name for the action event fired\n     * by this button. By default this action command is\n     * set to match the label of the button.\n     *\n     * @param     command  a string used to set the button\u0027s\n     *                  action command.\n     *            If the string is {@code null} then the action command\n     *            is set to match the label of the button.\n     * @see       java.awt.event.ActionEvent\n     * @since     1.1\n     */\n    public void setActionCommand(String command) {\n        actionCommand \u003d command;\n    }\n\n    /**\n     * Returns the command name of the action event fired by this button.\n     * If the command name is {@code null} (default) then this method\n     * returns the label of the button.\n     *\n     * @return the action command name (or label) for this button\n     */\n    public String getActionCommand() {\n        return (actionCommand \u003d\u003d null? label : actionCommand);\n    }\n\n    /**\n     * Adds the specified action listener to receive action events from\n     * this button. Action events occur when a user presses or releases\n     * the mouse over this button.\n     * If l is null, no exception is thrown and no action is performed.\n     * \u003cp\u003eRefer to \u003ca href\u003d\"doc-files/AWTThreadIssues.html#ListenersThreads\"\n     * \u003eAWT Threading Issues\u003c/a\u003e for details on AWT\u0027s threading model.\n     *\n     * @param         l the action listener\n     * @see           #removeActionListener\n     * @see           #getActionListeners\n     * @see           java.awt.event.ActionListener\n     * @since         1.1\n     */\n    public synchronized void addActionListener(ActionListener l) {\n        if (l \u003d\u003d null) {\n            return;\n        }\n        actionListener \u003d AWTEventMulticaster.add(actionListener, l);\n        newEventsOnly \u003d true;\n    }\n\n    /**\n     * Removes the specified action listener so that it no longer\n     * receives action events from this button. Action events occur\n     * when a user presses or releases the mouse over this button.\n     * If l is null, no exception is thrown and no action is performed.\n     * \u003cp\u003eRefer to \u003ca href\u003d\"doc-files/AWTThreadIssues.html#ListenersThreads\"\n     * \u003eAWT Threading Issues\u003c/a\u003e for details on AWT\u0027s threading model.\n     *\n     * @param           l     the action listener\n     * @see             #addActionListener\n     * @see             #getActionListeners\n     * @see             java.awt.event.ActionListener\n     * @since           1.1\n     */\n    public synchronized void removeActionListener(ActionListener l) {\n        if (l \u003d\u003d null) {\n            return;\n        }\n        actionListener \u003d AWTEventMulticaster.remove(actionListener, l);\n    }\n\n    /**\n     * Returns an array of all the action listeners\n     * registered on this button.\n     *\n     * @return all of this button\u0027s {@code ActionListener}s\n     *         or an empty array if no action\n     *         listeners are currently registered\n     *\n     * @see             #addActionListener\n     * @see             #removeActionListener\n     * @see             java.awt.event.ActionListener\n     * @since 1.4\n     */\n    public synchronized ActionListener[] getActionListeners() {\n        return getListeners(ActionListener.class);\n    }\n\n    /**\n     * Returns an array of all the objects currently registered\n     * as \u003ccode\u003e\u003cem\u003eFoo\u003c/em\u003eListener\u003c/code\u003es\n     * upon this {@code Button}.\n     * \u003ccode\u003e\u003cem\u003eFoo\u003c/em\u003eListener\u003c/code\u003es are registered using the\n     * \u003ccode\u003eadd\u003cem\u003eFoo\u003c/em\u003eListener\u003c/code\u003e method.\n     *\n     * \u003cp\u003e\n     * You can specify the {@code listenerType} argument\n     * with a class literal, such as\n     * \u003ccode\u003e\u003cem\u003eFoo\u003c/em\u003eListener.class\u003c/code\u003e.\n     * For example, you can query a\n     * {@code Button b}\n     * for its action listeners with the following code:\n     *\n     * \u003cpre\u003eActionListener[] als \u003d (ActionListener[])(b.getListeners(ActionListener.class));\u003c/pre\u003e\n     *\n     * If no such listeners exist, this method returns an empty array.\n     *\n     * @param listenerType the type of listeners requested; this parameter\n     *          should specify an interface that descends from\n     *          {@code java.util.EventListener}\n     * @return an array of all objects registered as\n     *          \u003ccode\u003e\u003cem\u003eFoo\u003c/em\u003eListener\u003c/code\u003es on this button,\n     *          or an empty array if no such\n     *          listeners have been added\n     * @exception ClassCastException if {@code listenerType}\n     *          doesn\u0027t specify a class or interface that implements\n     *          {@code java.util.EventListener}\n     *\n     * @see #getActionListeners\n     * @since 1.3\n     */\n    public \u003cT extends EventListener\u003e T[] getListeners(Class\u003cT\u003e listenerType) {\n        EventListener l \u003d null;\n        if  (listenerType \u003d\u003d ActionListener.class) {\n            l \u003d actionListener;\n        } else {\n            return super.getListeners(listenerType);\n        }\n        return AWTEventMulticaster.getListeners(l, listenerType);\n    }\n\n    // REMIND: remove when filtering is done at lower level\n    boolean eventEnabled(AWTEvent e) {\n        if (e.id \u003d\u003d ActionEvent.ACTION_PERFORMED) {\n            if ((eventMask \u0026 AWTEvent.ACTION_EVENT_MASK) !\u003d 0 ||\n                actionListener !\u003d null) {\n                return true;\n            }\n            return false;\n        }\n        return super.eventEnabled(e);\n    }\n\n    /**\n     * Processes events on this button. If an event is\n     * an instance of {@code ActionEvent}, this method invokes\n     * the {@code processActionEvent} method. Otherwise,\n     * it invokes {@code processEvent} on the superclass.\n     * \u003cp\u003eNote that if the event parameter is {@code null}\n     * the behavior is unspecified and may result in an\n     * exception.\n     *\n     * @param        e the event\n     * @see          java.awt.event.ActionEvent\n     * @see          java.awt.Button#processActionEvent\n     * @since        1.1\n     */\n    protected void processEvent(AWTEvent e) {\n        if (e instanceof ActionEvent) {\n            processActionEvent((ActionEvent)e);\n            return;\n        }\n        super.processEvent(e);\n    }\n\n    /**\n     * Processes action events occurring on this button\n     * by dispatching them to any registered\n     * {@code ActionListener} objects.\n     * \u003cp\u003e\n     * This method is not called unless action events are\n     * enabled for this button. Action events are enabled\n     * when one of the following occurs:\n     * \u003cul\u003e\n     * \u003cli\u003eAn {@code ActionListener} object is registered\n     * via {@code addActionListener}.\n     * \u003cli\u003eAction events are enabled via {@code enableEvents}.\n     * \u003c/ul\u003e\n     * \u003cp\u003eNote that if the event parameter is {@code null}\n     * the behavior is unspecified and may result in an\n     * exception.\n     *\n     * @param       e the action event\n     * @see         java.awt.event.ActionListener\n     * @see         java.awt.Button#addActionListener\n     * @see         java.awt.Component#enableEvents\n     * @since       1.1\n     */\n    protected void processActionEvent(ActionEvent e) {\n        ActionListener listener \u003d actionListener;\n        if (listener !\u003d null) {\n            listener.actionPerformed(e);\n        }\n    }\n\n    /**\n     * Returns a string representing the state of this {@code Button}.\n     * This method is intended to be used only for debugging purposes, and the\n     * content and format of the returned string may vary between\n     * implementations. The returned string may be empty but may not be\n     * {@code null}.\n     *\n     * @return     the parameter string of this button\n     */\n    protected String paramString() {\n        return super.paramString() + \",label\u003d\" + label;\n    }\n\n\n    /* Serialization support.\n     */\n\n    /*\n     * Button Serial Data Version.\n     * @serial\n     */\n    private int buttonSerializedDataVersion \u003d 1;\n\n    /**\n     * Writes default serializable fields to stream.  Writes\n     * a list of serializable {@code ActionListeners}\n     * as optional data.  The non-serializable\n     * {@code ActionListeners} are detected and\n     * no attempt is made to serialize them.\n     *\n     * @serialData {@code null} terminated sequence of 0 or\n     *   more pairs: the pair consists of a {@code String}\n     *   and an {@code Object}; the {@code String}\n     *   indicates the type of object and is one of the following:\n     *   {@code actionListenerK} indicating an\n     *     {@code ActionListener} object\n     *\n     * @param s the {@code ObjectOutputStream} to write\n     * @see AWTEventMulticaster#save(ObjectOutputStream, String, EventListener)\n     * @see java.awt.Component#actionListenerK\n     * @see #readObject(ObjectInputStream)\n     */\n    private void writeObject(ObjectOutputStream s)\n      throws IOException\n    {\n      s.defaultWriteObject();\n\n      AWTEventMulticaster.save(s, actionListenerK, actionListener);\n      s.writeObject(null);\n    }\n\n    /**\n     * Reads the {@code ObjectInputStream} and if\n     * it isn\u0027t {@code null} adds a listener to\n     * receive action events fired by the button.\n     * Unrecognized keys or values will be ignored.\n     *\n     * @param s the {@code ObjectInputStream} to read\n     * @exception HeadlessException if\n     *   {@code GraphicsEnvironment.isHeadless} returns\n     *   {@code true}\n     * @serial\n     * @see #removeActionListener(ActionListener)\n     * @see #addActionListener(ActionListener)\n     * @see java.awt.GraphicsEnvironment#isHeadless\n     * @see #writeObject(ObjectOutputStream)\n     */\n    private void readObject(ObjectInputStream s)\n      throws ClassNotFoundException, IOException, HeadlessException\n    {\n      GraphicsEnvironment.checkHeadless();\n      s.defaultReadObject();\n\n      Object keyOrNull;\n      while(null !\u003d (keyOrNull \u003d s.readObject())) {\n        String key \u003d ((String)keyOrNull).intern();\n\n        if (actionListenerK \u003d\u003d key)\n          addActionListener((ActionListener)(s.readObject()));\n\n        else // skip value for unrecognized key\n          s.readObject();\n      }\n    }\n\n\n/////////////////\n// Accessibility support\n////////////////\n\n    /**\n     * Gets the {@code AccessibleContext} associated with\n     * this {@code Button}. For buttons, the\n     * {@code AccessibleContext} takes the form of an\n     * {@code AccessibleAWTButton}.\n     * A new {@code AccessibleAWTButton} instance is\n     * created if necessary.\n     *\n     * @return an {@code AccessibleAWTButton} that serves as the\n     *         {@code AccessibleContext} of this {@code Button}\n     * @since 1.3\n     */\n    @BeanProperty(expert \u003d true, description\n            \u003d \"The AccessibleContext associated with this Button.\")\n    public AccessibleContext getAccessibleContext() {\n        if (accessibleContext \u003d\u003d null) {\n            accessibleContext \u003d new AccessibleAWTButton();\n        }\n        return accessibleContext;\n    }\n\n    /**\n     * This class implements accessibility support for the\n     * {@code Button} class.  It provides an implementation of the\n     * Java Accessibility API appropriate to button user-interface elements.\n     * @since 1.3\n     */\n    protected class AccessibleAWTButton extends AccessibleAWTComponent\n        implements AccessibleAction, AccessibleValue\n    {\n        /*\n         * JDK 1.3 serialVersionUID\n         */\n        private static final long serialVersionUID \u003d -5932203980244017102L;\n\n        /**\n         * Get the accessible name of this object.\n         *\n         * @return the localized name of the object -- can be null if this\n         * object does not have a name\n         */\n        public String getAccessibleName() {\n            if (accessibleName !\u003d null) {\n                return accessibleName;\n            } else {\n                if (getLabel() \u003d\u003d null) {\n                    return super.getAccessibleName();\n                } else {\n                    return getLabel();\n                }\n            }\n        }\n\n        /**\n         * Get the AccessibleAction associated with this object.  In the\n         * implementation of the Java Accessibility API for this class,\n         * return this object, which is responsible for implementing the\n         * AccessibleAction interface on behalf of itself.\n         *\n         * @return this object\n         */\n        public AccessibleAction getAccessibleAction() {\n            return this;\n        }\n\n        /**\n         * Get the AccessibleValue associated with this object.  In the\n         * implementation of the Java Accessibility API for this class,\n         * return this object, which is responsible for implementing the\n         * AccessibleValue interface on behalf of itself.\n         *\n         * @return this object\n         */\n        public AccessibleValue getAccessibleValue() {\n            return this;\n        }\n\n        /**\n         * Returns the number of Actions available in this object.  The\n         * default behavior of a button is to have one action - toggle\n         * the button.\n         *\n         * @return 1, the number of Actions in this object\n         */\n        public int getAccessibleActionCount() {\n            return 1;\n        }\n\n        /**\n         * Return a description of the specified action of the object.\n         *\n         * @param i zero-based index of the actions\n         */\n        public String getAccessibleActionDescription(int i) {\n            if (i \u003d\u003d 0) {\n                // [[[PENDING:  WDW -- need to provide a localized string]]]\n                return \"click\";\n            } else {\n                return null;\n            }\n        }\n\n        /**\n         * Perform the specified Action on the object\n         *\n         * @param i zero-based index of actions\n         * @return true if the action was performed; else false.\n         */\n        public boolean doAccessibleAction(int i) {\n            if (i \u003d\u003d 0) {\n                // Simulate a button click\n                Toolkit.getEventQueue().postEvent(\n                        new ActionEvent(Button.this,\n                                        ActionEvent.ACTION_PERFORMED,\n                                        Button.this.getActionCommand()));\n                return true;\n            } else {\n                return false;\n            }\n        }\n\n        /**\n         * Get the value of this object as a Number.\n         *\n         * @return An Integer of 0 if this isn\u0027t selected or an Integer of 1 if\n         * this is selected.\n         * @see javax.swing.AbstractButton#isSelected()\n         */\n        public Number getCurrentAccessibleValue() {\n            return Integer.valueOf(0);\n        }\n\n        /**\n         * Set the value of this object as a Number.\n         *\n         * @return True if the value was set.\n         */\n        public boolean setCurrentAccessibleValue(Number n) {\n            return false;\n        }\n\n        /**\n         * Get the minimum value of this object as a Number.\n         *\n         * @return An Integer of 0.\n         */\n        public Number getMinimumAccessibleValue() {\n            return Integer.valueOf(0);\n        }\n\n        /**\n         * Get the maximum value of this object as a Number.\n         *\n         * @return An Integer of 0.\n         */\n        public Number getMaximumAccessibleValue() {\n            return Integer.valueOf(0);\n        }\n\n        /**\n         * Get the role of this object.\n         *\n         * @return an instance of AccessibleRole describing the role of the\n         * object\n         * @see AccessibleRole\n         */\n        public AccessibleRole getAccessibleRole() {\n            return AccessibleRole.PUSH_BUTTON;\n        }\n    } // inner class AccessibleAWTButton\n\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:339)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 16 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 24 more

Jan. 04, 2024 12:27:59 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.desktop/java/awt/Button.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:358)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 16 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 24 more

2024.01.04 12:27:59 WARN  Using indexes to guess the definition of Button
2024.01.04 12:27:59 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java

Uri: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:703)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 04, 2024 12:28:00 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.desktop/java/awt/Button.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 1995, 2015, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.awt;\n\nimport java.awt.peer.ButtonPeer;\nimport java.beans.BeanProperty;\nimport java.util.EventListener;\nimport java.awt.event.*;\nimport java.io.ObjectOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.IOException;\nimport javax.accessibility.*;\n\n/**\n * This class creates a labeled button. The application can cause\n * some action to happen when the button is pushed. This image\n * depicts three views of a \"{@code Quit}\" button as it appears\n * under the Solaris operating system:\n * \u003cp\u003e\n * \u003cimg src\u003d\"doc-files/Button-1.gif\" alt\u003d\"The following context describes the graphic\"\n * style\u003d\"float:center; margin: 7px 10px;\"\u003e\n * \u003cp\u003e\n * The first view shows the button as it appears normally.\n * The second view shows the button\n * when it has input focus. Its outline is darkened to let the\n * user know that it is an active object. The third view shows the\n * button when the user clicks the mouse over the button, and thus\n * requests that an action be performed.\n * \u003cp\u003e\n * The gesture of clicking on a button with the mouse\n * is associated with one instance of {@code ActionEvent},\n * which is sent out when the mouse is both pressed and released\n * over the button. If an application is interested in knowing\n * when the button has been pressed but not released, as a separate\n * gesture, it can specialize {@code processMouseEvent},\n * or it can register itself as a listener for mouse events by\n * calling {@code addMouseListener}. Both of these methods are\n * defined by {@code Component}, the abstract superclass of\n * all components.\n * \u003cp\u003e\n * When a button is pressed and released, AWT sends an instance\n * of {@code ActionEvent} to the button, by calling\n * {@code processEvent} on the button. The button\u0027s\n * {@code processEvent} method receives all events\n * for the button; it passes an action event along by\n * calling its own {@code processActionEvent} method.\n * The latter method passes the action event on to any action\n * listeners that have registered an interest in action\n * events generated by this button.\n * \u003cp\u003e\n * If an application wants to perform some action based on\n * a button being pressed and released, it should implement\n * {@code ActionListener} and register the new listener\n * to receive events from this button, by calling the button\u0027s\n * {@code addActionListener} method. The application can\n * make use of the button\u0027s action command as a messaging protocol.\n *\n * @author      Sami Shaio\n * @see         java.awt.event.ActionEvent\n * @see         java.awt.event.ActionListener\n * @see         java.awt.Component#processMouseEvent\n * @see         java.awt.Component#addMouseListener\n * @since       1.0\n */\npublic class Button extends Component implements Accessible {\n\n    /**\n     * The button\u0027s label.  This value may be null.\n     * @serial\n     * @see #getLabel()\n     * @see #setLabel(String)\n     */\n    String label;\n\n    /**\n     * The action to be performed once a button has been\n     * pressed.  This value may be null.\n     * @serial\n     * @see #getActionCommand()\n     * @see #setActionCommand(String)\n     */\n    String actionCommand;\n\n    transient ActionListener actionListener;\n\n    private static final String base \u003d \"button\";\n    private static int nameCounter \u003d 0;\n\n    /*\n     * JDK 1.1 serialVersionUID\n     */\n    private static final long serialVersionUID \u003d -8774683716313001058L;\n\n\n    static {\n        /* ensure that the necessary native libraries are loaded */\n        Toolkit.loadLibraries();\n        if (!GraphicsEnvironment.isHeadless()) {\n            initIDs();\n        }\n    }\n\n    /**\n     * Initialize JNI field and method IDs for fields that may be\n     * accessed from C.\n     */\n    private static native void initIDs();\n\n    /**\n     * Constructs a button with an empty string for its label.\n     *\n     * @exception HeadlessException if GraphicsEnvironment.isHeadless()\n     * returns true\n     * @see java.awt.GraphicsEnvironment#isHeadless\n     */\n    public Button() throws HeadlessException {\n        this(\"\");\n    }\n\n    /**\n     * Constructs a button with the specified label.\n     *\n     * @param label  a string label for the button, or\n     *               {@code null} for no label\n     * @exception HeadlessException if GraphicsEnvironment.isHeadless()\n     * returns true\n     * @see java.awt.GraphicsEnvironment#isHeadless\n     */\n    public Button(String label) throws HeadlessException {\n        GraphicsEnvironment.checkHeadless();\n        this.label \u003d label;\n    }\n\n    /**\n     * Construct a name for this component.  Called by getName() when the\n     * name is null.\n     */\n    String constructComponentName() {\n        synchronized (Button.class) {\n            return base + nameCounter++;\n        }\n    }\n\n    /**\n     * Creates the peer of the button.  The button\u0027s peer allows the\n     * application to change the look of the button without changing\n     * its functionality.\n     *\n     * @see     java.awt.Component#getToolkit()\n     */\n    public void addNotify() {\n        synchronized(getTreeLock()) {\n            if (peer \u003d\u003d null)\n                peer \u003d getComponentFactory().createButton(this);\n            super.addNotify();\n        }\n    }\n\n    /**\n     * Gets the label of this button.\n     *\n     * @return    the button\u0027s label, or {@code null}\n     *                if the button has no label.\n     * @see       java.awt.Button#setLabel\n     */\n    public String getLabel() {\n        return label;\n    }\n\n    /**\n     * Sets the button\u0027s label to be the specified string.\n     *\n     * @param     label   the new label, or {@code null}\n     *                if the button has no label.\n     * @see       java.awt.Button#getLabel\n     */\n    public void setLabel(String label) {\n        boolean testvalid \u003d false;\n\n        synchronized (this) {\n            if (label !\u003d this.label \u0026\u0026 (this.label \u003d\u003d null ||\n                                        !this.label.equals(label))) {\n                this.label \u003d label;\n                ButtonPeer peer \u003d (ButtonPeer)this.peer;\n                if (peer !\u003d null) {\n                    peer.setLabel(label);\n                }\n                testvalid \u003d true;\n            }\n        }\n\n        // This could change the preferred size of the Component.\n        if (testvalid) {\n            invalidateIfValid();\n        }\n    }\n\n    /**\n     * Sets the command name for the action event fired\n     * by this button. By default this action command is\n     * set to match the label of the button.\n     *\n     * @param     command  a string used to set the button\u0027s\n     *                  action command.\n     *            If the string is {@code null} then the action command\n     *            is set to match the label of the button.\n     * @see       java.awt.event.ActionEvent\n     * @since     1.1\n     */\n    public void setActionCommand(String command) {\n        actionCommand \u003d command;\n    }\n\n    /**\n     * Returns the command name of the action event fired by this button.\n     * If the command name is {@code null} (default) then this method\n     * returns the label of the button.\n     *\n     * @return the action command name (or label) for this button\n     */\n    public String getActionCommand() {\n        return (actionCommand \u003d\u003d null? label : actionCommand);\n    }\n\n    /**\n     * Adds the specified action listener to receive action events from\n     * this button. Action events occur when a user presses or releases\n     * the mouse over this button.\n     * If l is null, no exception is thrown and no action is performed.\n     * \u003cp\u003eRefer to \u003ca href\u003d\"doc-files/AWTThreadIssues.html#ListenersThreads\"\n     * \u003eAWT Threading Issues\u003c/a\u003e for details on AWT\u0027s threading model.\n     *\n     * @param         l the action listener\n     * @see           #removeActionListener\n     * @see           #getActionListeners\n     * @see           java.awt.event.ActionListener\n     * @since         1.1\n     */\n    public synchronized void addActionListener(ActionListener l) {\n        if (l \u003d\u003d null) {\n            return;\n        }\n        actionListener \u003d AWTEventMulticaster.add(actionListener, l);\n        newEventsOnly \u003d true;\n    }\n\n    /**\n     * Removes the specified action listener so that it no longer\n     * receives action events from this button. Action events occur\n     * when a user presses or releases the mouse over this button.\n     * If l is null, no exception is thrown and no action is performed.\n     * \u003cp\u003eRefer to \u003ca href\u003d\"doc-files/AWTThreadIssues.html#ListenersThreads\"\n     * \u003eAWT Threading Issues\u003c/a\u003e for details on AWT\u0027s threading model.\n     *\n     * @param           l     the action listener\n     * @see             #addActionListener\n     * @see             #getActionListeners\n     * @see             java.awt.event.ActionListener\n     * @since           1.1\n     */\n    public synchronized void removeActionListener(ActionListener l) {\n        if (l \u003d\u003d null) {\n            return;\n        }\n        actionListener \u003d AWTEventMulticaster.remove(actionListener, l);\n    }\n\n    /**\n     * Returns an array of all the action listeners\n     * registered on this button.\n     *\n     * @return all of this button\u0027s {@code ActionListener}s\n     *         or an empty array if no action\n     *         listeners are currently registered\n     *\n     * @see             #addActionListener\n     * @see             #removeActionListener\n     * @see             java.awt.event.ActionListener\n     * @since 1.4\n     */\n    public synchronized ActionListener[] getActionListeners() {\n        return getListeners(ActionListener.class);\n    }\n\n    /**\n     * Returns an array of all the objects currently registered\n     * as \u003ccode\u003e\u003cem\u003eFoo\u003c/em\u003eListener\u003c/code\u003es\n     * upon this {@code Button}.\n     * \u003ccode\u003e\u003cem\u003eFoo\u003c/em\u003eListener\u003c/code\u003es are registered using the\n     * \u003ccode\u003eadd\u003cem\u003eFoo\u003c/em\u003eListener\u003c/code\u003e method.\n     *\n     * \u003cp\u003e\n     * You can specify the {@code listenerType} argument\n     * with a class literal, such as\n     * \u003ccode\u003e\u003cem\u003eFoo\u003c/em\u003eListener.class\u003c/code\u003e.\n     * For example, you can query a\n     * {@code Button b}\n     * for its action listeners with the following code:\n     *\n     * \u003cpre\u003eActionListener[] als \u003d (ActionListener[])(b.getListeners(ActionListener.class));\u003c/pre\u003e\n     *\n     * If no such listeners exist, this method returns an empty array.\n     *\n     * @param listenerType the type of listeners requested; this parameter\n     *          should specify an interface that descends from\n     *          {@code java.util.EventListener}\n     * @return an array of all objects registered as\n     *          \u003ccode\u003e\u003cem\u003eFoo\u003c/em\u003eListener\u003c/code\u003es on this button,\n     *          or an empty array if no such\n     *          listeners have been added\n     * @exception ClassCastException if {@code listenerType}\n     *          doesn\u0027t specify a class or interface that implements\n     *          {@code java.util.EventListener}\n     *\n     * @see #getActionListeners\n     * @since 1.3\n     */\n    public \u003cT extends EventListener\u003e T[] getListeners(Class\u003cT\u003e listenerType) {\n        EventListener l \u003d null;\n        if  (listenerType \u003d\u003d ActionListener.class) {\n            l \u003d actionListener;\n        } else {\n            return super.getListeners(listenerType);\n        }\n        return AWTEventMulticaster.getListeners(l, listenerType);\n    }\n\n    // REMIND: remove when filtering is done at lower level\n    boolean eventEnabled(AWTEvent e) {\n        if (e.id \u003d\u003d ActionEvent.ACTION_PERFORMED) {\n            if ((eventMask \u0026 AWTEvent.ACTION_EVENT_MASK) !\u003d 0 ||\n                actionListener !\u003d null) {\n                return true;\n            }\n            return false;\n        }\n        return super.eventEnabled(e);\n    }\n\n    /**\n     * Processes events on this button. If an event is\n     * an instance of {@code ActionEvent}, this method invokes\n     * the {@code processActionEvent} method. Otherwise,\n     * it invokes {@code processEvent} on the superclass.\n     * \u003cp\u003eNote that if the event parameter is {@code null}\n     * the behavior is unspecified and may result in an\n     * exception.\n     *\n     * @param        e the event\n     * @see          java.awt.event.ActionEvent\n     * @see          java.awt.Button#processActionEvent\n     * @since        1.1\n     */\n    protected void processEvent(AWTEvent e) {\n        if (e instanceof ActionEvent) {\n            processActionEvent((ActionEvent)e);\n            return;\n        }\n        super.processEvent(e);\n    }\n\n    /**\n     * Processes action events occurring on this button\n     * by dispatching them to any registered\n     * {@code ActionListener} objects.\n     * \u003cp\u003e\n     * This method is not called unless action events are\n     * enabled for this button. Action events are enabled\n     * when one of the following occurs:\n     * \u003cul\u003e\n     * \u003cli\u003eAn {@code ActionListener} object is registered\n     * via {@code addActionListener}.\n     * \u003cli\u003eAction events are enabled via {@code enableEvents}.\n     * \u003c/ul\u003e\n     * \u003cp\u003eNote that if the event parameter is {@code null}\n     * the behavior is unspecified and may result in an\n     * exception.\n     *\n     * @param       e the action event\n     * @see         java.awt.event.ActionListener\n     * @see         java.awt.Button#addActionListener\n     * @see         java.awt.Component#enableEvents\n     * @since       1.1\n     */\n    protected void processActionEvent(ActionEvent e) {\n        ActionListener listener \u003d actionListener;\n        if (listener !\u003d null) {\n            listener.actionPerformed(e);\n        }\n    }\n\n    /**\n     * Returns a string representing the state of this {@code Button}.\n     * This method is intended to be used only for debugging purposes, and the\n     * content and format of the returned string may vary between\n     * implementations. The returned string may be empty but may not be\n     * {@code null}.\n     *\n     * @return     the parameter string of this button\n     */\n    protected String paramString() {\n        return super.paramString() + \",label\u003d\" + label;\n    }\n\n\n    /* Serialization support.\n     */\n\n    /*\n     * Button Serial Data Version.\n     * @serial\n     */\n    private int buttonSerializedDataVersion \u003d 1;\n\n    /**\n     * Writes default serializable fields to stream.  Writes\n     * a list of serializable {@code ActionListeners}\n     * as optional data.  The non-serializable\n     * {@code ActionListeners} are detected and\n     * no attempt is made to serialize them.\n     *\n     * @serialData {@code null} terminated sequence of 0 or\n     *   more pairs: the pair consists of a {@code String}\n     *   and an {@code Object}; the {@code String}\n     *   indicates the type of object and is one of the following:\n     *   {@code actionListenerK} indicating an\n     *     {@code ActionListener} object\n     *\n     * @param s the {@code ObjectOutputStream} to write\n     * @see AWTEventMulticaster#save(ObjectOutputStream, String, EventListener)\n     * @see java.awt.Component#actionListenerK\n     * @see #readObject(ObjectInputStream)\n     */\n    private void writeObject(ObjectOutputStream s)\n      throws IOException\n    {\n      s.defaultWriteObject();\n\n      AWTEventMulticaster.save(s, actionListenerK, actionListener);\n      s.writeObject(null);\n    }\n\n    /**\n     * Reads the {@code ObjectInputStream} and if\n     * it isn\u0027t {@code null} adds a listener to\n     * receive action events fired by the button.\n     * Unrecognized keys or values will be ignored.\n     *\n     * @param s the {@code ObjectInputStream} to read\n     * @exception HeadlessException if\n     *   {@code GraphicsEnvironment.isHeadless} returns\n     *   {@code true}\n     * @serial\n     * @see #removeActionListener(ActionListener)\n     * @see #addActionListener(ActionListener)\n     * @see java.awt.GraphicsEnvironment#isHeadless\n     * @see #writeObject(ObjectOutputStream)\n     */\n    private void readObject(ObjectInputStream s)\n      throws ClassNotFoundException, IOException, HeadlessException\n    {\n      GraphicsEnvironment.checkHeadless();\n      s.defaultReadObject();\n\n      Object keyOrNull;\n      while(null !\u003d (keyOrNull \u003d s.readObject())) {\n        String key \u003d ((String)keyOrNull).intern();\n\n        if (actionListenerK \u003d\u003d key)\n          addActionListener((ActionListener)(s.readObject()));\n\n        else // skip value for unrecognized key\n          s.readObject();\n      }\n    }\n\n\n/////////////////\n// Accessibility support\n////////////////\n\n    /**\n     * Gets the {@code AccessibleContext} associated with\n     * this {@code Button}. For buttons, the\n     * {@code AccessibleContext} takes the form of an\n     * {@code AccessibleAWTButton}.\n     * A new {@code AccessibleAWTButton} instance is\n     * created if necessary.\n     *\n     * @return an {@code AccessibleAWTButton} that serves as the\n     *         {@code AccessibleContext} of this {@code Button}\n     * @since 1.3\n     */\n    @BeanProperty(expert \u003d true, description\n            \u003d \"The AccessibleContext associated with this Button.\")\n    public AccessibleContext getAccessibleContext() {\n        if (accessibleContext \u003d\u003d null) {\n            accessibleContext \u003d new AccessibleAWTButton();\n        }\n        return accessibleContext;\n    }\n\n    /**\n     * This class implements accessibility support for the\n     * {@code Button} class.  It provides an implementation of the\n     * Java Accessibility API appropriate to button user-interface elements.\n     * @since 1.3\n     */\n    protected class AccessibleAWTButton extends AccessibleAWTComponent\n        implements AccessibleAction, AccessibleValue\n    {\n        /*\n         * JDK 1.3 serialVersionUID\n         */\n        private static final long serialVersionUID \u003d -5932203980244017102L;\n\n        /**\n         * Get the accessible name of this object.\n         *\n         * @return the localized name of the object -- can be null if this\n         * object does not have a name\n         */\n        public String getAccessibleName() {\n            if (accessibleName !\u003d null) {\n                return accessibleName;\n            } else {\n                if (getLabel() \u003d\u003d null) {\n                    return super.getAccessibleName();\n                } else {\n                    return getLabel();\n                }\n            }\n        }\n\n        /**\n         * Get the AccessibleAction associated with this object.  In the\n         * implementation of the Java Accessibility API for this class,\n         * return this object, which is responsible for implementing the\n         * AccessibleAction interface on behalf of itself.\n         *\n         * @return this object\n         */\n        public AccessibleAction getAccessibleAction() {\n            return this;\n        }\n\n        /**\n         * Get the AccessibleValue associated with this object.  In the\n         * implementation of the Java Accessibility API for this class,\n         * return this object, which is responsible for implementing the\n         * AccessibleValue interface on behalf of itself.\n         *\n         * @return this object\n         */\n        public AccessibleValue getAccessibleValue() {\n            return this;\n        }\n\n        /**\n         * Returns the number of Actions available in this object.  The\n         * default behavior of a button is to have one action - toggle\n         * the button.\n         *\n         * @return 1, the number of Actions in this object\n         */\n        public int getAccessibleActionCount() {\n            return 1;\n        }\n\n        /**\n         * Return a description of the specified action of the object.\n         *\n         * @param i zero-based index of the actions\n         */\n        public String getAccessibleActionDescription(int i) {\n            if (i \u003d\u003d 0) {\n                // [[[PENDING:  WDW -- need to provide a localized string]]]\n                return \"click\";\n            } else {\n                return null;\n            }\n        }\n\n        /**\n         * Perform the specified Action on the object\n         *\n         * @param i zero-based index of actions\n         * @return true if the action was performed; else false.\n         */\n        public boolean doAccessibleAction(int i) {\n            if (i \u003d\u003d 0) {\n                // Simulate a button click\n                Toolkit.getEventQueue().postEvent(\n                        new ActionEvent(Button.this,\n                                        ActionEvent.ACTION_PERFORMED,\n                                        Button.this.getActionCommand()));\n                return true;\n            } else {\n                return false;\n            }\n        }\n\n        /**\n         * Get the value of this object as a Number.\n         *\n         * @return An Integer of 0 if this isn\u0027t selected or an Integer of 1 if\n         * this is selected.\n         * @see javax.swing.AbstractButton#isSelected()\n         */\n        public Number getCurrentAccessibleValue() {\n            return Integer.valueOf(0);\n        }\n\n        /**\n         * Set the value of this object as a Number.\n         *\n         * @return True if the value was set.\n         */\n        public boolean setCurrentAccessibleValue(Number n) {\n            return false;\n        }\n\n        /**\n         * Get the minimum value of this object as a Number.\n         *\n         * @return An Integer of 0.\n         */\n        public Number getMinimumAccessibleValue() {\n            return Integer.valueOf(0);\n        }\n\n        /**\n         * Get the maximum value of this object as a Number.\n         *\n         * @return An Integer of 0.\n         */\n        public Number getMaximumAccessibleValue() {\n            return Integer.valueOf(0);\n        }\n\n        /**\n         * Get the role of this object.\n         *\n         * @return an instance of AccessibleRole describing the role of the\n         * object\n         * @see AccessibleRole\n         */\n        public AccessibleRole getAccessibleRole() {\n            return AccessibleRole.PUSH_BUTTON;\n        }\n    } // inner class AccessibleAWTButton\n\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:339)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 16 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 24 more

Jan. 04, 2024 12:28:00 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "metals/didFocusTextDocument",
  "params": [
    "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.desktop/java/awt/Button.java"
  ]
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didFocus(WorkspaceLspService.scala:627)
	at scala.meta.metals.lsp.DelegatingScalaService.didFocus(DelegatingScalaService.scala:43)
	... 16 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 24 more

2024.01.04 12:27:59 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java

Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.desktop/java/awt/Button.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.semanticTokensFull(WorkspaceLspService.scala:481)
	scala.meta.metals.lsp.DelegatingScalaService.semanticTokensFull(DelegatingScalaService.scala:208)
	jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 04, 2024 12:28:00 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
java.util.concurrent.CompletionException: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:331)
	at java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:346)
	at java.base/java.util.concurrent.CompletableFuture$UniAccept.tryFire(CompletableFuture.java:704)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:506)
	at java.base/java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:2088)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1(CancelTokens.scala:40)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1$adapted(CancelTokens.scala:38)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:484)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.Compilers.semanticTokens(Compilers.scala:426)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$semanticTokensFull$2(MetalsLspService.scala:1605)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:470)
	... 3 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 12 more

2024.01.04 12:27:59 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java

Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.desktop/java/awt/Button.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.foldingRange(WorkspaceLspService.scala:471)
	scala.meta.metals.lsp.DelegatingScalaService.foldingRange(DelegatingScalaService.scala:155)
	jdk.internal.reflect.GeneratedMethodAccessor6.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 04, 2024 12:28:00 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor6.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$foldingRange$1(MetalsLspService.scala:1683)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.foldingRange(MetalsLspService.scala:1682)
	at scala.meta.internal.metals.WorkspaceLspService.foldingRange(WorkspaceLspService.scala:471)
	at scala.meta.metals.lsp.DelegatingScalaService.foldingRange(DelegatingScalaService.scala:155)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 26 more

2024.01.04 12:27:59 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java

Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.desktop/java/awt/Button.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.codeLens(WorkspaceLspService.scala:466)
	scala.meta.metals.lsp.DelegatingScalaService.codeLens(DelegatingScalaService.scala:150)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 04, 2024 12:28:00 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
java.util.concurrent.CompletionException: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:331)
	at java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:346)
	at java.base/java.util.concurrent.CompletableFuture$UniAccept.tryFire(CompletableFuture.java:704)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:506)
	at java.base/java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:2088)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1(CancelTokens.scala:40)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1$adapted(CancelTokens.scala:38)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:484)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$codeLens$3(MetalsLspService.scala:1673)
	at scala.meta.internal.metals.TimerProvider.timedThunk(TimerProvider.scala:25)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$codeLens$2(MetalsLspService.scala:1672)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	... 3 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 13 more

Jan. 04, 2024 12:28:09 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 749
Jan. 04, 2024 12:28:09 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 750
Jan. 04, 2024 12:28:09 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 751
2024.01.04 12:28:15 WARN  Using indexes to guess the definition of Button
Jan. 04, 2024 1:11:09 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.desktop/java/awt/Button.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:358)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 16 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 24 more

Jan. 04, 2024 1:16:53 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 849
Exception in thread "pool-7-thread-2" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Jan. 04, 2024 1:34:55 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2036
Exception in thread "pool-7-thread-3" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Jan. 04, 2024 1:36:01 P.M. scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\.reports\metals-full\2024-01-04\r_compiler-error_(livechart)_13-36-01-344.md
2024.01.04 13:36:25 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Object.java

Uri: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Object.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:703)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	jdk.internal.reflect.GeneratedMethodAccessor21.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 04, 2024 1:36:25 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.base/java/lang/Object.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 1994, 2017, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.lang;\n\nimport jdk.internal.HotSpotIntrinsicCandidate;\n\n/**\n * Class {@code Object} is the root of the class hierarchy.\n * Every class has {@code Object} as a superclass. All objects,\n * including arrays, implement the methods of this class.\n *\n * @author  unascribed\n * @see     java.lang.Class\n * @since   1.0\n */\npublic class Object {\n\n    private static native void registerNatives();\n    static {\n        registerNatives();\n    }\n\n    /**\n     * Constructs a new object.\n     */\n    @HotSpotIntrinsicCandidate\n    public Object() {}\n\n    /**\n     * Returns the runtime class of this {@code Object}. The returned\n     * {@code Class} object is the object that is locked by {@code\n     * static synchronized} methods of the represented class.\n     *\n     * \u003cp\u003e\u003cb\u003eThe actual result type is {@code Class\u003c? extends |X|\u003e}\n     * where {@code |X|} is the erasure of the static type of the\n     * expression on which {@code getClass} is called.\u003c/b\u003e For\n     * example, no cast is required in this code fragment:\u003c/p\u003e\n     *\n     * \u003cp\u003e\n     * {@code Number n \u003d 0;                             }\u003cbr\u003e\n     * {@code Class\u003c? extends Number\u003e c \u003d n.getClass(); }\n     * \u003c/p\u003e\n     *\n     * @return The {@code Class} object that represents the runtime\n     *         class of this object.\n     * @jls 15.8.2 Class Literals\n     */\n    @HotSpotIntrinsicCandidate\n    public final native Class\u003c?\u003e getClass();\n\n    /**\n     * Returns a hash code value for the object. This method is\n     * supported for the benefit of hash tables such as those provided by\n     * {@link java.util.HashMap}.\n     * \u003cp\u003e\n     * The general contract of {@code hashCode} is:\n     * \u003cul\u003e\n     * \u003cli\u003eWhenever it is invoked on the same object more than once during\n     *     an execution of a Java application, the {@code hashCode} method\n     *     must consistently return the same integer, provided no information\n     *     used in {@code equals} comparisons on the object is modified.\n     *     This integer need not remain consistent from one execution of an\n     *     application to another execution of the same application.\n     * \u003cli\u003eIf two objects are equal according to the {@code equals(Object)}\n     *     method, then calling the {@code hashCode} method on each of\n     *     the two objects must produce the same integer result.\n     * \u003cli\u003eIt is \u003cem\u003enot\u003c/em\u003e required that if two objects are unequal\n     *     according to the {@link java.lang.Object#equals(java.lang.Object)}\n     *     method, then calling the {@code hashCode} method on each of the\n     *     two objects must produce distinct integer results.  However, the\n     *     programmer should be aware that producing distinct integer results\n     *     for unequal objects may improve the performance of hash tables.\n     * \u003c/ul\u003e\n     * \u003cp\u003e\n     * As much as is reasonably practical, the hashCode method defined\n     * by class {@code Object} does return distinct integers for\n     * distinct objects. (The hashCode may or may not be implemented\n     * as some function of an object\u0027s memory address at some point\n     * in time.)\n     *\n     * @return  a hash code value for this object.\n     * @see     java.lang.Object#equals(java.lang.Object)\n     * @see     java.lang.System#identityHashCode\n     */\n    @HotSpotIntrinsicCandidate\n    public native int hashCode();\n\n    /**\n     * Indicates whether some other object is \"equal to\" this one.\n     * \u003cp\u003e\n     * The {@code equals} method implements an equivalence relation\n     * on non-null object references:\n     * \u003cul\u003e\n     * \u003cli\u003eIt is \u003ci\u003ereflexive\u003c/i\u003e: for any non-null reference value\n     *     {@code x}, {@code x.equals(x)} should return\n     *     {@code true}.\n     * \u003cli\u003eIt is \u003ci\u003esymmetric\u003c/i\u003e: for any non-null reference values\n     *     {@code x} and {@code y}, {@code x.equals(y)}\n     *     should return {@code true} if and only if\n     *     {@code y.equals(x)} returns {@code true}.\n     * \u003cli\u003eIt is \u003ci\u003etransitive\u003c/i\u003e: for any non-null reference values\n     *     {@code x}, {@code y}, and {@code z}, if\n     *     {@code x.equals(y)} returns {@code true} and\n     *     {@code y.equals(z)} returns {@code true}, then\n     *     {@code x.equals(z)} should return {@code true}.\n     * \u003cli\u003eIt is \u003ci\u003econsistent\u003c/i\u003e: for any non-null reference values\n     *     {@code x} and {@code y}, multiple invocations of\n     *     {@code x.equals(y)} consistently return {@code true}\n     *     or consistently return {@code false}, provided no\n     *     information used in {@code equals} comparisons on the\n     *     objects is modified.\n     * \u003cli\u003eFor any non-null reference value {@code x},\n     *     {@code x.equals(null)} should return {@code false}.\n     * \u003c/ul\u003e\n     * \u003cp\u003e\n     * The {@code equals} method for class {@code Object} implements\n     * the most discriminating possible equivalence relation on objects;\n     * that is, for any non-null reference values {@code x} and\n     * {@code y}, this method returns {@code true} if and only\n     * if {@code x} and {@code y} refer to the same object\n     * ({@code x \u003d\u003d y} has the value {@code true}).\n     * \u003cp\u003e\n     * Note that it is generally necessary to override the {@code hashCode}\n     * method whenever this method is overridden, so as to maintain the\n     * general contract for the {@code hashCode} method, which states\n     * that equal objects must have equal hash codes.\n     *\n     * @param   obj   the reference object with which to compare.\n     * @return  {@code true} if this object is the same as the obj\n     *          argument; {@code false} otherwise.\n     * @see     #hashCode()\n     * @see     java.util.HashMap\n     */\n    public boolean equals(Object obj) {\n        return (this \u003d\u003d obj);\n    }\n\n    /**\n     * Creates and returns a copy of this object.  The precise meaning\n     * of \"copy\" may depend on the class of the object. The general\n     * intent is that, for any object {@code x}, the expression:\n     * \u003cblockquote\u003e\n     * \u003cpre\u003e\n     * x.clone() !\u003d x\u003c/pre\u003e\u003c/blockquote\u003e\n     * will be true, and that the expression:\n     * \u003cblockquote\u003e\n     * \u003cpre\u003e\n     * x.clone().getClass() \u003d\u003d x.getClass()\u003c/pre\u003e\u003c/blockquote\u003e\n     * will be {@code true}, but these are not absolute requirements.\n     * While it is typically the case that:\n     * \u003cblockquote\u003e\n     * \u003cpre\u003e\n     * x.clone().equals(x)\u003c/pre\u003e\u003c/blockquote\u003e\n     * will be {@code true}, this is not an absolute requirement.\n     * \u003cp\u003e\n     * By convention, the returned object should be obtained by calling\n     * {@code super.clone}.  If a class and all of its superclasses (except\n     * {@code Object}) obey this convention, it will be the case that\n     * {@code x.clone().getClass() \u003d\u003d x.getClass()}.\n     * \u003cp\u003e\n     * By convention, the object returned by this method should be independent\n     * of this object (which is being cloned).  To achieve this independence,\n     * it may be necessary to modify one or more fields of the object returned\n     * by {@code super.clone} before returning it.  Typically, this means\n     * copying any mutable objects that comprise the internal \"deep structure\"\n     * of the object being cloned and replacing the references to these\n     * objects with references to the copies.  If a class contains only\n     * primitive fields or references to immutable objects, then it is usually\n     * the case that no fields in the object returned by {@code super.clone}\n     * need to be modified.\n     * \u003cp\u003e\n     * The method {@code clone} for class {@code Object} performs a\n     * specific cloning operation. First, if the class of this object does\n     * not implement the interface {@code Cloneable}, then a\n     * {@code CloneNotSupportedException} is thrown. Note that all arrays\n     * are considered to implement the interface {@code Cloneable} and that\n     * the return type of the {@code clone} method of an array type {@code T[]}\n     * is {@code T[]} where T is any reference or primitive type.\n     * Otherwise, this method creates a new instance of the class of this\n     * object and initializes all its fields with exactly the contents of\n     * the corresponding fields of this object, as if by assignment; the\n     * contents of the fields are not themselves cloned. Thus, this method\n     * performs a \"shallow copy\" of this object, not a \"deep copy\" operation.\n     * \u003cp\u003e\n     * The class {@code Object} does not itself implement the interface\n     * {@code Cloneable}, so calling the {@code clone} method on an object\n     * whose class is {@code Object} will result in throwing an\n     * exception at run time.\n     *\n     * @return     a clone of this instance.\n     * @throws  CloneNotSupportedException  if the object\u0027s class does not\n     *               support the {@code Cloneable} interface. Subclasses\n     *               that override the {@code clone} method can also\n     *               throw this exception to indicate that an instance cannot\n     *               be cloned.\n     * @see java.lang.Cloneable\n     */\n    @HotSpotIntrinsicCandidate\n    protected native Object clone() throws CloneNotSupportedException;\n\n    /**\n     * Returns a string representation of the object. In general, the\n     * {@code toString} method returns a string that\n     * \"textually represents\" this object. The result should\n     * be a concise but informative representation that is easy for a\n     * person to read.\n     * It is recommended that all subclasses override this method.\n     * \u003cp\u003e\n     * The {@code toString} method for class {@code Object}\n     * returns a string consisting of the name of the class of which the\n     * object is an instance, the at-sign character `{@code @}\u0027, and\n     * the unsigned hexadecimal representation of the hash code of the\n     * object. In other words, this method returns a string equal to the\n     * value of:\n     * \u003cblockquote\u003e\n     * \u003cpre\u003e\n     * getClass().getName() + \u0027@\u0027 + Integer.toHexString(hashCode())\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @return  a string representation of the object.\n     */\n    public String toString() {\n        return getClass().getName() + \"@\" + Integer.toHexString(hashCode());\n    }\n\n    /**\n     * Wakes up a single thread that is waiting on this object\u0027s\n     * monitor. If any threads are waiting on this object, one of them\n     * is chosen to be awakened. The choice is arbitrary and occurs at\n     * the discretion of the implementation. A thread waits on an object\u0027s\n     * monitor by calling one of the {@code wait} methods.\n     * \u003cp\u003e\n     * The awakened thread will not be able to proceed until the current\n     * thread relinquishes the lock on this object. The awakened thread will\n     * compete in the usual manner with any other threads that might be\n     * actively competing to synchronize on this object; for example, the\n     * awakened thread enjoys no reliable privilege or disadvantage in being\n     * the next thread to lock this object.\n     * \u003cp\u003e\n     * This method should only be called by a thread that is the owner\n     * of this object\u0027s monitor. A thread becomes the owner of the\n     * object\u0027s monitor in one of three ways:\n     * \u003cul\u003e\n     * \u003cli\u003eBy executing a synchronized instance method of that object.\n     * \u003cli\u003eBy executing the body of a {@code synchronized} statement\n     *     that synchronizes on the object.\n     * \u003cli\u003eFor objects of type {@code Class,} by executing a\n     *     synchronized static method of that class.\n     * \u003c/ul\u003e\n     * \u003cp\u003e\n     * Only one thread at a time can own an object\u0027s monitor.\n     *\n     * @throws  IllegalMonitorStateException  if the current thread is not\n     *               the owner of this object\u0027s monitor.\n     * @see        java.lang.Object#notifyAll()\n     * @see        java.lang.Object#wait()\n     */\n    @HotSpotIntrinsicCandidate\n    public final native void notify();\n\n    /**\n     * Wakes up all threads that are waiting on this object\u0027s monitor. A\n     * thread waits on an object\u0027s monitor by calling one of the\n     * {@code wait} methods.\n     * \u003cp\u003e\n     * The awakened threads will not be able to proceed until the current\n     * thread relinquishes the lock on this object. The awakened threads\n     * will compete in the usual manner with any other threads that might\n     * be actively competing to synchronize on this object; for example,\n     * the awakened threads enjoy no reliable privilege or disadvantage in\n     * being the next thread to lock this object.\n     * \u003cp\u003e\n     * This method should only be called by a thread that is the owner\n     * of this object\u0027s monitor. See the {@code notify} method for a\n     * description of the ways in which a thread can become the owner of\n     * a monitor.\n     *\n     * @throws  IllegalMonitorStateException  if the current thread is not\n     *               the owner of this object\u0027s monitor.\n     * @see        java.lang.Object#notify()\n     * @see        java.lang.Object#wait()\n     */\n    @HotSpotIntrinsicCandidate\n    public final native void notifyAll();\n\n    /**\n     * Causes the current thread to wait until it is awakened, typically\n     * by being \u003cem\u003enotified\u003c/em\u003e or \u003cem\u003einterrupted\u003c/em\u003e.\n     * \u003cp\u003e\n     * In all respects, this method behaves as if {@code wait(0L, 0)}\n     * had been called. See the specification of the {@link #wait(long, int)} method\n     * for details.\n     *\n     * @throws IllegalMonitorStateException if the current thread is not\n     *         the owner of the object\u0027s monitor\n     * @throws InterruptedException if any thread interrupted the current thread before or\n     *         while the current thread was waiting. The \u003cem\u003einterrupted status\u003c/em\u003e of the\n     *         current thread is cleared when this exception is thrown.\n     * @see    #notify()\n     * @see    #notifyAll()\n     * @see    #wait(long)\n     * @see    #wait(long, int)\n     */\n    public final void wait() throws InterruptedException {\n        wait(0L);\n    }\n\n    /**\n     * Causes the current thread to wait until it is awakened, typically\n     * by being \u003cem\u003enotified\u003c/em\u003e or \u003cem\u003einterrupted\u003c/em\u003e, or until a\n     * certain amount of real time has elapsed.\n     * \u003cp\u003e\n     * In all respects, this method behaves as if {@code wait(timeoutMillis, 0)}\n     * had been called. See the specification of the {@link #wait(long, int)} method\n     * for details.\n     *\n     * @param  timeoutMillis the maximum time to wait, in milliseconds\n     * @throws IllegalArgumentException if {@code timeoutMillis} is negative\n     * @throws IllegalMonitorStateException if the current thread is not\n     *         the owner of the object\u0027s monitor\n     * @throws InterruptedException if any thread interrupted the current thread before or\n     *         while the current thread was waiting. The \u003cem\u003einterrupted status\u003c/em\u003e of the\n     *         current thread is cleared when this exception is thrown.\n     * @see    #notify()\n     * @see    #notifyAll()\n     * @see    #wait()\n     * @see    #wait(long, int)\n     */\n    public final native void wait(long timeoutMillis) throws InterruptedException;\n\n    /**\n     * Causes the current thread to wait until it is awakened, typically\n     * by being \u003cem\u003enotified\u003c/em\u003e or \u003cem\u003einterrupted\u003c/em\u003e, or until a\n     * certain amount of real time has elapsed.\n     * \u003cp\u003e\n     * The current thread must own this object\u0027s monitor lock. See the\n     * {@link #notify notify} method for a description of the ways in which\n     * a thread can become the owner of a monitor lock.\n     * \u003cp\u003e\n     * This method causes the current thread (referred to here as \u003cvar\u003eT\u003c/var\u003e) to\n     * place itself in the wait set for this object and then to relinquish any\n     * and all synchronization claims on this object. Note that only the locks\n     * on this object are relinquished; any other objects on which the current\n     * thread may be synchronized remain locked while the thread waits.\n     * \u003cp\u003e\n     * Thread \u003cvar\u003eT\u003c/var\u003e then becomes disabled for thread scheduling purposes\n     * and lies dormant until one of the following occurs:\n     * \u003cul\u003e\n     * \u003cli\u003eSome other thread invokes the {@code notify} method for this\n     * object and thread \u003cvar\u003eT\u003c/var\u003e happens to be arbitrarily chosen as\n     * the thread to be awakened.\n     * \u003cli\u003eSome other thread invokes the {@code notifyAll} method for this\n     * object.\n     * \u003cli\u003eSome other thread {@linkplain Thread#interrupt() interrupts}\n     * thread \u003cvar\u003eT\u003c/var\u003e.\n     * \u003cli\u003eThe specified amount of real time has elapsed, more or less.\n     * The amount of real time, in nanoseconds, is given by the expression\n     * {@code 1000000 * timeoutMillis + nanos}. If {@code timeoutMillis} and {@code nanos}\n     * are both zero, then real time is not taken into consideration and the\n     * thread waits until awakened by one of the other causes.\n     * \u003cli\u003eThread \u003cvar\u003eT\u003c/var\u003e is awakened spuriously. (See below.)\n     * \u003c/ul\u003e\n     * \u003cp\u003e\n     * The thread \u003cvar\u003eT\u003c/var\u003e is then removed from the wait set for this\n     * object and re-enabled for thread scheduling. It competes in the\n     * usual manner with other threads for the right to synchronize on the\n     * object; once it has regained control of the object, all its\n     * synchronization claims on the object are restored to the status quo\n     * ante - that is, to the situation as of the time that the {@code wait}\n     * method was invoked. Thread \u003cvar\u003eT\u003c/var\u003e then returns from the\n     * invocation of the {@code wait} method. Thus, on return from the\n     * {@code wait} method, the synchronization state of the object and of\n     * thread {@code T} is exactly as it was when the {@code wait} method\n     * was invoked.\n     * \u003cp\u003e\n     * A thread can wake up without being notified, interrupted, or timing out, a\n     * so-called \u003cem\u003espurious wakeup\u003c/em\u003e.  While this will rarely occur in practice,\n     * applications must guard against it by testing for the condition that should\n     * have caused the thread to be awakened, and continuing to wait if the condition\n     * is not satisfied. See the example below.\n     * \u003cp\u003e\n     * For more information on this topic, see section 14.2,\n     * \"Condition Queues,\" in Brian Goetz and others\u0027 \u003cem\u003eJava Concurrency\n     * in Practice\u003c/em\u003e (Addison-Wesley, 2006) or Item 69 in Joshua\n     * Bloch\u0027s \u003cem\u003eEffective Java, Second Edition\u003c/em\u003e (Addison-Wesley,\n     * 2008).\n     * \u003cp\u003e\n     * If the current thread is {@linkplain java.lang.Thread#interrupt() interrupted}\n     * by any thread before or while it is waiting, then an {@code InterruptedException}\n     * is thrown.  The \u003cem\u003einterrupted status\u003c/em\u003e of the current thread is cleared when\n     * this exception is thrown. This exception is not thrown until the lock status of\n     * this object has been restored as described above.\n     *\n     * @apiNote\n     * The recommended approach to waiting is to check the condition being awaited in\n     * a {@code while} loop around the call to {@code wait}, as shown in the example\n     * below. Among other things, this approach avoids problems that can be caused\n     * by spurious wakeups.\n     *\n     * \u003cpre\u003e{@code\n     *     synchronized (obj) {\n     *         while (\u003ccondition does not hold\u003e and \u003ctimeout not exceeded\u003e) {\n     *             long timeoutMillis \u003d ... ; // recompute timeout values\n     *             int nanos \u003d ... ;\n     *             obj.wait(timeoutMillis, nanos);\n     *         }\n     *         ... // Perform action appropriate to condition or timeout\n     *     }\n     * }\u003c/pre\u003e\n     *\n     * @param  timeoutMillis the maximum time to wait, in milliseconds\n     * @param  nanos   additional time, in nanoseconds, in the range range 0-999999 inclusive\n     * @throws IllegalArgumentException if {@code timeoutMillis} is negative,\n     *         or if the value of {@code nanos} is out of range\n     * @throws IllegalMonitorStateException if the current thread is not\n     *         the owner of the object\u0027s monitor\n     * @throws InterruptedException if any thread interrupted the current thread before or\n     *         while the current thread was waiting. The \u003cem\u003einterrupted status\u003c/em\u003e of the\n     *         current thread is cleared when this exception is thrown.\n     * @see    #notify()\n     * @see    #notifyAll()\n     * @see    #wait()\n     * @see    #wait(long)\n     */\n    public final void wait(long timeoutMillis, int nanos) throws InterruptedException {\n        if (timeoutMillis \u003c 0) {\n            throw new IllegalArgumentException(\"timeoutMillis value is negative\");\n        }\n\n        if (nanos \u003c 0 || nanos \u003e 999999) {\n            throw new IllegalArgumentException(\n                                \"nanosecond timeout value out of range\");\n        }\n\n        if (nanos \u003e 0) {\n            timeoutMillis++;\n        }\n\n        wait(timeoutMillis);\n    }\n\n    /**\n     * Called by the garbage collector on an object when garbage collection\n     * determines that there are no more references to the object.\n     * A subclass overrides the {@code finalize} method to dispose of\n     * system resources or to perform other cleanup.\n     * \u003cp\u003e\n     * The general contract of {@code finalize} is that it is invoked\n     * if and when the Java\u0026trade; virtual\n     * machine has determined that there is no longer any\n     * means by which this object can be accessed by any thread that has\n     * not yet died, except as a result of an action taken by the\n     * finalization of some other object or class which is ready to be\n     * finalized. The {@code finalize} method may take any action, including\n     * making this object available again to other threads; the usual purpose\n     * of {@code finalize}, however, is to perform cleanup actions before\n     * the object is irrevocably discarded. For example, the finalize method\n     * for an object that represents an input/output connection might perform\n     * explicit I/O transactions to break the connection before the object is\n     * permanently discarded.\n     * \u003cp\u003e\n     * The {@code finalize} method of class {@code Object} performs no\n     * special action; it simply returns normally. Subclasses of\n     * {@code Object} may override this definition.\n     * \u003cp\u003e\n     * The Java programming language does not guarantee which thread will\n     * invoke the {@code finalize} method for any given object. It is\n     * guaranteed, however, that the thread that invokes finalize will not\n     * be holding any user-visible synchronization locks when finalize is\n     * invoked. If an uncaught exception is thrown by the finalize method,\n     * the exception is ignored and finalization of that object terminates.\n     * \u003cp\u003e\n     * After the {@code finalize} method has been invoked for an object, no\n     * further action is taken until the Java virtual machine has again\n     * determined that there is no longer any means by which this object can\n     * be accessed by any thread that has not yet died, including possible\n     * actions by other objects or classes which are ready to be finalized,\n     * at which point the object may be discarded.\n     * \u003cp\u003e\n     * The {@code finalize} method is never invoked more than once by a Java\n     * virtual machine for any given object.\n     * \u003cp\u003e\n     * Any exception thrown by the {@code finalize} method causes\n     * the finalization of this object to be halted, but is otherwise\n     * ignored.\n     *\n     * @apiNote\n     * Classes that embed non-heap resources have many options\n     * for cleanup of those resources. The class must ensure that the\n     * lifetime of each instance is longer than that of any resource it embeds.\n     * {@link java.lang.ref.Reference#reachabilityFence} can be used to ensure that\n     * objects remain reachable while resources embedded in the object are in use.\n     * \u003cp\u003e\n     * A subclass should avoid overriding the {@code finalize} method\n     * unless the subclass embeds non-heap resources that must be cleaned up\n     * before the instance is collected.\n     * Finalizer invocations are not automatically chained, unlike constructors.\n     * If a subclass overrides {@code finalize} it must invoke the superclass\n     * finalizer explicitly.\n     * To guard against exceptions prematurely terminating the finalize chain,\n     * the subclass should use a {@code try-finally} block to ensure\n     * {@code super.finalize()} is always invoked. For example,\n     * \u003cpre\u003e{@code      @Override\n     *     protected void finalize() throws Throwable {\n     *         try {\n     *             ... // cleanup subclass state\n     *         } finally {\n     *             super.finalize();\n     *         }\n     *     }\n     * }\u003c/pre\u003e\n     *\n     * @deprecated The finalization mechanism is inherently problematic.\n     * Finalization can lead to performance issues, deadlocks, and hangs.\n     * Errors in finalizers can lead to resource leaks; there is no way to cancel\n     * finalization if it is no longer necessary; and no ordering is specified\n     * among calls to {@code finalize} methods of different objects.\n     * Furthermore, there are no guarantees regarding the timing of finalization.\n     * The {@code finalize} method might be called on a finalizable object\n     * only after an indefinite delay, if at all.\n     *\n     * Classes whose instances hold non-heap resources should provide a method\n     * to enable explicit release of those resources, and they should also\n     * implement {@link AutoCloseable} if appropriate.\n     * The {@link java.lang.ref.Cleaner} and {@link java.lang.ref.PhantomReference}\n     * provide more flexible and efficient ways to release resources when an object\n     * becomes unreachable.\n     *\n     * @throws Throwable the {@code Exception} raised by this method\n     * @see java.lang.ref.WeakReference\n     * @see java.lang.ref.PhantomReference\n     * @jls 12.6 Finalization of Class Instances\n     */\n    @Deprecated(since\u003d\"9\")\n    protected void finalize() throws Throwable { }\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor20.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Object.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:339)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Object.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

Jan. 04, 2024 1:36:25 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.base/java/lang/Object.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor22.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Object.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:358)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Object.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

Exception in thread "pool-7-thread-4" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.04 13:41:38 WARN  Using indexes to guess the definition of dom
2024.01.04 13:41:38 WARN  Using indexes to guess the definition of dom
2024.01.04 13:42:32 WARN  Using indexes to guess the definition of HTMLTableRowElement
2024.01.04 13:42:32 WARN  Using indexes to guess the definition of HTMLTableRowElement
2024.01.04 13:49:09 WARN  Using indexes to guess the definition of HTMLTableRowElement
Jan. 04, 2024 1:51:17 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2878
Exception in thread "pool-7-thread-5" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.04 13:53:26 WARN  Using indexes to guess the definition of MouseEvent
Exception in thread "pool-7-thread-6" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-7" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-8" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-9" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.04 14:43:28 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
scala.meta.tokenizers.TokenizeException: <input>:46: error: unclosed character literal
  dom.document.addEventListener('')
                                ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.04 14:43:28 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
scala.meta.tokenizers.TokenizeException: <input>:46: error: unclosed character literal
  dom.document.addEventListener('ke')
                                   ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.04 14:45:59 WARN  Using indexes to guess the definition of html
Jan. 04, 2024 2:50:16 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5135
Exception in thread "pool-7-thread-10" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-11" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-12" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-13" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-14" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Jan. 04, 2024 2:51:01 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5286
Exception in thread "pool-7-thread-15" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Jan. 04, 2024 2:51:57 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5466
2024.01.04 14:52:23 WARN  Using indexes to guess the definition of id
2024.01.04 14:52:23 WARN  Using indexes to guess the definition of id
Exception in thread "pool-7-thread-16" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-17" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-18" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-19" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Jan. 04, 2024 2:53:23 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5643
2024.01.04 14:54:06 WARN  Using indexes to guess the definition of HTMLTableCellElement
Exception in thread "pool-7-thread-20" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.04 14:54:07 WARN  Using indexes to guess the definition of HTMLTableCellElement
Exception in thread "pool-7-thread-21" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-22" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-23" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-24" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-25" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-26" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-27" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-28" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-29" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-30" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-31" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-32" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-33" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-34" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-35" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-36" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-37" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-38" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-39" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-40" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-41" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-42" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-43" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-44" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Jan. 04, 2024 3:07:11 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 7327
Exception in thread "pool-7-thread-45" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-46" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-47" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-48" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-49" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-50" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-51" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-52" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-53" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-54" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-55" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-56" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.08 11:37:12 WARN  Using indexes to guess the definition of HTMLBodyElement
2024.01.08 11:37:12 WARN  Using indexes to guess the definition of HTMLBodyElement
2024.01.08 11:37:13 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java

Uri: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:703)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	jdk.internal.reflect.GeneratedMethodAccessor21.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 08, 2024 11:37:13 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\n/*\n *\n *\n *\n *\n *\n * Copyright (c) 2000 World Wide Web Consortium,\n * (Massachusetts Institute of Technology, Institut National de\n * Recherche en Informatique et en Automatique, Keio University). All\n * Rights Reserved. This program is distributed under the W3C\u0027s Software\n * Intellectual Property License. This program is distributed in the\n * hope that it will be useful, but WITHOUT ANY WARRANTY; without even\n * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n * PURPOSE. See W3C License http://www.w3.org/Consortium/Legal/ for more\n * details.\n */\n\npackage org.w3c.dom.html;\n\n/**\n *  The HTML document body. This element is always present in the DOM API,\n * even if the tags are not present in the source document. See the  BODY\n * element definition in HTML 4.0.\n * \u003cp\u003eSee also the \u003ca href\u003d\u0027http://www.w3.org/TR/2000/CR-DOM-Level-2-20000510\u0027\u003eDocument Object Model (DOM) Level 2 Specification\u003c/a\u003e.\n *\n * @since 1.4, DOM Level 2\n */\npublic interface HTMLBodyElement extends HTMLElement {\n    /**\n     *  Color of active links (after mouse-button down, but before\n     * mouse-button up). See the  alink attribute definition in HTML 4.0.\n     * This attribute is deprecated in HTML 4.0.\n     */\n    public String getALink();\n    public void setALink(String aLink);\n\n    /**\n     *  URI of the background texture tile image. See the  background\n     * attribute definition in HTML 4.0. This attribute is deprecated in HTML\n     * 4.0.\n     */\n    public String getBackground();\n    public void setBackground(String background);\n\n    /**\n     *  Document background color. See the  bgcolor attribute definition in\n     * HTML 4.0. This attribute is deprecated in HTML 4.0.\n     */\n    public String getBgColor();\n    public void setBgColor(String bgColor);\n\n    /**\n     *  Color of links that are not active and unvisited. See the  link\n     * attribute definition in HTML 4.0. This attribute is deprecated in HTML\n     * 4.0.\n     */\n    public String getLink();\n    public void setLink(String link);\n\n    /**\n     *  Document text color. See the  text attribute definition in HTML 4.0.\n     * This attribute is deprecated in HTML 4.0.\n     */\n    public String getText();\n    public void setText(String text);\n\n    /**\n     *  Color of links that have been visited by the user. See the  vlink\n     * attribute definition in HTML 4.0. This attribute is deprecated in HTML\n     * 4.0.\n     */\n    public String getVLink();\n    public void setVLink(String vLink);\n\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor20.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:339)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

2024.01.08 11:37:13 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java

Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.documentHighlights(WorkspaceLspService.scala:391)
	scala.meta.metals.lsp.DelegatingScalaService.documentHighlights(DelegatingScalaService.scala:87)
	jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 08, 2024 11:37:13 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor17.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.MetalsLspService.documentHighlights(MetalsLspService.scala:1451)
	at scala.meta.internal.metals.WorkspaceLspService.documentHighlights(WorkspaceLspService.scala:391)
	at scala.meta.metals.lsp.DelegatingScalaService.documentHighlights(DelegatingScalaService.scala:87)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 24 more

Jan. 08, 2024 11:37:13 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8036
2024.01.08 11:37:13 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java

Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.semanticTokensFull(WorkspaceLspService.scala:481)
	scala.meta.metals.lsp.DelegatingScalaService.semanticTokensFull(DelegatingScalaService.scala:208)
	jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 08, 2024 11:37:13 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java
java.util.concurrent.CompletionException: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java
	at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:331)
	at java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:346)
	at java.base/java.util.concurrent.CompletableFuture$UniAccept.tryFire(CompletableFuture.java:704)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:506)
	at java.base/java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:2088)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1(CancelTokens.scala:40)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1$adapted(CancelTokens.scala:38)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:484)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.Compilers.semanticTokens(Compilers.scala:426)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$semanticTokensFull$2(MetalsLspService.scala:1605)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:470)
	... 3 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 12 more

2024.01.08 11:37:13 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java

Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.codeAction(WorkspaceLspService.scala:461)
	scala.meta.metals.lsp.DelegatingScalaService.codeAction(DelegatingScalaService.scala:146)
	jdk.internal.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 08, 2024 11:37:13 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.codeactions.ImportMissingSymbol.contribute(ImportMissingSymbol.scala:27)
	at scala.meta.internal.metals.codeactions.CodeActionProvider$$anonfun$1.applyOrElse(CodeActionProvider.scala:79)
	at scala.meta.internal.metals.codeactions.CodeActionProvider$$anonfun$1.applyOrElse(CodeActionProvider.scala:77)
	at scala.collection.immutable.List.collect(List.scala:275)
	at scala.meta.internal.metals.codeactions.CodeActionProvider.codeActions(CodeActionProvider.scala:77)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$codeAction$1(MetalsLspService.scala:1661)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.codeAction(MetalsLspService.scala:1660)
	at scala.meta.internal.metals.WorkspaceLspService.codeAction(WorkspaceLspService.scala:461)
	at scala.meta.metals.lsp.DelegatingScalaService.codeAction(DelegatingScalaService.scala:146)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 31 more

2024.01.08 11:37:13 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java

Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.foldingRange(WorkspaceLspService.scala:471)
	scala.meta.metals.lsp.DelegatingScalaService.foldingRange(DelegatingScalaService.scala:155)
	jdk.internal.reflect.GeneratedMethodAccessor6.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 08, 2024 11:37:13 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor6.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$foldingRange$1(MetalsLspService.scala:1683)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.foldingRange(MetalsLspService.scala:1682)
	at scala.meta.internal.metals.WorkspaceLspService.foldingRange(WorkspaceLspService.scala:471)
	at scala.meta.metals.lsp.DelegatingScalaService.foldingRange(DelegatingScalaService.scala:155)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 26 more

2024.01.08 11:37:13 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java

Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.codeLens(WorkspaceLspService.scala:466)
	scala.meta.metals.lsp.DelegatingScalaService.codeLens(DelegatingScalaService.scala:150)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 08, 2024 11:37:13 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java
java.util.concurrent.CompletionException: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java
	at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:331)
	at java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:346)
	at java.base/java.util.concurrent.CompletableFuture$UniAccept.tryFire(CompletableFuture.java:704)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:506)
	at java.base/java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:2088)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1(CancelTokens.scala:40)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1$adapted(CancelTokens.scala:38)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:484)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$codeLens$3(MetalsLspService.scala:1673)
	at scala.meta.internal.metals.TimerProvider.timedThunk(TimerProvider.scala:25)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$codeLens$2(MetalsLspService.scala:1672)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	... 3 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 13 more

2024.01.08 11:37:14 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java

Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:386)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor14.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 08, 2024 11:37:14 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor14.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:1079)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:737)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1429)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1427)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:386)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 28 more

Jan. 08, 2024 11:37:15 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor22.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:358)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/jdk.xml.dom/org/w3c/dom/html/HTMLBodyElement.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

2024.01.08 11:37:23 WARN  Using indexes to guess the definition of HTMLBodyElement
Exception in thread "pool-7-thread-57" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-58" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-59" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-60" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-61" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-62" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Jan. 08, 2024 11:38:39 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8255
Jan. 08, 2024 11:38:39 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8256
Exception in thread "pool-7-thread-63" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-64" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Jan. 10, 2024 9:35:05 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8404
Jan. 10, 2024 9:39:20 A.M. scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\.reports\metals-full\2024-01-10\r_compiler-error_(livechart)_09-39-20-045.md
Exception in thread "pool-7-thread-65" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-66" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-67" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-68" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-69" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-70" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-71" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-72" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Jan. 10, 2024 9:39:35 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8561
Jan. 10, 2024 9:39:47 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8603
2024.01.10 09:39:55 WARN  Using indexes to guess the definition of renderToolbar
2024.01.10 09:39:58 WARN  Using indexes to guess the definition of renderDataTable
2024.01.10 09:43:38 WARN  Using indexes to guess the definition of renderDataTable
Exception in thread "pool-7-thread-73" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.10 09:45:20 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Toolbar.scala
scala.meta.tokenizers.TokenizeException: <input>:18: error: unclosed string literal
          label := "
                   ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getStringLit(LegacyScanner.scala:553)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchDoubleQuote$1(LegacyScanner.scala:372)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:376)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.10 09:46:24 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Toolbar.scala
scala.meta.tokenizers.TokenizeException: <input>:17: error: unclosed string literal
        div("Search by:""),
                        ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getStringLit(LegacyScanner.scala:553)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchDoubleQuote$1(LegacyScanner.scala:372)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:376)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

Exception in thread "pool-7-thread-74" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-75" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Jan. 10, 2024 9:58:42 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10638
2024.01.10 10:00:46 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Toolbar.scala
scala.meta.tokenizers.TokenizeException: <input>:19: error: unclosed character literal
          justifyContent := ''
                            ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.10 10:00:46 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Toolbar.scala
scala.meta.tokenizers.TokenizeException: <input>:19: error: unclosed character literal
          justifyContent := 'cent'
                                 ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.10 10:00:47 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Toolbar.scala
scala.meta.tokenizers.TokenizeException: <input>:19: error: unclosed character literal
          justifyContent := 'center'
                                   ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

Jan. 10, 2024 10:01:11 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 11089
2024.01.10 10:04:40 WARN  Using indexes to guess the definition of renderDataTable
2024.01.11 10:01:23 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table.scala
scala.meta.tokenizers.TokenizeException: <input>:22: error: unclosed character literal
        height := ''
                  ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

Exception in thread "pool-7-thread-76" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-77" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Jan. 11, 2024 10:14:17 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 12728
2024.01.11 10:14:55 WARN  Using indexes to guess the definition of CellData
Jan. 11, 2024 10:15:30 A.M. scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\.reports\metals-full\2024-01-11\r_compiler-error_(livechart)_10-15-30-292.md
2024.01.11 10:19:19 WARN  Using indexes to guess the definition of id
Exception in thread "pool-7-thread-78" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.11 10:22:35 WARN  Using indexes to guess the definition of DataRow
2024.01.11 10:22:48 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Object.java

Uri: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Object.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:703)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	jdk.internal.reflect.GeneratedMethodAccessor21.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 11, 2024 10:22:48 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.base/java/lang/Object.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 1994, 2017, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.lang;\n\nimport jdk.internal.HotSpotIntrinsicCandidate;\n\n/**\n * Class {@code Object} is the root of the class hierarchy.\n * Every class has {@code Object} as a superclass. All objects,\n * including arrays, implement the methods of this class.\n *\n * @author  unascribed\n * @see     java.lang.Class\n * @since   1.0\n */\npublic class Object {\n\n    private static native void registerNatives();\n    static {\n        registerNatives();\n    }\n\n    /**\n     * Constructs a new object.\n     */\n    @HotSpotIntrinsicCandidate\n    public Object() {}\n\n    /**\n     * Returns the runtime class of this {@code Object}. The returned\n     * {@code Class} object is the object that is locked by {@code\n     * static synchronized} methods of the represented class.\n     *\n     * \u003cp\u003e\u003cb\u003eThe actual result type is {@code Class\u003c? extends |X|\u003e}\n     * where {@code |X|} is the erasure of the static type of the\n     * expression on which {@code getClass} is called.\u003c/b\u003e For\n     * example, no cast is required in this code fragment:\u003c/p\u003e\n     *\n     * \u003cp\u003e\n     * {@code Number n \u003d 0;                             }\u003cbr\u003e\n     * {@code Class\u003c? extends Number\u003e c \u003d n.getClass(); }\n     * \u003c/p\u003e\n     *\n     * @return The {@code Class} object that represents the runtime\n     *         class of this object.\n     * @jls 15.8.2 Class Literals\n     */\n    @HotSpotIntrinsicCandidate\n    public final native Class\u003c?\u003e getClass();\n\n    /**\n     * Returns a hash code value for the object. This method is\n     * supported for the benefit of hash tables such as those provided by\n     * {@link java.util.HashMap}.\n     * \u003cp\u003e\n     * The general contract of {@code hashCode} is:\n     * \u003cul\u003e\n     * \u003cli\u003eWhenever it is invoked on the same object more than once during\n     *     an execution of a Java application, the {@code hashCode} method\n     *     must consistently return the same integer, provided no information\n     *     used in {@code equals} comparisons on the object is modified.\n     *     This integer need not remain consistent from one execution of an\n     *     application to another execution of the same application.\n     * \u003cli\u003eIf two objects are equal according to the {@code equals(Object)}\n     *     method, then calling the {@code hashCode} method on each of\n     *     the two objects must produce the same integer result.\n     * \u003cli\u003eIt is \u003cem\u003enot\u003c/em\u003e required that if two objects are unequal\n     *     according to the {@link java.lang.Object#equals(java.lang.Object)}\n     *     method, then calling the {@code hashCode} method on each of the\n     *     two objects must produce distinct integer results.  However, the\n     *     programmer should be aware that producing distinct integer results\n     *     for unequal objects may improve the performance of hash tables.\n     * \u003c/ul\u003e\n     * \u003cp\u003e\n     * As much as is reasonably practical, the hashCode method defined\n     * by class {@code Object} does return distinct integers for\n     * distinct objects. (The hashCode may or may not be implemented\n     * as some function of an object\u0027s memory address at some point\n     * in time.)\n     *\n     * @return  a hash code value for this object.\n     * @see     java.lang.Object#equals(java.lang.Object)\n     * @see     java.lang.System#identityHashCode\n     */\n    @HotSpotIntrinsicCandidate\n    public native int hashCode();\n\n    /**\n     * Indicates whether some other object is \"equal to\" this one.\n     * \u003cp\u003e\n     * The {@code equals} method implements an equivalence relation\n     * on non-null object references:\n     * \u003cul\u003e\n     * \u003cli\u003eIt is \u003ci\u003ereflexive\u003c/i\u003e: for any non-null reference value\n     *     {@code x}, {@code x.equals(x)} should return\n     *     {@code true}.\n     * \u003cli\u003eIt is \u003ci\u003esymmetric\u003c/i\u003e: for any non-null reference values\n     *     {@code x} and {@code y}, {@code x.equals(y)}\n     *     should return {@code true} if and only if\n     *     {@code y.equals(x)} returns {@code true}.\n     * \u003cli\u003eIt is \u003ci\u003etransitive\u003c/i\u003e: for any non-null reference values\n     *     {@code x}, {@code y}, and {@code z}, if\n     *     {@code x.equals(y)} returns {@code true} and\n     *     {@code y.equals(z)} returns {@code true}, then\n     *     {@code x.equals(z)} should return {@code true}.\n     * \u003cli\u003eIt is \u003ci\u003econsistent\u003c/i\u003e: for any non-null reference values\n     *     {@code x} and {@code y}, multiple invocations of\n     *     {@code x.equals(y)} consistently return {@code true}\n     *     or consistently return {@code false}, provided no\n     *     information used in {@code equals} comparisons on the\n     *     objects is modified.\n     * \u003cli\u003eFor any non-null reference value {@code x},\n     *     {@code x.equals(null)} should return {@code false}.\n     * \u003c/ul\u003e\n     * \u003cp\u003e\n     * The {@code equals} method for class {@code Object} implements\n     * the most discriminating possible equivalence relation on objects;\n     * that is, for any non-null reference values {@code x} and\n     * {@code y}, this method returns {@code true} if and only\n     * if {@code x} and {@code y} refer to the same object\n     * ({@code x \u003d\u003d y} has the value {@code true}).\n     * \u003cp\u003e\n     * Note that it is generally necessary to override the {@code hashCode}\n     * method whenever this method is overridden, so as to maintain the\n     * general contract for the {@code hashCode} method, which states\n     * that equal objects must have equal hash codes.\n     *\n     * @param   obj   the reference object with which to compare.\n     * @return  {@code true} if this object is the same as the obj\n     *          argument; {@code false} otherwise.\n     * @see     #hashCode()\n     * @see     java.util.HashMap\n     */\n    public boolean equals(Object obj) {\n        return (this \u003d\u003d obj);\n    }\n\n    /**\n     * Creates and returns a copy of this object.  The precise meaning\n     * of \"copy\" may depend on the class of the object. The general\n     * intent is that, for any object {@code x}, the expression:\n     * \u003cblockquote\u003e\n     * \u003cpre\u003e\n     * x.clone() !\u003d x\u003c/pre\u003e\u003c/blockquote\u003e\n     * will be true, and that the expression:\n     * \u003cblockquote\u003e\n     * \u003cpre\u003e\n     * x.clone().getClass() \u003d\u003d x.getClass()\u003c/pre\u003e\u003c/blockquote\u003e\n     * will be {@code true}, but these are not absolute requirements.\n     * While it is typically the case that:\n     * \u003cblockquote\u003e\n     * \u003cpre\u003e\n     * x.clone().equals(x)\u003c/pre\u003e\u003c/blockquote\u003e\n     * will be {@code true}, this is not an absolute requirement.\n     * \u003cp\u003e\n     * By convention, the returned object should be obtained by calling\n     * {@code super.clone}.  If a class and all of its superclasses (except\n     * {@code Object}) obey this convention, it will be the case that\n     * {@code x.clone().getClass() \u003d\u003d x.getClass()}.\n     * \u003cp\u003e\n     * By convention, the object returned by this method should be independent\n     * of this object (which is being cloned).  To achieve this independence,\n     * it may be necessary to modify one or more fields of the object returned\n     * by {@code super.clone} before returning it.  Typically, this means\n     * copying any mutable objects that comprise the internal \"deep structure\"\n     * of the object being cloned and replacing the references to these\n     * objects with references to the copies.  If a class contains only\n     * primitive fields or references to immutable objects, then it is usually\n     * the case that no fields in the object returned by {@code super.clone}\n     * need to be modified.\n     * \u003cp\u003e\n     * The method {@code clone} for class {@code Object} performs a\n     * specific cloning operation. First, if the class of this object does\n     * not implement the interface {@code Cloneable}, then a\n     * {@code CloneNotSupportedException} is thrown. Note that all arrays\n     * are considered to implement the interface {@code Cloneable} and that\n     * the return type of the {@code clone} method of an array type {@code T[]}\n     * is {@code T[]} where T is any reference or primitive type.\n     * Otherwise, this method creates a new instance of the class of this\n     * object and initializes all its fields with exactly the contents of\n     * the corresponding fields of this object, as if by assignment; the\n     * contents of the fields are not themselves cloned. Thus, this method\n     * performs a \"shallow copy\" of this object, not a \"deep copy\" operation.\n     * \u003cp\u003e\n     * The class {@code Object} does not itself implement the interface\n     * {@code Cloneable}, so calling the {@code clone} method on an object\n     * whose class is {@code Object} will result in throwing an\n     * exception at run time.\n     *\n     * @return     a clone of this instance.\n     * @throws  CloneNotSupportedException  if the object\u0027s class does not\n     *               support the {@code Cloneable} interface. Subclasses\n     *               that override the {@code clone} method can also\n     *               throw this exception to indicate that an instance cannot\n     *               be cloned.\n     * @see java.lang.Cloneable\n     */\n    @HotSpotIntrinsicCandidate\n    protected native Object clone() throws CloneNotSupportedException;\n\n    /**\n     * Returns a string representation of the object. In general, the\n     * {@code toString} method returns a string that\n     * \"textually represents\" this object. The result should\n     * be a concise but informative representation that is easy for a\n     * person to read.\n     * It is recommended that all subclasses override this method.\n     * \u003cp\u003e\n     * The {@code toString} method for class {@code Object}\n     * returns a string consisting of the name of the class of which the\n     * object is an instance, the at-sign character `{@code @}\u0027, and\n     * the unsigned hexadecimal representation of the hash code of the\n     * object. In other words, this method returns a string equal to the\n     * value of:\n     * \u003cblockquote\u003e\n     * \u003cpre\u003e\n     * getClass().getName() + \u0027@\u0027 + Integer.toHexString(hashCode())\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @return  a string representation of the object.\n     */\n    public String toString() {\n        return getClass().getName() + \"@\" + Integer.toHexString(hashCode());\n    }\n\n    /**\n     * Wakes up a single thread that is waiting on this object\u0027s\n     * monitor. If any threads are waiting on this object, one of them\n     * is chosen to be awakened. The choice is arbitrary and occurs at\n     * the discretion of the implementation. A thread waits on an object\u0027s\n     * monitor by calling one of the {@code wait} methods.\n     * \u003cp\u003e\n     * The awakened thread will not be able to proceed until the current\n     * thread relinquishes the lock on this object. The awakened thread will\n     * compete in the usual manner with any other threads that might be\n     * actively competing to synchronize on this object; for example, the\n     * awakened thread enjoys no reliable privilege or disadvantage in being\n     * the next thread to lock this object.\n     * \u003cp\u003e\n     * This method should only be called by a thread that is the owner\n     * of this object\u0027s monitor. A thread becomes the owner of the\n     * object\u0027s monitor in one of three ways:\n     * \u003cul\u003e\n     * \u003cli\u003eBy executing a synchronized instance method of that object.\n     * \u003cli\u003eBy executing the body of a {@code synchronized} statement\n     *     that synchronizes on the object.\n     * \u003cli\u003eFor objects of type {@code Class,} by executing a\n     *     synchronized static method of that class.\n     * \u003c/ul\u003e\n     * \u003cp\u003e\n     * Only one thread at a time can own an object\u0027s monitor.\n     *\n     * @throws  IllegalMonitorStateException  if the current thread is not\n     *               the owner of this object\u0027s monitor.\n     * @see        java.lang.Object#notifyAll()\n     * @see        java.lang.Object#wait()\n     */\n    @HotSpotIntrinsicCandidate\n    public final native void notify();\n\n    /**\n     * Wakes up all threads that are waiting on this object\u0027s monitor. A\n     * thread waits on an object\u0027s monitor by calling one of the\n     * {@code wait} methods.\n     * \u003cp\u003e\n     * The awakened threads will not be able to proceed until the current\n     * thread relinquishes the lock on this object. The awakened threads\n     * will compete in the usual manner with any other threads that might\n     * be actively competing to synchronize on this object; for example,\n     * the awakened threads enjoy no reliable privilege or disadvantage in\n     * being the next thread to lock this object.\n     * \u003cp\u003e\n     * This method should only be called by a thread that is the owner\n     * of this object\u0027s monitor. See the {@code notify} method for a\n     * description of the ways in which a thread can become the owner of\n     * a monitor.\n     *\n     * @throws  IllegalMonitorStateException  if the current thread is not\n     *               the owner of this object\u0027s monitor.\n     * @see        java.lang.Object#notify()\n     * @see        java.lang.Object#wait()\n     */\n    @HotSpotIntrinsicCandidate\n    public final native void notifyAll();\n\n    /**\n     * Causes the current thread to wait until it is awakened, typically\n     * by being \u003cem\u003enotified\u003c/em\u003e or \u003cem\u003einterrupted\u003c/em\u003e.\n     * \u003cp\u003e\n     * In all respects, this method behaves as if {@code wait(0L, 0)}\n     * had been called. See the specification of the {@link #wait(long, int)} method\n     * for details.\n     *\n     * @throws IllegalMonitorStateException if the current thread is not\n     *         the owner of the object\u0027s monitor\n     * @throws InterruptedException if any thread interrupted the current thread before or\n     *         while the current thread was waiting. The \u003cem\u003einterrupted status\u003c/em\u003e of the\n     *         current thread is cleared when this exception is thrown.\n     * @see    #notify()\n     * @see    #notifyAll()\n     * @see    #wait(long)\n     * @see    #wait(long, int)\n     */\n    public final void wait() throws InterruptedException {\n        wait(0L);\n    }\n\n    /**\n     * Causes the current thread to wait until it is awakened, typically\n     * by being \u003cem\u003enotified\u003c/em\u003e or \u003cem\u003einterrupted\u003c/em\u003e, or until a\n     * certain amount of real time has elapsed.\n     * \u003cp\u003e\n     * In all respects, this method behaves as if {@code wait(timeoutMillis, 0)}\n     * had been called. See the specification of the {@link #wait(long, int)} method\n     * for details.\n     *\n     * @param  timeoutMillis the maximum time to wait, in milliseconds\n     * @throws IllegalArgumentException if {@code timeoutMillis} is negative\n     * @throws IllegalMonitorStateException if the current thread is not\n     *         the owner of the object\u0027s monitor\n     * @throws InterruptedException if any thread interrupted the current thread before or\n     *         while the current thread was waiting. The \u003cem\u003einterrupted status\u003c/em\u003e of the\n     *         current thread is cleared when this exception is thrown.\n     * @see    #notify()\n     * @see    #notifyAll()\n     * @see    #wait()\n     * @see    #wait(long, int)\n     */\n    public final native void wait(long timeoutMillis) throws InterruptedException;\n\n    /**\n     * Causes the current thread to wait until it is awakened, typically\n     * by being \u003cem\u003enotified\u003c/em\u003e or \u003cem\u003einterrupted\u003c/em\u003e, or until a\n     * certain amount of real time has elapsed.\n     * \u003cp\u003e\n     * The current thread must own this object\u0027s monitor lock. See the\n     * {@link #notify notify} method for a description of the ways in which\n     * a thread can become the owner of a monitor lock.\n     * \u003cp\u003e\n     * This method causes the current thread (referred to here as \u003cvar\u003eT\u003c/var\u003e) to\n     * place itself in the wait set for this object and then to relinquish any\n     * and all synchronization claims on this object. Note that only the locks\n     * on this object are relinquished; any other objects on which the current\n     * thread may be synchronized remain locked while the thread waits.\n     * \u003cp\u003e\n     * Thread \u003cvar\u003eT\u003c/var\u003e then becomes disabled for thread scheduling purposes\n     * and lies dormant until one of the following occurs:\n     * \u003cul\u003e\n     * \u003cli\u003eSome other thread invokes the {@code notify} method for this\n     * object and thread \u003cvar\u003eT\u003c/var\u003e happens to be arbitrarily chosen as\n     * the thread to be awakened.\n     * \u003cli\u003eSome other thread invokes the {@code notifyAll} method for this\n     * object.\n     * \u003cli\u003eSome other thread {@linkplain Thread#interrupt() interrupts}\n     * thread \u003cvar\u003eT\u003c/var\u003e.\n     * \u003cli\u003eThe specified amount of real time has elapsed, more or less.\n     * The amount of real time, in nanoseconds, is given by the expression\n     * {@code 1000000 * timeoutMillis + nanos}. If {@code timeoutMillis} and {@code nanos}\n     * are both zero, then real time is not taken into consideration and the\n     * thread waits until awakened by one of the other causes.\n     * \u003cli\u003eThread \u003cvar\u003eT\u003c/var\u003e is awakened spuriously. (See below.)\n     * \u003c/ul\u003e\n     * \u003cp\u003e\n     * The thread \u003cvar\u003eT\u003c/var\u003e is then removed from the wait set for this\n     * object and re-enabled for thread scheduling. It competes in the\n     * usual manner with other threads for the right to synchronize on the\n     * object; once it has regained control of the object, all its\n     * synchronization claims on the object are restored to the status quo\n     * ante - that is, to the situation as of the time that the {@code wait}\n     * method was invoked. Thread \u003cvar\u003eT\u003c/var\u003e then returns from the\n     * invocation of the {@code wait} method. Thus, on return from the\n     * {@code wait} method, the synchronization state of the object and of\n     * thread {@code T} is exactly as it was when the {@code wait} method\n     * was invoked.\n     * \u003cp\u003e\n     * A thread can wake up without being notified, interrupted, or timing out, a\n     * so-called \u003cem\u003espurious wakeup\u003c/em\u003e.  While this will rarely occur in practice,\n     * applications must guard against it by testing for the condition that should\n     * have caused the thread to be awakened, and continuing to wait if the condition\n     * is not satisfied. See the example below.\n     * \u003cp\u003e\n     * For more information on this topic, see section 14.2,\n     * \"Condition Queues,\" in Brian Goetz and others\u0027 \u003cem\u003eJava Concurrency\n     * in Practice\u003c/em\u003e (Addison-Wesley, 2006) or Item 69 in Joshua\n     * Bloch\u0027s \u003cem\u003eEffective Java, Second Edition\u003c/em\u003e (Addison-Wesley,\n     * 2008).\n     * \u003cp\u003e\n     * If the current thread is {@linkplain java.lang.Thread#interrupt() interrupted}\n     * by any thread before or while it is waiting, then an {@code InterruptedException}\n     * is thrown.  The \u003cem\u003einterrupted status\u003c/em\u003e of the current thread is cleared when\n     * this exception is thrown. This exception is not thrown until the lock status of\n     * this object has been restored as described above.\n     *\n     * @apiNote\n     * The recommended approach to waiting is to check the condition being awaited in\n     * a {@code while} loop around the call to {@code wait}, as shown in the example\n     * below. Among other things, this approach avoids problems that can be caused\n     * by spurious wakeups.\n     *\n     * \u003cpre\u003e{@code\n     *     synchronized (obj) {\n     *         while (\u003ccondition does not hold\u003e and \u003ctimeout not exceeded\u003e) {\n     *             long timeoutMillis \u003d ... ; // recompute timeout values\n     *             int nanos \u003d ... ;\n     *             obj.wait(timeoutMillis, nanos);\n     *         }\n     *         ... // Perform action appropriate to condition or timeout\n     *     }\n     * }\u003c/pre\u003e\n     *\n     * @param  timeoutMillis the maximum time to wait, in milliseconds\n     * @param  nanos   additional time, in nanoseconds, in the range range 0-999999 inclusive\n     * @throws IllegalArgumentException if {@code timeoutMillis} is negative,\n     *         or if the value of {@code nanos} is out of range\n     * @throws IllegalMonitorStateException if the current thread is not\n     *         the owner of the object\u0027s monitor\n     * @throws InterruptedException if any thread interrupted the current thread before or\n     *         while the current thread was waiting. The \u003cem\u003einterrupted status\u003c/em\u003e of the\n     *         current thread is cleared when this exception is thrown.\n     * @see    #notify()\n     * @see    #notifyAll()\n     * @see    #wait()\n     * @see    #wait(long)\n     */\n    public final void wait(long timeoutMillis, int nanos) throws InterruptedException {\n        if (timeoutMillis \u003c 0) {\n            throw new IllegalArgumentException(\"timeoutMillis value is negative\");\n        }\n\n        if (nanos \u003c 0 || nanos \u003e 999999) {\n            throw new IllegalArgumentException(\n                                \"nanosecond timeout value out of range\");\n        }\n\n        if (nanos \u003e 0) {\n            timeoutMillis++;\n        }\n\n        wait(timeoutMillis);\n    }\n\n    /**\n     * Called by the garbage collector on an object when garbage collection\n     * determines that there are no more references to the object.\n     * A subclass overrides the {@code finalize} method to dispose of\n     * system resources or to perform other cleanup.\n     * \u003cp\u003e\n     * The general contract of {@code finalize} is that it is invoked\n     * if and when the Java\u0026trade; virtual\n     * machine has determined that there is no longer any\n     * means by which this object can be accessed by any thread that has\n     * not yet died, except as a result of an action taken by the\n     * finalization of some other object or class which is ready to be\n     * finalized. The {@code finalize} method may take any action, including\n     * making this object available again to other threads; the usual purpose\n     * of {@code finalize}, however, is to perform cleanup actions before\n     * the object is irrevocably discarded. For example, the finalize method\n     * for an object that represents an input/output connection might perform\n     * explicit I/O transactions to break the connection before the object is\n     * permanently discarded.\n     * \u003cp\u003e\n     * The {@code finalize} method of class {@code Object} performs no\n     * special action; it simply returns normally. Subclasses of\n     * {@code Object} may override this definition.\n     * \u003cp\u003e\n     * The Java programming language does not guarantee which thread will\n     * invoke the {@code finalize} method for any given object. It is\n     * guaranteed, however, that the thread that invokes finalize will not\n     * be holding any user-visible synchronization locks when finalize is\n     * invoked. If an uncaught exception is thrown by the finalize method,\n     * the exception is ignored and finalization of that object terminates.\n     * \u003cp\u003e\n     * After the {@code finalize} method has been invoked for an object, no\n     * further action is taken until the Java virtual machine has again\n     * determined that there is no longer any means by which this object can\n     * be accessed by any thread that has not yet died, including possible\n     * actions by other objects or classes which are ready to be finalized,\n     * at which point the object may be discarded.\n     * \u003cp\u003e\n     * The {@code finalize} method is never invoked more than once by a Java\n     * virtual machine for any given object.\n     * \u003cp\u003e\n     * Any exception thrown by the {@code finalize} method causes\n     * the finalization of this object to be halted, but is otherwise\n     * ignored.\n     *\n     * @apiNote\n     * Classes that embed non-heap resources have many options\n     * for cleanup of those resources. The class must ensure that the\n     * lifetime of each instance is longer than that of any resource it embeds.\n     * {@link java.lang.ref.Reference#reachabilityFence} can be used to ensure that\n     * objects remain reachable while resources embedded in the object are in use.\n     * \u003cp\u003e\n     * A subclass should avoid overriding the {@code finalize} method\n     * unless the subclass embeds non-heap resources that must be cleaned up\n     * before the instance is collected.\n     * Finalizer invocations are not automatically chained, unlike constructors.\n     * If a subclass overrides {@code finalize} it must invoke the superclass\n     * finalizer explicitly.\n     * To guard against exceptions prematurely terminating the finalize chain,\n     * the subclass should use a {@code try-finally} block to ensure\n     * {@code super.finalize()} is always invoked. For example,\n     * \u003cpre\u003e{@code      @Override\n     *     protected void finalize() throws Throwable {\n     *         try {\n     *             ... // cleanup subclass state\n     *         } finally {\n     *             super.finalize();\n     *         }\n     *     }\n     * }\u003c/pre\u003e\n     *\n     * @deprecated The finalization mechanism is inherently problematic.\n     * Finalization can lead to performance issues, deadlocks, and hangs.\n     * Errors in finalizers can lead to resource leaks; there is no way to cancel\n     * finalization if it is no longer necessary; and no ordering is specified\n     * among calls to {@code finalize} methods of different objects.\n     * Furthermore, there are no guarantees regarding the timing of finalization.\n     * The {@code finalize} method might be called on a finalizable object\n     * only after an indefinite delay, if at all.\n     *\n     * Classes whose instances hold non-heap resources should provide a method\n     * to enable explicit release of those resources, and they should also\n     * implement {@link AutoCloseable} if appropriate.\n     * The {@link java.lang.ref.Cleaner} and {@link java.lang.ref.PhantomReference}\n     * provide more flexible and efficient ways to release resources when an object\n     * becomes unreachable.\n     *\n     * @throws Throwable the {@code Exception} raised by this method\n     * @see java.lang.ref.WeakReference\n     * @see java.lang.ref.PhantomReference\n     * @jls 12.6 Finalization of Class Instances\n     */\n    @Deprecated(since\u003d\"9\")\n    protected void finalize() throws Throwable { }\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor20.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Object.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:339)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Object.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

Jan. 11, 2024 10:22:48 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.base/java/lang/Object.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor22.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Object.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:358)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Object.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

2024.01.11 10:23:09 WARN  Using indexes to guess the definition of CellData
2024.01.11 10:23:39 WARN  Using indexes to guess the definition of DataRow
2024.01.11 10:27:27 WARN  Could not find semantic tokens for: file:///C:/Users/yashb/Documents/vscode-laminar-vite-extension/webview-ui/src/main/scala/utilities/fakeData.scala
2024.01.11 10:29:52 WARN  Using indexes to guess the definition of DataRow
2024.01.11 10:29:57 WARN  Using indexes to guess the definition of Random
Jan. 11, 2024 10:30:02 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 14468
2024.01.11 10:30:31 WARN  Using indexes to guess the definition of CellData
2024.01.11 10:30:34 WARN  Using indexes to guess the definition of CellData
2024.01.11 10:30:46 WARN  Using indexes to guess the definition of CellData
2024.01.11 10:30:46 WARN  Using indexes to guess the definition of CellData
2024.01.11 10:31:36 WARN  Using indexes to guess the definition of CellData
2024.01.11 10:31:50 WARN  Using indexes to guess the definition of DataRow
2024.01.11 10:34:45 WARN  Using indexes to guess the definition of DataRow
2024.01.11 10:34:47 WARN  Using indexes to guess the definition of DataRow
2024.01.11 10:38:17 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table.scala
scala.meta.tokenizers.TokenizeException: <input>:17: error: Invalid literal number
                th(width := 50header)
                            ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.checkNoLetter(LegacyScanner.scala:820)
	at scala.meta.internal.tokenizers.LegacyScanner.restOfUncertainToken$1(LegacyScanner.scala:864)
	at scala.meta.internal.tokenizers.LegacyScanner.getNumber(LegacyScanner.scala:872)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:335)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.11 10:38:17 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table.scala
scala.meta.tokenizers.TokenizeException: <input>:17: error: unclosed string literal
                th(width := "header)
                            ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getStringLit(LegacyScanner.scala:553)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchDoubleQuote$1(LegacyScanner.scala:372)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:376)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.11 10:39:33 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table.scala
scala.meta.tokenizers.TokenizeException: <input>:15: error: unclosed character literal
          display := 'fl'
                        ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.11 10:39:33 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table.scala
scala.meta.tokenizers.TokenizeException: <input>:15: error: unclosed character literal
          display := 'fle'
                         ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.11 10:39:34 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table.scala
scala.meta.tokenizers.TokenizeException: <input>:15: error: unclosed character literal
          display := 'fle'
                         ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.11 10:39:34 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table.scala
scala.meta.tokenizers.TokenizeException: <input>:15: error: unclosed character literal
          display := ''
                     ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

Exception in thread "pool-7-thread-79" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Jan. 11, 2024 10:51:39 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 16708
2024.01.11 10:51:54 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Toolbar.scala
scala.meta.tokenizers.TokenizeException: <input>:15: error: Invalid literal number
        height := 50px
                  ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.checkNoLetter(LegacyScanner.scala:820)
	at scala.meta.internal.tokenizers.LegacyScanner.restOfUncertainToken$1(LegacyScanner.scala:864)
	at scala.meta.internal.tokenizers.LegacyScanner.getNumber(LegacyScanner.scala:872)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:335)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

Jan. 11, 2024 10:57:34 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 16979
Exception in thread "pool-7-thread-80" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-81" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-82" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-83" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-84" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-85" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Jan. 11, 2024 11:57:14 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "metals/didFocusTextDocument",
  "params": [
    "private:/c%3A/Users/yashb/Documents/vscode-laminar-vite-extension/webview-ui/src/main/scala/livechart/LiveChart.scala?%7B%22scheme%22%3A%22file%22%7D#replacePreview"
  ]
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor19.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.nio.file.FileSystemNotFoundException: Provider "private" not installed
	at java.base/java.nio.file.Path.of(Path.java:212)
	at java.base/java.nio.file.Paths.get(Paths.java:97)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionURIMtags.toAbsolutePath(MtagsEnrichments.scala:131)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:187)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didFocus(WorkspaceLspService.scala:627)
	at scala.meta.metals.lsp.DelegatingScalaService.didFocus(DelegatingScalaService.scala:43)
	... 15 more

Jan. 11, 2024 11:58:21 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 17861
Exception in thread "pool-7-thread-86" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-87" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-88" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-89" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-90" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-91" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-92" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-93" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-94" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-95" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-96" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-97" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-98" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-99" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-100" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Jan. 11, 2024 12:03:58 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 18674
Exception in thread "pool-7-thread-101" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.11 12:28:07 WARN  Could not find semantic tokens for: file:///C:/Users/yashb/Documents/vscode-laminar-vite-extension/webview-ui/src/main/scala/utilities/sorting.scala
Jan. 11, 2024 12:30:20 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 18928
Jan. 11, 2024 12:30:21 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 18937
Jan. 11, 2024 12:30:52 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 19003
Jan. 11, 2024 12:31:41 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 19074
Jan. 11, 2024 12:35:17 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 19319
Exception in thread "pool-7-thread-102" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-103" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-104" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.11 12:35:19 WARN  Using indexes to guess the definition of document
2024.01.11 12:38:57 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java

Uri: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:703)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	jdk.internal.reflect.GeneratedMethodAccessor21.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 11, 2024 12:38:58 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.base/java/lang/String.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 1994, 2018, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.lang;\n\nimport java.io.ObjectStreamField;\nimport java.io.UnsupportedEncodingException;\nimport java.lang.annotation.Native;\nimport java.nio.charset.Charset;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Formatter;\nimport java.util.Locale;\nimport java.util.Objects;\nimport java.util.Spliterator;\nimport java.util.StringJoiner;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport java.util.stream.IntStream;\nimport java.util.stream.Stream;\nimport java.util.stream.StreamSupport;\nimport jdk.internal.HotSpotIntrinsicCandidate;\nimport jdk.internal.vm.annotation.Stable;\n\n/**\n * The {@code String} class represents character strings. All\n * string literals in Java programs, such as {@code \"abc\"}, are\n * implemented as instances of this class.\n * \u003cp\u003e\n * Strings are constant; their values cannot be changed after they\n * are created. String buffers support mutable strings.\n * Because String objects are immutable they can be shared. For example:\n * \u003cblockquote\u003e\u003cpre\u003e\n *     String str \u003d \"abc\";\n * \u003c/pre\u003e\u003c/blockquote\u003e\u003cp\u003e\n * is equivalent to:\n * \u003cblockquote\u003e\u003cpre\u003e\n *     char data[] \u003d {\u0027a\u0027, \u0027b\u0027, \u0027c\u0027};\n *     String str \u003d new String(data);\n * \u003c/pre\u003e\u003c/blockquote\u003e\u003cp\u003e\n * Here are some more examples of how strings can be used:\n * \u003cblockquote\u003e\u003cpre\u003e\n *     System.out.println(\"abc\");\n *     String cde \u003d \"cde\";\n *     System.out.println(\"abc\" + cde);\n *     String c \u003d \"abc\".substring(2,3);\n *     String d \u003d cde.substring(1, 2);\n * \u003c/pre\u003e\u003c/blockquote\u003e\n * \u003cp\u003e\n * The class {@code String} includes methods for examining\n * individual characters of the sequence, for comparing strings, for\n * searching strings, for extracting substrings, and for creating a\n * copy of a string with all characters translated to uppercase or to\n * lowercase. Case mapping is based on the Unicode Standard version\n * specified by the {@link java.lang.Character Character} class.\n * \u003cp\u003e\n * The Java language provides special support for the string\n * concatenation operator (\u0026nbsp;+\u0026nbsp;), and for conversion of\n * other objects to strings. For additional information on string\n * concatenation and conversion, see \u003ci\u003eThe Java\u0026trade; Language Specification\u003c/i\u003e.\n *\n * \u003cp\u003e Unless otherwise noted, passing a {@code null} argument to a constructor\n * or method in this class will cause a {@link NullPointerException} to be\n * thrown.\n *\n * \u003cp\u003eA {@code String} represents a string in the UTF-16 format\n * in which \u003cem\u003esupplementary characters\u003c/em\u003e are represented by \u003cem\u003esurrogate\n * pairs\u003c/em\u003e (see the section \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode\n * Character Representations\u003c/a\u003e in the {@code Character} class for\n * more information).\n * Index values refer to {@code char} code units, so a supplementary\n * character uses two positions in a {@code String}.\n * \u003cp\u003eThe {@code String} class provides methods for dealing with\n * Unicode code points (i.e., characters), in addition to those for\n * dealing with Unicode code units (i.e., {@code char} values).\n *\n * \u003cp\u003eUnless otherwise noted, methods for comparing Strings do not take locale\n * into account.  The {@link java.text.Collator} class provides methods for\n * finer-grain, locale-sensitive String comparison.\n *\n * @implNote The implementation of the string concatenation operator is left to\n * the discretion of a Java compiler, as long as the compiler ultimately conforms\n * to \u003ci\u003eThe Java\u0026trade; Language Specification\u003c/i\u003e. For example, the {@code javac} compiler\n * may implement the operator with {@code StringBuffer}, {@code StringBuilder},\n * or {@code java.lang.invoke.StringConcatFactory} depending on the JDK version. The\n * implementation of string conversion is typically through the method {@code toString},\n * defined by {@code Object} and inherited by all classes in Java.\n *\n * @author  Lee Boynton\n * @author  Arthur van Hoff\n * @author  Martin Buchholz\n * @author  Ulf Zibis\n * @see     java.lang.Object#toString()\n * @see     java.lang.StringBuffer\n * @see     java.lang.StringBuilder\n * @see     java.nio.charset.Charset\n * @since   1.0\n * @jls     15.18.1 String Concatenation Operator +\n */\n\npublic final class String\n    implements java.io.Serializable, Comparable\u003cString\u003e, CharSequence {\n\n    /**\n     * The value is used for character storage.\n     *\n     * @implNote This field is trusted by the VM, and is a subject to\n     * constant folding if String instance is constant. Overwriting this\n     * field after construction will cause problems.\n     *\n     * Additionally, it is marked with {@link Stable} to trust the contents\n     * of the array. No other facility in JDK provides this functionality (yet).\n     * {@link Stable} is safe here, because value is never null.\n     */\n    @Stable\n    private final byte[] value;\n\n    /**\n     * The identifier of the encoding used to encode the bytes in\n     * {@code value}. The supported values in this implementation are\n     *\n     * LATIN1\n     * UTF16\n     *\n     * @implNote This field is trusted by the VM, and is a subject to\n     * constant folding if String instance is constant. Overwriting this\n     * field after construction will cause problems.\n     */\n    private final byte coder;\n\n    /** Cache the hash code for the string */\n    private int hash; // Default to 0\n\n    /** use serialVersionUID from JDK 1.0.2 for interoperability */\n    private static final long serialVersionUID \u003d -6849794470754667710L;\n\n    /**\n     * If String compaction is disabled, the bytes in {@code value} are\n     * always encoded in UTF16.\n     *\n     * For methods with several possible implementation paths, when String\n     * compaction is disabled, only one code path is taken.\n     *\n     * The instance field value is generally opaque to optimizing JIT\n     * compilers. Therefore, in performance-sensitive place, an explicit\n     * check of the static boolean {@code COMPACT_STRINGS} is done first\n     * before checking the {@code coder} field since the static boolean\n     * {@code COMPACT_STRINGS} would be constant folded away by an\n     * optimizing JIT compiler. The idioms for these cases are as follows.\n     *\n     * For code such as:\n     *\n     *    if (coder \u003d\u003d LATIN1) { ... }\n     *\n     * can be written more optimally as\n     *\n     *    if (coder() \u003d\u003d LATIN1) { ... }\n     *\n     * or:\n     *\n     *    if (COMPACT_STRINGS \u0026\u0026 coder \u003d\u003d LATIN1) { ... }\n     *\n     * An optimizing JIT compiler can fold the above conditional as:\n     *\n     *    COMPACT_STRINGS \u003d\u003d true  \u003d\u003e if (coder \u003d\u003d LATIN1) { ... }\n     *    COMPACT_STRINGS \u003d\u003d false \u003d\u003e if (false)           { ... }\n     *\n     * @implNote\n     * The actual value for this field is injected by JVM. The static\n     * initialization block is used to set the value here to communicate\n     * that this static final field is not statically foldable, and to\n     * avoid any possible circular dependency during vm initialization.\n     */\n    static final boolean COMPACT_STRINGS;\n\n    static {\n        COMPACT_STRINGS \u003d true;\n    }\n\n    /**\n     * Class String is special cased within the Serialization Stream Protocol.\n     *\n     * A String instance is written into an ObjectOutputStream according to\n     * \u003ca href\u003d\"{@docRoot}/../specs/serialization/protocol.html#stream-elements\"\u003e\n     * Object Serialization Specification, Section 6.2, \"Stream Elements\"\u003c/a\u003e\n     */\n    private static final ObjectStreamField[] serialPersistentFields \u003d\n        new ObjectStreamField[0];\n\n    /**\n     * Initializes a newly created {@code String} object so that it represents\n     * an empty character sequence.  Note that use of this constructor is\n     * unnecessary since Strings are immutable.\n     */\n    public String() {\n        this.value \u003d \"\".value;\n        this.coder \u003d \"\".coder;\n    }\n\n    /**\n     * Initializes a newly created {@code String} object so that it represents\n     * the same sequence of characters as the argument; in other words, the\n     * newly created string is a copy of the argument string. Unless an\n     * explicit copy of {@code original} is needed, use of this constructor is\n     * unnecessary since Strings are immutable.\n     *\n     * @param  original\n     *         A {@code String}\n     */\n    @HotSpotIntrinsicCandidate\n    public String(String original) {\n        this.value \u003d original.value;\n        this.coder \u003d original.coder;\n        this.hash \u003d original.hash;\n    }\n\n    /**\n     * Allocates a new {@code String} so that it represents the sequence of\n     * characters currently contained in the character array argument. The\n     * contents of the character array are copied; subsequent modification of\n     * the character array does not affect the newly created string.\n     *\n     * @param  value\n     *         The initial value of the string\n     */\n    public String(char value[]) {\n        this(value, 0, value.length, null);\n    }\n\n    /**\n     * Allocates a new {@code String} that contains characters from a subarray\n     * of the character array argument. The {@code offset} argument is the\n     * index of the first character of the subarray and the {@code count}\n     * argument specifies the length of the subarray. The contents of the\n     * subarray are copied; subsequent modification of the character array does\n     * not affect the newly created string.\n     *\n     * @param  value\n     *         Array that is the source of characters\n     *\n     * @param  offset\n     *         The initial offset\n     *\n     * @param  count\n     *         The length\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative, or\n     *          {@code offset} is greater than {@code value.length - count}\n     */\n    public String(char value[], int offset, int count) {\n        this(value, offset, count, rangeCheck(value, offset, count));\n    }\n\n    private static Void rangeCheck(char[] value, int offset, int count) {\n        checkBoundsOffCount(offset, count, value.length);\n        return null;\n    }\n\n    /**\n     * Allocates a new {@code String} that contains characters from a subarray\n     * of the \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode code point\u003c/a\u003e array\n     * argument.  The {@code offset} argument is the index of the first code\n     * point of the subarray and the {@code count} argument specifies the\n     * length of the subarray.  The contents of the subarray are converted to\n     * {@code char}s; subsequent modification of the {@code int} array does not\n     * affect the newly created string.\n     *\n     * @param  codePoints\n     *         Array that is the source of Unicode code points\n     *\n     * @param  offset\n     *         The initial offset\n     *\n     * @param  count\n     *         The length\n     *\n     * @throws  IllegalArgumentException\n     *          If any invalid Unicode code point is found in {@code\n     *          codePoints}\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative, or\n     *          {@code offset} is greater than {@code codePoints.length - count}\n     *\n     * @since  1.5\n     */\n    public String(int[] codePoints, int offset, int count) {\n        checkBoundsOffCount(offset, count, codePoints.length);\n        if (count \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n            return;\n        }\n        if (COMPACT_STRINGS) {\n            byte[] val \u003d StringLatin1.toBytes(codePoints, offset, count);\n            if (val !\u003d null) {\n                this.coder \u003d LATIN1;\n                this.value \u003d val;\n                return;\n            }\n        }\n        this.coder \u003d UTF16;\n        this.value \u003d StringUTF16.toBytes(codePoints, offset, count);\n    }\n\n    /**\n     * Allocates a new {@code String} constructed from a subarray of an array\n     * of 8-bit integer values.\n     *\n     * \u003cp\u003e The {@code offset} argument is the index of the first byte of the\n     * subarray, and the {@code count} argument specifies the length of the\n     * subarray.\n     *\n     * \u003cp\u003e Each {@code byte} in the subarray is converted to a {@code char} as\n     * specified in the {@link #String(byte[],int) String(byte[],int)} constructor.\n     *\n     * @deprecated This method does not properly convert bytes into characters.\n     * As of JDK\u0026nbsp;1.1, the preferred way to do this is via the\n     * {@code String} constructors that take a {@link\n     * java.nio.charset.Charset}, charset name, or that use the platform\u0027s\n     * default charset.\n     *\n     * @param  ascii\n     *         The bytes to be converted to characters\n     *\n     * @param  hibyte\n     *         The top 8 bits of each 16-bit Unicode code unit\n     *\n     * @param  offset\n     *         The initial offset\n     * @param  count\n     *         The length\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative, or\n     *          {@code offset} is greater than {@code ascii.length - count}\n     *\n     * @see  #String(byte[], int)\n     * @see  #String(byte[], int, int, java.lang.String)\n     * @see  #String(byte[], int, int, java.nio.charset.Charset)\n     * @see  #String(byte[], int, int)\n     * @see  #String(byte[], java.lang.String)\n     * @see  #String(byte[], java.nio.charset.Charset)\n     * @see  #String(byte[])\n     */\n    @Deprecated(since\u003d\"1.1\")\n    public String(byte ascii[], int hibyte, int offset, int count) {\n        checkBoundsOffCount(offset, count, ascii.length);\n        if (count \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n            return;\n        }\n        if (COMPACT_STRINGS \u0026\u0026 (byte)hibyte \u003d\u003d 0) {\n            this.value \u003d Arrays.copyOfRange(ascii, offset, offset + count);\n            this.coder \u003d LATIN1;\n        } else {\n            hibyte \u003c\u003c\u003d 8;\n            byte[] val \u003d StringUTF16.newBytesFor(count);\n            for (int i \u003d 0; i \u003c count; i++) {\n                StringUTF16.putChar(val, i, hibyte | (ascii[offset++] \u0026 0xff));\n            }\n            this.value \u003d val;\n            this.coder \u003d UTF16;\n        }\n    }\n\n    /**\n     * Allocates a new {@code String} containing characters constructed from\n     * an array of 8-bit integer values. Each character \u003ci\u003ec\u003c/i\u003e in the\n     * resulting string is constructed from the corresponding component\n     * \u003ci\u003eb\u003c/i\u003e in the byte array such that:\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     *     \u003cb\u003e\u003ci\u003ec\u003c/i\u003e\u003c/b\u003e \u003d\u003d (char)(((hibyte \u0026amp; 0xff) \u0026lt;\u0026lt; 8)\n     *                         | (\u003cb\u003e\u003ci\u003eb\u003c/i\u003e\u003c/b\u003e \u0026amp; 0xff))\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @deprecated  This method does not properly convert bytes into\n     * characters.  As of JDK\u0026nbsp;1.1, the preferred way to do this is via the\n     * {@code String} constructors that take a {@link\n     * java.nio.charset.Charset}, charset name, or that use the platform\u0027s\n     * default charset.\n     *\n     * @param  ascii\n     *         The bytes to be converted to characters\n     *\n     * @param  hibyte\n     *         The top 8 bits of each 16-bit Unicode code unit\n     *\n     * @see  #String(byte[], int, int, java.lang.String)\n     * @see  #String(byte[], int, int, java.nio.charset.Charset)\n     * @see  #String(byte[], int, int)\n     * @see  #String(byte[], java.lang.String)\n     * @see  #String(byte[], java.nio.charset.Charset)\n     * @see  #String(byte[])\n     */\n    @Deprecated(since\u003d\"1.1\")\n    public String(byte ascii[], int hibyte) {\n        this(ascii, hibyte, 0, ascii.length);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the specified charset.  The length of the new {@code String}\n     * is a function of the charset, and hence may not be equal to the length\n     * of the subarray.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code length} is negative, or\n     *          {@code offset} is greater than {@code bytes.length - length}\n     *\n     * @since  1.1\n     */\n    public String(byte bytes[], int offset, int length, String charsetName)\n            throws UnsupportedEncodingException {\n        if (charsetName \u003d\u003d null)\n            throw new NullPointerException(\"charsetName\");\n        checkBoundsOffCount(offset, length, bytes.length);\n        StringCoding.Result ret \u003d\n            StringCoding.decode(charsetName, bytes, offset, length);\n        this.value \u003d ret.value;\n        this.coder \u003d ret.coder;\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the specified {@linkplain java.nio.charset.Charset charset}.\n     * The length of the new {@code String} is a function of the charset, and\n     * hence may not be equal to the length of the subarray.\n     *\n     * \u003cp\u003e This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\u0027s default replacement string.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset charset} to be used to\n     *         decode the {@code bytes}\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code length} is negative, or\n     *          {@code offset} is greater than {@code bytes.length - length}\n     *\n     * @since  1.6\n     */\n    public String(byte bytes[], int offset, int length, Charset charset) {\n        if (charset \u003d\u003d null)\n            throw new NullPointerException(\"charset\");\n        checkBoundsOffCount(offset, length, bytes.length);\n        StringCoding.Result ret \u003d\n            StringCoding.decode(charset, bytes, offset, length);\n        this.value \u003d ret.value;\n        this.coder \u003d ret.coder;\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of bytes\n     * using the specified {@linkplain java.nio.charset.Charset charset}.  The\n     * length of the new {@code String} is a function of the charset, and hence\n     * may not be equal to the length of the byte array.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  1.1\n     */\n    public String(byte bytes[], String charsetName)\n            throws UnsupportedEncodingException {\n        this(bytes, 0, bytes.length, charsetName);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of\n     * bytes using the specified {@linkplain java.nio.charset.Charset charset}.\n     * The length of the new {@code String} is a function of the charset, and\n     * hence may not be equal to the length of the byte array.\n     *\n     * \u003cp\u003e This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\u0027s default replacement string.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset charset} to be used to\n     *         decode the {@code bytes}\n     *\n     * @since  1.6\n     */\n    public String(byte bytes[], Charset charset) {\n        this(bytes, 0, bytes.length, charset);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the platform\u0027s default charset.  The length of the new\n     * {@code String} is a function of the charset, and hence may not be equal\n     * to the length of the subarray.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code length} is negative, or\n     *          {@code offset} is greater than {@code bytes.length - length}\n     *\n     * @since  1.1\n     */\n    public String(byte bytes[], int offset, int length) {\n        checkBoundsOffCount(offset, length, bytes.length);\n        StringCoding.Result ret \u003d StringCoding.decode(bytes, offset, length);\n        this.value \u003d ret.value;\n        this.coder \u003d ret.coder;\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of bytes\n     * using the platform\u0027s default charset.  The length of the new {@code\n     * String} is a function of the charset, and hence may not be equal to the\n     * length of the byte array.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @since  1.1\n     */\n    public String(byte[] bytes) {\n        this(bytes, 0, bytes.length);\n    }\n\n    /**\n     * Allocates a new string that contains the sequence of characters\n     * currently contained in the string buffer argument. The contents of the\n     * string buffer are copied; subsequent modification of the string buffer\n     * does not affect the newly created string.\n     *\n     * @param  buffer\n     *         A {@code StringBuffer}\n     */\n    public String(StringBuffer buffer) {\n        this(buffer.toString());\n    }\n\n    /**\n     * Allocates a new string that contains the sequence of characters\n     * currently contained in the string builder argument. The contents of the\n     * string builder are copied; subsequent modification of the string builder\n     * does not affect the newly created string.\n     *\n     * \u003cp\u003e This constructor is provided to ease migration to {@code\n     * StringBuilder}. Obtaining a string from a string builder via the {@code\n     * toString} method is likely to run faster and is generally preferred.\n     *\n     * @param   builder\n     *          A {@code StringBuilder}\n     *\n     * @since  1.5\n     */\n    public String(StringBuilder builder) {\n        this(builder, null);\n    }\n\n    /**\n     * Returns the length of this string.\n     * The length is equal to the number of \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode\n     * code units\u003c/a\u003e in the string.\n     *\n     * @return  the length of the sequence of characters represented by this\n     *          object.\n     */\n    public int length() {\n        return value.length \u003e\u003e coder();\n    }\n\n    /**\n     * Returns {@code true} if, and only if, {@link #length()} is {@code 0}.\n     *\n     * @return {@code true} if {@link #length()} is {@code 0}, otherwise\n     * {@code false}\n     *\n     * @since 1.6\n     */\n    public boolean isEmpty() {\n        return value.length \u003d\u003d 0;\n    }\n\n    /**\n     * Returns the {@code char} value at the\n     * specified index. An index ranges from {@code 0} to\n     * {@code length() - 1}. The first {@code char} value of the sequence\n     * is at index {@code 0}, the next at index {@code 1},\n     * and so on, as for array indexing.\n     *\n     * \u003cp\u003eIf the {@code char} value specified by the index is a\n     * \u003ca href\u003d\"Character.html#unicode\"\u003esurrogate\u003c/a\u003e, the surrogate\n     * value is returned.\n     *\n     * @param      index   the index of the {@code char} value.\n     * @return     the {@code char} value at the specified index of this string.\n     *             The first {@code char} value is at index {@code 0}.\n     * @exception  IndexOutOfBoundsException  if the {@code index}\n     *             argument is negative or not less than the length of this\n     *             string.\n     */\n    public char charAt(int index) {\n        if (isLatin1()) {\n            return StringLatin1.charAt(value, index);\n        } else {\n            return StringUTF16.charAt(value, index);\n        }\n    }\n\n    /**\n     * Returns the character (Unicode code point) at the specified\n     * index. The index refers to {@code char} values\n     * (Unicode code units) and ranges from {@code 0} to\n     * {@link #length()}{@code  - 1}.\n     *\n     * \u003cp\u003e If the {@code char} value specified at the given index\n     * is in the high-surrogate range, the following index is less\n     * than the length of this {@code String}, and the\n     * {@code char} value at the following index is in the\n     * low-surrogate range, then the supplementary code point\n     * corresponding to this surrogate pair is returned. Otherwise,\n     * the {@code char} value at the given index is returned.\n     *\n     * @param      index the index to the {@code char} values\n     * @return     the code point value of the character at the\n     *             {@code index}\n     * @exception  IndexOutOfBoundsException  if the {@code index}\n     *             argument is negative or not less than the length of this\n     *             string.\n     * @since      1.5\n     */\n    public int codePointAt(int index) {\n        if (isLatin1()) {\n            checkIndex(index, value.length);\n            return value[index] \u0026 0xff;\n        }\n        int length \u003d value.length \u003e\u003e 1;\n        checkIndex(index, length);\n        return StringUTF16.codePointAt(value, index, length);\n    }\n\n    /**\n     * Returns the character (Unicode code point) before the specified\n     * index. The index refers to {@code char} values\n     * (Unicode code units) and ranges from {@code 1} to {@link\n     * CharSequence#length() length}.\n     *\n     * \u003cp\u003e If the {@code char} value at {@code (index - 1)}\n     * is in the low-surrogate range, {@code (index - 2)} is not\n     * negative, and the {@code char} value at {@code (index -\n     * 2)} is in the high-surrogate range, then the\n     * supplementary code point value of the surrogate pair is\n     * returned. If the {@code char} value at {@code index -\n     * 1} is an unpaired low-surrogate or a high-surrogate, the\n     * surrogate value is returned.\n     *\n     * @param     index the index following the code point that should be returned\n     * @return    the Unicode code point value before the given index.\n     * @exception IndexOutOfBoundsException if the {@code index}\n     *            argument is less than 1 or greater than the length\n     *            of this string.\n     * @since     1.5\n     */\n    public int codePointBefore(int index) {\n        int i \u003d index - 1;\n        if (i \u003c 0 || i \u003e\u003d length()) {\n            throw new StringIndexOutOfBoundsException(index);\n        }\n        if (isLatin1()) {\n            return (value[i] \u0026 0xff);\n        }\n        return StringUTF16.codePointBefore(value, index);\n    }\n\n    /**\n     * Returns the number of Unicode code points in the specified text\n     * range of this {@code String}. The text range begins at the\n     * specified {@code beginIndex} and extends to the\n     * {@code char} at index {@code endIndex - 1}. Thus the\n     * length (in {@code char}s) of the text range is\n     * {@code endIndex-beginIndex}. Unpaired surrogates within\n     * the text range count as one code point each.\n     *\n     * @param beginIndex the index to the first {@code char} of\n     * the text range.\n     * @param endIndex the index after the last {@code char} of\n     * the text range.\n     * @return the number of Unicode code points in the specified text\n     * range\n     * @exception IndexOutOfBoundsException if the\n     * {@code beginIndex} is negative, or {@code endIndex}\n     * is larger than the length of this {@code String}, or\n     * {@code beginIndex} is larger than {@code endIndex}.\n     * @since  1.5\n     */\n    public int codePointCount(int beginIndex, int endIndex) {\n        if (beginIndex \u003c 0 || beginIndex \u003e endIndex ||\n            endIndex \u003e length()) {\n            throw new IndexOutOfBoundsException();\n        }\n        if (isLatin1()) {\n            return endIndex - beginIndex;\n        }\n        return StringUTF16.codePointCount(value, beginIndex, endIndex);\n    }\n\n    /**\n     * Returns the index within this {@code String} that is\n     * offset from the given {@code index} by\n     * {@code codePointOffset} code points. Unpaired surrogates\n     * within the text range given by {@code index} and\n     * {@code codePointOffset} count as one code point each.\n     *\n     * @param index the index to be offset\n     * @param codePointOffset the offset in code points\n     * @return the index within this {@code String}\n     * @exception IndexOutOfBoundsException if {@code index}\n     *   is negative or larger then the length of this\n     *   {@code String}, or if {@code codePointOffset} is positive\n     *   and the substring starting with {@code index} has fewer\n     *   than {@code codePointOffset} code points,\n     *   or if {@code codePointOffset} is negative and the substring\n     *   before {@code index} has fewer than the absolute value\n     *   of {@code codePointOffset} code points.\n     * @since 1.5\n     */\n    public int offsetByCodePoints(int index, int codePointOffset) {\n        if (index \u003c 0 || index \u003e length()) {\n            throw new IndexOutOfBoundsException();\n        }\n        return Character.offsetByCodePoints(this, index, codePointOffset);\n    }\n\n    /**\n     * Copies characters from this string into the destination character\n     * array.\n     * \u003cp\u003e\n     * The first character to be copied is at index {@code srcBegin};\n     * the last character to be copied is at index {@code srcEnd-1}\n     * (thus the total number of characters to be copied is\n     * {@code srcEnd-srcBegin}). The characters are copied into the\n     * subarray of {@code dst} starting at index {@code dstBegin}\n     * and ending at index:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     *     dstBegin + (srcEnd-srcBegin) - 1\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param      srcBegin   index of the first character in the string\n     *                        to copy.\n     * @param      srcEnd     index after the last character in the string\n     *                        to copy.\n     * @param      dst        the destination array.\n     * @param      dstBegin   the start offset in the destination array.\n     * @exception IndexOutOfBoundsException If any of the following\n     *            is true:\n     *            \u003cul\u003e\u003cli\u003e{@code srcBegin} is negative.\n     *            \u003cli\u003e{@code srcBegin} is greater than {@code srcEnd}\n     *            \u003cli\u003e{@code srcEnd} is greater than the length of this\n     *                string\n     *            \u003cli\u003e{@code dstBegin} is negative\n     *            \u003cli\u003e{@code dstBegin+(srcEnd-srcBegin)} is larger than\n     *                {@code dst.length}\u003c/ul\u003e\n     */\n    public void getChars(int srcBegin, int srcEnd, char dst[], int dstBegin) {\n        checkBoundsBeginEnd(srcBegin, srcEnd, length());\n        checkBoundsOffCount(dstBegin, srcEnd - srcBegin, dst.length);\n        if (isLatin1()) {\n            StringLatin1.getChars(value, srcBegin, srcEnd, dst, dstBegin);\n        } else {\n            StringUTF16.getChars(value, srcBegin, srcEnd, dst, dstBegin);\n        }\n    }\n\n    /**\n     * Copies characters from this string into the destination byte array. Each\n     * byte receives the 8 low-order bits of the corresponding character. The\n     * eight high-order bits of each character are not copied and do not\n     * participate in the transfer in any way.\n     *\n     * \u003cp\u003e The first character to be copied is at index {@code srcBegin}; the\n     * last character to be copied is at index {@code srcEnd-1}.  The total\n     * number of characters to be copied is {@code srcEnd-srcBegin}. The\n     * characters, converted to bytes, are copied into the subarray of {@code\n     * dst} starting at index {@code dstBegin} and ending at index:\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     *     dstBegin + (srcEnd-srcBegin) - 1\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @deprecated  This method does not properly convert characters into\n     * bytes.  As of JDK\u0026nbsp;1.1, the preferred way to do this is via the\n     * {@link #getBytes()} method, which uses the platform\u0027s default charset.\n     *\n     * @param  srcBegin\n     *         Index of the first character in the string to copy\n     *\n     * @param  srcEnd\n     *         Index after the last character in the string to copy\n     *\n     * @param  dst\n     *         The destination array\n     *\n     * @param  dstBegin\n     *         The start offset in the destination array\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If any of the following is true:\n     *          \u003cul\u003e\n     *            \u003cli\u003e {@code srcBegin} is negative\n     *            \u003cli\u003e {@code srcBegin} is greater than {@code srcEnd}\n     *            \u003cli\u003e {@code srcEnd} is greater than the length of this String\n     *            \u003cli\u003e {@code dstBegin} is negative\n     *            \u003cli\u003e {@code dstBegin+(srcEnd-srcBegin)} is larger than {@code\n     *                 dst.length}\n     *          \u003c/ul\u003e\n     */\n    @Deprecated(since\u003d\"1.1\")\n    public void getBytes(int srcBegin, int srcEnd, byte dst[], int dstBegin) {\n        checkBoundsBeginEnd(srcBegin, srcEnd, length());\n        Objects.requireNonNull(dst);\n        checkBoundsOffCount(dstBegin, srcEnd - srcBegin, dst.length);\n        if (isLatin1()) {\n            StringLatin1.getBytes(value, srcBegin, srcEnd, dst, dstBegin);\n        } else {\n            StringUTF16.getBytes(value, srcBegin, srcEnd, dst, dstBegin);\n        }\n    }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the named\n     * charset, storing the result into a new byte array.\n     *\n     * \u003cp\u003e The behavior of this method when this string cannot be encoded in\n     * the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetEncoder} class should be used when more control\n     * over the encoding process is required.\n     *\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @return  The resultant byte array\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  1.1\n     */\n    public byte[] getBytes(String charsetName)\n            throws UnsupportedEncodingException {\n        if (charsetName \u003d\u003d null) throw new NullPointerException();\n        return StringCoding.encode(charsetName, coder(), value);\n    }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the given\n     * {@linkplain java.nio.charset.Charset charset}, storing the result into a\n     * new byte array.\n     *\n     * \u003cp\u003e This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\u0027s default replacement byte array.  The\n     * {@link java.nio.charset.CharsetEncoder} class should be used when more\n     * control over the encoding process is required.\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset} to be used to encode\n     *         the {@code String}\n     *\n     * @return  The resultant byte array\n     *\n     * @since  1.6\n     */\n    public byte[] getBytes(Charset charset) {\n        if (charset \u003d\u003d null) throw new NullPointerException();\n        return StringCoding.encode(charset, coder(), value);\n     }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the\n     * platform\u0027s default charset, storing the result into a new byte array.\n     *\n     * \u003cp\u003e The behavior of this method when this string cannot be encoded in\n     * the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetEncoder} class should be used when more control\n     * over the encoding process is required.\n     *\n     * @return  The resultant byte array\n     *\n     * @since      1.1\n     */\n    public byte[] getBytes() {\n        return StringCoding.encode(coder(), value);\n    }\n\n    /**\n     * Compares this string to the specified object.  The result is {@code\n     * true} if and only if the argument is not {@code null} and is a {@code\n     * String} object that represents the same sequence of characters as this\n     * object.\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param  anObject\n     *         The object to compare this {@code String} against\n     *\n     * @return  {@code true} if the given object represents a {@code String}\n     *          equivalent to this string, {@code false} otherwise\n     *\n     * @see  #compareTo(String)\n     * @see  #equalsIgnoreCase(String)\n     */\n    public boolean equals(Object anObject) {\n        if (this \u003d\u003d anObject) {\n            return true;\n        }\n        if (anObject instanceof String) {\n            String aString \u003d (String)anObject;\n            if (coder() \u003d\u003d aString.coder()) {\n                return isLatin1() ? StringLatin1.equals(value, aString.value)\n                                  : StringUTF16.equals(value, aString.value);\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Compares this string to the specified {@code StringBuffer}.  The result\n     * is {@code true} if and only if this {@code String} represents the same\n     * sequence of characters as the specified {@code StringBuffer}. This method\n     * synchronizes on the {@code StringBuffer}.\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param  sb\n     *         The {@code StringBuffer} to compare this {@code String} against\n     *\n     * @return  {@code true} if this {@code String} represents the same\n     *          sequence of characters as the specified {@code StringBuffer},\n     *          {@code false} otherwise\n     *\n     * @since  1.4\n     */\n    public boolean contentEquals(StringBuffer sb) {\n        return contentEquals((CharSequence)sb);\n    }\n\n    private boolean nonSyncContentEquals(AbstractStringBuilder sb) {\n        int len \u003d length();\n        if (len !\u003d sb.length()) {\n            return false;\n        }\n        byte v1[] \u003d value;\n        byte v2[] \u003d sb.getValue();\n        if (coder() \u003d\u003d sb.getCoder()) {\n            int n \u003d v1.length;\n            for (int i \u003d 0; i \u003c n; i++) {\n                if (v1[i] !\u003d v2[i]) {\n                    return false;\n                }\n            }\n        } else {\n            if (!isLatin1()) {  // utf16 str and latin1 abs can never be \"equal\"\n                return false;\n            }\n            return StringUTF16.contentEquals(v1, v2, len);\n        }\n        return true;\n    }\n\n    /**\n     * Compares this string to the specified {@code CharSequence}.  The\n     * result is {@code true} if and only if this {@code String} represents the\n     * same sequence of char values as the specified sequence. Note that if the\n     * {@code CharSequence} is a {@code StringBuffer} then the method\n     * synchronizes on it.\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param  cs\n     *         The sequence to compare this {@code String} against\n     *\n     * @return  {@code true} if this {@code String} represents the same\n     *          sequence of char values as the specified sequence, {@code\n     *          false} otherwise\n     *\n     * @since  1.5\n     */\n    public boolean contentEquals(CharSequence cs) {\n        // Argument is a StringBuffer, StringBuilder\n        if (cs instanceof AbstractStringBuilder) {\n            if (cs instanceof StringBuffer) {\n                synchronized(cs) {\n                   return nonSyncContentEquals((AbstractStringBuilder)cs);\n                }\n            } else {\n                return nonSyncContentEquals((AbstractStringBuilder)cs);\n            }\n        }\n        // Argument is a String\n        if (cs instanceof String) {\n            return equals(cs);\n        }\n        // Argument is a generic CharSequence\n        int n \u003d cs.length();\n        if (n !\u003d length()) {\n            return false;\n        }\n        byte[] val \u003d this.value;\n        if (isLatin1()) {\n            for (int i \u003d 0; i \u003c n; i++) {\n                if ((val[i] \u0026 0xff) !\u003d cs.charAt(i)) {\n                    return false;\n                }\n            }\n        } else {\n            if (!StringUTF16.contentEquals(val, cs, n)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Compares this {@code String} to another {@code String}, ignoring case\n     * considerations.  Two strings are considered equal ignoring case if they\n     * are of the same length and corresponding characters in the two strings\n     * are equal ignoring case.\n     *\n     * \u003cp\u003e Two characters {@code c1} and {@code c2} are considered the same\n     * ignoring case if at least one of the following is true:\n     * \u003cul\u003e\n     *   \u003cli\u003e The two characters are the same (as compared by the\n     *        {@code \u003d\u003d} operator)\n     *   \u003cli\u003e Calling {@code Character.toLowerCase(Character.toUpperCase(char))}\n     *        on each character produces the same result\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that this method does \u003cem\u003enot\u003c/em\u003e take locale into account, and\n     * will result in unsatisfactory results for certain locales.  The\n     * {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @param  anotherString\n     *         The {@code String} to compare this {@code String} against\n     *\n     * @return  {@code true} if the argument is not {@code null} and it\n     *          represents an equivalent {@code String} ignoring case; {@code\n     *          false} otherwise\n     *\n     * @see  #equals(Object)\n     */\n    public boolean equalsIgnoreCase(String anotherString) {\n        return (this \u003d\u003d anotherString) ? true\n                : (anotherString !\u003d null)\n                \u0026\u0026 (anotherString.length() \u003d\u003d length())\n                \u0026\u0026 regionMatches(true, 0, anotherString, 0, length());\n    }\n\n    /**\n     * Compares two strings lexicographically.\n     * The comparison is based on the Unicode value of each character in\n     * the strings. The character sequence represented by this\n     * {@code String} object is compared lexicographically to the\n     * character sequence represented by the argument string. The result is\n     * a negative integer if this {@code String} object\n     * lexicographically precedes the argument string. The result is a\n     * positive integer if this {@code String} object lexicographically\n     * follows the argument string. The result is zero if the strings\n     * are equal; {@code compareTo} returns {@code 0} exactly when\n     * the {@link #equals(Object)} method would return {@code true}.\n     * \u003cp\u003e\n     * This is the definition of lexicographic ordering. If two strings are\n     * different, then either they have different characters at some index\n     * that is a valid index for both strings, or their lengths are different,\n     * or both. If they have different characters at one or more index\n     * positions, let \u003ci\u003ek\u003c/i\u003e be the smallest such index; then the string\n     * whose character at position \u003ci\u003ek\u003c/i\u003e has the smaller value, as\n     * determined by using the {@code \u003c} operator, lexicographically precedes the\n     * other string. In this case, {@code compareTo} returns the\n     * difference of the two character values at position {@code k} in\n     * the two string -- that is, the value:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(k)-anotherString.charAt(k)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * If there is no index position at which they differ, then the shorter\n     * string lexicographically precedes the longer string. In this case,\n     * {@code compareTo} returns the difference of the lengths of the\n     * strings -- that is, the value:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.length()-anotherString.length()\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param   anotherString   the {@code String} to be compared.\n     * @return  the value {@code 0} if the argument string is equal to\n     *          this string; a value less than {@code 0} if this string\n     *          is lexicographically less than the string argument; and a\n     *          value greater than {@code 0} if this string is\n     *          lexicographically greater than the string argument.\n     */\n    public int compareTo(String anotherString) {\n        byte v1[] \u003d value;\n        byte v2[] \u003d anotherString.value;\n        if (coder() \u003d\u003d anotherString.coder()) {\n            return isLatin1() ? StringLatin1.compareTo(v1, v2)\n                              : StringUTF16.compareTo(v1, v2);\n        }\n        return isLatin1() ? StringLatin1.compareToUTF16(v1, v2)\n                          : StringUTF16.compareToLatin1(v1, v2);\n     }\n\n    /**\n     * A Comparator that orders {@code String} objects as by\n     * {@code compareToIgnoreCase}. This comparator is serializable.\n     * \u003cp\u003e\n     * Note that this Comparator does \u003cem\u003enot\u003c/em\u003e take locale into account,\n     * and will result in an unsatisfactory ordering for certain locales.\n     * The {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @see     java.text.Collator\n     * @since   1.2\n     */\n    public static final Comparator\u003cString\u003e CASE_INSENSITIVE_ORDER\n                                         \u003d new CaseInsensitiveComparator();\n    private static class CaseInsensitiveComparator\n            implements Comparator\u003cString\u003e, java.io.Serializable {\n        // use serialVersionUID from JDK 1.2.2 for interoperability\n        private static final long serialVersionUID \u003d 8575799808933029326L;\n\n        public int compare(String s1, String s2) {\n            byte v1[] \u003d s1.value;\n            byte v2[] \u003d s2.value;\n            if (s1.coder() \u003d\u003d s2.coder()) {\n                return s1.isLatin1() ? StringLatin1.compareToCI(v1, v2)\n                                     : StringUTF16.compareToCI(v1, v2);\n            }\n            return s1.isLatin1() ? StringLatin1.compareToCI_UTF16(v1, v2)\n                                 : StringUTF16.compareToCI_Latin1(v1, v2);\n        }\n\n        /** Replaces the de-serialized object. */\n        private Object readResolve() { return CASE_INSENSITIVE_ORDER; }\n    }\n\n    /**\n     * Compares two strings lexicographically, ignoring case\n     * differences. This method returns an integer whose sign is that of\n     * calling {@code compareTo} with normalized versions of the strings\n     * where case differences have been eliminated by calling\n     * {@code Character.toLowerCase(Character.toUpperCase(character))} on\n     * each character.\n     * \u003cp\u003e\n     * Note that this method does \u003cem\u003enot\u003c/em\u003e take locale into account,\n     * and will result in an unsatisfactory ordering for certain locales.\n     * The {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @param   str   the {@code String} to be compared.\n     * @return  a negative integer, zero, or a positive integer as the\n     *          specified String is greater than, equal to, or less\n     *          than this String, ignoring case considerations.\n     * @see     java.text.Collator\n     * @since   1.2\n     */\n    public int compareToIgnoreCase(String str) {\n        return CASE_INSENSITIVE_ORDER.compare(this, str);\n    }\n\n    /**\n     * Tests if two string regions are equal.\n     * \u003cp\u003e\n     * A substring of this {@code String} object is compared to a substring\n     * of the argument other. The result is true if these substrings\n     * represent identical character sequences. The substring of this\n     * {@code String} object to be compared begins at index {@code toffset}\n     * and has length {@code len}. The substring of other to be compared\n     * begins at index {@code ooffset} and has length {@code len}. The\n     * result is {@code false} if and only if at least one of the following\n     * is true:\n     * \u003cul\u003e\u003cli\u003e{@code toffset} is negative.\n     * \u003cli\u003e{@code ooffset} is negative.\n     * \u003cli\u003e{@code toffset+len} is greater than the length of this\n     * {@code String} object.\n     * \u003cli\u003e{@code ooffset+len} is greater than the length of the other\n     * argument.\n     * \u003cli\u003eThere is some nonnegative integer \u003ci\u003ek\u003c/i\u003e less than {@code len}\n     * such that:\n     * {@code this.charAt(toffset + }\u003ci\u003ek\u003c/i\u003e{@code ) !\u003d other.charAt(ooffset + }\n     * \u003ci\u003ek\u003c/i\u003e{@code )}\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that this method does \u003cem\u003enot\u003c/em\u003e take locale into account.  The\n     * {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @param   toffset   the starting offset of the subregion in this string.\n     * @param   other     the string argument.\n     * @param   ooffset   the starting offset of the subregion in the string\n     *                    argument.\n     * @param   len       the number of characters to compare.\n     * @return  {@code true} if the specified subregion of this string\n     *          exactly matches the specified subregion of the string argument;\n     *          {@code false} otherwise.\n     */\n    public boolean regionMatches(int toffset, String other, int ooffset, int len) {\n        byte tv[] \u003d value;\n        byte ov[] \u003d other.value;\n        // Note: toffset, ooffset, or len might be near -1\u003e\u003e\u003e1.\n        if ((ooffset \u003c 0) || (toffset \u003c 0) ||\n             (toffset \u003e (long)length() - len) ||\n             (ooffset \u003e (long)other.length() - len)) {\n            return false;\n        }\n        if (coder() \u003d\u003d other.coder()) {\n            if (!isLatin1() \u0026\u0026 (len \u003e 0)) {\n                toffset \u003d toffset \u003c\u003c 1;\n                ooffset \u003d ooffset \u003c\u003c 1;\n                len \u003d len \u003c\u003c 1;\n            }\n            while (len-- \u003e 0) {\n                if (tv[toffset++] !\u003d ov[ooffset++]) {\n                    return false;\n                }\n            }\n        } else {\n            if (coder() \u003d\u003d LATIN1) {\n                while (len-- \u003e 0) {\n                    if (StringLatin1.getChar(tv, toffset++) !\u003d\n                        StringUTF16.getChar(ov, ooffset++)) {\n                        return false;\n                    }\n                }\n            } else {\n                while (len-- \u003e 0) {\n                    if (StringUTF16.getChar(tv, toffset++) !\u003d\n                        StringLatin1.getChar(ov, ooffset++)) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Tests if two string regions are equal.\n     * \u003cp\u003e\n     * A substring of this {@code String} object is compared to a substring\n     * of the argument {@code other}. The result is {@code true} if these\n     * substrings represent character sequences that are the same, ignoring\n     * case if and only if {@code ignoreCase} is true. The substring of\n     * this {@code String} object to be compared begins at index\n     * {@code toffset} and has length {@code len}. The substring of\n     * {@code other} to be compared begins at index {@code ooffset} and\n     * has length {@code len}. The result is {@code false} if and only if\n     * at least one of the following is true:\n     * \u003cul\u003e\u003cli\u003e{@code toffset} is negative.\n     * \u003cli\u003e{@code ooffset} is negative.\n     * \u003cli\u003e{@code toffset+len} is greater than the length of this\n     * {@code String} object.\n     * \u003cli\u003e{@code ooffset+len} is greater than the length of the other\n     * argument.\n     * \u003cli\u003e{@code ignoreCase} is {@code false} and there is some nonnegative\n     * integer \u003ci\u003ek\u003c/i\u003e less than {@code len} such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(toffset+k) !\u003d other.charAt(ooffset+k)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * \u003cli\u003e{@code ignoreCase} is {@code true} and there is some nonnegative\n     * integer \u003ci\u003ek\u003c/i\u003e less than {@code len} such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * Character.toLowerCase(Character.toUpperCase(this.charAt(toffset+k))) !\u003d\n     Character.toLowerCase(Character.toUpperCase(other.charAt(ooffset+k)))\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that this method does \u003cem\u003enot\u003c/em\u003e take locale into account,\n     * and will result in unsatisfactory results for certain locales when\n     * {@code ignoreCase} is {@code true}.  The {@link java.text.Collator} class\n     * provides locale-sensitive comparison.\n     *\n     * @param   ignoreCase   if {@code true}, ignore case when comparing\n     *                       characters.\n     * @param   toffset      the starting offset of the subregion in this\n     *                       string.\n     * @param   other        the string argument.\n     * @param   ooffset      the starting offset of the subregion in the string\n     *                       argument.\n     * @param   len          the number of characters to compare.\n     * @return  {@code true} if the specified subregion of this string\n     *          matches the specified subregion of the string argument;\n     *          {@code false} otherwise. Whether the matching is exact\n     *          or case insensitive depends on the {@code ignoreCase}\n     *          argument.\n     */\n    public boolean regionMatches(boolean ignoreCase, int toffset,\n            String other, int ooffset, int len) {\n        if (!ignoreCase) {\n            return regionMatches(toffset, other, ooffset, len);\n        }\n        // Note: toffset, ooffset, or len might be near -1\u003e\u003e\u003e1.\n        if ((ooffset \u003c 0) || (toffset \u003c 0)\n                || (toffset \u003e (long)length() - len)\n                || (ooffset \u003e (long)other.length() - len)) {\n            return false;\n        }\n        byte tv[] \u003d value;\n        byte ov[] \u003d other.value;\n        if (coder() \u003d\u003d other.coder()) {\n            return isLatin1()\n              ? StringLatin1.regionMatchesCI(tv, toffset, ov, ooffset, len)\n              : StringUTF16.regionMatchesCI(tv, toffset, ov, ooffset, len);\n        }\n        return isLatin1()\n              ? StringLatin1.regionMatchesCI_UTF16(tv, toffset, ov, ooffset, len)\n              : StringUTF16.regionMatchesCI_Latin1(tv, toffset, ov, ooffset, len);\n    }\n\n    /**\n     * Tests if the substring of this string beginning at the\n     * specified index starts with the specified prefix.\n     *\n     * @param   prefix    the prefix.\n     * @param   toffset   where to begin looking in this string.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a prefix of the substring of this object starting\n     *          at index {@code toffset}; {@code false} otherwise.\n     *          The result is {@code false} if {@code toffset} is\n     *          negative or greater than the length of this\n     *          {@code String} object; otherwise the result is the same\n     *          as the result of the expression\n     *          \u003cpre\u003e\n     *          this.substring(toffset).startsWith(prefix)\n     *          \u003c/pre\u003e\n     */\n    public boolean startsWith(String prefix, int toffset) {\n        // Note: toffset might be near -1\u003e\u003e\u003e1.\n        if (toffset \u003c 0 || toffset \u003e length() - prefix.length()) {\n            return false;\n        }\n        byte ta[] \u003d value;\n        byte pa[] \u003d prefix.value;\n        int po \u003d 0;\n        int pc \u003d pa.length;\n        if (coder() \u003d\u003d prefix.coder()) {\n            int to \u003d isLatin1() ? toffset : toffset \u003c\u003c 1;\n            while (po \u003c pc) {\n                if (ta[to++] !\u003d pa[po++]) {\n                    return false;\n                }\n            }\n        } else {\n            if (isLatin1()) {  // \u0026\u0026 pcoder \u003d\u003d UTF16\n                return false;\n            }\n            // coder \u003d\u003d UTF16 \u0026\u0026 pcoder \u003d\u003d LATIN1)\n            while (po \u003c pc) {\n                if (StringUTF16.getChar(ta, toffset++) !\u003d (pa[po++] \u0026 0xff)) {\n                    return false;\n               }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Tests if this string starts with the specified prefix.\n     *\n     * @param   prefix   the prefix.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a prefix of the character sequence represented by\n     *          this string; {@code false} otherwise.\n     *          Note also that {@code true} will be returned if the\n     *          argument is an empty string or is equal to this\n     *          {@code String} object as determined by the\n     *          {@link #equals(Object)} method.\n     * @since   1.0\n     */\n    public boolean startsWith(String prefix) {\n        return startsWith(prefix, 0);\n    }\n\n    /**\n     * Tests if this string ends with the specified suffix.\n     *\n     * @param   suffix   the suffix.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a suffix of the character sequence represented by\n     *          this object; {@code false} otherwise. Note that the\n     *          result will be {@code true} if the argument is the\n     *          empty string or is equal to this {@code String} object\n     *          as determined by the {@link #equals(Object)} method.\n     */\n    public boolean endsWith(String suffix) {\n        return startsWith(suffix, length() - suffix.length());\n    }\n\n    /**\n     * Returns a hash code for this string. The hash code for a\n     * {@code String} object is computed as\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * using {@code int} arithmetic, where {@code s[i]} is the\n     * \u003ci\u003ei\u003c/i\u003eth character of the string, {@code n} is the length of\n     * the string, and {@code ^} indicates exponentiation.\n     * (The hash value of the empty string is zero.)\n     *\n     * @return  a hash code value for this object.\n     */\n    public int hashCode() {\n        int h \u003d hash;\n        if (h \u003d\u003d 0 \u0026\u0026 value.length \u003e 0) {\n            hash \u003d h \u003d isLatin1() ? StringLatin1.hashCode(value)\n                                  : StringUTF16.hashCode(value);\n        }\n        return h;\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of\n     * the specified character. If a character with value\n     * {@code ch} occurs in the character sequence represented by\n     * this {@code String} object, then the index (in Unicode\n     * code units) of the first such occurrence is returned. For\n     * values of {@code ch} in the range from 0 to 0xFFFF\n     * (inclusive), this is the smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. In either case, if no such character occurs in this\n     * string, then {@code -1} is returned.\n     *\n     * @param   ch   a character (Unicode code point).\n     * @return  the index of the first occurrence of the character in the\n     *          character sequence represented by this object, or\n     *          {@code -1} if the character does not occur.\n     */\n    public int indexOf(int ch) {\n        return indexOf(ch, 0);\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified character, starting the search at the specified index.\n     * \u003cp\u003e\n     * If a character with value {@code ch} occurs in the\n     * character sequence represented by this {@code String}\n     * object at an index no smaller than {@code fromIndex}, then\n     * the index of the first such occurrence is returned. For values\n     * of {@code ch} in the range from 0 to 0xFFFF (inclusive),\n     * this is the smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026gt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026gt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. In either case, if no such character occurs in this\n     * string at or after position {@code fromIndex}, then\n     * {@code -1} is returned.\n     *\n     * \u003cp\u003e\n     * There is no restriction on the value of {@code fromIndex}. If it\n     * is negative, it has the same effect as if it were zero: this entire\n     * string may be searched. If it is greater than the length of this\n     * string, it has the same effect as if it were equal to the length of\n     * this string: {@code -1} is returned.\n     *\n     * \u003cp\u003eAll indices are specified in {@code char} values\n     * (Unicode code units).\n     *\n     * @param   ch          a character (Unicode code point).\n     * @param   fromIndex   the index to start the search from.\n     * @return  the index of the first occurrence of the character in the\n     *          character sequence represented by this object that is greater\n     *          than or equal to {@code fromIndex}, or {@code -1}\n     *          if the character does not occur.\n     */\n    public int indexOf(int ch, int fromIndex) {\n        return isLatin1() ? StringLatin1.indexOf(value, ch, fromIndex)\n                          : StringUTF16.indexOf(value, ch, fromIndex);\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of\n     * the specified character. For values of {@code ch} in the\n     * range from 0 to 0xFFFF (inclusive), the index (in Unicode code\n     * units) returned is the largest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * largest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true.  In either case, if no such character occurs in this\n     * string, then {@code -1} is returned.  The\n     * {@code String} is searched backwards starting at the last\n     * character.\n     *\n     * @param   ch   a character (Unicode code point).\n     * @return  the index of the last occurrence of the character in the\n     *          character sequence represented by this object, or\n     *          {@code -1} if the character does not occur.\n     */\n    public int lastIndexOf(int ch) {\n        return lastIndexOf(ch, length() - 1);\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of\n     * the specified character, searching backward starting at the\n     * specified index. For values of {@code ch} in the range\n     * from 0 to 0xFFFF (inclusive), the index returned is the largest\n     * value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026lt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * largest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026lt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. In either case, if no such character occurs in this\n     * string at or before position {@code fromIndex}, then\n     * {@code -1} is returned.\n     *\n     * \u003cp\u003eAll indices are specified in {@code char} values\n     * (Unicode code units).\n     *\n     * @param   ch          a character (Unicode code point).\n     * @param   fromIndex   the index to start the search from. There is no\n     *          restriction on the value of {@code fromIndex}. If it is\n     *          greater than or equal to the length of this string, it has\n     *          the same effect as if it were equal to one less than the\n     *          length of this string: this entire string may be searched.\n     *          If it is negative, it has the same effect as if it were -1:\n     *          -1 is returned.\n     * @return  the index of the last occurrence of the character in the\n     *          character sequence represented by this object that is less\n     *          than or equal to {@code fromIndex}, or {@code -1}\n     *          if the character does not occur before that point.\n     */\n    public int lastIndexOf(int ch, int fromIndex) {\n        return isLatin1() ? StringLatin1.lastIndexOf(value, ch, fromIndex)\n                          : StringUTF16.lastIndexOf(value, ch, fromIndex);\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified substring.\n     *\n     * \u003cp\u003eThe returned index is the smallest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     * this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str   the substring to search for.\n     * @return  the index of the first occurrence of the specified substring,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int indexOf(String str) {\n        if (coder() \u003d\u003d str.coder()) {\n            return isLatin1() ? StringLatin1.indexOf(value, str.value)\n                              : StringUTF16.indexOf(value, str.value);\n        }\n        if (coder() \u003d\u003d LATIN1) {  // str.coder \u003d\u003d UTF16\n            return -1;\n        }\n        return StringUTF16.indexOfLatin1(value, str.value);\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified substring, starting at the specified index.\n     *\n     * \u003cp\u003eThe returned index is the smallest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     *     k \u003e\u003d Math.min(fromIndex, this.length()) \u0026\u0026\n     *                   this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str         the substring to search for.\n     * @param   fromIndex   the index from which to start the search.\n     * @return  the index of the first occurrence of the specified substring,\n     *          starting at the specified index,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int indexOf(String str, int fromIndex) {\n        return indexOf(value, coder(), length(), str, fromIndex);\n    }\n\n    /**\n     * Code shared by String and AbstractStringBuilder to do searches. The\n     * source is the character array being searched, and the target\n     * is the string being searched for.\n     *\n     * @param   src       the characters being searched.\n     * @param   srcCoder  the coder of the source string.\n     * @param   srcCount  length of the source string.\n     * @param   tgtStr    the characters being searched for.\n     * @param   fromIndex the index to begin searching from.\n     */\n    static int indexOf(byte[] src, byte srcCoder, int srcCount,\n                       String tgtStr, int fromIndex) {\n        byte[] tgt    \u003d tgtStr.value;\n        byte tgtCoder \u003d tgtStr.coder();\n        int tgtCount  \u003d tgtStr.length();\n\n        if (fromIndex \u003e\u003d srcCount) {\n            return (tgtCount \u003d\u003d 0 ? srcCount : -1);\n        }\n        if (fromIndex \u003c 0) {\n            fromIndex \u003d 0;\n        }\n        if (tgtCount \u003d\u003d 0) {\n            return fromIndex;\n        }\n        if (tgtCount \u003e srcCount) {\n            return -1;\n        }\n        if (srcCoder \u003d\u003d tgtCoder) {\n            return srcCoder \u003d\u003d LATIN1\n                ? StringLatin1.indexOf(src, srcCount, tgt, tgtCount, fromIndex)\n                : StringUTF16.indexOf(src, srcCount, tgt, tgtCount, fromIndex);\n        }\n        if (srcCoder \u003d\u003d LATIN1) {    //  \u0026\u0026 tgtCoder \u003d\u003d UTF16\n            return -1;\n        }\n        // srcCoder \u003d\u003d UTF16 \u0026\u0026 tgtCoder \u003d\u003d LATIN1) {\n        return StringUTF16.indexOfLatin1(src, srcCount, tgt, tgtCount, fromIndex);\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of the\n     * specified substring.  The last occurrence of the empty string \"\"\n     * is considered to occur at the index value {@code this.length()}.\n     *\n     * \u003cp\u003eThe returned index is the largest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     * this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str   the substring to search for.\n     * @return  the index of the last occurrence of the specified substring,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int lastIndexOf(String str) {\n        return lastIndexOf(str, length());\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of the\n     * specified substring, searching backward starting at the specified index.\n     *\n     * \u003cp\u003eThe returned index is the largest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     *     k \u003c\u003d Math.min(fromIndex, this.length()) \u0026\u0026\n     *                   this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str         the substring to search for.\n     * @param   fromIndex   the index to start the search from.\n     * @return  the index of the last occurrence of the specified substring,\n     *          searching backward from the specified index,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int lastIndexOf(String str, int fromIndex) {\n        return lastIndexOf(value, coder(), length(), str, fromIndex);\n    }\n\n    /**\n     * Code shared by String and AbstractStringBuilder to do searches. The\n     * source is the character array being searched, and the target\n     * is the string being searched for.\n     *\n     * @param   src         the characters being searched.\n     * @param   srcCoder    coder handles the mapping between bytes/chars\n     * @param   srcCount    count of the source string.\n     * @param   tgt         the characters being searched for.\n     * @param   fromIndex   the index to begin searching from.\n     */\n    static int lastIndexOf(byte[] src, byte srcCoder, int srcCount,\n                           String tgtStr, int fromIndex) {\n        byte[] tgt \u003d tgtStr.value;\n        byte tgtCoder \u003d tgtStr.coder();\n        int tgtCount \u003d tgtStr.length();\n        /*\n         * Check arguments; return immediately where possible. For\n         * consistency, don\u0027t check for null str.\n         */\n        int rightIndex \u003d srcCount - tgtCount;\n        if (fromIndex \u003e rightIndex) {\n            fromIndex \u003d rightIndex;\n        }\n        if (fromIndex \u003c 0) {\n            return -1;\n        }\n        /* Empty string always matches. */\n        if (tgtCount \u003d\u003d 0) {\n            return fromIndex;\n        }\n        if (srcCoder \u003d\u003d tgtCoder) {\n            return srcCoder \u003d\u003d LATIN1\n                ? StringLatin1.lastIndexOf(src, srcCount, tgt, tgtCount, fromIndex)\n                : StringUTF16.lastIndexOf(src, srcCount, tgt, tgtCount, fromIndex);\n        }\n        if (srcCoder \u003d\u003d LATIN1) {    // \u0026\u0026 tgtCoder \u003d\u003d UTF16\n            return -1;\n        }\n        // srcCoder \u003d\u003d UTF16 \u0026\u0026 tgtCoder \u003d\u003d LATIN1\n        return StringUTF16.lastIndexOfLatin1(src, srcCount, tgt, tgtCount, fromIndex);\n    }\n\n    /**\n     * Returns a string that is a substring of this string. The\n     * substring begins with the character at the specified index and\n     * extends to the end of this string. \u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"unhappy\".substring(2) returns \"happy\"\n     * \"Harbison\".substring(3) returns \"bison\"\n     * \"emptiness\".substring(9) returns \"\" (an empty string)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param      beginIndex   the beginning index, inclusive.\n     * @return     the specified substring.\n     * @exception  IndexOutOfBoundsException  if\n     *             {@code beginIndex} is negative or larger than the\n     *             length of this {@code String} object.\n     */\n    public String substring(int beginIndex) {\n        if (beginIndex \u003c 0) {\n            throw new StringIndexOutOfBoundsException(beginIndex);\n        }\n        int subLen \u003d length() - beginIndex;\n        if (subLen \u003c 0) {\n            throw new StringIndexOutOfBoundsException(subLen);\n        }\n        if (beginIndex \u003d\u003d 0) {\n            return this;\n        }\n        return isLatin1() ? StringLatin1.newString(value, beginIndex, subLen)\n                          : StringUTF16.newString(value, beginIndex, subLen);\n    }\n\n    /**\n     * Returns a string that is a substring of this string. The\n     * substring begins at the specified {@code beginIndex} and\n     * extends to the character at index {@code endIndex - 1}.\n     * Thus the length of the substring is {@code endIndex-beginIndex}.\n     * \u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"hamburger\".substring(4, 8) returns \"urge\"\n     * \"smiles\".substring(1, 5) returns \"mile\"\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param      beginIndex   the beginning index, inclusive.\n     * @param      endIndex     the ending index, exclusive.\n     * @return     the specified substring.\n     * @exception  IndexOutOfBoundsException  if the\n     *             {@code beginIndex} is negative, or\n     *             {@code endIndex} is larger than the length of\n     *             this {@code String} object, or\n     *             {@code beginIndex} is larger than\n     *             {@code endIndex}.\n     */\n    public String substring(int beginIndex, int endIndex) {\n        int length \u003d length();\n        checkBoundsBeginEnd(beginIndex, endIndex, length);\n        int subLen \u003d endIndex - beginIndex;\n        if (beginIndex \u003d\u003d 0 \u0026\u0026 endIndex \u003d\u003d length) {\n            return this;\n        }\n        return isLatin1() ? StringLatin1.newString(value, beginIndex, subLen)\n                          : StringUTF16.newString(value, beginIndex, subLen);\n    }\n\n    /**\n     * Returns a character sequence that is a subsequence of this sequence.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * str.subSequence(begin,\u0026nbsp;end)\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * behaves in exactly the same way as the invocation\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * str.substring(begin,\u0026nbsp;end)\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @apiNote\n     * This method is defined so that the {@code String} class can implement\n     * the {@link CharSequence} interface.\n     *\n     * @param   beginIndex   the begin index, inclusive.\n     * @param   endIndex     the end index, exclusive.\n     * @return  the specified subsequence.\n     *\n     * @throws  IndexOutOfBoundsException\n     *          if {@code beginIndex} or {@code endIndex} is negative,\n     *          if {@code endIndex} is greater than {@code length()},\n     *          or if {@code beginIndex} is greater than {@code endIndex}\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public CharSequence subSequence(int beginIndex, int endIndex) {\n        return this.substring(beginIndex, endIndex);\n    }\n\n    /**\n     * Concatenates the specified string to the end of this string.\n     * \u003cp\u003e\n     * If the length of the argument string is {@code 0}, then this\n     * {@code String} object is returned. Otherwise, a\n     * {@code String} object is returned that represents a character\n     * sequence that is the concatenation of the character sequence\n     * represented by this {@code String} object and the character\n     * sequence represented by the argument string.\u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"cares\".concat(\"s\") returns \"caress\"\n     * \"to\".concat(\"get\").concat(\"her\") returns \"together\"\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param   str   the {@code String} that is concatenated to the end\n     *                of this {@code String}.\n     * @return  a string that represents the concatenation of this object\u0027s\n     *          characters followed by the string argument\u0027s characters.\n     */\n    public String concat(String str) {\n        if (str.isEmpty()) {\n            return this;\n        }\n        if (coder() \u003d\u003d str.coder()) {\n            byte[] val \u003d this.value;\n            byte[] oval \u003d str.value;\n            int len \u003d val.length + oval.length;\n            byte[] buf \u003d Arrays.copyOf(val, len);\n            System.arraycopy(oval, 0, buf, val.length, oval.length);\n            return new String(buf, coder);\n        }\n        int len \u003d length();\n        int olen \u003d str.length();\n        byte[] buf \u003d StringUTF16.newBytesFor(len + olen);\n        getBytes(buf, 0, UTF16);\n        str.getBytes(buf, len, UTF16);\n        return new String(buf, UTF16);\n    }\n\n    /**\n     * Returns a string resulting from replacing all occurrences of\n     * {@code oldChar} in this string with {@code newChar}.\n     * \u003cp\u003e\n     * If the character {@code oldChar} does not occur in the\n     * character sequence represented by this {@code String} object,\n     * then a reference to this {@code String} object is returned.\n     * Otherwise, a {@code String} object is returned that\n     * represents a character sequence identical to the character sequence\n     * represented by this {@code String} object, except that every\n     * occurrence of {@code oldChar} is replaced by an occurrence\n     * of {@code newChar}.\n     * \u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"mesquite in your cellar\".replace(\u0027e\u0027, \u0027o\u0027)\n     *         returns \"mosquito in your collar\"\n     * \"the war of baronets\".replace(\u0027r\u0027, \u0027y\u0027)\n     *         returns \"the way of bayonets\"\n     * \"sparring with a purple porpoise\".replace(\u0027p\u0027, \u0027t\u0027)\n     *         returns \"starring with a turtle tortoise\"\n     * \"JonL\".replace(\u0027q\u0027, \u0027x\u0027) returns \"JonL\" (no change)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param   oldChar   the old character.\n     * @param   newChar   the new character.\n     * @return  a string derived from this string by replacing every\n     *          occurrence of {@code oldChar} with {@code newChar}.\n     */\n    public String replace(char oldChar, char newChar) {\n        if (oldChar !\u003d newChar) {\n            String ret \u003d isLatin1() ? StringLatin1.replace(value, oldChar, newChar)\n                                    : StringUTF16.replace(value, oldChar, newChar);\n            if (ret !\u003d null) {\n                return ret;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Tells whether or not this string matches the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr\u003c/i\u003e{@code .matches(}\u003ci\u003eregex\u003c/i\u003e{@code )} yields exactly the\n     * same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * {@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#matches(String,CharSequence)\n     * matches(\u003ci\u003eregex\u003c/i\u003e, \u003ci\u003estr\u003c/i\u003e)}\n     * \u003c/blockquote\u003e\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     *\n     * @return  {@code true} if, and only if, this string matches the\n     *          given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public boolean matches(String regex) {\n        return Pattern.matches(regex, this);\n    }\n\n    /**\n     * Returns true if and only if this string contains the specified\n     * sequence of char values.\n     *\n     * @param s the sequence to search for\n     * @return true if this string contains {@code s}, false otherwise\n     * @since 1.5\n     */\n    public boolean contains(CharSequence s) {\n        return indexOf(s.toString()) \u003e\u003d 0;\n    }\n\n    /**\n     * Replaces the first substring of this string that matches the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e with the\n     * given replacement.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr\u003c/i\u003e{@code .replaceFirst(}\u003ci\u003eregex\u003c/i\u003e{@code ,} \u003ci\u003erepl\u003c/i\u003e{@code )}\n     * yields exactly the same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * \u003ccode\u003e\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n     * java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher}(\u003ci\u003estr\u003c/i\u003e).{@link\n     * java.util.regex.Matcher#replaceFirst replaceFirst}(\u003ci\u003erepl\u003c/i\u003e)\n     * \u003c/code\u003e\n     * \u003c/blockquote\u003e\n     *\n     *\u003cp\u003e\n     * Note that backslashes ({@code \\}) and dollar signs ({@code $}) in the\n     * replacement string may cause the results to be different than if it were\n     * being treated as a literal replacement string; see\n     * {@link java.util.regex.Matcher#replaceFirst}.\n     * Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special\n     * meaning of these characters, if desired.\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     * @param   replacement\n     *          the string to be substituted for the first match\n     *\n     * @return  The resulting {@code String}\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public String replaceFirst(String regex, String replacement) {\n        return Pattern.compile(regex).matcher(this).replaceFirst(replacement);\n    }\n\n    /**\n     * Replaces each substring of this string that matches the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e with the\n     * given replacement.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr\u003c/i\u003e{@code .replaceAll(}\u003ci\u003eregex\u003c/i\u003e{@code ,} \u003ci\u003erepl\u003c/i\u003e{@code )}\n     * yields exactly the same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * \u003ccode\u003e\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n     * java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher}(\u003ci\u003estr\u003c/i\u003e).{@link\n     * java.util.regex.Matcher#replaceAll replaceAll}(\u003ci\u003erepl\u003c/i\u003e)\n     * \u003c/code\u003e\n     * \u003c/blockquote\u003e\n     *\n     *\u003cp\u003e\n     * Note that backslashes ({@code \\}) and dollar signs ({@code $}) in the\n     * replacement string may cause the results to be different than if it were\n     * being treated as a literal replacement string; see\n     * {@link java.util.regex.Matcher#replaceAll Matcher.replaceAll}.\n     * Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special\n     * meaning of these characters, if desired.\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     * @param   replacement\n     *          the string to be substituted for each match\n     *\n     * @return  The resulting {@code String}\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public String replaceAll(String regex, String replacement) {\n        return Pattern.compile(regex).matcher(this).replaceAll(replacement);\n    }\n\n    /**\n     * Replaces each substring of this string that matches the literal target\n     * sequence with the specified literal replacement sequence. The\n     * replacement proceeds from the beginning of the string to the end, for\n     * example, replacing \"aa\" with \"b\" in the string \"aaa\" will result in\n     * \"ba\" rather than \"ab\".\n     *\n     * @param  target The sequence of char values to be replaced\n     * @param  replacement The replacement sequence of char values\n     * @return  The resulting string\n     * @since 1.5\n     */\n    public String replace(CharSequence target, CharSequence replacement) {\n        String tgtStr \u003d target.toString();\n        String replStr \u003d replacement.toString();\n        int j \u003d indexOf(tgtStr);\n        if (j \u003c 0) {\n            return this;\n        }\n        int tgtLen \u003d tgtStr.length();\n        int tgtLen1 \u003d Math.max(tgtLen, 1);\n        int thisLen \u003d length();\n\n        int newLenHint \u003d thisLen - tgtLen + replStr.length();\n        if (newLenHint \u003c 0) {\n            throw new OutOfMemoryError();\n        }\n        StringBuilder sb \u003d new StringBuilder(newLenHint);\n        int i \u003d 0;\n        do {\n            sb.append(this, i, j).append(replStr);\n            i \u003d j + tgtLen;\n        } while (j \u003c thisLen \u0026\u0026 (j \u003d indexOf(tgtStr, j + tgtLen1)) \u003e 0);\n        return sb.append(this, i, thisLen).toString();\n    }\n\n    /**\n     * Splits this string around matches of the given\n     * \u003ca href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n     *\n     * \u003cp\u003e The array returned by this method contains each substring of this\n     * string that is terminated by another substring that matches the given\n     * expression or is terminated by the end of the string.  The substrings in\n     * the array are in the order in which they occur in this string.  If the\n     * expression does not match any part of the input then the resulting array\n     * has just one element, namely this string.\n     *\n     * \u003cp\u003e When there is a positive-width match at the beginning of this\n     * string then an empty leading substring is included at the beginning\n     * of the resulting array. A zero-width match at the beginning however\n     * never produces such empty leading substring.\n     *\n     * \u003cp\u003e The {@code limit} parameter controls the number of times the\n     * pattern is applied and therefore affects the length of the resulting\n     * array.\n     * \u003cul\u003e\n     *    \u003cli\u003e\u003cp\u003e\n     *    If the \u003ci\u003elimit\u003c/i\u003e is positive then the pattern will be applied\n     *    at most \u003ci\u003elimit\u003c/i\u003e\u0026nbsp;-\u0026nbsp;1 times, the array\u0027s length will be\n     *    no greater than \u003ci\u003elimit\u003c/i\u003e, and the array\u0027s last entry will contain\n     *    all input beyond the last matched delimiter.\u003c/p\u003e\u003c/li\u003e\n     *\n     *    \u003cli\u003e\u003cp\u003e\n     *    If the \u003ci\u003elimit\u003c/i\u003e is zero then the pattern will be applied as\n     *    many times as possible, the array can have any length, and trailing\n     *    empty strings will be discarded.\u003c/p\u003e\u003c/li\u003e\n     *\n     *    \u003cli\u003e\u003cp\u003e\n     *    If the \u003ci\u003elimit\u003c/i\u003e is negative then the pattern will be applied\n     *    as many times as possible and the array can have any length.\u003c/p\u003e\u003c/li\u003e\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003e The string {@code \"boo:and:foo\"}, for example, yields the\n     * following results with these parameters:\n     *\n     * \u003cblockquote\u003e\u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eSplit example showing regex, limit, and result\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *     \u003cth scope\u003d\"col\"\u003eRegex\u003c/th\u003e\n     *     \u003cth scope\u003d\"col\"\u003eLimit\u003c/th\u003e\n     *     \u003cth scope\u003d\"col\"\u003eResult\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" rowspan\u003d\"3\" style\u003d\"font-weight:normal\"\u003e:\u003c/th\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e2\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and:foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- : --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e5\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- : --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e-2\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" rowspan\u003d\"3\" style\u003d\"font-weight:normal\"\u003eo\u003c/th\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e5\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\", \"\", \"\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- o --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e-2\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\", \"\", \"\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- o --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e0\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\u003c/blockquote\u003e\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr.\u003c/i\u003e{@code split(}\u003ci\u003eregex\u003c/i\u003e{@code ,}\u0026nbsp;\u003ci\u003en\u003c/i\u003e{@code )}\n     * yields the same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * \u003ccode\u003e\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n     * java.util.regex.Pattern#split(java.lang.CharSequence,int) split}(\u003ci\u003estr\u003c/i\u003e,\u0026nbsp;\u003ci\u003en\u003c/i\u003e)\n     * \u003c/code\u003e\n     * \u003c/blockquote\u003e\n     *\n     *\n     * @param  regex\n     *         the delimiting regular expression\n     *\n     * @param  limit\n     *         the result threshold, as described above\n     *\n     * @return  the array of strings computed by splitting this string\n     *          around matches of the given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public String[] split(String regex, int limit) {\n        /* fastpath if the regex is a\n         (1)one-char String and this character is not one of the\n            RegEx\u0027s meta characters \".$|()[{^?*+\\\\\", or\n         (2)two-char String and the first char is the backslash and\n            the second is not the ascii digit or ascii letter.\n         */\n        char ch \u003d 0;\n        if (((regex.length() \u003d\u003d 1 \u0026\u0026\n             \".$|()[{^?*+\\\\\".indexOf(ch \u003d regex.charAt(0)) \u003d\u003d -1) ||\n             (regex.length() \u003d\u003d 2 \u0026\u0026\n              regex.charAt(0) \u003d\u003d \u0027\\\\\u0027 \u0026\u0026\n              (((ch \u003d regex.charAt(1))-\u00270\u0027)|(\u00279\u0027-ch)) \u003c 0 \u0026\u0026\n              ((ch-\u0027a\u0027)|(\u0027z\u0027-ch)) \u003c 0 \u0026\u0026\n              ((ch-\u0027A\u0027)|(\u0027Z\u0027-ch)) \u003c 0)) \u0026\u0026\n            (ch \u003c Character.MIN_HIGH_SURROGATE ||\n             ch \u003e Character.MAX_LOW_SURROGATE))\n        {\n            int off \u003d 0;\n            int next \u003d 0;\n            boolean limited \u003d limit \u003e 0;\n            ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();\n            while ((next \u003d indexOf(ch, off)) !\u003d -1) {\n                if (!limited || list.size() \u003c limit - 1) {\n                    list.add(substring(off, next));\n                    off \u003d next + 1;\n                } else {    // last one\n                    //assert (list.size() \u003d\u003d limit - 1);\n                    int last \u003d length();\n                    list.add(substring(off, last));\n                    off \u003d last;\n                    break;\n                }\n            }\n            // If no match was found, return this\n            if (off \u003d\u003d 0)\n                return new String[]{this};\n\n            // Add remaining segment\n            if (!limited || list.size() \u003c limit)\n                list.add(substring(off, length()));\n\n            // Construct result\n            int resultSize \u003d list.size();\n            if (limit \u003d\u003d 0) {\n                while (resultSize \u003e 0 \u0026\u0026 list.get(resultSize - 1).isEmpty()) {\n                    resultSize--;\n                }\n            }\n            String[] result \u003d new String[resultSize];\n            return list.subList(0, resultSize).toArray(result);\n        }\n        return Pattern.compile(regex).split(this, limit);\n    }\n\n    /**\n     * Splits this string around matches of the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n     *\n     * \u003cp\u003e This method works as if by invoking the two-argument {@link\n     * #split(String, int) split} method with the given expression and a limit\n     * argument of zero.  Trailing empty strings are therefore not included in\n     * the resulting array.\n     *\n     * \u003cp\u003e The string {@code \"boo:and:foo\"}, for example, yields the following\n     * results with these expressions:\n     *\n     * \u003cblockquote\u003e\u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eSplit examples showing regex and result\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *  \u003cth scope\u003d\"col\"\u003eRegex\u003c/th\u003e\n     *  \u003cth scope\u003d\"col\"\u003eResult\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" style\u003d\"text-weight:normal\"\u003e:\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" style\u003d\"text-weight:normal\"\u003eo\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\u003c/blockquote\u003e\n     *\n     *\n     * @param  regex\n     *         the delimiting regular expression\n     *\n     * @return  the array of strings computed by splitting this string\n     *          around matches of the given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public String[] split(String regex) {\n        return split(regex, 0);\n    }\n\n    /**\n     * Returns a new String composed of copies of the\n     * {@code CharSequence elements} joined together with a copy of\n     * the specified {@code delimiter}.\n     *\n     * \u003cblockquote\u003eFor example,\n     * \u003cpre\u003e{@code\n     *     String message \u003d String.join(\"-\", \"Java\", \"is\", \"cool\");\n     *     // message returned is: \"Java-is-cool\"\n     * }\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * Note that if an element is null, then {@code \"null\"} is added.\n     *\n     * @param  delimiter the delimiter that separates each element\n     * @param  elements the elements to join together.\n     *\n     * @return a new {@code String} that is composed of the {@code elements}\n     *         separated by the {@code delimiter}\n     *\n     * @throws NullPointerException If {@code delimiter} or {@code elements}\n     *         is {@code null}\n     *\n     * @see java.util.StringJoiner\n     * @since 1.8\n     */\n    public static String join(CharSequence delimiter, CharSequence... elements) {\n        Objects.requireNonNull(delimiter);\n        Objects.requireNonNull(elements);\n        // Number of elements not likely worth Arrays.stream overhead.\n        StringJoiner joiner \u003d new StringJoiner(delimiter);\n        for (CharSequence cs: elements) {\n            joiner.add(cs);\n        }\n        return joiner.toString();\n    }\n\n    /**\n     * Returns a new {@code String} composed of copies of the\n     * {@code CharSequence elements} joined together with a copy of the\n     * specified {@code delimiter}.\n     *\n     * \u003cblockquote\u003eFor example,\n     * \u003cpre\u003e{@code\n     *     List\u003cString\u003e strings \u003d List.of(\"Java\", \"is\", \"cool\");\n     *     String message \u003d String.join(\" \", strings);\n     *     //message returned is: \"Java is cool\"\n     *\n     *     Set\u003cString\u003e strings \u003d\n     *         new LinkedHashSet\u003c\u003e(List.of(\"Java\", \"is\", \"very\", \"cool\"));\n     *     String message \u003d String.join(\"-\", strings);\n     *     //message returned is: \"Java-is-very-cool\"\n     * }\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * Note that if an individual element is {@code null}, then {@code \"null\"} is added.\n     *\n     * @param  delimiter a sequence of characters that is used to separate each\n     *         of the {@code elements} in the resulting {@code String}\n     * @param  elements an {@code Iterable} that will have its {@code elements}\n     *         joined together.\n     *\n     * @return a new {@code String} that is composed from the {@code elements}\n     *         argument\n     *\n     * @throws NullPointerException If {@code delimiter} or {@code elements}\n     *         is {@code null}\n     *\n     * @see    #join(CharSequence,CharSequence...)\n     * @see    java.util.StringJoiner\n     * @since 1.8\n     */\n    public static String join(CharSequence delimiter,\n            Iterable\u003c? extends CharSequence\u003e elements) {\n        Objects.requireNonNull(delimiter);\n        Objects.requireNonNull(elements);\n        StringJoiner joiner \u003d new StringJoiner(delimiter);\n        for (CharSequence cs: elements) {\n            joiner.add(cs);\n        }\n        return joiner.toString();\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to lower\n     * case using the rules of the given {@code Locale}.  Case mapping is based\n     * on the Unicode Standard version specified by the {@link java.lang.Character Character}\n     * class. Since case mappings are not always 1:1 char mappings, the resulting\n     * {@code String} may be a different length than the original {@code String}.\n     * \u003cp\u003e\n     * Examples of lowercase  mappings are in the following table:\n     * \u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eLowercase mapping examples showing language code of locale, upper case, lower case, and description\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLanguage Code of Locale\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eUpper Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLower Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eDescription\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0130\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0069\u003c/td\u003e\n     *   \u003ctd\u003ecapital letter I with dot above -\u0026gt; small letter i\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0049\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0131\u003c/td\u003e\n     *   \u003ctd\u003ecapital letter I -\u0026gt; small letter dotless i \u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003eFrench Fries\u003c/th\u003e\n     *   \u003ctd\u003efrench fries\u003c/td\u003e\n     *   \u003ctd\u003elowercased all chars in String\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\n     *       \u0026Iota;\u0026Chi;\u0026Theta;\u0026Upsilon;\u0026Sigma;\u003c/th\u003e\n     *   \u003ctd\u003e\u0026iota;\u0026chi;\u0026theta;\u0026upsilon;\u0026sigma;\u003c/td\u003e\n     *   \u003ctd\u003elowercased all chars in String\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\n     *\n     * @param locale use the case transformation rules for this locale\n     * @return the {@code String}, converted to lowercase.\n     * @see     java.lang.String#toLowerCase()\n     * @see     java.lang.String#toUpperCase()\n     * @see     java.lang.String#toUpperCase(Locale)\n     * @since   1.1\n     */\n    public String toLowerCase(Locale locale) {\n        return isLatin1() ? StringLatin1.toLowerCase(this, value, locale)\n                          : StringUTF16.toLowerCase(this, value, locale);\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to lower\n     * case using the rules of the default locale. This is equivalent to calling\n     * {@code toLowerCase(Locale.getDefault())}.\n     * \u003cp\u003e\n     * \u003cb\u003eNote:\u003c/b\u003e This method is locale sensitive, and may produce unexpected\n     * results if used for strings that are intended to be interpreted locale\n     * independently.\n     * Examples are programming language identifiers, protocol keys, and HTML\n     * tags.\n     * For instance, {@code \"TITLE\".toLowerCase()} in a Turkish locale\n     * returns {@code \"t\\u005Cu0131tle\"}, where \u0027\\u005Cu0131\u0027 is the\n     * LATIN SMALL LETTER DOTLESS I character.\n     * To obtain correct results for locale insensitive strings, use\n     * {@code toLowerCase(Locale.ROOT)}.\n     *\n     * @return  the {@code String}, converted to lowercase.\n     * @see     java.lang.String#toLowerCase(Locale)\n     */\n    public String toLowerCase() {\n        return toLowerCase(Locale.getDefault());\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to upper\n     * case using the rules of the given {@code Locale}. Case mapping is based\n     * on the Unicode Standard version specified by the {@link java.lang.Character Character}\n     * class. Since case mappings are not always 1:1 char mappings, the resulting\n     * {@code String} may be a different length than the original {@code String}.\n     * \u003cp\u003e\n     * Examples of locale-sensitive and 1:M case mappings are in the following table.\n     *\n     * \u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eExamples of locale-sensitive and 1:M case mappings. Shows Language code of locale, lower case, upper case, and description.\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLanguage Code of Locale\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLower Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eUpper Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eDescription\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0069\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0130\u003c/td\u003e\n     *   \u003ctd\u003esmall letter i -\u0026gt; capital letter I with dot above\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0131\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0049\u003c/td\u003e\n     *   \u003ctd\u003esmall letter dotless i -\u0026gt; capital letter I\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u00df\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0053 \u0026#92;u0053\u003c/td\u003e\n     *   \u003ctd\u003esmall letter sharp s -\u0026gt; two letters: SS\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003eFahrvergn\u0026uuml;gen\u003c/th\u003e\n     *   \u003ctd\u003eFAHRVERGN\u0026Uuml;GEN\u003c/td\u003e\n     *   \u003ctd\u003e\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\n     * @param locale use the case transformation rules for this locale\n     * @return the {@code String}, converted to uppercase.\n     * @see     java.lang.String#toUpperCase()\n     * @see     java.lang.String#toLowerCase()\n     * @see     java.lang.String#toLowerCase(Locale)\n     * @since   1.1\n     */\n    public String toUpperCase(Locale locale) {\n        return isLatin1() ? StringLatin1.toUpperCase(this, value, locale)\n                          : StringUTF16.toUpperCase(this, value, locale);\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to upper\n     * case using the rules of the default locale. This method is equivalent to\n     * {@code toUpperCase(Locale.getDefault())}.\n     * \u003cp\u003e\n     * \u003cb\u003eNote:\u003c/b\u003e This method is locale sensitive, and may produce unexpected\n     * results if used for strings that are intended to be interpreted locale\n     * independently.\n     * Examples are programming language identifiers, protocol keys, and HTML\n     * tags.\n     * For instance, {@code \"title\".toUpperCase()} in a Turkish locale\n     * returns {@code \"T\\u005Cu0130TLE\"}, where \u0027\\u005Cu0130\u0027 is the\n     * LATIN CAPITAL LETTER I WITH DOT ABOVE character.\n     * To obtain correct results for locale insensitive strings, use\n     * {@code toUpperCase(Locale.ROOT)}.\n     *\n     * @return  the {@code String}, converted to uppercase.\n     * @see     java.lang.String#toUpperCase(Locale)\n     */\n    public String toUpperCase() {\n        return toUpperCase(Locale.getDefault());\n    }\n\n    /**\n     * Returns a string whose value is this string, with all leading\n     * and trailing space removed, where space is defined\n     * as any character whose codepoint is less than or equal to\n     * {@code \u0027U+0020\u0027} (the space character).\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty character\n     * sequence, or the first and last characters of character sequence\n     * represented by this {@code String} object both have codes\n     * that are not space (as defined above), then a\n     * reference to this {@code String} object is returned.\n     * \u003cp\u003e\n     * Otherwise, if all characters in this string are space (as\n     * defined above), then a  {@code String} object representing an\n     * empty string is returned.\n     * \u003cp\u003e\n     * Otherwise, let \u003ci\u003ek\u003c/i\u003e be the index of the first character in the\n     * string whose code is not a space (as defined above) and let\n     * \u003ci\u003em\u003c/i\u003e be the index of the last character in the string whose code\n     * is not a space (as defined above). A {@code String}\n     * object is returned, representing the substring of this string that\n     * begins with the character at index \u003ci\u003ek\u003c/i\u003e and ends with the\n     * character at index \u003ci\u003em\u003c/i\u003e-that is, the result of\n     * {@code this.substring(k, m + 1)}.\n     * \u003cp\u003e\n     * This method may be used to trim space (as defined above) from\n     * the beginning and end of a string.\n     *\n     * @return  a string whose value is this string, with all leading\n     *          and trailing space removed, or this string if it\n     *          has no leading or trailing space.\n     */\n    public String trim() {\n        String ret \u003d isLatin1() ? StringLatin1.trim(value)\n                                : StringUTF16.trim(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns a string whose value is this string, with all leading\n     * and trailing {@link Character#isWhitespace(int) white space}\n     * removed.\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty string,\n     * or if all code points in this string are\n     * {@link Character#isWhitespace(int) white space}, then an empty string\n     * is returned.\n     * \u003cp\u003e\n     * Otherwise, returns a substring of this string beginning with the first\n     * code point that is not a {@link Character#isWhitespace(int) white space}\n     * up to and including the last code point that is not a\n     * {@link Character#isWhitespace(int) white space}.\n     * \u003cp\u003e\n     * This method may be used to strip\n     * {@link Character#isWhitespace(int) white space} from\n     * the beginning and end of a string.\n     *\n     * @return  a string whose value is this string, with all leading\n     *          and trailing white space removed\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public String strip() {\n        String ret \u003d isLatin1() ? StringLatin1.strip(value)\n                                : StringUTF16.strip(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns a string whose value is this string, with all leading\n     * {@link Character#isWhitespace(int) white space} removed.\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty string,\n     * or if all code points in this string are\n     * {@link Character#isWhitespace(int) white space}, then an empty string\n     * is returned.\n     * \u003cp\u003e\n     * Otherwise, returns a substring of this string beginning with the first\n     * code point that is not a {@link Character#isWhitespace(int) white space}\n     * up to to and including the last code point of this string.\n     * \u003cp\u003e\n     * This method may be used to trim\n     * {@link Character#isWhitespace(int) white space} from\n     * the beginning of a string.\n     *\n     * @return  a string whose value is this string, with all leading white\n     *          space removed\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public String stripLeading() {\n        String ret \u003d isLatin1() ? StringLatin1.stripLeading(value)\n                                : StringUTF16.stripLeading(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns a string whose value is this string, with all trailing\n     * {@link Character#isWhitespace(int) white space} removed.\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty string,\n     * or if all characters in this string are\n     * {@link Character#isWhitespace(int) white space}, then an empty string\n     * is returned.\n     * \u003cp\u003e\n     * Otherwise, returns a substring of this string beginning with the first\n     * code point of this string up to and including the last code point\n     * that is not a {@link Character#isWhitespace(int) white space}.\n     * \u003cp\u003e\n     * This method may be used to trim\n     * {@link Character#isWhitespace(int) white space} from\n     * the end of a string.\n     *\n     * @return  a string whose value is this string, with all trailing white\n     *          space removed\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public String stripTrailing() {\n        String ret \u003d isLatin1() ? StringLatin1.stripTrailing(value)\n                                : StringUTF16.stripTrailing(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns {@code true} if the string is empty or contains only\n     * {@link Character#isWhitespace(int) white space} codepoints,\n     * otherwise {@code false}.\n     *\n     * @return {@code true} if the string is empty or contains only\n     *         {@link Character#isWhitespace(int) white space} codepoints,\n     *         otherwise {@code false}\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public boolean isBlank() {\n        return indexOfNonWhitespace() \u003d\u003d length();\n    }\n\n    private int indexOfNonWhitespace() {\n        if (isLatin1()) {\n            return StringLatin1.indexOfNonWhitespace(value);\n        } else {\n            return StringUTF16.indexOfNonWhitespace(value);\n        }\n    }\n\n    /**\n     * Returns a stream of lines extracted from this string,\n     * separated by line terminators.\n     * \u003cp\u003e\n     * A \u003ci\u003eline terminator\u003c/i\u003e is one of the following:\n     * a line feed character {@code \"\\n\"} (U+000A),\n     * a carriage return character {@code \"\\r\"} (U+000D),\n     * or a carriage return followed immediately by a line feed\n     * {@code \"\\r\\n\"} (U+000D U+000A).\n     * \u003cp\u003e\n     * A \u003ci\u003eline\u003c/i\u003e is either a sequence of zero or more characters\n     * followed by a line terminator, or it is a sequence of one or\n     * more characters followed by the end of the string. A\n     * line does not include the line terminator.\n     * \u003cp\u003e\n     * The stream returned by this method contains the lines from\n     * this string in the order in which they occur.\n     *\n     * @apiNote This definition of \u003ci\u003eline\u003c/i\u003e implies that an empty\n     *          string has zero lines and that there is no empty line\n     *          following a line terminator at the end of a string.\n     *\n     * @implNote This method provides better performance than\n     *           split(\"\\R\") by supplying elements lazily and\n     *           by faster search of new line terminators.\n     *\n     * @return  the stream of lines extracted from this string\n     *\n     * @since 11\n     */\n    public Stream\u003cString\u003e lines() {\n        return isLatin1() ? StringLatin1.lines(value)\n                          : StringUTF16.lines(value);\n    }\n\n    /**\n     * This object (which is already a string!) is itself returned.\n     *\n     * @return  the string itself.\n     */\n    public String toString() {\n        return this;\n    }\n\n    /**\n     * Returns a stream of {@code int} zero-extending the {@code char} values\n     * from this sequence.  Any char which maps to a \u003ca\n     * href\u003d\"{@docRoot}/java.base/java/lang/Character.html#unicode\"\u003esurrogate code\n     * point\u003c/a\u003e is passed through uninterpreted.\n     *\n     * @return an IntStream of char values from this sequence\n     * @since 9\n     */\n    @Override\n    public IntStream chars() {\n        return StreamSupport.intStream(\n            isLatin1() ? new StringLatin1.CharsSpliterator(value, Spliterator.IMMUTABLE)\n                       : new StringUTF16.CharsSpliterator(value, Spliterator.IMMUTABLE),\n            false);\n    }\n\n\n    /**\n     * Returns a stream of code point values from this sequence.  Any surrogate\n     * pairs encountered in the sequence are combined as if by {@linkplain\n     * Character#toCodePoint Character.toCodePoint} and the result is passed\n     * to the stream. Any other code units, including ordinary BMP characters,\n     * unpaired surrogates, and undefined code units, are zero-extended to\n     * {@code int} values which are then passed to the stream.\n     *\n     * @return an IntStream of Unicode code points from this sequence\n     * @since 9\n     */\n    @Override\n    public IntStream codePoints() {\n        return StreamSupport.intStream(\n            isLatin1() ? new StringLatin1.CharsSpliterator(value, Spliterator.IMMUTABLE)\n                       : new StringUTF16.CodePointsSpliterator(value, Spliterator.IMMUTABLE),\n            false);\n    }\n\n    /**\n     * Converts this string to a new character array.\n     *\n     * @return  a newly allocated character array whose length is the length\n     *          of this string and whose contents are initialized to contain\n     *          the character sequence represented by this string.\n     */\n    public char[] toCharArray() {\n        return isLatin1() ? StringLatin1.toChars(value)\n                          : StringUTF16.toChars(value);\n    }\n\n    /**\n     * Returns a formatted string using the specified format string and\n     * arguments.\n     *\n     * \u003cp\u003e The locale always used is the one returned by {@link\n     * java.util.Locale#getDefault(java.util.Locale.Category)\n     * Locale.getDefault(Locale.Category)} with\n     * {@link java.util.Locale.Category#FORMAT FORMAT} category specified.\n     *\n     * @param  format\n     *         A \u003ca href\u003d\"../util/Formatter.html#syntax\"\u003eformat string\u003c/a\u003e\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in the format\n     *         string.  If there are more arguments than format specifiers, the\n     *         extra arguments are ignored.  The number of arguments is\n     *         variable and may be zero.  The maximum number of arguments is\n     *         limited by the maximum dimension of a Java array as defined by\n     *         \u003ccite\u003eThe Java\u0026trade; Virtual Machine Specification\u003c/cite\u003e.\n     *         The behaviour on a\n     *         {@code null} argument depends on the \u003ca\n     *         href\u003d\"../util/Formatter.html#syntax\"\u003econversion\u003c/a\u003e.\n     *\n     * @throws  java.util.IllegalFormatException\n     *          If a format string contains an illegal syntax, a format\n     *          specifier that is incompatible with the given arguments,\n     *          insufficient arguments given the format string, or other\n     *          illegal conditions.  For specification of all possible\n     *          formatting errors, see the \u003ca\n     *          href\u003d\"../util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the\n     *          formatter class specification.\n     *\n     * @return  A formatted string\n     *\n     * @see  java.util.Formatter\n     * @since  1.5\n     */\n    public static String format(String format, Object... args) {\n        return new Formatter().format(format, args).toString();\n    }\n\n    /**\n     * Returns a formatted string using the specified locale, format string,\n     * and arguments.\n     *\n     * @param  l\n     *         The {@linkplain java.util.Locale locale} to apply during\n     *         formatting.  If {@code l} is {@code null} then no localization\n     *         is applied.\n     *\n     * @param  format\n     *         A \u003ca href\u003d\"../util/Formatter.html#syntax\"\u003eformat string\u003c/a\u003e\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in the format\n     *         string.  If there are more arguments than format specifiers, the\n     *         extra arguments are ignored.  The number of arguments is\n     *         variable and may be zero.  The maximum number of arguments is\n     *         limited by the maximum dimension of a Java array as defined by\n     *         \u003ccite\u003eThe Java\u0026trade; Virtual Machine Specification\u003c/cite\u003e.\n     *         The behaviour on a\n     *         {@code null} argument depends on the\n     *         \u003ca href\u003d\"../util/Formatter.html#syntax\"\u003econversion\u003c/a\u003e.\n     *\n     * @throws  java.util.IllegalFormatException\n     *          If a format string contains an illegal syntax, a format\n     *          specifier that is incompatible with the given arguments,\n     *          insufficient arguments given the format string, or other\n     *          illegal conditions.  For specification of all possible\n     *          formatting errors, see the \u003ca\n     *          href\u003d\"../util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the\n     *          formatter class specification\n     *\n     * @return  A formatted string\n     *\n     * @see  java.util.Formatter\n     * @since  1.5\n     */\n    public static String format(Locale l, String format, Object... args) {\n        return new Formatter(l).format(format, args).toString();\n    }\n\n    /**\n     * Returns the string representation of the {@code Object} argument.\n     *\n     * @param   obj   an {@code Object}.\n     * @return  if the argument is {@code null}, then a string equal to\n     *          {@code \"null\"}; otherwise, the value of\n     *          {@code obj.toString()} is returned.\n     * @see     java.lang.Object#toString()\n     */\n    public static String valueOf(Object obj) {\n        return (obj \u003d\u003d null) ? \"null\" : obj.toString();\n    }\n\n    /**\n     * Returns the string representation of the {@code char} array\n     * argument. The contents of the character array are copied; subsequent\n     * modification of the character array does not affect the returned\n     * string.\n     *\n     * @param   data     the character array.\n     * @return  a {@code String} that contains the characters of the\n     *          character array.\n     */\n    public static String valueOf(char data[]) {\n        return new String(data);\n    }\n\n    /**\n     * Returns the string representation of a specific subarray of the\n     * {@code char} array argument.\n     * \u003cp\u003e\n     * The {@code offset} argument is the index of the first\n     * character of the subarray. The {@code count} argument\n     * specifies the length of the subarray. The contents of the subarray\n     * are copied; subsequent modification of the character array does not\n     * affect the returned string.\n     *\n     * @param   data     the character array.\n     * @param   offset   initial offset of the subarray.\n     * @param   count    length of the subarray.\n     * @return  a {@code String} that contains the characters of the\n     *          specified subarray of the character array.\n     * @exception IndexOutOfBoundsException if {@code offset} is\n     *          negative, or {@code count} is negative, or\n     *          {@code offset+count} is larger than\n     *          {@code data.length}.\n     */\n    public static String valueOf(char data[], int offset, int count) {\n        return new String(data, offset, count);\n    }\n\n    /**\n     * Equivalent to {@link #valueOf(char[], int, int)}.\n     *\n     * @param   data     the character array.\n     * @param   offset   initial offset of the subarray.\n     * @param   count    length of the subarray.\n     * @return  a {@code String} that contains the characters of the\n     *          specified subarray of the character array.\n     * @exception IndexOutOfBoundsException if {@code offset} is\n     *          negative, or {@code count} is negative, or\n     *          {@code offset+count} is larger than\n     *          {@code data.length}.\n     */\n    public static String copyValueOf(char data[], int offset, int count) {\n        return new String(data, offset, count);\n    }\n\n    /**\n     * Equivalent to {@link #valueOf(char[])}.\n     *\n     * @param   data   the character array.\n     * @return  a {@code String} that contains the characters of the\n     *          character array.\n     */\n    public static String copyValueOf(char data[]) {\n        return new String(data);\n    }\n\n    /**\n     * Returns the string representation of the {@code boolean} argument.\n     *\n     * @param   b   a {@code boolean}.\n     * @return  if the argument is {@code true}, a string equal to\n     *          {@code \"true\"} is returned; otherwise, a string equal to\n     *          {@code \"false\"} is returned.\n     */\n    public static String valueOf(boolean b) {\n        return b ? \"true\" : \"false\";\n    }\n\n    /**\n     * Returns the string representation of the {@code char}\n     * argument.\n     *\n     * @param   c   a {@code char}.\n     * @return  a string of length {@code 1} containing\n     *          as its single character the argument {@code c}.\n     */\n    public static String valueOf(char c) {\n        if (COMPACT_STRINGS \u0026\u0026 StringLatin1.canEncode(c)) {\n            return new String(StringLatin1.toBytes(c), LATIN1);\n        }\n        return new String(StringUTF16.toBytes(c), UTF16);\n    }\n\n    /**\n     * Returns the string representation of the {@code int} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Integer.toString} method of one argument.\n     *\n     * @param   i   an {@code int}.\n     * @return  a string representation of the {@code int} argument.\n     * @see     java.lang.Integer#toString(int, int)\n     */\n    public static String valueOf(int i) {\n        return Integer.toString(i);\n    }\n\n    /**\n     * Returns the string representation of the {@code long} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Long.toString} method of one argument.\n     *\n     * @param   l   a {@code long}.\n     * @return  a string representation of the {@code long} argument.\n     * @see     java.lang.Long#toString(long)\n     */\n    public static String valueOf(long l) {\n        return Long.toString(l);\n    }\n\n    /**\n     * Returns the string representation of the {@code float} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Float.toString} method of one argument.\n     *\n     * @param   f   a {@code float}.\n     * @return  a string representation of the {@code float} argument.\n     * @see     java.lang.Float#toString(float)\n     */\n    public static String valueOf(float f) {\n        return Float.toString(f);\n    }\n\n    /**\n     * Returns the string representation of the {@code double} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Double.toString} method of one argument.\n     *\n     * @param   d   a {@code double}.\n     * @return  a  string representation of the {@code double} argument.\n     * @see     java.lang.Double#toString(double)\n     */\n    public static String valueOf(double d) {\n        return Double.toString(d);\n    }\n\n    /**\n     * Returns a canonical representation for the string object.\n     * \u003cp\u003e\n     * A pool of strings, initially empty, is maintained privately by the\n     * class {@code String}.\n     * \u003cp\u003e\n     * When the intern method is invoked, if the pool already contains a\n     * string equal to this {@code String} object as determined by\n     * the {@link #equals(Object)} method, then the string from the pool is\n     * returned. Otherwise, this {@code String} object is added to the\n     * pool and a reference to this {@code String} object is returned.\n     * \u003cp\u003e\n     * It follows that for any two strings {@code s} and {@code t},\n     * {@code s.intern() \u003d\u003d t.intern()} is {@code true}\n     * if and only if {@code s.equals(t)} is {@code true}.\n     * \u003cp\u003e\n     * All literal strings and string-valued constant expressions are\n     * interned. String literals are defined in section 3.10.5 of the\n     * \u003ccite\u003eThe Java\u0026trade; Language Specification\u003c/cite\u003e.\n     *\n     * @return  a string that has the same contents as this string, but is\n     *          guaranteed to be from a pool of unique strings.\n     * @jls 3.10.5 String Literals\n     */\n    public native String intern();\n\n    /**\n     * Returns a string whose value is the concatenation of this\n     * string repeated {@code count} times.\n     * \u003cp\u003e\n     * If this string is empty or count is zero then the empty\n     * string is returned.\n     *\n     * @param   count number of times to repeat\n     *\n     * @return  A string composed of this string repeated\n     *          {@code count} times or the empty string if this\n     *          string is empty or count is zero\n     *\n     * @throws  IllegalArgumentException if the {@code count} is\n     *          negative.\n     *\n     * @since 11\n     */\n    public String repeat(int count) {\n        if (count \u003c 0) {\n            throw new IllegalArgumentException(\"count is negative: \" + count);\n        }\n        if (count \u003d\u003d 1) {\n            return this;\n        }\n        final int len \u003d value.length;\n        if (len \u003d\u003d 0 || count \u003d\u003d 0) {\n            return \"\";\n        }\n        if (len \u003d\u003d 1) {\n            final byte[] single \u003d new byte[count];\n            Arrays.fill(single, value[0]);\n            return new String(single, coder);\n        }\n        if (Integer.MAX_VALUE / count \u003c len) {\n            throw new OutOfMemoryError(\"Repeating \" + len + \" bytes String \" + count +\n                    \" times will produce a String exceeding maximum size.\");\n        }\n        final int limit \u003d len * count;\n        final byte[] multiple \u003d new byte[limit];\n        System.arraycopy(value, 0, multiple, 0, len);\n        int copied \u003d len;\n        for (; copied \u003c limit - copied; copied \u003c\u003c\u003d 1) {\n            System.arraycopy(multiple, 0, multiple, copied, copied);\n        }\n        System.arraycopy(multiple, 0, multiple, copied, limit - copied);\n        return new String(multiple, coder);\n    }\n\n    ////////////////////////////////////////////////////////////////\n\n    /**\n     * Copy character bytes from this string into dst starting at dstBegin.\n     * This method doesn\u0027t perform any range checking.\n     *\n     * Invoker guarantees: dst is in UTF16 (inflate itself for asb), if two\n     * coders are different, and dst is big enough (range check)\n     *\n     * @param dstBegin  the char index, not offset of byte[]\n     * @param coder     the coder of dst[]\n     */\n    void getBytes(byte dst[], int dstBegin, byte coder) {\n        if (coder() \u003d\u003d coder) {\n            System.arraycopy(value, 0, dst, dstBegin \u003c\u003c coder, value.length);\n        } else {    // this.coder \u003d\u003d LATIN \u0026\u0026 coder \u003d\u003d UTF16\n            StringLatin1.inflate(value, 0, dst, dstBegin, value.length);\n        }\n    }\n\n    /*\n     * Package private constructor. Trailing Void argument is there for\n     * disambiguating it against other (public) constructors.\n     *\n     * Stores the char[] value into a byte[] that each byte represents\n     * the8 low-order bits of the corresponding character, if the char[]\n     * contains only latin1 character. Or a byte[] that stores all\n     * characters in their byte sequences defined by the {@code StringUTF16}.\n     */\n    String(char[] value, int off, int len, Void sig) {\n        if (len \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n            return;\n        }\n        if (COMPACT_STRINGS) {\n            byte[] val \u003d StringUTF16.compress(value, off, len);\n            if (val !\u003d null) {\n                this.value \u003d val;\n                this.coder \u003d LATIN1;\n                return;\n            }\n        }\n        this.coder \u003d UTF16;\n        this.value \u003d StringUTF16.toBytes(value, off, len);\n    }\n\n    /*\n     * Package private constructor. Trailing Void argument is there for\n     * disambiguating it against other (public) constructors.\n     */\n    String(AbstractStringBuilder asb, Void sig) {\n        byte[] val \u003d asb.getValue();\n        int length \u003d asb.length();\n        if (asb.isLatin1()) {\n            this.coder \u003d LATIN1;\n            this.value \u003d Arrays.copyOfRange(val, 0, length);\n        } else {\n            if (COMPACT_STRINGS) {\n                byte[] buf \u003d StringUTF16.compress(val, 0, length);\n                if (buf !\u003d null) {\n                    this.coder \u003d LATIN1;\n                    this.value \u003d buf;\n                    return;\n                }\n            }\n            this.coder \u003d UTF16;\n            this.value \u003d Arrays.copyOfRange(val, 0, length \u003c\u003c 1);\n        }\n    }\n\n   /*\n    * Package private constructor which shares value array for speed.\n    */\n    String(byte[] value, byte coder) {\n        this.value \u003d value;\n        this.coder \u003d coder;\n    }\n\n    byte coder() {\n        return COMPACT_STRINGS ? coder : UTF16;\n    }\n\n    byte[] value() {\n        return value;\n    }\n\n    private boolean isLatin1() {\n        return COMPACT_STRINGS \u0026\u0026 coder \u003d\u003d LATIN1;\n    }\n\n    @Native static final byte LATIN1 \u003d 0;\n    @Native static final byte UTF16  \u003d 1;\n\n    /*\n     * StringIndexOutOfBoundsException  if {@code index} is\n     * negative or greater than or equal to {@code length}.\n     */\n    static void checkIndex(int index, int length) {\n        if (index \u003c 0 || index \u003e\u003d length) {\n            throw new StringIndexOutOfBoundsException(\"index \" + index +\n                                                      \",length \" + length);\n        }\n    }\n\n    /*\n     * StringIndexOutOfBoundsException  if {@code offset}\n     * is negative or greater than {@code length}.\n     */\n    static void checkOffset(int offset, int length) {\n        if (offset \u003c 0 || offset \u003e length) {\n            throw new StringIndexOutOfBoundsException(\"offset \" + offset +\n                                                      \",length \" + length);\n        }\n    }\n\n    /*\n     * Check {@code offset}, {@code count} against {@code 0} and {@code length}\n     * bounds.\n     *\n     * @throws  StringIndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative,\n     *          or {@code offset} is greater than {@code length - count}\n     */\n    static void checkBoundsOffCount(int offset, int count, int length) {\n        if (offset \u003c 0 || count \u003c 0 || offset \u003e length - count) {\n            throw new StringIndexOutOfBoundsException(\n                \"offset \" + offset + \", count \" + count + \", length \" + length);\n        }\n    }\n\n    /*\n     * Check {@code begin}, {@code end} against {@code 0} and {@code length}\n     * bounds.\n     *\n     * @throws  StringIndexOutOfBoundsException\n     *          If {@code begin} is negative, {@code begin} is greater than\n     *          {@code end}, or {@code end} is greater than {@code length}.\n     */\n    static void checkBoundsBeginEnd(int begin, int end, int length) {\n        if (begin \u003c 0 || begin \u003e end || end \u003e length) {\n            throw new StringIndexOutOfBoundsException(\n                \"begin \" + begin + \", end \" + end + \", length \" + length);\n        }\n    }\n\n    /**\n     * Returns the string representation of the {@code codePoint}\n     * argument.\n     *\n     * @param   codePoint a {@code codePoint}.\n     * @return  a string of length {@code 1} or {@code 2} containing\n     *          as its single character the argument {@code codePoint}.\n     * @throws IllegalArgumentException if the specified\n     *          {@code codePoint} is not a {@linkplain Character#isValidCodePoint\n     *          valid Unicode code point}.\n     */\n    static String valueOfCodePoint(int codePoint) {\n        if (COMPACT_STRINGS \u0026\u0026 StringLatin1.canEncode(codePoint)) {\n            return new String(StringLatin1.toBytes((char)codePoint), LATIN1);\n        } else if (Character.isBmpCodePoint(codePoint)) {\n            return new String(StringUTF16.toBytes((char)codePoint), UTF16);\n        } else if (Character.isSupplementaryCodePoint(codePoint)) {\n            return new String(StringUTF16.toBytesSupplementary(codePoint), UTF16);\n        }\n\n        throw new IllegalArgumentException(\n            format(\"Not a valid Unicode code point: 0x%X\", codePoint));\n    }\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor20.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:339)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

Jan. 11, 2024 12:38:58 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.base/java/lang/String.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor22.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:358)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

2024.01.11 12:39:31 WARN  Using indexes to guess the definition of renderDataTable
2024.01.11 13:33:51 WARN  Using indexes to guess the definition of Descending
2024.01.11 13:33:51 WARN  Using indexes to guess the definition of Descending
2024.01.11 13:33:57 WARN  Using indexes to guess the definition of Ascending
2024.01.11 13:34:24 WARN  Using indexes to guess the definition of ascendingSort
Jan. 15, 2024 9:28:51 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 20092
2024.01.16 11:15:51 WARN  Using indexes to guess the definition of SortOrder
2024.01.16 11:16:07 WARN  Using indexes to guess the definition of Ascending
2024.01.16 11:16:07 WARN  Using indexes to guess the definition of Ascending
2024.01.16 11:16:31 WARN  Using indexes to guess the definition of sortGrid
2024.01.16 11:16:32 WARN  Using indexes to guess the definition of sortGrid
2024.01.16 11:19:37 WARN  Could not find semantic tokens for: file:///C:/Users/yashb/Documents/vscode-laminar-vite-extension/webview-ui/src/main/scala/utilities/searching.scala
Exception in thread "pool-7-thread-105" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-106" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Jan. 16, 2024 11:25:03 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 21084
Exception in thread "pool-7-thread-107" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-7-thread-108" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.16 11:27:26 WARN  Using indexes to guess the definition of Event
2024.01.16 11:27:26 WARN  Using indexes to guess the definition of Event
2024.01.16 11:27:27 WARN  Using indexes to guess the definition of Event
2024.01.16 11:27:27 WARN  Using indexes to guess the definition of Event
Jan. 16, 2024 11:30:55 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 22087
Jan. 16, 2024 11:33:35 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 22598
2024.01.16 11:35:19 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java

Uri: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:703)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	jdk.internal.reflect.GeneratedMethodAccessor21.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 16, 2024 11:35:19 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.base/java/lang/String.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 1994, 2018, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.lang;\n\nimport java.io.ObjectStreamField;\nimport java.io.UnsupportedEncodingException;\nimport java.lang.annotation.Native;\nimport java.nio.charset.Charset;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Formatter;\nimport java.util.Locale;\nimport java.util.Objects;\nimport java.util.Spliterator;\nimport java.util.StringJoiner;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport java.util.stream.IntStream;\nimport java.util.stream.Stream;\nimport java.util.stream.StreamSupport;\nimport jdk.internal.HotSpotIntrinsicCandidate;\nimport jdk.internal.vm.annotation.Stable;\n\n/**\n * The {@code String} class represents character strings. All\n * string literals in Java programs, such as {@code \"abc\"}, are\n * implemented as instances of this class.\n * \u003cp\u003e\n * Strings are constant; their values cannot be changed after they\n * are created. String buffers support mutable strings.\n * Because String objects are immutable they can be shared. For example:\n * \u003cblockquote\u003e\u003cpre\u003e\n *     String str \u003d \"abc\";\n * \u003c/pre\u003e\u003c/blockquote\u003e\u003cp\u003e\n * is equivalent to:\n * \u003cblockquote\u003e\u003cpre\u003e\n *     char data[] \u003d {\u0027a\u0027, \u0027b\u0027, \u0027c\u0027};\n *     String str \u003d new String(data);\n * \u003c/pre\u003e\u003c/blockquote\u003e\u003cp\u003e\n * Here are some more examples of how strings can be used:\n * \u003cblockquote\u003e\u003cpre\u003e\n *     System.out.println(\"abc\");\n *     String cde \u003d \"cde\";\n *     System.out.println(\"abc\" + cde);\n *     String c \u003d \"abc\".substring(2,3);\n *     String d \u003d cde.substring(1, 2);\n * \u003c/pre\u003e\u003c/blockquote\u003e\n * \u003cp\u003e\n * The class {@code String} includes methods for examining\n * individual characters of the sequence, for comparing strings, for\n * searching strings, for extracting substrings, and for creating a\n * copy of a string with all characters translated to uppercase or to\n * lowercase. Case mapping is based on the Unicode Standard version\n * specified by the {@link java.lang.Character Character} class.\n * \u003cp\u003e\n * The Java language provides special support for the string\n * concatenation operator (\u0026nbsp;+\u0026nbsp;), and for conversion of\n * other objects to strings. For additional information on string\n * concatenation and conversion, see \u003ci\u003eThe Java\u0026trade; Language Specification\u003c/i\u003e.\n *\n * \u003cp\u003e Unless otherwise noted, passing a {@code null} argument to a constructor\n * or method in this class will cause a {@link NullPointerException} to be\n * thrown.\n *\n * \u003cp\u003eA {@code String} represents a string in the UTF-16 format\n * in which \u003cem\u003esupplementary characters\u003c/em\u003e are represented by \u003cem\u003esurrogate\n * pairs\u003c/em\u003e (see the section \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode\n * Character Representations\u003c/a\u003e in the {@code Character} class for\n * more information).\n * Index values refer to {@code char} code units, so a supplementary\n * character uses two positions in a {@code String}.\n * \u003cp\u003eThe {@code String} class provides methods for dealing with\n * Unicode code points (i.e., characters), in addition to those for\n * dealing with Unicode code units (i.e., {@code char} values).\n *\n * \u003cp\u003eUnless otherwise noted, methods for comparing Strings do not take locale\n * into account.  The {@link java.text.Collator} class provides methods for\n * finer-grain, locale-sensitive String comparison.\n *\n * @implNote The implementation of the string concatenation operator is left to\n * the discretion of a Java compiler, as long as the compiler ultimately conforms\n * to \u003ci\u003eThe Java\u0026trade; Language Specification\u003c/i\u003e. For example, the {@code javac} compiler\n * may implement the operator with {@code StringBuffer}, {@code StringBuilder},\n * or {@code java.lang.invoke.StringConcatFactory} depending on the JDK version. The\n * implementation of string conversion is typically through the method {@code toString},\n * defined by {@code Object} and inherited by all classes in Java.\n *\n * @author  Lee Boynton\n * @author  Arthur van Hoff\n * @author  Martin Buchholz\n * @author  Ulf Zibis\n * @see     java.lang.Object#toString()\n * @see     java.lang.StringBuffer\n * @see     java.lang.StringBuilder\n * @see     java.nio.charset.Charset\n * @since   1.0\n * @jls     15.18.1 String Concatenation Operator +\n */\n\npublic final class String\n    implements java.io.Serializable, Comparable\u003cString\u003e, CharSequence {\n\n    /**\n     * The value is used for character storage.\n     *\n     * @implNote This field is trusted by the VM, and is a subject to\n     * constant folding if String instance is constant. Overwriting this\n     * field after construction will cause problems.\n     *\n     * Additionally, it is marked with {@link Stable} to trust the contents\n     * of the array. No other facility in JDK provides this functionality (yet).\n     * {@link Stable} is safe here, because value is never null.\n     */\n    @Stable\n    private final byte[] value;\n\n    /**\n     * The identifier of the encoding used to encode the bytes in\n     * {@code value}. The supported values in this implementation are\n     *\n     * LATIN1\n     * UTF16\n     *\n     * @implNote This field is trusted by the VM, and is a subject to\n     * constant folding if String instance is constant. Overwriting this\n     * field after construction will cause problems.\n     */\n    private final byte coder;\n\n    /** Cache the hash code for the string */\n    private int hash; // Default to 0\n\n    /** use serialVersionUID from JDK 1.0.2 for interoperability */\n    private static final long serialVersionUID \u003d -6849794470754667710L;\n\n    /**\n     * If String compaction is disabled, the bytes in {@code value} are\n     * always encoded in UTF16.\n     *\n     * For methods with several possible implementation paths, when String\n     * compaction is disabled, only one code path is taken.\n     *\n     * The instance field value is generally opaque to optimizing JIT\n     * compilers. Therefore, in performance-sensitive place, an explicit\n     * check of the static boolean {@code COMPACT_STRINGS} is done first\n     * before checking the {@code coder} field since the static boolean\n     * {@code COMPACT_STRINGS} would be constant folded away by an\n     * optimizing JIT compiler. The idioms for these cases are as follows.\n     *\n     * For code such as:\n     *\n     *    if (coder \u003d\u003d LATIN1) { ... }\n     *\n     * can be written more optimally as\n     *\n     *    if (coder() \u003d\u003d LATIN1) { ... }\n     *\n     * or:\n     *\n     *    if (COMPACT_STRINGS \u0026\u0026 coder \u003d\u003d LATIN1) { ... }\n     *\n     * An optimizing JIT compiler can fold the above conditional as:\n     *\n     *    COMPACT_STRINGS \u003d\u003d true  \u003d\u003e if (coder \u003d\u003d LATIN1) { ... }\n     *    COMPACT_STRINGS \u003d\u003d false \u003d\u003e if (false)           { ... }\n     *\n     * @implNote\n     * The actual value for this field is injected by JVM. The static\n     * initialization block is used to set the value here to communicate\n     * that this static final field is not statically foldable, and to\n     * avoid any possible circular dependency during vm initialization.\n     */\n    static final boolean COMPACT_STRINGS;\n\n    static {\n        COMPACT_STRINGS \u003d true;\n    }\n\n    /**\n     * Class String is special cased within the Serialization Stream Protocol.\n     *\n     * A String instance is written into an ObjectOutputStream according to\n     * \u003ca href\u003d\"{@docRoot}/../specs/serialization/protocol.html#stream-elements\"\u003e\n     * Object Serialization Specification, Section 6.2, \"Stream Elements\"\u003c/a\u003e\n     */\n    private static final ObjectStreamField[] serialPersistentFields \u003d\n        new ObjectStreamField[0];\n\n    /**\n     * Initializes a newly created {@code String} object so that it represents\n     * an empty character sequence.  Note that use of this constructor is\n     * unnecessary since Strings are immutable.\n     */\n    public String() {\n        this.value \u003d \"\".value;\n        this.coder \u003d \"\".coder;\n    }\n\n    /**\n     * Initializes a newly created {@code String} object so that it represents\n     * the same sequence of characters as the argument; in other words, the\n     * newly created string is a copy of the argument string. Unless an\n     * explicit copy of {@code original} is needed, use of this constructor is\n     * unnecessary since Strings are immutable.\n     *\n     * @param  original\n     *         A {@code String}\n     */\n    @HotSpotIntrinsicCandidate\n    public String(String original) {\n        this.value \u003d original.value;\n        this.coder \u003d original.coder;\n        this.hash \u003d original.hash;\n    }\n\n    /**\n     * Allocates a new {@code String} so that it represents the sequence of\n     * characters currently contained in the character array argument. The\n     * contents of the character array are copied; subsequent modification of\n     * the character array does not affect the newly created string.\n     *\n     * @param  value\n     *         The initial value of the string\n     */\n    public String(char value[]) {\n        this(value, 0, value.length, null);\n    }\n\n    /**\n     * Allocates a new {@code String} that contains characters from a subarray\n     * of the character array argument. The {@code offset} argument is the\n     * index of the first character of the subarray and the {@code count}\n     * argument specifies the length of the subarray. The contents of the\n     * subarray are copied; subsequent modification of the character array does\n     * not affect the newly created string.\n     *\n     * @param  value\n     *         Array that is the source of characters\n     *\n     * @param  offset\n     *         The initial offset\n     *\n     * @param  count\n     *         The length\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative, or\n     *          {@code offset} is greater than {@code value.length - count}\n     */\n    public String(char value[], int offset, int count) {\n        this(value, offset, count, rangeCheck(value, offset, count));\n    }\n\n    private static Void rangeCheck(char[] value, int offset, int count) {\n        checkBoundsOffCount(offset, count, value.length);\n        return null;\n    }\n\n    /**\n     * Allocates a new {@code String} that contains characters from a subarray\n     * of the \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode code point\u003c/a\u003e array\n     * argument.  The {@code offset} argument is the index of the first code\n     * point of the subarray and the {@code count} argument specifies the\n     * length of the subarray.  The contents of the subarray are converted to\n     * {@code char}s; subsequent modification of the {@code int} array does not\n     * affect the newly created string.\n     *\n     * @param  codePoints\n     *         Array that is the source of Unicode code points\n     *\n     * @param  offset\n     *         The initial offset\n     *\n     * @param  count\n     *         The length\n     *\n     * @throws  IllegalArgumentException\n     *          If any invalid Unicode code point is found in {@code\n     *          codePoints}\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative, or\n     *          {@code offset} is greater than {@code codePoints.length - count}\n     *\n     * @since  1.5\n     */\n    public String(int[] codePoints, int offset, int count) {\n        checkBoundsOffCount(offset, count, codePoints.length);\n        if (count \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n            return;\n        }\n        if (COMPACT_STRINGS) {\n            byte[] val \u003d StringLatin1.toBytes(codePoints, offset, count);\n            if (val !\u003d null) {\n                this.coder \u003d LATIN1;\n                this.value \u003d val;\n                return;\n            }\n        }\n        this.coder \u003d UTF16;\n        this.value \u003d StringUTF16.toBytes(codePoints, offset, count);\n    }\n\n    /**\n     * Allocates a new {@code String} constructed from a subarray of an array\n     * of 8-bit integer values.\n     *\n     * \u003cp\u003e The {@code offset} argument is the index of the first byte of the\n     * subarray, and the {@code count} argument specifies the length of the\n     * subarray.\n     *\n     * \u003cp\u003e Each {@code byte} in the subarray is converted to a {@code char} as\n     * specified in the {@link #String(byte[],int) String(byte[],int)} constructor.\n     *\n     * @deprecated This method does not properly convert bytes into characters.\n     * As of JDK\u0026nbsp;1.1, the preferred way to do this is via the\n     * {@code String} constructors that take a {@link\n     * java.nio.charset.Charset}, charset name, or that use the platform\u0027s\n     * default charset.\n     *\n     * @param  ascii\n     *         The bytes to be converted to characters\n     *\n     * @param  hibyte\n     *         The top 8 bits of each 16-bit Unicode code unit\n     *\n     * @param  offset\n     *         The initial offset\n     * @param  count\n     *         The length\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative, or\n     *          {@code offset} is greater than {@code ascii.length - count}\n     *\n     * @see  #String(byte[], int)\n     * @see  #String(byte[], int, int, java.lang.String)\n     * @see  #String(byte[], int, int, java.nio.charset.Charset)\n     * @see  #String(byte[], int, int)\n     * @see  #String(byte[], java.lang.String)\n     * @see  #String(byte[], java.nio.charset.Charset)\n     * @see  #String(byte[])\n     */\n    @Deprecated(since\u003d\"1.1\")\n    public String(byte ascii[], int hibyte, int offset, int count) {\n        checkBoundsOffCount(offset, count, ascii.length);\n        if (count \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n            return;\n        }\n        if (COMPACT_STRINGS \u0026\u0026 (byte)hibyte \u003d\u003d 0) {\n            this.value \u003d Arrays.copyOfRange(ascii, offset, offset + count);\n            this.coder \u003d LATIN1;\n        } else {\n            hibyte \u003c\u003c\u003d 8;\n            byte[] val \u003d StringUTF16.newBytesFor(count);\n            for (int i \u003d 0; i \u003c count; i++) {\n                StringUTF16.putChar(val, i, hibyte | (ascii[offset++] \u0026 0xff));\n            }\n            this.value \u003d val;\n            this.coder \u003d UTF16;\n        }\n    }\n\n    /**\n     * Allocates a new {@code String} containing characters constructed from\n     * an array of 8-bit integer values. Each character \u003ci\u003ec\u003c/i\u003e in the\n     * resulting string is constructed from the corresponding component\n     * \u003ci\u003eb\u003c/i\u003e in the byte array such that:\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     *     \u003cb\u003e\u003ci\u003ec\u003c/i\u003e\u003c/b\u003e \u003d\u003d (char)(((hibyte \u0026amp; 0xff) \u0026lt;\u0026lt; 8)\n     *                         | (\u003cb\u003e\u003ci\u003eb\u003c/i\u003e\u003c/b\u003e \u0026amp; 0xff))\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @deprecated  This method does not properly convert bytes into\n     * characters.  As of JDK\u0026nbsp;1.1, the preferred way to do this is via the\n     * {@code String} constructors that take a {@link\n     * java.nio.charset.Charset}, charset name, or that use the platform\u0027s\n     * default charset.\n     *\n     * @param  ascii\n     *         The bytes to be converted to characters\n     *\n     * @param  hibyte\n     *         The top 8 bits of each 16-bit Unicode code unit\n     *\n     * @see  #String(byte[], int, int, java.lang.String)\n     * @see  #String(byte[], int, int, java.nio.charset.Charset)\n     * @see  #String(byte[], int, int)\n     * @see  #String(byte[], java.lang.String)\n     * @see  #String(byte[], java.nio.charset.Charset)\n     * @see  #String(byte[])\n     */\n    @Deprecated(since\u003d\"1.1\")\n    public String(byte ascii[], int hibyte) {\n        this(ascii, hibyte, 0, ascii.length);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the specified charset.  The length of the new {@code String}\n     * is a function of the charset, and hence may not be equal to the length\n     * of the subarray.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code length} is negative, or\n     *          {@code offset} is greater than {@code bytes.length - length}\n     *\n     * @since  1.1\n     */\n    public String(byte bytes[], int offset, int length, String charsetName)\n            throws UnsupportedEncodingException {\n        if (charsetName \u003d\u003d null)\n            throw new NullPointerException(\"charsetName\");\n        checkBoundsOffCount(offset, length, bytes.length);\n        StringCoding.Result ret \u003d\n            StringCoding.decode(charsetName, bytes, offset, length);\n        this.value \u003d ret.value;\n        this.coder \u003d ret.coder;\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the specified {@linkplain java.nio.charset.Charset charset}.\n     * The length of the new {@code String} is a function of the charset, and\n     * hence may not be equal to the length of the subarray.\n     *\n     * \u003cp\u003e This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\u0027s default replacement string.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset charset} to be used to\n     *         decode the {@code bytes}\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code length} is negative, or\n     *          {@code offset} is greater than {@code bytes.length - length}\n     *\n     * @since  1.6\n     */\n    public String(byte bytes[], int offset, int length, Charset charset) {\n        if (charset \u003d\u003d null)\n            throw new NullPointerException(\"charset\");\n        checkBoundsOffCount(offset, length, bytes.length);\n        StringCoding.Result ret \u003d\n            StringCoding.decode(charset, bytes, offset, length);\n        this.value \u003d ret.value;\n        this.coder \u003d ret.coder;\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of bytes\n     * using the specified {@linkplain java.nio.charset.Charset charset}.  The\n     * length of the new {@code String} is a function of the charset, and hence\n     * may not be equal to the length of the byte array.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  1.1\n     */\n    public String(byte bytes[], String charsetName)\n            throws UnsupportedEncodingException {\n        this(bytes, 0, bytes.length, charsetName);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of\n     * bytes using the specified {@linkplain java.nio.charset.Charset charset}.\n     * The length of the new {@code String} is a function of the charset, and\n     * hence may not be equal to the length of the byte array.\n     *\n     * \u003cp\u003e This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\u0027s default replacement string.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset charset} to be used to\n     *         decode the {@code bytes}\n     *\n     * @since  1.6\n     */\n    public String(byte bytes[], Charset charset) {\n        this(bytes, 0, bytes.length, charset);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the platform\u0027s default charset.  The length of the new\n     * {@code String} is a function of the charset, and hence may not be equal\n     * to the length of the subarray.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code length} is negative, or\n     *          {@code offset} is greater than {@code bytes.length - length}\n     *\n     * @since  1.1\n     */\n    public String(byte bytes[], int offset, int length) {\n        checkBoundsOffCount(offset, length, bytes.length);\n        StringCoding.Result ret \u003d StringCoding.decode(bytes, offset, length);\n        this.value \u003d ret.value;\n        this.coder \u003d ret.coder;\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of bytes\n     * using the platform\u0027s default charset.  The length of the new {@code\n     * String} is a function of the charset, and hence may not be equal to the\n     * length of the byte array.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @since  1.1\n     */\n    public String(byte[] bytes) {\n        this(bytes, 0, bytes.length);\n    }\n\n    /**\n     * Allocates a new string that contains the sequence of characters\n     * currently contained in the string buffer argument. The contents of the\n     * string buffer are copied; subsequent modification of the string buffer\n     * does not affect the newly created string.\n     *\n     * @param  buffer\n     *         A {@code StringBuffer}\n     */\n    public String(StringBuffer buffer) {\n        this(buffer.toString());\n    }\n\n    /**\n     * Allocates a new string that contains the sequence of characters\n     * currently contained in the string builder argument. The contents of the\n     * string builder are copied; subsequent modification of the string builder\n     * does not affect the newly created string.\n     *\n     * \u003cp\u003e This constructor is provided to ease migration to {@code\n     * StringBuilder}. Obtaining a string from a string builder via the {@code\n     * toString} method is likely to run faster and is generally preferred.\n     *\n     * @param   builder\n     *          A {@code StringBuilder}\n     *\n     * @since  1.5\n     */\n    public String(StringBuilder builder) {\n        this(builder, null);\n    }\n\n    /**\n     * Returns the length of this string.\n     * The length is equal to the number of \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode\n     * code units\u003c/a\u003e in the string.\n     *\n     * @return  the length of the sequence of characters represented by this\n     *          object.\n     */\n    public int length() {\n        return value.length \u003e\u003e coder();\n    }\n\n    /**\n     * Returns {@code true} if, and only if, {@link #length()} is {@code 0}.\n     *\n     * @return {@code true} if {@link #length()} is {@code 0}, otherwise\n     * {@code false}\n     *\n     * @since 1.6\n     */\n    public boolean isEmpty() {\n        return value.length \u003d\u003d 0;\n    }\n\n    /**\n     * Returns the {@code char} value at the\n     * specified index. An index ranges from {@code 0} to\n     * {@code length() - 1}. The first {@code char} value of the sequence\n     * is at index {@code 0}, the next at index {@code 1},\n     * and so on, as for array indexing.\n     *\n     * \u003cp\u003eIf the {@code char} value specified by the index is a\n     * \u003ca href\u003d\"Character.html#unicode\"\u003esurrogate\u003c/a\u003e, the surrogate\n     * value is returned.\n     *\n     * @param      index   the index of the {@code char} value.\n     * @return     the {@code char} value at the specified index of this string.\n     *             The first {@code char} value is at index {@code 0}.\n     * @exception  IndexOutOfBoundsException  if the {@code index}\n     *             argument is negative or not less than the length of this\n     *             string.\n     */\n    public char charAt(int index) {\n        if (isLatin1()) {\n            return StringLatin1.charAt(value, index);\n        } else {\n            return StringUTF16.charAt(value, index);\n        }\n    }\n\n    /**\n     * Returns the character (Unicode code point) at the specified\n     * index. The index refers to {@code char} values\n     * (Unicode code units) and ranges from {@code 0} to\n     * {@link #length()}{@code  - 1}.\n     *\n     * \u003cp\u003e If the {@code char} value specified at the given index\n     * is in the high-surrogate range, the following index is less\n     * than the length of this {@code String}, and the\n     * {@code char} value at the following index is in the\n     * low-surrogate range, then the supplementary code point\n     * corresponding to this surrogate pair is returned. Otherwise,\n     * the {@code char} value at the given index is returned.\n     *\n     * @param      index the index to the {@code char} values\n     * @return     the code point value of the character at the\n     *             {@code index}\n     * @exception  IndexOutOfBoundsException  if the {@code index}\n     *             argument is negative or not less than the length of this\n     *             string.\n     * @since      1.5\n     */\n    public int codePointAt(int index) {\n        if (isLatin1()) {\n            checkIndex(index, value.length);\n            return value[index] \u0026 0xff;\n        }\n        int length \u003d value.length \u003e\u003e 1;\n        checkIndex(index, length);\n        return StringUTF16.codePointAt(value, index, length);\n    }\n\n    /**\n     * Returns the character (Unicode code point) before the specified\n     * index. The index refers to {@code char} values\n     * (Unicode code units) and ranges from {@code 1} to {@link\n     * CharSequence#length() length}.\n     *\n     * \u003cp\u003e If the {@code char} value at {@code (index - 1)}\n     * is in the low-surrogate range, {@code (index - 2)} is not\n     * negative, and the {@code char} value at {@code (index -\n     * 2)} is in the high-surrogate range, then the\n     * supplementary code point value of the surrogate pair is\n     * returned. If the {@code char} value at {@code index -\n     * 1} is an unpaired low-surrogate or a high-surrogate, the\n     * surrogate value is returned.\n     *\n     * @param     index the index following the code point that should be returned\n     * @return    the Unicode code point value before the given index.\n     * @exception IndexOutOfBoundsException if the {@code index}\n     *            argument is less than 1 or greater than the length\n     *            of this string.\n     * @since     1.5\n     */\n    public int codePointBefore(int index) {\n        int i \u003d index - 1;\n        if (i \u003c 0 || i \u003e\u003d length()) {\n            throw new StringIndexOutOfBoundsException(index);\n        }\n        if (isLatin1()) {\n            return (value[i] \u0026 0xff);\n        }\n        return StringUTF16.codePointBefore(value, index);\n    }\n\n    /**\n     * Returns the number of Unicode code points in the specified text\n     * range of this {@code String}. The text range begins at the\n     * specified {@code beginIndex} and extends to the\n     * {@code char} at index {@code endIndex - 1}. Thus the\n     * length (in {@code char}s) of the text range is\n     * {@code endIndex-beginIndex}. Unpaired surrogates within\n     * the text range count as one code point each.\n     *\n     * @param beginIndex the index to the first {@code char} of\n     * the text range.\n     * @param endIndex the index after the last {@code char} of\n     * the text range.\n     * @return the number of Unicode code points in the specified text\n     * range\n     * @exception IndexOutOfBoundsException if the\n     * {@code beginIndex} is negative, or {@code endIndex}\n     * is larger than the length of this {@code String}, or\n     * {@code beginIndex} is larger than {@code endIndex}.\n     * @since  1.5\n     */\n    public int codePointCount(int beginIndex, int endIndex) {\n        if (beginIndex \u003c 0 || beginIndex \u003e endIndex ||\n            endIndex \u003e length()) {\n            throw new IndexOutOfBoundsException();\n        }\n        if (isLatin1()) {\n            return endIndex - beginIndex;\n        }\n        return StringUTF16.codePointCount(value, beginIndex, endIndex);\n    }\n\n    /**\n     * Returns the index within this {@code String} that is\n     * offset from the given {@code index} by\n     * {@code codePointOffset} code points. Unpaired surrogates\n     * within the text range given by {@code index} and\n     * {@code codePointOffset} count as one code point each.\n     *\n     * @param index the index to be offset\n     * @param codePointOffset the offset in code points\n     * @return the index within this {@code String}\n     * @exception IndexOutOfBoundsException if {@code index}\n     *   is negative or larger then the length of this\n     *   {@code String}, or if {@code codePointOffset} is positive\n     *   and the substring starting with {@code index} has fewer\n     *   than {@code codePointOffset} code points,\n     *   or if {@code codePointOffset} is negative and the substring\n     *   before {@code index} has fewer than the absolute value\n     *   of {@code codePointOffset} code points.\n     * @since 1.5\n     */\n    public int offsetByCodePoints(int index, int codePointOffset) {\n        if (index \u003c 0 || index \u003e length()) {\n            throw new IndexOutOfBoundsException();\n        }\n        return Character.offsetByCodePoints(this, index, codePointOffset);\n    }\n\n    /**\n     * Copies characters from this string into the destination character\n     * array.\n     * \u003cp\u003e\n     * The first character to be copied is at index {@code srcBegin};\n     * the last character to be copied is at index {@code srcEnd-1}\n     * (thus the total number of characters to be copied is\n     * {@code srcEnd-srcBegin}). The characters are copied into the\n     * subarray of {@code dst} starting at index {@code dstBegin}\n     * and ending at index:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     *     dstBegin + (srcEnd-srcBegin) - 1\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param      srcBegin   index of the first character in the string\n     *                        to copy.\n     * @param      srcEnd     index after the last character in the string\n     *                        to copy.\n     * @param      dst        the destination array.\n     * @param      dstBegin   the start offset in the destination array.\n     * @exception IndexOutOfBoundsException If any of the following\n     *            is true:\n     *            \u003cul\u003e\u003cli\u003e{@code srcBegin} is negative.\n     *            \u003cli\u003e{@code srcBegin} is greater than {@code srcEnd}\n     *            \u003cli\u003e{@code srcEnd} is greater than the length of this\n     *                string\n     *            \u003cli\u003e{@code dstBegin} is negative\n     *            \u003cli\u003e{@code dstBegin+(srcEnd-srcBegin)} is larger than\n     *                {@code dst.length}\u003c/ul\u003e\n     */\n    public void getChars(int srcBegin, int srcEnd, char dst[], int dstBegin) {\n        checkBoundsBeginEnd(srcBegin, srcEnd, length());\n        checkBoundsOffCount(dstBegin, srcEnd - srcBegin, dst.length);\n        if (isLatin1()) {\n            StringLatin1.getChars(value, srcBegin, srcEnd, dst, dstBegin);\n        } else {\n            StringUTF16.getChars(value, srcBegin, srcEnd, dst, dstBegin);\n        }\n    }\n\n    /**\n     * Copies characters from this string into the destination byte array. Each\n     * byte receives the 8 low-order bits of the corresponding character. The\n     * eight high-order bits of each character are not copied and do not\n     * participate in the transfer in any way.\n     *\n     * \u003cp\u003e The first character to be copied is at index {@code srcBegin}; the\n     * last character to be copied is at index {@code srcEnd-1}.  The total\n     * number of characters to be copied is {@code srcEnd-srcBegin}. The\n     * characters, converted to bytes, are copied into the subarray of {@code\n     * dst} starting at index {@code dstBegin} and ending at index:\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     *     dstBegin + (srcEnd-srcBegin) - 1\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @deprecated  This method does not properly convert characters into\n     * bytes.  As of JDK\u0026nbsp;1.1, the preferred way to do this is via the\n     * {@link #getBytes()} method, which uses the platform\u0027s default charset.\n     *\n     * @param  srcBegin\n     *         Index of the first character in the string to copy\n     *\n     * @param  srcEnd\n     *         Index after the last character in the string to copy\n     *\n     * @param  dst\n     *         The destination array\n     *\n     * @param  dstBegin\n     *         The start offset in the destination array\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If any of the following is true:\n     *          \u003cul\u003e\n     *            \u003cli\u003e {@code srcBegin} is negative\n     *            \u003cli\u003e {@code srcBegin} is greater than {@code srcEnd}\n     *            \u003cli\u003e {@code srcEnd} is greater than the length of this String\n     *            \u003cli\u003e {@code dstBegin} is negative\n     *            \u003cli\u003e {@code dstBegin+(srcEnd-srcBegin)} is larger than {@code\n     *                 dst.length}\n     *          \u003c/ul\u003e\n     */\n    @Deprecated(since\u003d\"1.1\")\n    public void getBytes(int srcBegin, int srcEnd, byte dst[], int dstBegin) {\n        checkBoundsBeginEnd(srcBegin, srcEnd, length());\n        Objects.requireNonNull(dst);\n        checkBoundsOffCount(dstBegin, srcEnd - srcBegin, dst.length);\n        if (isLatin1()) {\n            StringLatin1.getBytes(value, srcBegin, srcEnd, dst, dstBegin);\n        } else {\n            StringUTF16.getBytes(value, srcBegin, srcEnd, dst, dstBegin);\n        }\n    }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the named\n     * charset, storing the result into a new byte array.\n     *\n     * \u003cp\u003e The behavior of this method when this string cannot be encoded in\n     * the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetEncoder} class should be used when more control\n     * over the encoding process is required.\n     *\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @return  The resultant byte array\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  1.1\n     */\n    public byte[] getBytes(String charsetName)\n            throws UnsupportedEncodingException {\n        if (charsetName \u003d\u003d null) throw new NullPointerException();\n        return StringCoding.encode(charsetName, coder(), value);\n    }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the given\n     * {@linkplain java.nio.charset.Charset charset}, storing the result into a\n     * new byte array.\n     *\n     * \u003cp\u003e This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\u0027s default replacement byte array.  The\n     * {@link java.nio.charset.CharsetEncoder} class should be used when more\n     * control over the encoding process is required.\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset} to be used to encode\n     *         the {@code String}\n     *\n     * @return  The resultant byte array\n     *\n     * @since  1.6\n     */\n    public byte[] getBytes(Charset charset) {\n        if (charset \u003d\u003d null) throw new NullPointerException();\n        return StringCoding.encode(charset, coder(), value);\n     }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the\n     * platform\u0027s default charset, storing the result into a new byte array.\n     *\n     * \u003cp\u003e The behavior of this method when this string cannot be encoded in\n     * the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetEncoder} class should be used when more control\n     * over the encoding process is required.\n     *\n     * @return  The resultant byte array\n     *\n     * @since      1.1\n     */\n    public byte[] getBytes() {\n        return StringCoding.encode(coder(), value);\n    }\n\n    /**\n     * Compares this string to the specified object.  The result is {@code\n     * true} if and only if the argument is not {@code null} and is a {@code\n     * String} object that represents the same sequence of characters as this\n     * object.\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param  anObject\n     *         The object to compare this {@code String} against\n     *\n     * @return  {@code true} if the given object represents a {@code String}\n     *          equivalent to this string, {@code false} otherwise\n     *\n     * @see  #compareTo(String)\n     * @see  #equalsIgnoreCase(String)\n     */\n    public boolean equals(Object anObject) {\n        if (this \u003d\u003d anObject) {\n            return true;\n        }\n        if (anObject instanceof String) {\n            String aString \u003d (String)anObject;\n            if (coder() \u003d\u003d aString.coder()) {\n                return isLatin1() ? StringLatin1.equals(value, aString.value)\n                                  : StringUTF16.equals(value, aString.value);\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Compares this string to the specified {@code StringBuffer}.  The result\n     * is {@code true} if and only if this {@code String} represents the same\n     * sequence of characters as the specified {@code StringBuffer}. This method\n     * synchronizes on the {@code StringBuffer}.\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param  sb\n     *         The {@code StringBuffer} to compare this {@code String} against\n     *\n     * @return  {@code true} if this {@code String} represents the same\n     *          sequence of characters as the specified {@code StringBuffer},\n     *          {@code false} otherwise\n     *\n     * @since  1.4\n     */\n    public boolean contentEquals(StringBuffer sb) {\n        return contentEquals((CharSequence)sb);\n    }\n\n    private boolean nonSyncContentEquals(AbstractStringBuilder sb) {\n        int len \u003d length();\n        if (len !\u003d sb.length()) {\n            return false;\n        }\n        byte v1[] \u003d value;\n        byte v2[] \u003d sb.getValue();\n        if (coder() \u003d\u003d sb.getCoder()) {\n            int n \u003d v1.length;\n            for (int i \u003d 0; i \u003c n; i++) {\n                if (v1[i] !\u003d v2[i]) {\n                    return false;\n                }\n            }\n        } else {\n            if (!isLatin1()) {  // utf16 str and latin1 abs can never be \"equal\"\n                return false;\n            }\n            return StringUTF16.contentEquals(v1, v2, len);\n        }\n        return true;\n    }\n\n    /**\n     * Compares this string to the specified {@code CharSequence}.  The\n     * result is {@code true} if and only if this {@code String} represents the\n     * same sequence of char values as the specified sequence. Note that if the\n     * {@code CharSequence} is a {@code StringBuffer} then the method\n     * synchronizes on it.\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param  cs\n     *         The sequence to compare this {@code String} against\n     *\n     * @return  {@code true} if this {@code String} represents the same\n     *          sequence of char values as the specified sequence, {@code\n     *          false} otherwise\n     *\n     * @since  1.5\n     */\n    public boolean contentEquals(CharSequence cs) {\n        // Argument is a StringBuffer, StringBuilder\n        if (cs instanceof AbstractStringBuilder) {\n            if (cs instanceof StringBuffer) {\n                synchronized(cs) {\n                   return nonSyncContentEquals((AbstractStringBuilder)cs);\n                }\n            } else {\n                return nonSyncContentEquals((AbstractStringBuilder)cs);\n            }\n        }\n        // Argument is a String\n        if (cs instanceof String) {\n            return equals(cs);\n        }\n        // Argument is a generic CharSequence\n        int n \u003d cs.length();\n        if (n !\u003d length()) {\n            return false;\n        }\n        byte[] val \u003d this.value;\n        if (isLatin1()) {\n            for (int i \u003d 0; i \u003c n; i++) {\n                if ((val[i] \u0026 0xff) !\u003d cs.charAt(i)) {\n                    return false;\n                }\n            }\n        } else {\n            if (!StringUTF16.contentEquals(val, cs, n)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Compares this {@code String} to another {@code String}, ignoring case\n     * considerations.  Two strings are considered equal ignoring case if they\n     * are of the same length and corresponding characters in the two strings\n     * are equal ignoring case.\n     *\n     * \u003cp\u003e Two characters {@code c1} and {@code c2} are considered the same\n     * ignoring case if at least one of the following is true:\n     * \u003cul\u003e\n     *   \u003cli\u003e The two characters are the same (as compared by the\n     *        {@code \u003d\u003d} operator)\n     *   \u003cli\u003e Calling {@code Character.toLowerCase(Character.toUpperCase(char))}\n     *        on each character produces the same result\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that this method does \u003cem\u003enot\u003c/em\u003e take locale into account, and\n     * will result in unsatisfactory results for certain locales.  The\n     * {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @param  anotherString\n     *         The {@code String} to compare this {@code String} against\n     *\n     * @return  {@code true} if the argument is not {@code null} and it\n     *          represents an equivalent {@code String} ignoring case; {@code\n     *          false} otherwise\n     *\n     * @see  #equals(Object)\n     */\n    public boolean equalsIgnoreCase(String anotherString) {\n        return (this \u003d\u003d anotherString) ? true\n                : (anotherString !\u003d null)\n                \u0026\u0026 (anotherString.length() \u003d\u003d length())\n                \u0026\u0026 regionMatches(true, 0, anotherString, 0, length());\n    }\n\n    /**\n     * Compares two strings lexicographically.\n     * The comparison is based on the Unicode value of each character in\n     * the strings. The character sequence represented by this\n     * {@code String} object is compared lexicographically to the\n     * character sequence represented by the argument string. The result is\n     * a negative integer if this {@code String} object\n     * lexicographically precedes the argument string. The result is a\n     * positive integer if this {@code String} object lexicographically\n     * follows the argument string. The result is zero if the strings\n     * are equal; {@code compareTo} returns {@code 0} exactly when\n     * the {@link #equals(Object)} method would return {@code true}.\n     * \u003cp\u003e\n     * This is the definition of lexicographic ordering. If two strings are\n     * different, then either they have different characters at some index\n     * that is a valid index for both strings, or their lengths are different,\n     * or both. If they have different characters at one or more index\n     * positions, let \u003ci\u003ek\u003c/i\u003e be the smallest such index; then the string\n     * whose character at position \u003ci\u003ek\u003c/i\u003e has the smaller value, as\n     * determined by using the {@code \u003c} operator, lexicographically precedes the\n     * other string. In this case, {@code compareTo} returns the\n     * difference of the two character values at position {@code k} in\n     * the two string -- that is, the value:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(k)-anotherString.charAt(k)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * If there is no index position at which they differ, then the shorter\n     * string lexicographically precedes the longer string. In this case,\n     * {@code compareTo} returns the difference of the lengths of the\n     * strings -- that is, the value:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.length()-anotherString.length()\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param   anotherString   the {@code String} to be compared.\n     * @return  the value {@code 0} if the argument string is equal to\n     *          this string; a value less than {@code 0} if this string\n     *          is lexicographically less than the string argument; and a\n     *          value greater than {@code 0} if this string is\n     *          lexicographically greater than the string argument.\n     */\n    public int compareTo(String anotherString) {\n        byte v1[] \u003d value;\n        byte v2[] \u003d anotherString.value;\n        if (coder() \u003d\u003d anotherString.coder()) {\n            return isLatin1() ? StringLatin1.compareTo(v1, v2)\n                              : StringUTF16.compareTo(v1, v2);\n        }\n        return isLatin1() ? StringLatin1.compareToUTF16(v1, v2)\n                          : StringUTF16.compareToLatin1(v1, v2);\n     }\n\n    /**\n     * A Comparator that orders {@code String} objects as by\n     * {@code compareToIgnoreCase}. This comparator is serializable.\n     * \u003cp\u003e\n     * Note that this Comparator does \u003cem\u003enot\u003c/em\u003e take locale into account,\n     * and will result in an unsatisfactory ordering for certain locales.\n     * The {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @see     java.text.Collator\n     * @since   1.2\n     */\n    public static final Comparator\u003cString\u003e CASE_INSENSITIVE_ORDER\n                                         \u003d new CaseInsensitiveComparator();\n    private static class CaseInsensitiveComparator\n            implements Comparator\u003cString\u003e, java.io.Serializable {\n        // use serialVersionUID from JDK 1.2.2 for interoperability\n        private static final long serialVersionUID \u003d 8575799808933029326L;\n\n        public int compare(String s1, String s2) {\n            byte v1[] \u003d s1.value;\n            byte v2[] \u003d s2.value;\n            if (s1.coder() \u003d\u003d s2.coder()) {\n                return s1.isLatin1() ? StringLatin1.compareToCI(v1, v2)\n                                     : StringUTF16.compareToCI(v1, v2);\n            }\n            return s1.isLatin1() ? StringLatin1.compareToCI_UTF16(v1, v2)\n                                 : StringUTF16.compareToCI_Latin1(v1, v2);\n        }\n\n        /** Replaces the de-serialized object. */\n        private Object readResolve() { return CASE_INSENSITIVE_ORDER; }\n    }\n\n    /**\n     * Compares two strings lexicographically, ignoring case\n     * differences. This method returns an integer whose sign is that of\n     * calling {@code compareTo} with normalized versions of the strings\n     * where case differences have been eliminated by calling\n     * {@code Character.toLowerCase(Character.toUpperCase(character))} on\n     * each character.\n     * \u003cp\u003e\n     * Note that this method does \u003cem\u003enot\u003c/em\u003e take locale into account,\n     * and will result in an unsatisfactory ordering for certain locales.\n     * The {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @param   str   the {@code String} to be compared.\n     * @return  a negative integer, zero, or a positive integer as the\n     *          specified String is greater than, equal to, or less\n     *          than this String, ignoring case considerations.\n     * @see     java.text.Collator\n     * @since   1.2\n     */\n    public int compareToIgnoreCase(String str) {\n        return CASE_INSENSITIVE_ORDER.compare(this, str);\n    }\n\n    /**\n     * Tests if two string regions are equal.\n     * \u003cp\u003e\n     * A substring of this {@code String} object is compared to a substring\n     * of the argument other. The result is true if these substrings\n     * represent identical character sequences. The substring of this\n     * {@code String} object to be compared begins at index {@code toffset}\n     * and has length {@code len}. The substring of other to be compared\n     * begins at index {@code ooffset} and has length {@code len}. The\n     * result is {@code false} if and only if at least one of the following\n     * is true:\n     * \u003cul\u003e\u003cli\u003e{@code toffset} is negative.\n     * \u003cli\u003e{@code ooffset} is negative.\n     * \u003cli\u003e{@code toffset+len} is greater than the length of this\n     * {@code String} object.\n     * \u003cli\u003e{@code ooffset+len} is greater than the length of the other\n     * argument.\n     * \u003cli\u003eThere is some nonnegative integer \u003ci\u003ek\u003c/i\u003e less than {@code len}\n     * such that:\n     * {@code this.charAt(toffset + }\u003ci\u003ek\u003c/i\u003e{@code ) !\u003d other.charAt(ooffset + }\n     * \u003ci\u003ek\u003c/i\u003e{@code )}\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that this method does \u003cem\u003enot\u003c/em\u003e take locale into account.  The\n     * {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @param   toffset   the starting offset of the subregion in this string.\n     * @param   other     the string argument.\n     * @param   ooffset   the starting offset of the subregion in the string\n     *                    argument.\n     * @param   len       the number of characters to compare.\n     * @return  {@code true} if the specified subregion of this string\n     *          exactly matches the specified subregion of the string argument;\n     *          {@code false} otherwise.\n     */\n    public boolean regionMatches(int toffset, String other, int ooffset, int len) {\n        byte tv[] \u003d value;\n        byte ov[] \u003d other.value;\n        // Note: toffset, ooffset, or len might be near -1\u003e\u003e\u003e1.\n        if ((ooffset \u003c 0) || (toffset \u003c 0) ||\n             (toffset \u003e (long)length() - len) ||\n             (ooffset \u003e (long)other.length() - len)) {\n            return false;\n        }\n        if (coder() \u003d\u003d other.coder()) {\n            if (!isLatin1() \u0026\u0026 (len \u003e 0)) {\n                toffset \u003d toffset \u003c\u003c 1;\n                ooffset \u003d ooffset \u003c\u003c 1;\n                len \u003d len \u003c\u003c 1;\n            }\n            while (len-- \u003e 0) {\n                if (tv[toffset++] !\u003d ov[ooffset++]) {\n                    return false;\n                }\n            }\n        } else {\n            if (coder() \u003d\u003d LATIN1) {\n                while (len-- \u003e 0) {\n                    if (StringLatin1.getChar(tv, toffset++) !\u003d\n                        StringUTF16.getChar(ov, ooffset++)) {\n                        return false;\n                    }\n                }\n            } else {\n                while (len-- \u003e 0) {\n                    if (StringUTF16.getChar(tv, toffset++) !\u003d\n                        StringLatin1.getChar(ov, ooffset++)) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Tests if two string regions are equal.\n     * \u003cp\u003e\n     * A substring of this {@code String} object is compared to a substring\n     * of the argument {@code other}. The result is {@code true} if these\n     * substrings represent character sequences that are the same, ignoring\n     * case if and only if {@code ignoreCase} is true. The substring of\n     * this {@code String} object to be compared begins at index\n     * {@code toffset} and has length {@code len}. The substring of\n     * {@code other} to be compared begins at index {@code ooffset} and\n     * has length {@code len}. The result is {@code false} if and only if\n     * at least one of the following is true:\n     * \u003cul\u003e\u003cli\u003e{@code toffset} is negative.\n     * \u003cli\u003e{@code ooffset} is negative.\n     * \u003cli\u003e{@code toffset+len} is greater than the length of this\n     * {@code String} object.\n     * \u003cli\u003e{@code ooffset+len} is greater than the length of the other\n     * argument.\n     * \u003cli\u003e{@code ignoreCase} is {@code false} and there is some nonnegative\n     * integer \u003ci\u003ek\u003c/i\u003e less than {@code len} such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(toffset+k) !\u003d other.charAt(ooffset+k)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * \u003cli\u003e{@code ignoreCase} is {@code true} and there is some nonnegative\n     * integer \u003ci\u003ek\u003c/i\u003e less than {@code len} such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * Character.toLowerCase(Character.toUpperCase(this.charAt(toffset+k))) !\u003d\n     Character.toLowerCase(Character.toUpperCase(other.charAt(ooffset+k)))\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that this method does \u003cem\u003enot\u003c/em\u003e take locale into account,\n     * and will result in unsatisfactory results for certain locales when\n     * {@code ignoreCase} is {@code true}.  The {@link java.text.Collator} class\n     * provides locale-sensitive comparison.\n     *\n     * @param   ignoreCase   if {@code true}, ignore case when comparing\n     *                       characters.\n     * @param   toffset      the starting offset of the subregion in this\n     *                       string.\n     * @param   other        the string argument.\n     * @param   ooffset      the starting offset of the subregion in the string\n     *                       argument.\n     * @param   len          the number of characters to compare.\n     * @return  {@code true} if the specified subregion of this string\n     *          matches the specified subregion of the string argument;\n     *          {@code false} otherwise. Whether the matching is exact\n     *          or case insensitive depends on the {@code ignoreCase}\n     *          argument.\n     */\n    public boolean regionMatches(boolean ignoreCase, int toffset,\n            String other, int ooffset, int len) {\n        if (!ignoreCase) {\n            return regionMatches(toffset, other, ooffset, len);\n        }\n        // Note: toffset, ooffset, or len might be near -1\u003e\u003e\u003e1.\n        if ((ooffset \u003c 0) || (toffset \u003c 0)\n                || (toffset \u003e (long)length() - len)\n                || (ooffset \u003e (long)other.length() - len)) {\n            return false;\n        }\n        byte tv[] \u003d value;\n        byte ov[] \u003d other.value;\n        if (coder() \u003d\u003d other.coder()) {\n            return isLatin1()\n              ? StringLatin1.regionMatchesCI(tv, toffset, ov, ooffset, len)\n              : StringUTF16.regionMatchesCI(tv, toffset, ov, ooffset, len);\n        }\n        return isLatin1()\n              ? StringLatin1.regionMatchesCI_UTF16(tv, toffset, ov, ooffset, len)\n              : StringUTF16.regionMatchesCI_Latin1(tv, toffset, ov, ooffset, len);\n    }\n\n    /**\n     * Tests if the substring of this string beginning at the\n     * specified index starts with the specified prefix.\n     *\n     * @param   prefix    the prefix.\n     * @param   toffset   where to begin looking in this string.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a prefix of the substring of this object starting\n     *          at index {@code toffset}; {@code false} otherwise.\n     *          The result is {@code false} if {@code toffset} is\n     *          negative or greater than the length of this\n     *          {@code String} object; otherwise the result is the same\n     *          as the result of the expression\n     *          \u003cpre\u003e\n     *          this.substring(toffset).startsWith(prefix)\n     *          \u003c/pre\u003e\n     */\n    public boolean startsWith(String prefix, int toffset) {\n        // Note: toffset might be near -1\u003e\u003e\u003e1.\n        if (toffset \u003c 0 || toffset \u003e length() - prefix.length()) {\n            return false;\n        }\n        byte ta[] \u003d value;\n        byte pa[] \u003d prefix.value;\n        int po \u003d 0;\n        int pc \u003d pa.length;\n        if (coder() \u003d\u003d prefix.coder()) {\n            int to \u003d isLatin1() ? toffset : toffset \u003c\u003c 1;\n            while (po \u003c pc) {\n                if (ta[to++] !\u003d pa[po++]) {\n                    return false;\n                }\n            }\n        } else {\n            if (isLatin1()) {  // \u0026\u0026 pcoder \u003d\u003d UTF16\n                return false;\n            }\n            // coder \u003d\u003d UTF16 \u0026\u0026 pcoder \u003d\u003d LATIN1)\n            while (po \u003c pc) {\n                if (StringUTF16.getChar(ta, toffset++) !\u003d (pa[po++] \u0026 0xff)) {\n                    return false;\n               }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Tests if this string starts with the specified prefix.\n     *\n     * @param   prefix   the prefix.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a prefix of the character sequence represented by\n     *          this string; {@code false} otherwise.\n     *          Note also that {@code true} will be returned if the\n     *          argument is an empty string or is equal to this\n     *          {@code String} object as determined by the\n     *          {@link #equals(Object)} method.\n     * @since   1.0\n     */\n    public boolean startsWith(String prefix) {\n        return startsWith(prefix, 0);\n    }\n\n    /**\n     * Tests if this string ends with the specified suffix.\n     *\n     * @param   suffix   the suffix.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a suffix of the character sequence represented by\n     *          this object; {@code false} otherwise. Note that the\n     *          result will be {@code true} if the argument is the\n     *          empty string or is equal to this {@code String} object\n     *          as determined by the {@link #equals(Object)} method.\n     */\n    public boolean endsWith(String suffix) {\n        return startsWith(suffix, length() - suffix.length());\n    }\n\n    /**\n     * Returns a hash code for this string. The hash code for a\n     * {@code String} object is computed as\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * using {@code int} arithmetic, where {@code s[i]} is the\n     * \u003ci\u003ei\u003c/i\u003eth character of the string, {@code n} is the length of\n     * the string, and {@code ^} indicates exponentiation.\n     * (The hash value of the empty string is zero.)\n     *\n     * @return  a hash code value for this object.\n     */\n    public int hashCode() {\n        int h \u003d hash;\n        if (h \u003d\u003d 0 \u0026\u0026 value.length \u003e 0) {\n            hash \u003d h \u003d isLatin1() ? StringLatin1.hashCode(value)\n                                  : StringUTF16.hashCode(value);\n        }\n        return h;\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of\n     * the specified character. If a character with value\n     * {@code ch} occurs in the character sequence represented by\n     * this {@code String} object, then the index (in Unicode\n     * code units) of the first such occurrence is returned. For\n     * values of {@code ch} in the range from 0 to 0xFFFF\n     * (inclusive), this is the smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. In either case, if no such character occurs in this\n     * string, then {@code -1} is returned.\n     *\n     * @param   ch   a character (Unicode code point).\n     * @return  the index of the first occurrence of the character in the\n     *          character sequence represented by this object, or\n     *          {@code -1} if the character does not occur.\n     */\n    public int indexOf(int ch) {\n        return indexOf(ch, 0);\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified character, starting the search at the specified index.\n     * \u003cp\u003e\n     * If a character with value {@code ch} occurs in the\n     * character sequence represented by this {@code String}\n     * object at an index no smaller than {@code fromIndex}, then\n     * the index of the first such occurrence is returned. For values\n     * of {@code ch} in the range from 0 to 0xFFFF (inclusive),\n     * this is the smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026gt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026gt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. In either case, if no such character occurs in this\n     * string at or after position {@code fromIndex}, then\n     * {@code -1} is returned.\n     *\n     * \u003cp\u003e\n     * There is no restriction on the value of {@code fromIndex}. If it\n     * is negative, it has the same effect as if it were zero: this entire\n     * string may be searched. If it is greater than the length of this\n     * string, it has the same effect as if it were equal to the length of\n     * this string: {@code -1} is returned.\n     *\n     * \u003cp\u003eAll indices are specified in {@code char} values\n     * (Unicode code units).\n     *\n     * @param   ch          a character (Unicode code point).\n     * @param   fromIndex   the index to start the search from.\n     * @return  the index of the first occurrence of the character in the\n     *          character sequence represented by this object that is greater\n     *          than or equal to {@code fromIndex}, or {@code -1}\n     *          if the character does not occur.\n     */\n    public int indexOf(int ch, int fromIndex) {\n        return isLatin1() ? StringLatin1.indexOf(value, ch, fromIndex)\n                          : StringUTF16.indexOf(value, ch, fromIndex);\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of\n     * the specified character. For values of {@code ch} in the\n     * range from 0 to 0xFFFF (inclusive), the index (in Unicode code\n     * units) returned is the largest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * largest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true.  In either case, if no such character occurs in this\n     * string, then {@code -1} is returned.  The\n     * {@code String} is searched backwards starting at the last\n     * character.\n     *\n     * @param   ch   a character (Unicode code point).\n     * @return  the index of the last occurrence of the character in the\n     *          character sequence represented by this object, or\n     *          {@code -1} if the character does not occur.\n     */\n    public int lastIndexOf(int ch) {\n        return lastIndexOf(ch, length() - 1);\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of\n     * the specified character, searching backward starting at the\n     * specified index. For values of {@code ch} in the range\n     * from 0 to 0xFFFF (inclusive), the index returned is the largest\n     * value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026lt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * largest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026lt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. In either case, if no such character occurs in this\n     * string at or before position {@code fromIndex}, then\n     * {@code -1} is returned.\n     *\n     * \u003cp\u003eAll indices are specified in {@code char} values\n     * (Unicode code units).\n     *\n     * @param   ch          a character (Unicode code point).\n     * @param   fromIndex   the index to start the search from. There is no\n     *          restriction on the value of {@code fromIndex}. If it is\n     *          greater than or equal to the length of this string, it has\n     *          the same effect as if it were equal to one less than the\n     *          length of this string: this entire string may be searched.\n     *          If it is negative, it has the same effect as if it were -1:\n     *          -1 is returned.\n     * @return  the index of the last occurrence of the character in the\n     *          character sequence represented by this object that is less\n     *          than or equal to {@code fromIndex}, or {@code -1}\n     *          if the character does not occur before that point.\n     */\n    public int lastIndexOf(int ch, int fromIndex) {\n        return isLatin1() ? StringLatin1.lastIndexOf(value, ch, fromIndex)\n                          : StringUTF16.lastIndexOf(value, ch, fromIndex);\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified substring.\n     *\n     * \u003cp\u003eThe returned index is the smallest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     * this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str   the substring to search for.\n     * @return  the index of the first occurrence of the specified substring,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int indexOf(String str) {\n        if (coder() \u003d\u003d str.coder()) {\n            return isLatin1() ? StringLatin1.indexOf(value, str.value)\n                              : StringUTF16.indexOf(value, str.value);\n        }\n        if (coder() \u003d\u003d LATIN1) {  // str.coder \u003d\u003d UTF16\n            return -1;\n        }\n        return StringUTF16.indexOfLatin1(value, str.value);\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified substring, starting at the specified index.\n     *\n     * \u003cp\u003eThe returned index is the smallest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     *     k \u003e\u003d Math.min(fromIndex, this.length()) \u0026\u0026\n     *                   this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str         the substring to search for.\n     * @param   fromIndex   the index from which to start the search.\n     * @return  the index of the first occurrence of the specified substring,\n     *          starting at the specified index,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int indexOf(String str, int fromIndex) {\n        return indexOf(value, coder(), length(), str, fromIndex);\n    }\n\n    /**\n     * Code shared by String and AbstractStringBuilder to do searches. The\n     * source is the character array being searched, and the target\n     * is the string being searched for.\n     *\n     * @param   src       the characters being searched.\n     * @param   srcCoder  the coder of the source string.\n     * @param   srcCount  length of the source string.\n     * @param   tgtStr    the characters being searched for.\n     * @param   fromIndex the index to begin searching from.\n     */\n    static int indexOf(byte[] src, byte srcCoder, int srcCount,\n                       String tgtStr, int fromIndex) {\n        byte[] tgt    \u003d tgtStr.value;\n        byte tgtCoder \u003d tgtStr.coder();\n        int tgtCount  \u003d tgtStr.length();\n\n        if (fromIndex \u003e\u003d srcCount) {\n            return (tgtCount \u003d\u003d 0 ? srcCount : -1);\n        }\n        if (fromIndex \u003c 0) {\n            fromIndex \u003d 0;\n        }\n        if (tgtCount \u003d\u003d 0) {\n            return fromIndex;\n        }\n        if (tgtCount \u003e srcCount) {\n            return -1;\n        }\n        if (srcCoder \u003d\u003d tgtCoder) {\n            return srcCoder \u003d\u003d LATIN1\n                ? StringLatin1.indexOf(src, srcCount, tgt, tgtCount, fromIndex)\n                : StringUTF16.indexOf(src, srcCount, tgt, tgtCount, fromIndex);\n        }\n        if (srcCoder \u003d\u003d LATIN1) {    //  \u0026\u0026 tgtCoder \u003d\u003d UTF16\n            return -1;\n        }\n        // srcCoder \u003d\u003d UTF16 \u0026\u0026 tgtCoder \u003d\u003d LATIN1) {\n        return StringUTF16.indexOfLatin1(src, srcCount, tgt, tgtCount, fromIndex);\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of the\n     * specified substring.  The last occurrence of the empty string \"\"\n     * is considered to occur at the index value {@code this.length()}.\n     *\n     * \u003cp\u003eThe returned index is the largest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     * this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str   the substring to search for.\n     * @return  the index of the last occurrence of the specified substring,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int lastIndexOf(String str) {\n        return lastIndexOf(str, length());\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of the\n     * specified substring, searching backward starting at the specified index.\n     *\n     * \u003cp\u003eThe returned index is the largest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     *     k \u003c\u003d Math.min(fromIndex, this.length()) \u0026\u0026\n     *                   this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str         the substring to search for.\n     * @param   fromIndex   the index to start the search from.\n     * @return  the index of the last occurrence of the specified substring,\n     *          searching backward from the specified index,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int lastIndexOf(String str, int fromIndex) {\n        return lastIndexOf(value, coder(), length(), str, fromIndex);\n    }\n\n    /**\n     * Code shared by String and AbstractStringBuilder to do searches. The\n     * source is the character array being searched, and the target\n     * is the string being searched for.\n     *\n     * @param   src         the characters being searched.\n     * @param   srcCoder    coder handles the mapping between bytes/chars\n     * @param   srcCount    count of the source string.\n     * @param   tgt         the characters being searched for.\n     * @param   fromIndex   the index to begin searching from.\n     */\n    static int lastIndexOf(byte[] src, byte srcCoder, int srcCount,\n                           String tgtStr, int fromIndex) {\n        byte[] tgt \u003d tgtStr.value;\n        byte tgtCoder \u003d tgtStr.coder();\n        int tgtCount \u003d tgtStr.length();\n        /*\n         * Check arguments; return immediately where possible. For\n         * consistency, don\u0027t check for null str.\n         */\n        int rightIndex \u003d srcCount - tgtCount;\n        if (fromIndex \u003e rightIndex) {\n            fromIndex \u003d rightIndex;\n        }\n        if (fromIndex \u003c 0) {\n            return -1;\n        }\n        /* Empty string always matches. */\n        if (tgtCount \u003d\u003d 0) {\n            return fromIndex;\n        }\n        if (srcCoder \u003d\u003d tgtCoder) {\n            return srcCoder \u003d\u003d LATIN1\n                ? StringLatin1.lastIndexOf(src, srcCount, tgt, tgtCount, fromIndex)\n                : StringUTF16.lastIndexOf(src, srcCount, tgt, tgtCount, fromIndex);\n        }\n        if (srcCoder \u003d\u003d LATIN1) {    // \u0026\u0026 tgtCoder \u003d\u003d UTF16\n            return -1;\n        }\n        // srcCoder \u003d\u003d UTF16 \u0026\u0026 tgtCoder \u003d\u003d LATIN1\n        return StringUTF16.lastIndexOfLatin1(src, srcCount, tgt, tgtCount, fromIndex);\n    }\n\n    /**\n     * Returns a string that is a substring of this string. The\n     * substring begins with the character at the specified index and\n     * extends to the end of this string. \u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"unhappy\".substring(2) returns \"happy\"\n     * \"Harbison\".substring(3) returns \"bison\"\n     * \"emptiness\".substring(9) returns \"\" (an empty string)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param      beginIndex   the beginning index, inclusive.\n     * @return     the specified substring.\n     * @exception  IndexOutOfBoundsException  if\n     *             {@code beginIndex} is negative or larger than the\n     *             length of this {@code String} object.\n     */\n    public String substring(int beginIndex) {\n        if (beginIndex \u003c 0) {\n            throw new StringIndexOutOfBoundsException(beginIndex);\n        }\n        int subLen \u003d length() - beginIndex;\n        if (subLen \u003c 0) {\n            throw new StringIndexOutOfBoundsException(subLen);\n        }\n        if (beginIndex \u003d\u003d 0) {\n            return this;\n        }\n        return isLatin1() ? StringLatin1.newString(value, beginIndex, subLen)\n                          : StringUTF16.newString(value, beginIndex, subLen);\n    }\n\n    /**\n     * Returns a string that is a substring of this string. The\n     * substring begins at the specified {@code beginIndex} and\n     * extends to the character at index {@code endIndex - 1}.\n     * Thus the length of the substring is {@code endIndex-beginIndex}.\n     * \u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"hamburger\".substring(4, 8) returns \"urge\"\n     * \"smiles\".substring(1, 5) returns \"mile\"\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param      beginIndex   the beginning index, inclusive.\n     * @param      endIndex     the ending index, exclusive.\n     * @return     the specified substring.\n     * @exception  IndexOutOfBoundsException  if the\n     *             {@code beginIndex} is negative, or\n     *             {@code endIndex} is larger than the length of\n     *             this {@code String} object, or\n     *             {@code beginIndex} is larger than\n     *             {@code endIndex}.\n     */\n    public String substring(int beginIndex, int endIndex) {\n        int length \u003d length();\n        checkBoundsBeginEnd(beginIndex, endIndex, length);\n        int subLen \u003d endIndex - beginIndex;\n        if (beginIndex \u003d\u003d 0 \u0026\u0026 endIndex \u003d\u003d length) {\n            return this;\n        }\n        return isLatin1() ? StringLatin1.newString(value, beginIndex, subLen)\n                          : StringUTF16.newString(value, beginIndex, subLen);\n    }\n\n    /**\n     * Returns a character sequence that is a subsequence of this sequence.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * str.subSequence(begin,\u0026nbsp;end)\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * behaves in exactly the same way as the invocation\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * str.substring(begin,\u0026nbsp;end)\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @apiNote\n     * This method is defined so that the {@code String} class can implement\n     * the {@link CharSequence} interface.\n     *\n     * @param   beginIndex   the begin index, inclusive.\n     * @param   endIndex     the end index, exclusive.\n     * @return  the specified subsequence.\n     *\n     * @throws  IndexOutOfBoundsException\n     *          if {@code beginIndex} or {@code endIndex} is negative,\n     *          if {@code endIndex} is greater than {@code length()},\n     *          or if {@code beginIndex} is greater than {@code endIndex}\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public CharSequence subSequence(int beginIndex, int endIndex) {\n        return this.substring(beginIndex, endIndex);\n    }\n\n    /**\n     * Concatenates the specified string to the end of this string.\n     * \u003cp\u003e\n     * If the length of the argument string is {@code 0}, then this\n     * {@code String} object is returned. Otherwise, a\n     * {@code String} object is returned that represents a character\n     * sequence that is the concatenation of the character sequence\n     * represented by this {@code String} object and the character\n     * sequence represented by the argument string.\u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"cares\".concat(\"s\") returns \"caress\"\n     * \"to\".concat(\"get\").concat(\"her\") returns \"together\"\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param   str   the {@code String} that is concatenated to the end\n     *                of this {@code String}.\n     * @return  a string that represents the concatenation of this object\u0027s\n     *          characters followed by the string argument\u0027s characters.\n     */\n    public String concat(String str) {\n        if (str.isEmpty()) {\n            return this;\n        }\n        if (coder() \u003d\u003d str.coder()) {\n            byte[] val \u003d this.value;\n            byte[] oval \u003d str.value;\n            int len \u003d val.length + oval.length;\n            byte[] buf \u003d Arrays.copyOf(val, len);\n            System.arraycopy(oval, 0, buf, val.length, oval.length);\n            return new String(buf, coder);\n        }\n        int len \u003d length();\n        int olen \u003d str.length();\n        byte[] buf \u003d StringUTF16.newBytesFor(len + olen);\n        getBytes(buf, 0, UTF16);\n        str.getBytes(buf, len, UTF16);\n        return new String(buf, UTF16);\n    }\n\n    /**\n     * Returns a string resulting from replacing all occurrences of\n     * {@code oldChar} in this string with {@code newChar}.\n     * \u003cp\u003e\n     * If the character {@code oldChar} does not occur in the\n     * character sequence represented by this {@code String} object,\n     * then a reference to this {@code String} object is returned.\n     * Otherwise, a {@code String} object is returned that\n     * represents a character sequence identical to the character sequence\n     * represented by this {@code String} object, except that every\n     * occurrence of {@code oldChar} is replaced by an occurrence\n     * of {@code newChar}.\n     * \u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"mesquite in your cellar\".replace(\u0027e\u0027, \u0027o\u0027)\n     *         returns \"mosquito in your collar\"\n     * \"the war of baronets\".replace(\u0027r\u0027, \u0027y\u0027)\n     *         returns \"the way of bayonets\"\n     * \"sparring with a purple porpoise\".replace(\u0027p\u0027, \u0027t\u0027)\n     *         returns \"starring with a turtle tortoise\"\n     * \"JonL\".replace(\u0027q\u0027, \u0027x\u0027) returns \"JonL\" (no change)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param   oldChar   the old character.\n     * @param   newChar   the new character.\n     * @return  a string derived from this string by replacing every\n     *          occurrence of {@code oldChar} with {@code newChar}.\n     */\n    public String replace(char oldChar, char newChar) {\n        if (oldChar !\u003d newChar) {\n            String ret \u003d isLatin1() ? StringLatin1.replace(value, oldChar, newChar)\n                                    : StringUTF16.replace(value, oldChar, newChar);\n            if (ret !\u003d null) {\n                return ret;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Tells whether or not this string matches the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr\u003c/i\u003e{@code .matches(}\u003ci\u003eregex\u003c/i\u003e{@code )} yields exactly the\n     * same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * {@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#matches(String,CharSequence)\n     * matches(\u003ci\u003eregex\u003c/i\u003e, \u003ci\u003estr\u003c/i\u003e)}\n     * \u003c/blockquote\u003e\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     *\n     * @return  {@code true} if, and only if, this string matches the\n     *          given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public boolean matches(String regex) {\n        return Pattern.matches(regex, this);\n    }\n\n    /**\n     * Returns true if and only if this string contains the specified\n     * sequence of char values.\n     *\n     * @param s the sequence to search for\n     * @return true if this string contains {@code s}, false otherwise\n     * @since 1.5\n     */\n    public boolean contains(CharSequence s) {\n        return indexOf(s.toString()) \u003e\u003d 0;\n    }\n\n    /**\n     * Replaces the first substring of this string that matches the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e with the\n     * given replacement.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr\u003c/i\u003e{@code .replaceFirst(}\u003ci\u003eregex\u003c/i\u003e{@code ,} \u003ci\u003erepl\u003c/i\u003e{@code )}\n     * yields exactly the same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * \u003ccode\u003e\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n     * java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher}(\u003ci\u003estr\u003c/i\u003e).{@link\n     * java.util.regex.Matcher#replaceFirst replaceFirst}(\u003ci\u003erepl\u003c/i\u003e)\n     * \u003c/code\u003e\n     * \u003c/blockquote\u003e\n     *\n     *\u003cp\u003e\n     * Note that backslashes ({@code \\}) and dollar signs ({@code $}) in the\n     * replacement string may cause the results to be different than if it were\n     * being treated as a literal replacement string; see\n     * {@link java.util.regex.Matcher#replaceFirst}.\n     * Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special\n     * meaning of these characters, if desired.\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     * @param   replacement\n     *          the string to be substituted for the first match\n     *\n     * @return  The resulting {@code String}\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public String replaceFirst(String regex, String replacement) {\n        return Pattern.compile(regex).matcher(this).replaceFirst(replacement);\n    }\n\n    /**\n     * Replaces each substring of this string that matches the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e with the\n     * given replacement.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr\u003c/i\u003e{@code .replaceAll(}\u003ci\u003eregex\u003c/i\u003e{@code ,} \u003ci\u003erepl\u003c/i\u003e{@code )}\n     * yields exactly the same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * \u003ccode\u003e\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n     * java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher}(\u003ci\u003estr\u003c/i\u003e).{@link\n     * java.util.regex.Matcher#replaceAll replaceAll}(\u003ci\u003erepl\u003c/i\u003e)\n     * \u003c/code\u003e\n     * \u003c/blockquote\u003e\n     *\n     *\u003cp\u003e\n     * Note that backslashes ({@code \\}) and dollar signs ({@code $}) in the\n     * replacement string may cause the results to be different than if it were\n     * being treated as a literal replacement string; see\n     * {@link java.util.regex.Matcher#replaceAll Matcher.replaceAll}.\n     * Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special\n     * meaning of these characters, if desired.\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     * @param   replacement\n     *          the string to be substituted for each match\n     *\n     * @return  The resulting {@code String}\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public String replaceAll(String regex, String replacement) {\n        return Pattern.compile(regex).matcher(this).replaceAll(replacement);\n    }\n\n    /**\n     * Replaces each substring of this string that matches the literal target\n     * sequence with the specified literal replacement sequence. The\n     * replacement proceeds from the beginning of the string to the end, for\n     * example, replacing \"aa\" with \"b\" in the string \"aaa\" will result in\n     * \"ba\" rather than \"ab\".\n     *\n     * @param  target The sequence of char values to be replaced\n     * @param  replacement The replacement sequence of char values\n     * @return  The resulting string\n     * @since 1.5\n     */\n    public String replace(CharSequence target, CharSequence replacement) {\n        String tgtStr \u003d target.toString();\n        String replStr \u003d replacement.toString();\n        int j \u003d indexOf(tgtStr);\n        if (j \u003c 0) {\n            return this;\n        }\n        int tgtLen \u003d tgtStr.length();\n        int tgtLen1 \u003d Math.max(tgtLen, 1);\n        int thisLen \u003d length();\n\n        int newLenHint \u003d thisLen - tgtLen + replStr.length();\n        if (newLenHint \u003c 0) {\n            throw new OutOfMemoryError();\n        }\n        StringBuilder sb \u003d new StringBuilder(newLenHint);\n        int i \u003d 0;\n        do {\n            sb.append(this, i, j).append(replStr);\n            i \u003d j + tgtLen;\n        } while (j \u003c thisLen \u0026\u0026 (j \u003d indexOf(tgtStr, j + tgtLen1)) \u003e 0);\n        return sb.append(this, i, thisLen).toString();\n    }\n\n    /**\n     * Splits this string around matches of the given\n     * \u003ca href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n     *\n     * \u003cp\u003e The array returned by this method contains each substring of this\n     * string that is terminated by another substring that matches the given\n     * expression or is terminated by the end of the string.  The substrings in\n     * the array are in the order in which they occur in this string.  If the\n     * expression does not match any part of the input then the resulting array\n     * has just one element, namely this string.\n     *\n     * \u003cp\u003e When there is a positive-width match at the beginning of this\n     * string then an empty leading substring is included at the beginning\n     * of the resulting array. A zero-width match at the beginning however\n     * never produces such empty leading substring.\n     *\n     * \u003cp\u003e The {@code limit} parameter controls the number of times the\n     * pattern is applied and therefore affects the length of the resulting\n     * array.\n     * \u003cul\u003e\n     *    \u003cli\u003e\u003cp\u003e\n     *    If the \u003ci\u003elimit\u003c/i\u003e is positive then the pattern will be applied\n     *    at most \u003ci\u003elimit\u003c/i\u003e\u0026nbsp;-\u0026nbsp;1 times, the array\u0027s length will be\n     *    no greater than \u003ci\u003elimit\u003c/i\u003e, and the array\u0027s last entry will contain\n     *    all input beyond the last matched delimiter.\u003c/p\u003e\u003c/li\u003e\n     *\n     *    \u003cli\u003e\u003cp\u003e\n     *    If the \u003ci\u003elimit\u003c/i\u003e is zero then the pattern will be applied as\n     *    many times as possible, the array can have any length, and trailing\n     *    empty strings will be discarded.\u003c/p\u003e\u003c/li\u003e\n     *\n     *    \u003cli\u003e\u003cp\u003e\n     *    If the \u003ci\u003elimit\u003c/i\u003e is negative then the pattern will be applied\n     *    as many times as possible and the array can have any length.\u003c/p\u003e\u003c/li\u003e\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003e The string {@code \"boo:and:foo\"}, for example, yields the\n     * following results with these parameters:\n     *\n     * \u003cblockquote\u003e\u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eSplit example showing regex, limit, and result\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *     \u003cth scope\u003d\"col\"\u003eRegex\u003c/th\u003e\n     *     \u003cth scope\u003d\"col\"\u003eLimit\u003c/th\u003e\n     *     \u003cth scope\u003d\"col\"\u003eResult\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" rowspan\u003d\"3\" style\u003d\"font-weight:normal\"\u003e:\u003c/th\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e2\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and:foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- : --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e5\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- : --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e-2\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" rowspan\u003d\"3\" style\u003d\"font-weight:normal\"\u003eo\u003c/th\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e5\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\", \"\", \"\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- o --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e-2\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\", \"\", \"\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- o --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e0\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\u003c/blockquote\u003e\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr.\u003c/i\u003e{@code split(}\u003ci\u003eregex\u003c/i\u003e{@code ,}\u0026nbsp;\u003ci\u003en\u003c/i\u003e{@code )}\n     * yields the same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * \u003ccode\u003e\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n     * java.util.regex.Pattern#split(java.lang.CharSequence,int) split}(\u003ci\u003estr\u003c/i\u003e,\u0026nbsp;\u003ci\u003en\u003c/i\u003e)\n     * \u003c/code\u003e\n     * \u003c/blockquote\u003e\n     *\n     *\n     * @param  regex\n     *         the delimiting regular expression\n     *\n     * @param  limit\n     *         the result threshold, as described above\n     *\n     * @return  the array of strings computed by splitting this string\n     *          around matches of the given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public String[] split(String regex, int limit) {\n        /* fastpath if the regex is a\n         (1)one-char String and this character is not one of the\n            RegEx\u0027s meta characters \".$|()[{^?*+\\\\\", or\n         (2)two-char String and the first char is the backslash and\n            the second is not the ascii digit or ascii letter.\n         */\n        char ch \u003d 0;\n        if (((regex.length() \u003d\u003d 1 \u0026\u0026\n             \".$|()[{^?*+\\\\\".indexOf(ch \u003d regex.charAt(0)) \u003d\u003d -1) ||\n             (regex.length() \u003d\u003d 2 \u0026\u0026\n              regex.charAt(0) \u003d\u003d \u0027\\\\\u0027 \u0026\u0026\n              (((ch \u003d regex.charAt(1))-\u00270\u0027)|(\u00279\u0027-ch)) \u003c 0 \u0026\u0026\n              ((ch-\u0027a\u0027)|(\u0027z\u0027-ch)) \u003c 0 \u0026\u0026\n              ((ch-\u0027A\u0027)|(\u0027Z\u0027-ch)) \u003c 0)) \u0026\u0026\n            (ch \u003c Character.MIN_HIGH_SURROGATE ||\n             ch \u003e Character.MAX_LOW_SURROGATE))\n        {\n            int off \u003d 0;\n            int next \u003d 0;\n            boolean limited \u003d limit \u003e 0;\n            ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();\n            while ((next \u003d indexOf(ch, off)) !\u003d -1) {\n                if (!limited || list.size() \u003c limit - 1) {\n                    list.add(substring(off, next));\n                    off \u003d next + 1;\n                } else {    // last one\n                    //assert (list.size() \u003d\u003d limit - 1);\n                    int last \u003d length();\n                    list.add(substring(off, last));\n                    off \u003d last;\n                    break;\n                }\n            }\n            // If no match was found, return this\n            if (off \u003d\u003d 0)\n                return new String[]{this};\n\n            // Add remaining segment\n            if (!limited || list.size() \u003c limit)\n                list.add(substring(off, length()));\n\n            // Construct result\n            int resultSize \u003d list.size();\n            if (limit \u003d\u003d 0) {\n                while (resultSize \u003e 0 \u0026\u0026 list.get(resultSize - 1).isEmpty()) {\n                    resultSize--;\n                }\n            }\n            String[] result \u003d new String[resultSize];\n            return list.subList(0, resultSize).toArray(result);\n        }\n        return Pattern.compile(regex).split(this, limit);\n    }\n\n    /**\n     * Splits this string around matches of the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n     *\n     * \u003cp\u003e This method works as if by invoking the two-argument {@link\n     * #split(String, int) split} method with the given expression and a limit\n     * argument of zero.  Trailing empty strings are therefore not included in\n     * the resulting array.\n     *\n     * \u003cp\u003e The string {@code \"boo:and:foo\"}, for example, yields the following\n     * results with these expressions:\n     *\n     * \u003cblockquote\u003e\u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eSplit examples showing regex and result\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *  \u003cth scope\u003d\"col\"\u003eRegex\u003c/th\u003e\n     *  \u003cth scope\u003d\"col\"\u003eResult\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" style\u003d\"text-weight:normal\"\u003e:\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" style\u003d\"text-weight:normal\"\u003eo\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\u003c/blockquote\u003e\n     *\n     *\n     * @param  regex\n     *         the delimiting regular expression\n     *\n     * @return  the array of strings computed by splitting this string\n     *          around matches of the given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public String[] split(String regex) {\n        return split(regex, 0);\n    }\n\n    /**\n     * Returns a new String composed of copies of the\n     * {@code CharSequence elements} joined together with a copy of\n     * the specified {@code delimiter}.\n     *\n     * \u003cblockquote\u003eFor example,\n     * \u003cpre\u003e{@code\n     *     String message \u003d String.join(\"-\", \"Java\", \"is\", \"cool\");\n     *     // message returned is: \"Java-is-cool\"\n     * }\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * Note that if an element is null, then {@code \"null\"} is added.\n     *\n     * @param  delimiter the delimiter that separates each element\n     * @param  elements the elements to join together.\n     *\n     * @return a new {@code String} that is composed of the {@code elements}\n     *         separated by the {@code delimiter}\n     *\n     * @throws NullPointerException If {@code delimiter} or {@code elements}\n     *         is {@code null}\n     *\n     * @see java.util.StringJoiner\n     * @since 1.8\n     */\n    public static String join(CharSequence delimiter, CharSequence... elements) {\n        Objects.requireNonNull(delimiter);\n        Objects.requireNonNull(elements);\n        // Number of elements not likely worth Arrays.stream overhead.\n        StringJoiner joiner \u003d new StringJoiner(delimiter);\n        for (CharSequence cs: elements) {\n            joiner.add(cs);\n        }\n        return joiner.toString();\n    }\n\n    /**\n     * Returns a new {@code String} composed of copies of the\n     * {@code CharSequence elements} joined together with a copy of the\n     * specified {@code delimiter}.\n     *\n     * \u003cblockquote\u003eFor example,\n     * \u003cpre\u003e{@code\n     *     List\u003cString\u003e strings \u003d List.of(\"Java\", \"is\", \"cool\");\n     *     String message \u003d String.join(\" \", strings);\n     *     //message returned is: \"Java is cool\"\n     *\n     *     Set\u003cString\u003e strings \u003d\n     *         new LinkedHashSet\u003c\u003e(List.of(\"Java\", \"is\", \"very\", \"cool\"));\n     *     String message \u003d String.join(\"-\", strings);\n     *     //message returned is: \"Java-is-very-cool\"\n     * }\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * Note that if an individual element is {@code null}, then {@code \"null\"} is added.\n     *\n     * @param  delimiter a sequence of characters that is used to separate each\n     *         of the {@code elements} in the resulting {@code String}\n     * @param  elements an {@code Iterable} that will have its {@code elements}\n     *         joined together.\n     *\n     * @return a new {@code String} that is composed from the {@code elements}\n     *         argument\n     *\n     * @throws NullPointerException If {@code delimiter} or {@code elements}\n     *         is {@code null}\n     *\n     * @see    #join(CharSequence,CharSequence...)\n     * @see    java.util.StringJoiner\n     * @since 1.8\n     */\n    public static String join(CharSequence delimiter,\n            Iterable\u003c? extends CharSequence\u003e elements) {\n        Objects.requireNonNull(delimiter);\n        Objects.requireNonNull(elements);\n        StringJoiner joiner \u003d new StringJoiner(delimiter);\n        for (CharSequence cs: elements) {\n            joiner.add(cs);\n        }\n        return joiner.toString();\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to lower\n     * case using the rules of the given {@code Locale}.  Case mapping is based\n     * on the Unicode Standard version specified by the {@link java.lang.Character Character}\n     * class. Since case mappings are not always 1:1 char mappings, the resulting\n     * {@code String} may be a different length than the original {@code String}.\n     * \u003cp\u003e\n     * Examples of lowercase  mappings are in the following table:\n     * \u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eLowercase mapping examples showing language code of locale, upper case, lower case, and description\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLanguage Code of Locale\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eUpper Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLower Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eDescription\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0130\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0069\u003c/td\u003e\n     *   \u003ctd\u003ecapital letter I with dot above -\u0026gt; small letter i\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0049\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0131\u003c/td\u003e\n     *   \u003ctd\u003ecapital letter I -\u0026gt; small letter dotless i \u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003eFrench Fries\u003c/th\u003e\n     *   \u003ctd\u003efrench fries\u003c/td\u003e\n     *   \u003ctd\u003elowercased all chars in String\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\n     *       \u0026Iota;\u0026Chi;\u0026Theta;\u0026Upsilon;\u0026Sigma;\u003c/th\u003e\n     *   \u003ctd\u003e\u0026iota;\u0026chi;\u0026theta;\u0026upsilon;\u0026sigma;\u003c/td\u003e\n     *   \u003ctd\u003elowercased all chars in String\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\n     *\n     * @param locale use the case transformation rules for this locale\n     * @return the {@code String}, converted to lowercase.\n     * @see     java.lang.String#toLowerCase()\n     * @see     java.lang.String#toUpperCase()\n     * @see     java.lang.String#toUpperCase(Locale)\n     * @since   1.1\n     */\n    public String toLowerCase(Locale locale) {\n        return isLatin1() ? StringLatin1.toLowerCase(this, value, locale)\n                          : StringUTF16.toLowerCase(this, value, locale);\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to lower\n     * case using the rules of the default locale. This is equivalent to calling\n     * {@code toLowerCase(Locale.getDefault())}.\n     * \u003cp\u003e\n     * \u003cb\u003eNote:\u003c/b\u003e This method is locale sensitive, and may produce unexpected\n     * results if used for strings that are intended to be interpreted locale\n     * independently.\n     * Examples are programming language identifiers, protocol keys, and HTML\n     * tags.\n     * For instance, {@code \"TITLE\".toLowerCase()} in a Turkish locale\n     * returns {@code \"t\\u005Cu0131tle\"}, where \u0027\\u005Cu0131\u0027 is the\n     * LATIN SMALL LETTER DOTLESS I character.\n     * To obtain correct results for locale insensitive strings, use\n     * {@code toLowerCase(Locale.ROOT)}.\n     *\n     * @return  the {@code String}, converted to lowercase.\n     * @see     java.lang.String#toLowerCase(Locale)\n     */\n    public String toLowerCase() {\n        return toLowerCase(Locale.getDefault());\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to upper\n     * case using the rules of the given {@code Locale}. Case mapping is based\n     * on the Unicode Standard version specified by the {@link java.lang.Character Character}\n     * class. Since case mappings are not always 1:1 char mappings, the resulting\n     * {@code String} may be a different length than the original {@code String}.\n     * \u003cp\u003e\n     * Examples of locale-sensitive and 1:M case mappings are in the following table.\n     *\n     * \u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eExamples of locale-sensitive and 1:M case mappings. Shows Language code of locale, lower case, upper case, and description.\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLanguage Code of Locale\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLower Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eUpper Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eDescription\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0069\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0130\u003c/td\u003e\n     *   \u003ctd\u003esmall letter i -\u0026gt; capital letter I with dot above\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0131\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0049\u003c/td\u003e\n     *   \u003ctd\u003esmall letter dotless i -\u0026gt; capital letter I\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u00df\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0053 \u0026#92;u0053\u003c/td\u003e\n     *   \u003ctd\u003esmall letter sharp s -\u0026gt; two letters: SS\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003eFahrvergn\u0026uuml;gen\u003c/th\u003e\n     *   \u003ctd\u003eFAHRVERGN\u0026Uuml;GEN\u003c/td\u003e\n     *   \u003ctd\u003e\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\n     * @param locale use the case transformation rules for this locale\n     * @return the {@code String}, converted to uppercase.\n     * @see     java.lang.String#toUpperCase()\n     * @see     java.lang.String#toLowerCase()\n     * @see     java.lang.String#toLowerCase(Locale)\n     * @since   1.1\n     */\n    public String toUpperCase(Locale locale) {\n        return isLatin1() ? StringLatin1.toUpperCase(this, value, locale)\n                          : StringUTF16.toUpperCase(this, value, locale);\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to upper\n     * case using the rules of the default locale. This method is equivalent to\n     * {@code toUpperCase(Locale.getDefault())}.\n     * \u003cp\u003e\n     * \u003cb\u003eNote:\u003c/b\u003e This method is locale sensitive, and may produce unexpected\n     * results if used for strings that are intended to be interpreted locale\n     * independently.\n     * Examples are programming language identifiers, protocol keys, and HTML\n     * tags.\n     * For instance, {@code \"title\".toUpperCase()} in a Turkish locale\n     * returns {@code \"T\\u005Cu0130TLE\"}, where \u0027\\u005Cu0130\u0027 is the\n     * LATIN CAPITAL LETTER I WITH DOT ABOVE character.\n     * To obtain correct results for locale insensitive strings, use\n     * {@code toUpperCase(Locale.ROOT)}.\n     *\n     * @return  the {@code String}, converted to uppercase.\n     * @see     java.lang.String#toUpperCase(Locale)\n     */\n    public String toUpperCase() {\n        return toUpperCase(Locale.getDefault());\n    }\n\n    /**\n     * Returns a string whose value is this string, with all leading\n     * and trailing space removed, where space is defined\n     * as any character whose codepoint is less than or equal to\n     * {@code \u0027U+0020\u0027} (the space character).\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty character\n     * sequence, or the first and last characters of character sequence\n     * represented by this {@code String} object both have codes\n     * that are not space (as defined above), then a\n     * reference to this {@code String} object is returned.\n     * \u003cp\u003e\n     * Otherwise, if all characters in this string are space (as\n     * defined above), then a  {@code String} object representing an\n     * empty string is returned.\n     * \u003cp\u003e\n     * Otherwise, let \u003ci\u003ek\u003c/i\u003e be the index of the first character in the\n     * string whose code is not a space (as defined above) and let\n     * \u003ci\u003em\u003c/i\u003e be the index of the last character in the string whose code\n     * is not a space (as defined above). A {@code String}\n     * object is returned, representing the substring of this string that\n     * begins with the character at index \u003ci\u003ek\u003c/i\u003e and ends with the\n     * character at index \u003ci\u003em\u003c/i\u003e-that is, the result of\n     * {@code this.substring(k, m + 1)}.\n     * \u003cp\u003e\n     * This method may be used to trim space (as defined above) from\n     * the beginning and end of a string.\n     *\n     * @return  a string whose value is this string, with all leading\n     *          and trailing space removed, or this string if it\n     *          has no leading or trailing space.\n     */\n    public String trim() {\n        String ret \u003d isLatin1() ? StringLatin1.trim(value)\n                                : StringUTF16.trim(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns a string whose value is this string, with all leading\n     * and trailing {@link Character#isWhitespace(int) white space}\n     * removed.\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty string,\n     * or if all code points in this string are\n     * {@link Character#isWhitespace(int) white space}, then an empty string\n     * is returned.\n     * \u003cp\u003e\n     * Otherwise, returns a substring of this string beginning with the first\n     * code point that is not a {@link Character#isWhitespace(int) white space}\n     * up to and including the last code point that is not a\n     * {@link Character#isWhitespace(int) white space}.\n     * \u003cp\u003e\n     * This method may be used to strip\n     * {@link Character#isWhitespace(int) white space} from\n     * the beginning and end of a string.\n     *\n     * @return  a string whose value is this string, with all leading\n     *          and trailing white space removed\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public String strip() {\n        String ret \u003d isLatin1() ? StringLatin1.strip(value)\n                                : StringUTF16.strip(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns a string whose value is this string, with all leading\n     * {@link Character#isWhitespace(int) white space} removed.\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty string,\n     * or if all code points in this string are\n     * {@link Character#isWhitespace(int) white space}, then an empty string\n     * is returned.\n     * \u003cp\u003e\n     * Otherwise, returns a substring of this string beginning with the first\n     * code point that is not a {@link Character#isWhitespace(int) white space}\n     * up to to and including the last code point of this string.\n     * \u003cp\u003e\n     * This method may be used to trim\n     * {@link Character#isWhitespace(int) white space} from\n     * the beginning of a string.\n     *\n     * @return  a string whose value is this string, with all leading white\n     *          space removed\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public String stripLeading() {\n        String ret \u003d isLatin1() ? StringLatin1.stripLeading(value)\n                                : StringUTF16.stripLeading(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns a string whose value is this string, with all trailing\n     * {@link Character#isWhitespace(int) white space} removed.\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty string,\n     * or if all characters in this string are\n     * {@link Character#isWhitespace(int) white space}, then an empty string\n     * is returned.\n     * \u003cp\u003e\n     * Otherwise, returns a substring of this string beginning with the first\n     * code point of this string up to and including the last code point\n     * that is not a {@link Character#isWhitespace(int) white space}.\n     * \u003cp\u003e\n     * This method may be used to trim\n     * {@link Character#isWhitespace(int) white space} from\n     * the end of a string.\n     *\n     * @return  a string whose value is this string, with all trailing white\n     *          space removed\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public String stripTrailing() {\n        String ret \u003d isLatin1() ? StringLatin1.stripTrailing(value)\n                                : StringUTF16.stripTrailing(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns {@code true} if the string is empty or contains only\n     * {@link Character#isWhitespace(int) white space} codepoints,\n     * otherwise {@code false}.\n     *\n     * @return {@code true} if the string is empty or contains only\n     *         {@link Character#isWhitespace(int) white space} codepoints,\n     *         otherwise {@code false}\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public boolean isBlank() {\n        return indexOfNonWhitespace() \u003d\u003d length();\n    }\n\n    private int indexOfNonWhitespace() {\n        if (isLatin1()) {\n            return StringLatin1.indexOfNonWhitespace(value);\n        } else {\n            return StringUTF16.indexOfNonWhitespace(value);\n        }\n    }\n\n    /**\n     * Returns a stream of lines extracted from this string,\n     * separated by line terminators.\n     * \u003cp\u003e\n     * A \u003ci\u003eline terminator\u003c/i\u003e is one of the following:\n     * a line feed character {@code \"\\n\"} (U+000A),\n     * a carriage return character {@code \"\\r\"} (U+000D),\n     * or a carriage return followed immediately by a line feed\n     * {@code \"\\r\\n\"} (U+000D U+000A).\n     * \u003cp\u003e\n     * A \u003ci\u003eline\u003c/i\u003e is either a sequence of zero or more characters\n     * followed by a line terminator, or it is a sequence of one or\n     * more characters followed by the end of the string. A\n     * line does not include the line terminator.\n     * \u003cp\u003e\n     * The stream returned by this method contains the lines from\n     * this string in the order in which they occur.\n     *\n     * @apiNote This definition of \u003ci\u003eline\u003c/i\u003e implies that an empty\n     *          string has zero lines and that there is no empty line\n     *          following a line terminator at the end of a string.\n     *\n     * @implNote This method provides better performance than\n     *           split(\"\\R\") by supplying elements lazily and\n     *           by faster search of new line terminators.\n     *\n     * @return  the stream of lines extracted from this string\n     *\n     * @since 11\n     */\n    public Stream\u003cString\u003e lines() {\n        return isLatin1() ? StringLatin1.lines(value)\n                          : StringUTF16.lines(value);\n    }\n\n    /**\n     * This object (which is already a string!) is itself returned.\n     *\n     * @return  the string itself.\n     */\n    public String toString() {\n        return this;\n    }\n\n    /**\n     * Returns a stream of {@code int} zero-extending the {@code char} values\n     * from this sequence.  Any char which maps to a \u003ca\n     * href\u003d\"{@docRoot}/java.base/java/lang/Character.html#unicode\"\u003esurrogate code\n     * point\u003c/a\u003e is passed through uninterpreted.\n     *\n     * @return an IntStream of char values from this sequence\n     * @since 9\n     */\n    @Override\n    public IntStream chars() {\n        return StreamSupport.intStream(\n            isLatin1() ? new StringLatin1.CharsSpliterator(value, Spliterator.IMMUTABLE)\n                       : new StringUTF16.CharsSpliterator(value, Spliterator.IMMUTABLE),\n            false);\n    }\n\n\n    /**\n     * Returns a stream of code point values from this sequence.  Any surrogate\n     * pairs encountered in the sequence are combined as if by {@linkplain\n     * Character#toCodePoint Character.toCodePoint} and the result is passed\n     * to the stream. Any other code units, including ordinary BMP characters,\n     * unpaired surrogates, and undefined code units, are zero-extended to\n     * {@code int} values which are then passed to the stream.\n     *\n     * @return an IntStream of Unicode code points from this sequence\n     * @since 9\n     */\n    @Override\n    public IntStream codePoints() {\n        return StreamSupport.intStream(\n            isLatin1() ? new StringLatin1.CharsSpliterator(value, Spliterator.IMMUTABLE)\n                       : new StringUTF16.CodePointsSpliterator(value, Spliterator.IMMUTABLE),\n            false);\n    }\n\n    /**\n     * Converts this string to a new character array.\n     *\n     * @return  a newly allocated character array whose length is the length\n     *          of this string and whose contents are initialized to contain\n     *          the character sequence represented by this string.\n     */\n    public char[] toCharArray() {\n        return isLatin1() ? StringLatin1.toChars(value)\n                          : StringUTF16.toChars(value);\n    }\n\n    /**\n     * Returns a formatted string using the specified format string and\n     * arguments.\n     *\n     * \u003cp\u003e The locale always used is the one returned by {@link\n     * java.util.Locale#getDefault(java.util.Locale.Category)\n     * Locale.getDefault(Locale.Category)} with\n     * {@link java.util.Locale.Category#FORMAT FORMAT} category specified.\n     *\n     * @param  format\n     *         A \u003ca href\u003d\"../util/Formatter.html#syntax\"\u003eformat string\u003c/a\u003e\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in the format\n     *         string.  If there are more arguments than format specifiers, the\n     *         extra arguments are ignored.  The number of arguments is\n     *         variable and may be zero.  The maximum number of arguments is\n     *         limited by the maximum dimension of a Java array as defined by\n     *         \u003ccite\u003eThe Java\u0026trade; Virtual Machine Specification\u003c/cite\u003e.\n     *         The behaviour on a\n     *         {@code null} argument depends on the \u003ca\n     *         href\u003d\"../util/Formatter.html#syntax\"\u003econversion\u003c/a\u003e.\n     *\n     * @throws  java.util.IllegalFormatException\n     *          If a format string contains an illegal syntax, a format\n     *          specifier that is incompatible with the given arguments,\n     *          insufficient arguments given the format string, or other\n     *          illegal conditions.  For specification of all possible\n     *          formatting errors, see the \u003ca\n     *          href\u003d\"../util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the\n     *          formatter class specification.\n     *\n     * @return  A formatted string\n     *\n     * @see  java.util.Formatter\n     * @since  1.5\n     */\n    public static String format(String format, Object... args) {\n        return new Formatter().format(format, args).toString();\n    }\n\n    /**\n     * Returns a formatted string using the specified locale, format string,\n     * and arguments.\n     *\n     * @param  l\n     *         The {@linkplain java.util.Locale locale} to apply during\n     *         formatting.  If {@code l} is {@code null} then no localization\n     *         is applied.\n     *\n     * @param  format\n     *         A \u003ca href\u003d\"../util/Formatter.html#syntax\"\u003eformat string\u003c/a\u003e\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in the format\n     *         string.  If there are more arguments than format specifiers, the\n     *         extra arguments are ignored.  The number of arguments is\n     *         variable and may be zero.  The maximum number of arguments is\n     *         limited by the maximum dimension of a Java array as defined by\n     *         \u003ccite\u003eThe Java\u0026trade; Virtual Machine Specification\u003c/cite\u003e.\n     *         The behaviour on a\n     *         {@code null} argument depends on the\n     *         \u003ca href\u003d\"../util/Formatter.html#syntax\"\u003econversion\u003c/a\u003e.\n     *\n     * @throws  java.util.IllegalFormatException\n     *          If a format string contains an illegal syntax, a format\n     *          specifier that is incompatible with the given arguments,\n     *          insufficient arguments given the format string, or other\n     *          illegal conditions.  For specification of all possible\n     *          formatting errors, see the \u003ca\n     *          href\u003d\"../util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the\n     *          formatter class specification\n     *\n     * @return  A formatted string\n     *\n     * @see  java.util.Formatter\n     * @since  1.5\n     */\n    public static String format(Locale l, String format, Object... args) {\n        return new Formatter(l).format(format, args).toString();\n    }\n\n    /**\n     * Returns the string representation of the {@code Object} argument.\n     *\n     * @param   obj   an {@code Object}.\n     * @return  if the argument is {@code null}, then a string equal to\n     *          {@code \"null\"}; otherwise, the value of\n     *          {@code obj.toString()} is returned.\n     * @see     java.lang.Object#toString()\n     */\n    public static String valueOf(Object obj) {\n        return (obj \u003d\u003d null) ? \"null\" : obj.toString();\n    }\n\n    /**\n     * Returns the string representation of the {@code char} array\n     * argument. The contents of the character array are copied; subsequent\n     * modification of the character array does not affect the returned\n     * string.\n     *\n     * @param   data     the character array.\n     * @return  a {@code String} that contains the characters of the\n     *          character array.\n     */\n    public static String valueOf(char data[]) {\n        return new String(data);\n    }\n\n    /**\n     * Returns the string representation of a specific subarray of the\n     * {@code char} array argument.\n     * \u003cp\u003e\n     * The {@code offset} argument is the index of the first\n     * character of the subarray. The {@code count} argument\n     * specifies the length of the subarray. The contents of the subarray\n     * are copied; subsequent modification of the character array does not\n     * affect the returned string.\n     *\n     * @param   data     the character array.\n     * @param   offset   initial offset of the subarray.\n     * @param   count    length of the subarray.\n     * @return  a {@code String} that contains the characters of the\n     *          specified subarray of the character array.\n     * @exception IndexOutOfBoundsException if {@code offset} is\n     *          negative, or {@code count} is negative, or\n     *          {@code offset+count} is larger than\n     *          {@code data.length}.\n     */\n    public static String valueOf(char data[], int offset, int count) {\n        return new String(data, offset, count);\n    }\n\n    /**\n     * Equivalent to {@link #valueOf(char[], int, int)}.\n     *\n     * @param   data     the character array.\n     * @param   offset   initial offset of the subarray.\n     * @param   count    length of the subarray.\n     * @return  a {@code String} that contains the characters of the\n     *          specified subarray of the character array.\n     * @exception IndexOutOfBoundsException if {@code offset} is\n     *          negative, or {@code count} is negative, or\n     *          {@code offset+count} is larger than\n     *          {@code data.length}.\n     */\n    public static String copyValueOf(char data[], int offset, int count) {\n        return new String(data, offset, count);\n    }\n\n    /**\n     * Equivalent to {@link #valueOf(char[])}.\n     *\n     * @param   data   the character array.\n     * @return  a {@code String} that contains the characters of the\n     *          character array.\n     */\n    public static String copyValueOf(char data[]) {\n        return new String(data);\n    }\n\n    /**\n     * Returns the string representation of the {@code boolean} argument.\n     *\n     * @param   b   a {@code boolean}.\n     * @return  if the argument is {@code true}, a string equal to\n     *          {@code \"true\"} is returned; otherwise, a string equal to\n     *          {@code \"false\"} is returned.\n     */\n    public static String valueOf(boolean b) {\n        return b ? \"true\" : \"false\";\n    }\n\n    /**\n     * Returns the string representation of the {@code char}\n     * argument.\n     *\n     * @param   c   a {@code char}.\n     * @return  a string of length {@code 1} containing\n     *          as its single character the argument {@code c}.\n     */\n    public static String valueOf(char c) {\n        if (COMPACT_STRINGS \u0026\u0026 StringLatin1.canEncode(c)) {\n            return new String(StringLatin1.toBytes(c), LATIN1);\n        }\n        return new String(StringUTF16.toBytes(c), UTF16);\n    }\n\n    /**\n     * Returns the string representation of the {@code int} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Integer.toString} method of one argument.\n     *\n     * @param   i   an {@code int}.\n     * @return  a string representation of the {@code int} argument.\n     * @see     java.lang.Integer#toString(int, int)\n     */\n    public static String valueOf(int i) {\n        return Integer.toString(i);\n    }\n\n    /**\n     * Returns the string representation of the {@code long} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Long.toString} method of one argument.\n     *\n     * @param   l   a {@code long}.\n     * @return  a string representation of the {@code long} argument.\n     * @see     java.lang.Long#toString(long)\n     */\n    public static String valueOf(long l) {\n        return Long.toString(l);\n    }\n\n    /**\n     * Returns the string representation of the {@code float} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Float.toString} method of one argument.\n     *\n     * @param   f   a {@code float}.\n     * @return  a string representation of the {@code float} argument.\n     * @see     java.lang.Float#toString(float)\n     */\n    public static String valueOf(float f) {\n        return Float.toString(f);\n    }\n\n    /**\n     * Returns the string representation of the {@code double} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Double.toString} method of one argument.\n     *\n     * @param   d   a {@code double}.\n     * @return  a  string representation of the {@code double} argument.\n     * @see     java.lang.Double#toString(double)\n     */\n    public static String valueOf(double d) {\n        return Double.toString(d);\n    }\n\n    /**\n     * Returns a canonical representation for the string object.\n     * \u003cp\u003e\n     * A pool of strings, initially empty, is maintained privately by the\n     * class {@code String}.\n     * \u003cp\u003e\n     * When the intern method is invoked, if the pool already contains a\n     * string equal to this {@code String} object as determined by\n     * the {@link #equals(Object)} method, then the string from the pool is\n     * returned. Otherwise, this {@code String} object is added to the\n     * pool and a reference to this {@code String} object is returned.\n     * \u003cp\u003e\n     * It follows that for any two strings {@code s} and {@code t},\n     * {@code s.intern() \u003d\u003d t.intern()} is {@code true}\n     * if and only if {@code s.equals(t)} is {@code true}.\n     * \u003cp\u003e\n     * All literal strings and string-valued constant expressions are\n     * interned. String literals are defined in section 3.10.5 of the\n     * \u003ccite\u003eThe Java\u0026trade; Language Specification\u003c/cite\u003e.\n     *\n     * @return  a string that has the same contents as this string, but is\n     *          guaranteed to be from a pool of unique strings.\n     * @jls 3.10.5 String Literals\n     */\n    public native String intern();\n\n    /**\n     * Returns a string whose value is the concatenation of this\n     * string repeated {@code count} times.\n     * \u003cp\u003e\n     * If this string is empty or count is zero then the empty\n     * string is returned.\n     *\n     * @param   count number of times to repeat\n     *\n     * @return  A string composed of this string repeated\n     *          {@code count} times or the empty string if this\n     *          string is empty or count is zero\n     *\n     * @throws  IllegalArgumentException if the {@code count} is\n     *          negative.\n     *\n     * @since 11\n     */\n    public String repeat(int count) {\n        if (count \u003c 0) {\n            throw new IllegalArgumentException(\"count is negative: \" + count);\n        }\n        if (count \u003d\u003d 1) {\n            return this;\n        }\n        final int len \u003d value.length;\n        if (len \u003d\u003d 0 || count \u003d\u003d 0) {\n            return \"\";\n        }\n        if (len \u003d\u003d 1) {\n            final byte[] single \u003d new byte[count];\n            Arrays.fill(single, value[0]);\n            return new String(single, coder);\n        }\n        if (Integer.MAX_VALUE / count \u003c len) {\n            throw new OutOfMemoryError(\"Repeating \" + len + \" bytes String \" + count +\n                    \" times will produce a String exceeding maximum size.\");\n        }\n        final int limit \u003d len * count;\n        final byte[] multiple \u003d new byte[limit];\n        System.arraycopy(value, 0, multiple, 0, len);\n        int copied \u003d len;\n        for (; copied \u003c limit - copied; copied \u003c\u003c\u003d 1) {\n            System.arraycopy(multiple, 0, multiple, copied, copied);\n        }\n        System.arraycopy(multiple, 0, multiple, copied, limit - copied);\n        return new String(multiple, coder);\n    }\n\n    ////////////////////////////////////////////////////////////////\n\n    /**\n     * Copy character bytes from this string into dst starting at dstBegin.\n     * This method doesn\u0027t perform any range checking.\n     *\n     * Invoker guarantees: dst is in UTF16 (inflate itself for asb), if two\n     * coders are different, and dst is big enough (range check)\n     *\n     * @param dstBegin  the char index, not offset of byte[]\n     * @param coder     the coder of dst[]\n     */\n    void getBytes(byte dst[], int dstBegin, byte coder) {\n        if (coder() \u003d\u003d coder) {\n            System.arraycopy(value, 0, dst, dstBegin \u003c\u003c coder, value.length);\n        } else {    // this.coder \u003d\u003d LATIN \u0026\u0026 coder \u003d\u003d UTF16\n            StringLatin1.inflate(value, 0, dst, dstBegin, value.length);\n        }\n    }\n\n    /*\n     * Package private constructor. Trailing Void argument is there for\n     * disambiguating it against other (public) constructors.\n     *\n     * Stores the char[] value into a byte[] that each byte represents\n     * the8 low-order bits of the corresponding character, if the char[]\n     * contains only latin1 character. Or a byte[] that stores all\n     * characters in their byte sequences defined by the {@code StringUTF16}.\n     */\n    String(char[] value, int off, int len, Void sig) {\n        if (len \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n            return;\n        }\n        if (COMPACT_STRINGS) {\n            byte[] val \u003d StringUTF16.compress(value, off, len);\n            if (val !\u003d null) {\n                this.value \u003d val;\n                this.coder \u003d LATIN1;\n                return;\n            }\n        }\n        this.coder \u003d UTF16;\n        this.value \u003d StringUTF16.toBytes(value, off, len);\n    }\n\n    /*\n     * Package private constructor. Trailing Void argument is there for\n     * disambiguating it against other (public) constructors.\n     */\n    String(AbstractStringBuilder asb, Void sig) {\n        byte[] val \u003d asb.getValue();\n        int length \u003d asb.length();\n        if (asb.isLatin1()) {\n            this.coder \u003d LATIN1;\n            this.value \u003d Arrays.copyOfRange(val, 0, length);\n        } else {\n            if (COMPACT_STRINGS) {\n                byte[] buf \u003d StringUTF16.compress(val, 0, length);\n                if (buf !\u003d null) {\n                    this.coder \u003d LATIN1;\n                    this.value \u003d buf;\n                    return;\n                }\n            }\n            this.coder \u003d UTF16;\n            this.value \u003d Arrays.copyOfRange(val, 0, length \u003c\u003c 1);\n        }\n    }\n\n   /*\n    * Package private constructor which shares value array for speed.\n    */\n    String(byte[] value, byte coder) {\n        this.value \u003d value;\n        this.coder \u003d coder;\n    }\n\n    byte coder() {\n        return COMPACT_STRINGS ? coder : UTF16;\n    }\n\n    byte[] value() {\n        return value;\n    }\n\n    private boolean isLatin1() {\n        return COMPACT_STRINGS \u0026\u0026 coder \u003d\u003d LATIN1;\n    }\n\n    @Native static final byte LATIN1 \u003d 0;\n    @Native static final byte UTF16  \u003d 1;\n\n    /*\n     * StringIndexOutOfBoundsException  if {@code index} is\n     * negative or greater than or equal to {@code length}.\n     */\n    static void checkIndex(int index, int length) {\n        if (index \u003c 0 || index \u003e\u003d length) {\n            throw new StringIndexOutOfBoundsException(\"index \" + index +\n                                                      \",length \" + length);\n        }\n    }\n\n    /*\n     * StringIndexOutOfBoundsException  if {@code offset}\n     * is negative or greater than {@code length}.\n     */\n    static void checkOffset(int offset, int length) {\n        if (offset \u003c 0 || offset \u003e length) {\n            throw new StringIndexOutOfBoundsException(\"offset \" + offset +\n                                                      \",length \" + length);\n        }\n    }\n\n    /*\n     * Check {@code offset}, {@code count} against {@code 0} and {@code length}\n     * bounds.\n     *\n     * @throws  StringIndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative,\n     *          or {@code offset} is greater than {@code length - count}\n     */\n    static void checkBoundsOffCount(int offset, int count, int length) {\n        if (offset \u003c 0 || count \u003c 0 || offset \u003e length - count) {\n            throw new StringIndexOutOfBoundsException(\n                \"offset \" + offset + \", count \" + count + \", length \" + length);\n        }\n    }\n\n    /*\n     * Check {@code begin}, {@code end} against {@code 0} and {@code length}\n     * bounds.\n     *\n     * @throws  StringIndexOutOfBoundsException\n     *          If {@code begin} is negative, {@code begin} is greater than\n     *          {@code end}, or {@code end} is greater than {@code length}.\n     */\n    static void checkBoundsBeginEnd(int begin, int end, int length) {\n        if (begin \u003c 0 || begin \u003e end || end \u003e length) {\n            throw new StringIndexOutOfBoundsException(\n                \"begin \" + begin + \", end \" + end + \", length \" + length);\n        }\n    }\n\n    /**\n     * Returns the string representation of the {@code codePoint}\n     * argument.\n     *\n     * @param   codePoint a {@code codePoint}.\n     * @return  a string of length {@code 1} or {@code 2} containing\n     *          as its single character the argument {@code codePoint}.\n     * @throws IllegalArgumentException if the specified\n     *          {@code codePoint} is not a {@linkplain Character#isValidCodePoint\n     *          valid Unicode code point}.\n     */\n    static String valueOfCodePoint(int codePoint) {\n        if (COMPACT_STRINGS \u0026\u0026 StringLatin1.canEncode(codePoint)) {\n            return new String(StringLatin1.toBytes((char)codePoint), LATIN1);\n        } else if (Character.isBmpCodePoint(codePoint)) {\n            return new String(StringUTF16.toBytes((char)codePoint), UTF16);\n        } else if (Character.isSupplementaryCodePoint(codePoint)) {\n            return new String(StringUTF16.toBytesSupplementary(codePoint), UTF16);\n        }\n\n        throw new IllegalArgumentException(\n            format(\"Not a valid Unicode code point: 0x%X\", codePoint));\n    }\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor20.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:339)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

Jan. 16, 2024 11:35:19 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.base/java/lang/String.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor22.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:358)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

Exception in thread "pool-7-thread-109" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.16 11:36:19 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java

Uri: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:703)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	jdk.internal.reflect.GeneratedMethodAccessor21.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 16, 2024 11:36:19 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.base/java/lang/String.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 1994, 2018, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.lang;\n\nimport java.io.ObjectStreamField;\nimport java.io.UnsupportedEncodingException;\nimport java.lang.annotation.Native;\nimport java.nio.charset.Charset;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Formatter;\nimport java.util.Locale;\nimport java.util.Objects;\nimport java.util.Spliterator;\nimport java.util.StringJoiner;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport java.util.stream.IntStream;\nimport java.util.stream.Stream;\nimport java.util.stream.StreamSupport;\nimport jdk.internal.HotSpotIntrinsicCandidate;\nimport jdk.internal.vm.annotation.Stable;\n\n/**\n * The {@code String} class represents character strings. All\n * string literals in Java programs, such as {@code \"abc\"}, are\n * implemented as instances of this class.\n * \u003cp\u003e\n * Strings are constant; their values cannot be changed after they\n * are created. String buffers support mutable strings.\n * Because String objects are immutable they can be shared. For example:\n * \u003cblockquote\u003e\u003cpre\u003e\n *     String str \u003d \"abc\";\n * \u003c/pre\u003e\u003c/blockquote\u003e\u003cp\u003e\n * is equivalent to:\n * \u003cblockquote\u003e\u003cpre\u003e\n *     char data[] \u003d {\u0027a\u0027, \u0027b\u0027, \u0027c\u0027};\n *     String str \u003d new String(data);\n * \u003c/pre\u003e\u003c/blockquote\u003e\u003cp\u003e\n * Here are some more examples of how strings can be used:\n * \u003cblockquote\u003e\u003cpre\u003e\n *     System.out.println(\"abc\");\n *     String cde \u003d \"cde\";\n *     System.out.println(\"abc\" + cde);\n *     String c \u003d \"abc\".substring(2,3);\n *     String d \u003d cde.substring(1, 2);\n * \u003c/pre\u003e\u003c/blockquote\u003e\n * \u003cp\u003e\n * The class {@code String} includes methods for examining\n * individual characters of the sequence, for comparing strings, for\n * searching strings, for extracting substrings, and for creating a\n * copy of a string with all characters translated to uppercase or to\n * lowercase. Case mapping is based on the Unicode Standard version\n * specified by the {@link java.lang.Character Character} class.\n * \u003cp\u003e\n * The Java language provides special support for the string\n * concatenation operator (\u0026nbsp;+\u0026nbsp;), and for conversion of\n * other objects to strings. For additional information on string\n * concatenation and conversion, see \u003ci\u003eThe Java\u0026trade; Language Specification\u003c/i\u003e.\n *\n * \u003cp\u003e Unless otherwise noted, passing a {@code null} argument to a constructor\n * or method in this class will cause a {@link NullPointerException} to be\n * thrown.\n *\n * \u003cp\u003eA {@code String} represents a string in the UTF-16 format\n * in which \u003cem\u003esupplementary characters\u003c/em\u003e are represented by \u003cem\u003esurrogate\n * pairs\u003c/em\u003e (see the section \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode\n * Character Representations\u003c/a\u003e in the {@code Character} class for\n * more information).\n * Index values refer to {@code char} code units, so a supplementary\n * character uses two positions in a {@code String}.\n * \u003cp\u003eThe {@code String} class provides methods for dealing with\n * Unicode code points (i.e., characters), in addition to those for\n * dealing with Unicode code units (i.e., {@code char} values).\n *\n * \u003cp\u003eUnless otherwise noted, methods for comparing Strings do not take locale\n * into account.  The {@link java.text.Collator} class provides methods for\n * finer-grain, locale-sensitive String comparison.\n *\n * @implNote The implementation of the string concatenation operator is left to\n * the discretion of a Java compiler, as long as the compiler ultimately conforms\n * to \u003ci\u003eThe Java\u0026trade; Language Specification\u003c/i\u003e. For example, the {@code javac} compiler\n * may implement the operator with {@code StringBuffer}, {@code StringBuilder},\n * or {@code java.lang.invoke.StringConcatFactory} depending on the JDK version. The\n * implementation of string conversion is typically through the method {@code toString},\n * defined by {@code Object} and inherited by all classes in Java.\n *\n * @author  Lee Boynton\n * @author  Arthur van Hoff\n * @author  Martin Buchholz\n * @author  Ulf Zibis\n * @see     java.lang.Object#toString()\n * @see     java.lang.StringBuffer\n * @see     java.lang.StringBuilder\n * @see     java.nio.charset.Charset\n * @since   1.0\n * @jls     15.18.1 String Concatenation Operator +\n */\n\npublic final class String\n    implements java.io.Serializable, Comparable\u003cString\u003e, CharSequence {\n\n    /**\n     * The value is used for character storage.\n     *\n     * @implNote This field is trusted by the VM, and is a subject to\n     * constant folding if String instance is constant. Overwriting this\n     * field after construction will cause problems.\n     *\n     * Additionally, it is marked with {@link Stable} to trust the contents\n     * of the array. No other facility in JDK provides this functionality (yet).\n     * {@link Stable} is safe here, because value is never null.\n     */\n    @Stable\n    private final byte[] value;\n\n    /**\n     * The identifier of the encoding used to encode the bytes in\n     * {@code value}. The supported values in this implementation are\n     *\n     * LATIN1\n     * UTF16\n     *\n     * @implNote This field is trusted by the VM, and is a subject to\n     * constant folding if String instance is constant. Overwriting this\n     * field after construction will cause problems.\n     */\n    private final byte coder;\n\n    /** Cache the hash code for the string */\n    private int hash; // Default to 0\n\n    /** use serialVersionUID from JDK 1.0.2 for interoperability */\n    private static final long serialVersionUID \u003d -6849794470754667710L;\n\n    /**\n     * If String compaction is disabled, the bytes in {@code value} are\n     * always encoded in UTF16.\n     *\n     * For methods with several possible implementation paths, when String\n     * compaction is disabled, only one code path is taken.\n     *\n     * The instance field value is generally opaque to optimizing JIT\n     * compilers. Therefore, in performance-sensitive place, an explicit\n     * check of the static boolean {@code COMPACT_STRINGS} is done first\n     * before checking the {@code coder} field since the static boolean\n     * {@code COMPACT_STRINGS} would be constant folded away by an\n     * optimizing JIT compiler. The idioms for these cases are as follows.\n     *\n     * For code such as:\n     *\n     *    if (coder \u003d\u003d LATIN1) { ... }\n     *\n     * can be written more optimally as\n     *\n     *    if (coder() \u003d\u003d LATIN1) { ... }\n     *\n     * or:\n     *\n     *    if (COMPACT_STRINGS \u0026\u0026 coder \u003d\u003d LATIN1) { ... }\n     *\n     * An optimizing JIT compiler can fold the above conditional as:\n     *\n     *    COMPACT_STRINGS \u003d\u003d true  \u003d\u003e if (coder \u003d\u003d LATIN1) { ... }\n     *    COMPACT_STRINGS \u003d\u003d false \u003d\u003e if (false)           { ... }\n     *\n     * @implNote\n     * The actual value for this field is injected by JVM. The static\n     * initialization block is used to set the value here to communicate\n     * that this static final field is not statically foldable, and to\n     * avoid any possible circular dependency during vm initialization.\n     */\n    static final boolean COMPACT_STRINGS;\n\n    static {\n        COMPACT_STRINGS \u003d true;\n    }\n\n    /**\n     * Class String is special cased within the Serialization Stream Protocol.\n     *\n     * A String instance is written into an ObjectOutputStream according to\n     * \u003ca href\u003d\"{@docRoot}/../specs/serialization/protocol.html#stream-elements\"\u003e\n     * Object Serialization Specification, Section 6.2, \"Stream Elements\"\u003c/a\u003e\n     */\n    private static final ObjectStreamField[] serialPersistentFields \u003d\n        new ObjectStreamField[0];\n\n    /**\n     * Initializes a newly created {@code String} object so that it represents\n     * an empty character sequence.  Note that use of this constructor is\n     * unnecessary since Strings are immutable.\n     */\n    public String() {\n        this.value \u003d \"\".value;\n        this.coder \u003d \"\".coder;\n    }\n\n    /**\n     * Initializes a newly created {@code String} object so that it represents\n     * the same sequence of characters as the argument; in other words, the\n     * newly created string is a copy of the argument string. Unless an\n     * explicit copy of {@code original} is needed, use of this constructor is\n     * unnecessary since Strings are immutable.\n     *\n     * @param  original\n     *         A {@code String}\n     */\n    @HotSpotIntrinsicCandidate\n    public String(String original) {\n        this.value \u003d original.value;\n        this.coder \u003d original.coder;\n        this.hash \u003d original.hash;\n    }\n\n    /**\n     * Allocates a new {@code String} so that it represents the sequence of\n     * characters currently contained in the character array argument. The\n     * contents of the character array are copied; subsequent modification of\n     * the character array does not affect the newly created string.\n     *\n     * @param  value\n     *         The initial value of the string\n     */\n    public String(char value[]) {\n        this(value, 0, value.length, null);\n    }\n\n    /**\n     * Allocates a new {@code String} that contains characters from a subarray\n     * of the character array argument. The {@code offset} argument is the\n     * index of the first character of the subarray and the {@code count}\n     * argument specifies the length of the subarray. The contents of the\n     * subarray are copied; subsequent modification of the character array does\n     * not affect the newly created string.\n     *\n     * @param  value\n     *         Array that is the source of characters\n     *\n     * @param  offset\n     *         The initial offset\n     *\n     * @param  count\n     *         The length\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative, or\n     *          {@code offset} is greater than {@code value.length - count}\n     */\n    public String(char value[], int offset, int count) {\n        this(value, offset, count, rangeCheck(value, offset, count));\n    }\n\n    private static Void rangeCheck(char[] value, int offset, int count) {\n        checkBoundsOffCount(offset, count, value.length);\n        return null;\n    }\n\n    /**\n     * Allocates a new {@code String} that contains characters from a subarray\n     * of the \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode code point\u003c/a\u003e array\n     * argument.  The {@code offset} argument is the index of the first code\n     * point of the subarray and the {@code count} argument specifies the\n     * length of the subarray.  The contents of the subarray are converted to\n     * {@code char}s; subsequent modification of the {@code int} array does not\n     * affect the newly created string.\n     *\n     * @param  codePoints\n     *         Array that is the source of Unicode code points\n     *\n     * @param  offset\n     *         The initial offset\n     *\n     * @param  count\n     *         The length\n     *\n     * @throws  IllegalArgumentException\n     *          If any invalid Unicode code point is found in {@code\n     *          codePoints}\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative, or\n     *          {@code offset} is greater than {@code codePoints.length - count}\n     *\n     * @since  1.5\n     */\n    public String(int[] codePoints, int offset, int count) {\n        checkBoundsOffCount(offset, count, codePoints.length);\n        if (count \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n            return;\n        }\n        if (COMPACT_STRINGS) {\n            byte[] val \u003d StringLatin1.toBytes(codePoints, offset, count);\n            if (val !\u003d null) {\n                this.coder \u003d LATIN1;\n                this.value \u003d val;\n                return;\n            }\n        }\n        this.coder \u003d UTF16;\n        this.value \u003d StringUTF16.toBytes(codePoints, offset, count);\n    }\n\n    /**\n     * Allocates a new {@code String} constructed from a subarray of an array\n     * of 8-bit integer values.\n     *\n     * \u003cp\u003e The {@code offset} argument is the index of the first byte of the\n     * subarray, and the {@code count} argument specifies the length of the\n     * subarray.\n     *\n     * \u003cp\u003e Each {@code byte} in the subarray is converted to a {@code char} as\n     * specified in the {@link #String(byte[],int) String(byte[],int)} constructor.\n     *\n     * @deprecated This method does not properly convert bytes into characters.\n     * As of JDK\u0026nbsp;1.1, the preferred way to do this is via the\n     * {@code String} constructors that take a {@link\n     * java.nio.charset.Charset}, charset name, or that use the platform\u0027s\n     * default charset.\n     *\n     * @param  ascii\n     *         The bytes to be converted to characters\n     *\n     * @param  hibyte\n     *         The top 8 bits of each 16-bit Unicode code unit\n     *\n     * @param  offset\n     *         The initial offset\n     * @param  count\n     *         The length\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative, or\n     *          {@code offset} is greater than {@code ascii.length - count}\n     *\n     * @see  #String(byte[], int)\n     * @see  #String(byte[], int, int, java.lang.String)\n     * @see  #String(byte[], int, int, java.nio.charset.Charset)\n     * @see  #String(byte[], int, int)\n     * @see  #String(byte[], java.lang.String)\n     * @see  #String(byte[], java.nio.charset.Charset)\n     * @see  #String(byte[])\n     */\n    @Deprecated(since\u003d\"1.1\")\n    public String(byte ascii[], int hibyte, int offset, int count) {\n        checkBoundsOffCount(offset, count, ascii.length);\n        if (count \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n            return;\n        }\n        if (COMPACT_STRINGS \u0026\u0026 (byte)hibyte \u003d\u003d 0) {\n            this.value \u003d Arrays.copyOfRange(ascii, offset, offset + count);\n            this.coder \u003d LATIN1;\n        } else {\n            hibyte \u003c\u003c\u003d 8;\n            byte[] val \u003d StringUTF16.newBytesFor(count);\n            for (int i \u003d 0; i \u003c count; i++) {\n                StringUTF16.putChar(val, i, hibyte | (ascii[offset++] \u0026 0xff));\n            }\n            this.value \u003d val;\n            this.coder \u003d UTF16;\n        }\n    }\n\n    /**\n     * Allocates a new {@code String} containing characters constructed from\n     * an array of 8-bit integer values. Each character \u003ci\u003ec\u003c/i\u003e in the\n     * resulting string is constructed from the corresponding component\n     * \u003ci\u003eb\u003c/i\u003e in the byte array such that:\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     *     \u003cb\u003e\u003ci\u003ec\u003c/i\u003e\u003c/b\u003e \u003d\u003d (char)(((hibyte \u0026amp; 0xff) \u0026lt;\u0026lt; 8)\n     *                         | (\u003cb\u003e\u003ci\u003eb\u003c/i\u003e\u003c/b\u003e \u0026amp; 0xff))\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @deprecated  This method does not properly convert bytes into\n     * characters.  As of JDK\u0026nbsp;1.1, the preferred way to do this is via the\n     * {@code String} constructors that take a {@link\n     * java.nio.charset.Charset}, charset name, or that use the platform\u0027s\n     * default charset.\n     *\n     * @param  ascii\n     *         The bytes to be converted to characters\n     *\n     * @param  hibyte\n     *         The top 8 bits of each 16-bit Unicode code unit\n     *\n     * @see  #String(byte[], int, int, java.lang.String)\n     * @see  #String(byte[], int, int, java.nio.charset.Charset)\n     * @see  #String(byte[], int, int)\n     * @see  #String(byte[], java.lang.String)\n     * @see  #String(byte[], java.nio.charset.Charset)\n     * @see  #String(byte[])\n     */\n    @Deprecated(since\u003d\"1.1\")\n    public String(byte ascii[], int hibyte) {\n        this(ascii, hibyte, 0, ascii.length);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the specified charset.  The length of the new {@code String}\n     * is a function of the charset, and hence may not be equal to the length\n     * of the subarray.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code length} is negative, or\n     *          {@code offset} is greater than {@code bytes.length - length}\n     *\n     * @since  1.1\n     */\n    public String(byte bytes[], int offset, int length, String charsetName)\n            throws UnsupportedEncodingException {\n        if (charsetName \u003d\u003d null)\n            throw new NullPointerException(\"charsetName\");\n        checkBoundsOffCount(offset, length, bytes.length);\n        StringCoding.Result ret \u003d\n            StringCoding.decode(charsetName, bytes, offset, length);\n        this.value \u003d ret.value;\n        this.coder \u003d ret.coder;\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the specified {@linkplain java.nio.charset.Charset charset}.\n     * The length of the new {@code String} is a function of the charset, and\n     * hence may not be equal to the length of the subarray.\n     *\n     * \u003cp\u003e This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\u0027s default replacement string.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset charset} to be used to\n     *         decode the {@code bytes}\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code length} is negative, or\n     *          {@code offset} is greater than {@code bytes.length - length}\n     *\n     * @since  1.6\n     */\n    public String(byte bytes[], int offset, int length, Charset charset) {\n        if (charset \u003d\u003d null)\n            throw new NullPointerException(\"charset\");\n        checkBoundsOffCount(offset, length, bytes.length);\n        StringCoding.Result ret \u003d\n            StringCoding.decode(charset, bytes, offset, length);\n        this.value \u003d ret.value;\n        this.coder \u003d ret.coder;\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of bytes\n     * using the specified {@linkplain java.nio.charset.Charset charset}.  The\n     * length of the new {@code String} is a function of the charset, and hence\n     * may not be equal to the length of the byte array.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  1.1\n     */\n    public String(byte bytes[], String charsetName)\n            throws UnsupportedEncodingException {\n        this(bytes, 0, bytes.length, charsetName);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of\n     * bytes using the specified {@linkplain java.nio.charset.Charset charset}.\n     * The length of the new {@code String} is a function of the charset, and\n     * hence may not be equal to the length of the byte array.\n     *\n     * \u003cp\u003e This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\u0027s default replacement string.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset charset} to be used to\n     *         decode the {@code bytes}\n     *\n     * @since  1.6\n     */\n    public String(byte bytes[], Charset charset) {\n        this(bytes, 0, bytes.length, charset);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the platform\u0027s default charset.  The length of the new\n     * {@code String} is a function of the charset, and hence may not be equal\n     * to the length of the subarray.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code length} is negative, or\n     *          {@code offset} is greater than {@code bytes.length - length}\n     *\n     * @since  1.1\n     */\n    public String(byte bytes[], int offset, int length) {\n        checkBoundsOffCount(offset, length, bytes.length);\n        StringCoding.Result ret \u003d StringCoding.decode(bytes, offset, length);\n        this.value \u003d ret.value;\n        this.coder \u003d ret.coder;\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of bytes\n     * using the platform\u0027s default charset.  The length of the new {@code\n     * String} is a function of the charset, and hence may not be equal to the\n     * length of the byte array.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @since  1.1\n     */\n    public String(byte[] bytes) {\n        this(bytes, 0, bytes.length);\n    }\n\n    /**\n     * Allocates a new string that contains the sequence of characters\n     * currently contained in the string buffer argument. The contents of the\n     * string buffer are copied; subsequent modification of the string buffer\n     * does not affect the newly created string.\n     *\n     * @param  buffer\n     *         A {@code StringBuffer}\n     */\n    public String(StringBuffer buffer) {\n        this(buffer.toString());\n    }\n\n    /**\n     * Allocates a new string that contains the sequence of characters\n     * currently contained in the string builder argument. The contents of the\n     * string builder are copied; subsequent modification of the string builder\n     * does not affect the newly created string.\n     *\n     * \u003cp\u003e This constructor is provided to ease migration to {@code\n     * StringBuilder}. Obtaining a string from a string builder via the {@code\n     * toString} method is likely to run faster and is generally preferred.\n     *\n     * @param   builder\n     *          A {@code StringBuilder}\n     *\n     * @since  1.5\n     */\n    public String(StringBuilder builder) {\n        this(builder, null);\n    }\n\n    /**\n     * Returns the length of this string.\n     * The length is equal to the number of \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode\n     * code units\u003c/a\u003e in the string.\n     *\n     * @return  the length of the sequence of characters represented by this\n     *          object.\n     */\n    public int length() {\n        return value.length \u003e\u003e coder();\n    }\n\n    /**\n     * Returns {@code true} if, and only if, {@link #length()} is {@code 0}.\n     *\n     * @return {@code true} if {@link #length()} is {@code 0}, otherwise\n     * {@code false}\n     *\n     * @since 1.6\n     */\n    public boolean isEmpty() {\n        return value.length \u003d\u003d 0;\n    }\n\n    /**\n     * Returns the {@code char} value at the\n     * specified index. An index ranges from {@code 0} to\n     * {@code length() - 1}. The first {@code char} value of the sequence\n     * is at index {@code 0}, the next at index {@code 1},\n     * and so on, as for array indexing.\n     *\n     * \u003cp\u003eIf the {@code char} value specified by the index is a\n     * \u003ca href\u003d\"Character.html#unicode\"\u003esurrogate\u003c/a\u003e, the surrogate\n     * value is returned.\n     *\n     * @param      index   the index of the {@code char} value.\n     * @return     the {@code char} value at the specified index of this string.\n     *             The first {@code char} value is at index {@code 0}.\n     * @exception  IndexOutOfBoundsException  if the {@code index}\n     *             argument is negative or not less than the length of this\n     *             string.\n     */\n    public char charAt(int index) {\n        if (isLatin1()) {\n            return StringLatin1.charAt(value, index);\n        } else {\n            return StringUTF16.charAt(value, index);\n        }\n    }\n\n    /**\n     * Returns the character (Unicode code point) at the specified\n     * index. The index refers to {@code char} values\n     * (Unicode code units) and ranges from {@code 0} to\n     * {@link #length()}{@code  - 1}.\n     *\n     * \u003cp\u003e If the {@code char} value specified at the given index\n     * is in the high-surrogate range, the following index is less\n     * than the length of this {@code String}, and the\n     * {@code char} value at the following index is in the\n     * low-surrogate range, then the supplementary code point\n     * corresponding to this surrogate pair is returned. Otherwise,\n     * the {@code char} value at the given index is returned.\n     *\n     * @param      index the index to the {@code char} values\n     * @return     the code point value of the character at the\n     *             {@code index}\n     * @exception  IndexOutOfBoundsException  if the {@code index}\n     *             argument is negative or not less than the length of this\n     *             string.\n     * @since      1.5\n     */\n    public int codePointAt(int index) {\n        if (isLatin1()) {\n            checkIndex(index, value.length);\n            return value[index] \u0026 0xff;\n        }\n        int length \u003d value.length \u003e\u003e 1;\n        checkIndex(index, length);\n        return StringUTF16.codePointAt(value, index, length);\n    }\n\n    /**\n     * Returns the character (Unicode code point) before the specified\n     * index. The index refers to {@code char} values\n     * (Unicode code units) and ranges from {@code 1} to {@link\n     * CharSequence#length() length}.\n     *\n     * \u003cp\u003e If the {@code char} value at {@code (index - 1)}\n     * is in the low-surrogate range, {@code (index - 2)} is not\n     * negative, and the {@code char} value at {@code (index -\n     * 2)} is in the high-surrogate range, then the\n     * supplementary code point value of the surrogate pair is\n     * returned. If the {@code char} value at {@code index -\n     * 1} is an unpaired low-surrogate or a high-surrogate, the\n     * surrogate value is returned.\n     *\n     * @param     index the index following the code point that should be returned\n     * @return    the Unicode code point value before the given index.\n     * @exception IndexOutOfBoundsException if the {@code index}\n     *            argument is less than 1 or greater than the length\n     *            of this string.\n     * @since     1.5\n     */\n    public int codePointBefore(int index) {\n        int i \u003d index - 1;\n        if (i \u003c 0 || i \u003e\u003d length()) {\n            throw new StringIndexOutOfBoundsException(index);\n        }\n        if (isLatin1()) {\n            return (value[i] \u0026 0xff);\n        }\n        return StringUTF16.codePointBefore(value, index);\n    }\n\n    /**\n     * Returns the number of Unicode code points in the specified text\n     * range of this {@code String}. The text range begins at the\n     * specified {@code beginIndex} and extends to the\n     * {@code char} at index {@code endIndex - 1}. Thus the\n     * length (in {@code char}s) of the text range is\n     * {@code endIndex-beginIndex}. Unpaired surrogates within\n     * the text range count as one code point each.\n     *\n     * @param beginIndex the index to the first {@code char} of\n     * the text range.\n     * @param endIndex the index after the last {@code char} of\n     * the text range.\n     * @return the number of Unicode code points in the specified text\n     * range\n     * @exception IndexOutOfBoundsException if the\n     * {@code beginIndex} is negative, or {@code endIndex}\n     * is larger than the length of this {@code String}, or\n     * {@code beginIndex} is larger than {@code endIndex}.\n     * @since  1.5\n     */\n    public int codePointCount(int beginIndex, int endIndex) {\n        if (beginIndex \u003c 0 || beginIndex \u003e endIndex ||\n            endIndex \u003e length()) {\n            throw new IndexOutOfBoundsException();\n        }\n        if (isLatin1()) {\n            return endIndex - beginIndex;\n        }\n        return StringUTF16.codePointCount(value, beginIndex, endIndex);\n    }\n\n    /**\n     * Returns the index within this {@code String} that is\n     * offset from the given {@code index} by\n     * {@code codePointOffset} code points. Unpaired surrogates\n     * within the text range given by {@code index} and\n     * {@code codePointOffset} count as one code point each.\n     *\n     * @param index the index to be offset\n     * @param codePointOffset the offset in code points\n     * @return the index within this {@code String}\n     * @exception IndexOutOfBoundsException if {@code index}\n     *   is negative or larger then the length of this\n     *   {@code String}, or if {@code codePointOffset} is positive\n     *   and the substring starting with {@code index} has fewer\n     *   than {@code codePointOffset} code points,\n     *   or if {@code codePointOffset} is negative and the substring\n     *   before {@code index} has fewer than the absolute value\n     *   of {@code codePointOffset} code points.\n     * @since 1.5\n     */\n    public int offsetByCodePoints(int index, int codePointOffset) {\n        if (index \u003c 0 || index \u003e length()) {\n            throw new IndexOutOfBoundsException();\n        }\n        return Character.offsetByCodePoints(this, index, codePointOffset);\n    }\n\n    /**\n     * Copies characters from this string into the destination character\n     * array.\n     * \u003cp\u003e\n     * The first character to be copied is at index {@code srcBegin};\n     * the last character to be copied is at index {@code srcEnd-1}\n     * (thus the total number of characters to be copied is\n     * {@code srcEnd-srcBegin}). The characters are copied into the\n     * subarray of {@code dst} starting at index {@code dstBegin}\n     * and ending at index:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     *     dstBegin + (srcEnd-srcBegin) - 1\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param      srcBegin   index of the first character in the string\n     *                        to copy.\n     * @param      srcEnd     index after the last character in the string\n     *                        to copy.\n     * @param      dst        the destination array.\n     * @param      dstBegin   the start offset in the destination array.\n     * @exception IndexOutOfBoundsException If any of the following\n     *            is true:\n     *            \u003cul\u003e\u003cli\u003e{@code srcBegin} is negative.\n     *            \u003cli\u003e{@code srcBegin} is greater than {@code srcEnd}\n     *            \u003cli\u003e{@code srcEnd} is greater than the length of this\n     *                string\n     *            \u003cli\u003e{@code dstBegin} is negative\n     *            \u003cli\u003e{@code dstBegin+(srcEnd-srcBegin)} is larger than\n     *                {@code dst.length}\u003c/ul\u003e\n     */\n    public void getChars(int srcBegin, int srcEnd, char dst[], int dstBegin) {\n        checkBoundsBeginEnd(srcBegin, srcEnd, length());\n        checkBoundsOffCount(dstBegin, srcEnd - srcBegin, dst.length);\n        if (isLatin1()) {\n            StringLatin1.getChars(value, srcBegin, srcEnd, dst, dstBegin);\n        } else {\n            StringUTF16.getChars(value, srcBegin, srcEnd, dst, dstBegin);\n        }\n    }\n\n    /**\n     * Copies characters from this string into the destination byte array. Each\n     * byte receives the 8 low-order bits of the corresponding character. The\n     * eight high-order bits of each character are not copied and do not\n     * participate in the transfer in any way.\n     *\n     * \u003cp\u003e The first character to be copied is at index {@code srcBegin}; the\n     * last character to be copied is at index {@code srcEnd-1}.  The total\n     * number of characters to be copied is {@code srcEnd-srcBegin}. The\n     * characters, converted to bytes, are copied into the subarray of {@code\n     * dst} starting at index {@code dstBegin} and ending at index:\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     *     dstBegin + (srcEnd-srcBegin) - 1\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @deprecated  This method does not properly convert characters into\n     * bytes.  As of JDK\u0026nbsp;1.1, the preferred way to do this is via the\n     * {@link #getBytes()} method, which uses the platform\u0027s default charset.\n     *\n     * @param  srcBegin\n     *         Index of the first character in the string to copy\n     *\n     * @param  srcEnd\n     *         Index after the last character in the string to copy\n     *\n     * @param  dst\n     *         The destination array\n     *\n     * @param  dstBegin\n     *         The start offset in the destination array\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If any of the following is true:\n     *          \u003cul\u003e\n     *            \u003cli\u003e {@code srcBegin} is negative\n     *            \u003cli\u003e {@code srcBegin} is greater than {@code srcEnd}\n     *            \u003cli\u003e {@code srcEnd} is greater than the length of this String\n     *            \u003cli\u003e {@code dstBegin} is negative\n     *            \u003cli\u003e {@code dstBegin+(srcEnd-srcBegin)} is larger than {@code\n     *                 dst.length}\n     *          \u003c/ul\u003e\n     */\n    @Deprecated(since\u003d\"1.1\")\n    public void getBytes(int srcBegin, int srcEnd, byte dst[], int dstBegin) {\n        checkBoundsBeginEnd(srcBegin, srcEnd, length());\n        Objects.requireNonNull(dst);\n        checkBoundsOffCount(dstBegin, srcEnd - srcBegin, dst.length);\n        if (isLatin1()) {\n            StringLatin1.getBytes(value, srcBegin, srcEnd, dst, dstBegin);\n        } else {\n            StringUTF16.getBytes(value, srcBegin, srcEnd, dst, dstBegin);\n        }\n    }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the named\n     * charset, storing the result into a new byte array.\n     *\n     * \u003cp\u003e The behavior of this method when this string cannot be encoded in\n     * the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetEncoder} class should be used when more control\n     * over the encoding process is required.\n     *\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @return  The resultant byte array\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  1.1\n     */\n    public byte[] getBytes(String charsetName)\n            throws UnsupportedEncodingException {\n        if (charsetName \u003d\u003d null) throw new NullPointerException();\n        return StringCoding.encode(charsetName, coder(), value);\n    }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the given\n     * {@linkplain java.nio.charset.Charset charset}, storing the result into a\n     * new byte array.\n     *\n     * \u003cp\u003e This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\u0027s default replacement byte array.  The\n     * {@link java.nio.charset.CharsetEncoder} class should be used when more\n     * control over the encoding process is required.\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset} to be used to encode\n     *         the {@code String}\n     *\n     * @return  The resultant byte array\n     *\n     * @since  1.6\n     */\n    public byte[] getBytes(Charset charset) {\n        if (charset \u003d\u003d null) throw new NullPointerException();\n        return StringCoding.encode(charset, coder(), value);\n     }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the\n     * platform\u0027s default charset, storing the result into a new byte array.\n     *\n     * \u003cp\u003e The behavior of this method when this string cannot be encoded in\n     * the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetEncoder} class should be used when more control\n     * over the encoding process is required.\n     *\n     * @return  The resultant byte array\n     *\n     * @since      1.1\n     */\n    public byte[] getBytes() {\n        return StringCoding.encode(coder(), value);\n    }\n\n    /**\n     * Compares this string to the specified object.  The result is {@code\n     * true} if and only if the argument is not {@code null} and is a {@code\n     * String} object that represents the same sequence of characters as this\n     * object.\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param  anObject\n     *         The object to compare this {@code String} against\n     *\n     * @return  {@code true} if the given object represents a {@code String}\n     *          equivalent to this string, {@code false} otherwise\n     *\n     * @see  #compareTo(String)\n     * @see  #equalsIgnoreCase(String)\n     */\n    public boolean equals(Object anObject) {\n        if (this \u003d\u003d anObject) {\n            return true;\n        }\n        if (anObject instanceof String) {\n            String aString \u003d (String)anObject;\n            if (coder() \u003d\u003d aString.coder()) {\n                return isLatin1() ? StringLatin1.equals(value, aString.value)\n                                  : StringUTF16.equals(value, aString.value);\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Compares this string to the specified {@code StringBuffer}.  The result\n     * is {@code true} if and only if this {@code String} represents the same\n     * sequence of characters as the specified {@code StringBuffer}. This method\n     * synchronizes on the {@code StringBuffer}.\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param  sb\n     *         The {@code StringBuffer} to compare this {@code String} against\n     *\n     * @return  {@code true} if this {@code String} represents the same\n     *          sequence of characters as the specified {@code StringBuffer},\n     *          {@code false} otherwise\n     *\n     * @since  1.4\n     */\n    public boolean contentEquals(StringBuffer sb) {\n        return contentEquals((CharSequence)sb);\n    }\n\n    private boolean nonSyncContentEquals(AbstractStringBuilder sb) {\n        int len \u003d length();\n        if (len !\u003d sb.length()) {\n            return false;\n        }\n        byte v1[] \u003d value;\n        byte v2[] \u003d sb.getValue();\n        if (coder() \u003d\u003d sb.getCoder()) {\n            int n \u003d v1.length;\n            for (int i \u003d 0; i \u003c n; i++) {\n                if (v1[i] !\u003d v2[i]) {\n                    return false;\n                }\n            }\n        } else {\n            if (!isLatin1()) {  // utf16 str and latin1 abs can never be \"equal\"\n                return false;\n            }\n            return StringUTF16.contentEquals(v1, v2, len);\n        }\n        return true;\n    }\n\n    /**\n     * Compares this string to the specified {@code CharSequence}.  The\n     * result is {@code true} if and only if this {@code String} represents the\n     * same sequence of char values as the specified sequence. Note that if the\n     * {@code CharSequence} is a {@code StringBuffer} then the method\n     * synchronizes on it.\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param  cs\n     *         The sequence to compare this {@code String} against\n     *\n     * @return  {@code true} if this {@code String} represents the same\n     *          sequence of char values as the specified sequence, {@code\n     *          false} otherwise\n     *\n     * @since  1.5\n     */\n    public boolean contentEquals(CharSequence cs) {\n        // Argument is a StringBuffer, StringBuilder\n        if (cs instanceof AbstractStringBuilder) {\n            if (cs instanceof StringBuffer) {\n                synchronized(cs) {\n                   return nonSyncContentEquals((AbstractStringBuilder)cs);\n                }\n            } else {\n                return nonSyncContentEquals((AbstractStringBuilder)cs);\n            }\n        }\n        // Argument is a String\n        if (cs instanceof String) {\n            return equals(cs);\n        }\n        // Argument is a generic CharSequence\n        int n \u003d cs.length();\n        if (n !\u003d length()) {\n            return false;\n        }\n        byte[] val \u003d this.value;\n        if (isLatin1()) {\n            for (int i \u003d 0; i \u003c n; i++) {\n                if ((val[i] \u0026 0xff) !\u003d cs.charAt(i)) {\n                    return false;\n                }\n            }\n        } else {\n            if (!StringUTF16.contentEquals(val, cs, n)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Compares this {@code String} to another {@code String}, ignoring case\n     * considerations.  Two strings are considered equal ignoring case if they\n     * are of the same length and corresponding characters in the two strings\n     * are equal ignoring case.\n     *\n     * \u003cp\u003e Two characters {@code c1} and {@code c2} are considered the same\n     * ignoring case if at least one of the following is true:\n     * \u003cul\u003e\n     *   \u003cli\u003e The two characters are the same (as compared by the\n     *        {@code \u003d\u003d} operator)\n     *   \u003cli\u003e Calling {@code Character.toLowerCase(Character.toUpperCase(char))}\n     *        on each character produces the same result\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that this method does \u003cem\u003enot\u003c/em\u003e take locale into account, and\n     * will result in unsatisfactory results for certain locales.  The\n     * {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @param  anotherString\n     *         The {@code String} to compare this {@code String} against\n     *\n     * @return  {@code true} if the argument is not {@code null} and it\n     *          represents an equivalent {@code String} ignoring case; {@code\n     *          false} otherwise\n     *\n     * @see  #equals(Object)\n     */\n    public boolean equalsIgnoreCase(String anotherString) {\n        return (this \u003d\u003d anotherString) ? true\n                : (anotherString !\u003d null)\n                \u0026\u0026 (anotherString.length() \u003d\u003d length())\n                \u0026\u0026 regionMatches(true, 0, anotherString, 0, length());\n    }\n\n    /**\n     * Compares two strings lexicographically.\n     * The comparison is based on the Unicode value of each character in\n     * the strings. The character sequence represented by this\n     * {@code String} object is compared lexicographically to the\n     * character sequence represented by the argument string. The result is\n     * a negative integer if this {@code String} object\n     * lexicographically precedes the argument string. The result is a\n     * positive integer if this {@code String} object lexicographically\n     * follows the argument string. The result is zero if the strings\n     * are equal; {@code compareTo} returns {@code 0} exactly when\n     * the {@link #equals(Object)} method would return {@code true}.\n     * \u003cp\u003e\n     * This is the definition of lexicographic ordering. If two strings are\n     * different, then either they have different characters at some index\n     * that is a valid index for both strings, or their lengths are different,\n     * or both. If they have different characters at one or more index\n     * positions, let \u003ci\u003ek\u003c/i\u003e be the smallest such index; then the string\n     * whose character at position \u003ci\u003ek\u003c/i\u003e has the smaller value, as\n     * determined by using the {@code \u003c} operator, lexicographically precedes the\n     * other string. In this case, {@code compareTo} returns the\n     * difference of the two character values at position {@code k} in\n     * the two string -- that is, the value:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(k)-anotherString.charAt(k)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * If there is no index position at which they differ, then the shorter\n     * string lexicographically precedes the longer string. In this case,\n     * {@code compareTo} returns the difference of the lengths of the\n     * strings -- that is, the value:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.length()-anotherString.length()\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param   anotherString   the {@code String} to be compared.\n     * @return  the value {@code 0} if the argument string is equal to\n     *          this string; a value less than {@code 0} if this string\n     *          is lexicographically less than the string argument; and a\n     *          value greater than {@code 0} if this string is\n     *          lexicographically greater than the string argument.\n     */\n    public int compareTo(String anotherString) {\n        byte v1[] \u003d value;\n        byte v2[] \u003d anotherString.value;\n        if (coder() \u003d\u003d anotherString.coder()) {\n            return isLatin1() ? StringLatin1.compareTo(v1, v2)\n                              : StringUTF16.compareTo(v1, v2);\n        }\n        return isLatin1() ? StringLatin1.compareToUTF16(v1, v2)\n                          : StringUTF16.compareToLatin1(v1, v2);\n     }\n\n    /**\n     * A Comparator that orders {@code String} objects as by\n     * {@code compareToIgnoreCase}. This comparator is serializable.\n     * \u003cp\u003e\n     * Note that this Comparator does \u003cem\u003enot\u003c/em\u003e take locale into account,\n     * and will result in an unsatisfactory ordering for certain locales.\n     * The {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @see     java.text.Collator\n     * @since   1.2\n     */\n    public static final Comparator\u003cString\u003e CASE_INSENSITIVE_ORDER\n                                         \u003d new CaseInsensitiveComparator();\n    private static class CaseInsensitiveComparator\n            implements Comparator\u003cString\u003e, java.io.Serializable {\n        // use serialVersionUID from JDK 1.2.2 for interoperability\n        private static final long serialVersionUID \u003d 8575799808933029326L;\n\n        public int compare(String s1, String s2) {\n            byte v1[] \u003d s1.value;\n            byte v2[] \u003d s2.value;\n            if (s1.coder() \u003d\u003d s2.coder()) {\n                return s1.isLatin1() ? StringLatin1.compareToCI(v1, v2)\n                                     : StringUTF16.compareToCI(v1, v2);\n            }\n            return s1.isLatin1() ? StringLatin1.compareToCI_UTF16(v1, v2)\n                                 : StringUTF16.compareToCI_Latin1(v1, v2);\n        }\n\n        /** Replaces the de-serialized object. */\n        private Object readResolve() { return CASE_INSENSITIVE_ORDER; }\n    }\n\n    /**\n     * Compares two strings lexicographically, ignoring case\n     * differences. This method returns an integer whose sign is that of\n     * calling {@code compareTo} with normalized versions of the strings\n     * where case differences have been eliminated by calling\n     * {@code Character.toLowerCase(Character.toUpperCase(character))} on\n     * each character.\n     * \u003cp\u003e\n     * Note that this method does \u003cem\u003enot\u003c/em\u003e take locale into account,\n     * and will result in an unsatisfactory ordering for certain locales.\n     * The {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @param   str   the {@code String} to be compared.\n     * @return  a negative integer, zero, or a positive integer as the\n     *          specified String is greater than, equal to, or less\n     *          than this String, ignoring case considerations.\n     * @see     java.text.Collator\n     * @since   1.2\n     */\n    public int compareToIgnoreCase(String str) {\n        return CASE_INSENSITIVE_ORDER.compare(this, str);\n    }\n\n    /**\n     * Tests if two string regions are equal.\n     * \u003cp\u003e\n     * A substring of this {@code String} object is compared to a substring\n     * of the argument other. The result is true if these substrings\n     * represent identical character sequences. The substring of this\n     * {@code String} object to be compared begins at index {@code toffset}\n     * and has length {@code len}. The substring of other to be compared\n     * begins at index {@code ooffset} and has length {@code len}. The\n     * result is {@code false} if and only if at least one of the following\n     * is true:\n     * \u003cul\u003e\u003cli\u003e{@code toffset} is negative.\n     * \u003cli\u003e{@code ooffset} is negative.\n     * \u003cli\u003e{@code toffset+len} is greater than the length of this\n     * {@code String} object.\n     * \u003cli\u003e{@code ooffset+len} is greater than the length of the other\n     * argument.\n     * \u003cli\u003eThere is some nonnegative integer \u003ci\u003ek\u003c/i\u003e less than {@code len}\n     * such that:\n     * {@code this.charAt(toffset + }\u003ci\u003ek\u003c/i\u003e{@code ) !\u003d other.charAt(ooffset + }\n     * \u003ci\u003ek\u003c/i\u003e{@code )}\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that this method does \u003cem\u003enot\u003c/em\u003e take locale into account.  The\n     * {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @param   toffset   the starting offset of the subregion in this string.\n     * @param   other     the string argument.\n     * @param   ooffset   the starting offset of the subregion in the string\n     *                    argument.\n     * @param   len       the number of characters to compare.\n     * @return  {@code true} if the specified subregion of this string\n     *          exactly matches the specified subregion of the string argument;\n     *          {@code false} otherwise.\n     */\n    public boolean regionMatches(int toffset, String other, int ooffset, int len) {\n        byte tv[] \u003d value;\n        byte ov[] \u003d other.value;\n        // Note: toffset, ooffset, or len might be near -1\u003e\u003e\u003e1.\n        if ((ooffset \u003c 0) || (toffset \u003c 0) ||\n             (toffset \u003e (long)length() - len) ||\n             (ooffset \u003e (long)other.length() - len)) {\n            return false;\n        }\n        if (coder() \u003d\u003d other.coder()) {\n            if (!isLatin1() \u0026\u0026 (len \u003e 0)) {\n                toffset \u003d toffset \u003c\u003c 1;\n                ooffset \u003d ooffset \u003c\u003c 1;\n                len \u003d len \u003c\u003c 1;\n            }\n            while (len-- \u003e 0) {\n                if (tv[toffset++] !\u003d ov[ooffset++]) {\n                    return false;\n                }\n            }\n        } else {\n            if (coder() \u003d\u003d LATIN1) {\n                while (len-- \u003e 0) {\n                    if (StringLatin1.getChar(tv, toffset++) !\u003d\n                        StringUTF16.getChar(ov, ooffset++)) {\n                        return false;\n                    }\n                }\n            } else {\n                while (len-- \u003e 0) {\n                    if (StringUTF16.getChar(tv, toffset++) !\u003d\n                        StringLatin1.getChar(ov, ooffset++)) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Tests if two string regions are equal.\n     * \u003cp\u003e\n     * A substring of this {@code String} object is compared to a substring\n     * of the argument {@code other}. The result is {@code true} if these\n     * substrings represent character sequences that are the same, ignoring\n     * case if and only if {@code ignoreCase} is true. The substring of\n     * this {@code String} object to be compared begins at index\n     * {@code toffset} and has length {@code len}. The substring of\n     * {@code other} to be compared begins at index {@code ooffset} and\n     * has length {@code len}. The result is {@code false} if and only if\n     * at least one of the following is true:\n     * \u003cul\u003e\u003cli\u003e{@code toffset} is negative.\n     * \u003cli\u003e{@code ooffset} is negative.\n     * \u003cli\u003e{@code toffset+len} is greater than the length of this\n     * {@code String} object.\n     * \u003cli\u003e{@code ooffset+len} is greater than the length of the other\n     * argument.\n     * \u003cli\u003e{@code ignoreCase} is {@code false} and there is some nonnegative\n     * integer \u003ci\u003ek\u003c/i\u003e less than {@code len} such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(toffset+k) !\u003d other.charAt(ooffset+k)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * \u003cli\u003e{@code ignoreCase} is {@code true} and there is some nonnegative\n     * integer \u003ci\u003ek\u003c/i\u003e less than {@code len} such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * Character.toLowerCase(Character.toUpperCase(this.charAt(toffset+k))) !\u003d\n     Character.toLowerCase(Character.toUpperCase(other.charAt(ooffset+k)))\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that this method does \u003cem\u003enot\u003c/em\u003e take locale into account,\n     * and will result in unsatisfactory results for certain locales when\n     * {@code ignoreCase} is {@code true}.  The {@link java.text.Collator} class\n     * provides locale-sensitive comparison.\n     *\n     * @param   ignoreCase   if {@code true}, ignore case when comparing\n     *                       characters.\n     * @param   toffset      the starting offset of the subregion in this\n     *                       string.\n     * @param   other        the string argument.\n     * @param   ooffset      the starting offset of the subregion in the string\n     *                       argument.\n     * @param   len          the number of characters to compare.\n     * @return  {@code true} if the specified subregion of this string\n     *          matches the specified subregion of the string argument;\n     *          {@code false} otherwise. Whether the matching is exact\n     *          or case insensitive depends on the {@code ignoreCase}\n     *          argument.\n     */\n    public boolean regionMatches(boolean ignoreCase, int toffset,\n            String other, int ooffset, int len) {\n        if (!ignoreCase) {\n            return regionMatches(toffset, other, ooffset, len);\n        }\n        // Note: toffset, ooffset, or len might be near -1\u003e\u003e\u003e1.\n        if ((ooffset \u003c 0) || (toffset \u003c 0)\n                || (toffset \u003e (long)length() - len)\n                || (ooffset \u003e (long)other.length() - len)) {\n            return false;\n        }\n        byte tv[] \u003d value;\n        byte ov[] \u003d other.value;\n        if (coder() \u003d\u003d other.coder()) {\n            return isLatin1()\n              ? StringLatin1.regionMatchesCI(tv, toffset, ov, ooffset, len)\n              : StringUTF16.regionMatchesCI(tv, toffset, ov, ooffset, len);\n        }\n        return isLatin1()\n              ? StringLatin1.regionMatchesCI_UTF16(tv, toffset, ov, ooffset, len)\n              : StringUTF16.regionMatchesCI_Latin1(tv, toffset, ov, ooffset, len);\n    }\n\n    /**\n     * Tests if the substring of this string beginning at the\n     * specified index starts with the specified prefix.\n     *\n     * @param   prefix    the prefix.\n     * @param   toffset   where to begin looking in this string.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a prefix of the substring of this object starting\n     *          at index {@code toffset}; {@code false} otherwise.\n     *          The result is {@code false} if {@code toffset} is\n     *          negative or greater than the length of this\n     *          {@code String} object; otherwise the result is the same\n     *          as the result of the expression\n     *          \u003cpre\u003e\n     *          this.substring(toffset).startsWith(prefix)\n     *          \u003c/pre\u003e\n     */\n    public boolean startsWith(String prefix, int toffset) {\n        // Note: toffset might be near -1\u003e\u003e\u003e1.\n        if (toffset \u003c 0 || toffset \u003e length() - prefix.length()) {\n            return false;\n        }\n        byte ta[] \u003d value;\n        byte pa[] \u003d prefix.value;\n        int po \u003d 0;\n        int pc \u003d pa.length;\n        if (coder() \u003d\u003d prefix.coder()) {\n            int to \u003d isLatin1() ? toffset : toffset \u003c\u003c 1;\n            while (po \u003c pc) {\n                if (ta[to++] !\u003d pa[po++]) {\n                    return false;\n                }\n            }\n        } else {\n            if (isLatin1()) {  // \u0026\u0026 pcoder \u003d\u003d UTF16\n                return false;\n            }\n            // coder \u003d\u003d UTF16 \u0026\u0026 pcoder \u003d\u003d LATIN1)\n            while (po \u003c pc) {\n                if (StringUTF16.getChar(ta, toffset++) !\u003d (pa[po++] \u0026 0xff)) {\n                    return false;\n               }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Tests if this string starts with the specified prefix.\n     *\n     * @param   prefix   the prefix.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a prefix of the character sequence represented by\n     *          this string; {@code false} otherwise.\n     *          Note also that {@code true} will be returned if the\n     *          argument is an empty string or is equal to this\n     *          {@code String} object as determined by the\n     *          {@link #equals(Object)} method.\n     * @since   1.0\n     */\n    public boolean startsWith(String prefix) {\n        return startsWith(prefix, 0);\n    }\n\n    /**\n     * Tests if this string ends with the specified suffix.\n     *\n     * @param   suffix   the suffix.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a suffix of the character sequence represented by\n     *          this object; {@code false} otherwise. Note that the\n     *          result will be {@code true} if the argument is the\n     *          empty string or is equal to this {@code String} object\n     *          as determined by the {@link #equals(Object)} method.\n     */\n    public boolean endsWith(String suffix) {\n        return startsWith(suffix, length() - suffix.length());\n    }\n\n    /**\n     * Returns a hash code for this string. The hash code for a\n     * {@code String} object is computed as\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * using {@code int} arithmetic, where {@code s[i]} is the\n     * \u003ci\u003ei\u003c/i\u003eth character of the string, {@code n} is the length of\n     * the string, and {@code ^} indicates exponentiation.\n     * (The hash value of the empty string is zero.)\n     *\n     * @return  a hash code value for this object.\n     */\n    public int hashCode() {\n        int h \u003d hash;\n        if (h \u003d\u003d 0 \u0026\u0026 value.length \u003e 0) {\n            hash \u003d h \u003d isLatin1() ? StringLatin1.hashCode(value)\n                                  : StringUTF16.hashCode(value);\n        }\n        return h;\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of\n     * the specified character. If a character with value\n     * {@code ch} occurs in the character sequence represented by\n     * this {@code String} object, then the index (in Unicode\n     * code units) of the first such occurrence is returned. For\n     * values of {@code ch} in the range from 0 to 0xFFFF\n     * (inclusive), this is the smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. In either case, if no such character occurs in this\n     * string, then {@code -1} is returned.\n     *\n     * @param   ch   a character (Unicode code point).\n     * @return  the index of the first occurrence of the character in the\n     *          character sequence represented by this object, or\n     *          {@code -1} if the character does not occur.\n     */\n    public int indexOf(int ch) {\n        return indexOf(ch, 0);\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified character, starting the search at the specified index.\n     * \u003cp\u003e\n     * If a character with value {@code ch} occurs in the\n     * character sequence represented by this {@code String}\n     * object at an index no smaller than {@code fromIndex}, then\n     * the index of the first such occurrence is returned. For values\n     * of {@code ch} in the range from 0 to 0xFFFF (inclusive),\n     * this is the smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026gt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026gt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. In either case, if no such character occurs in this\n     * string at or after position {@code fromIndex}, then\n     * {@code -1} is returned.\n     *\n     * \u003cp\u003e\n     * There is no restriction on the value of {@code fromIndex}. If it\n     * is negative, it has the same effect as if it were zero: this entire\n     * string may be searched. If it is greater than the length of this\n     * string, it has the same effect as if it were equal to the length of\n     * this string: {@code -1} is returned.\n     *\n     * \u003cp\u003eAll indices are specified in {@code char} values\n     * (Unicode code units).\n     *\n     * @param   ch          a character (Unicode code point).\n     * @param   fromIndex   the index to start the search from.\n     * @return  the index of the first occurrence of the character in the\n     *          character sequence represented by this object that is greater\n     *          than or equal to {@code fromIndex}, or {@code -1}\n     *          if the character does not occur.\n     */\n    public int indexOf(int ch, int fromIndex) {\n        return isLatin1() ? StringLatin1.indexOf(value, ch, fromIndex)\n                          : StringUTF16.indexOf(value, ch, fromIndex);\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of\n     * the specified character. For values of {@code ch} in the\n     * range from 0 to 0xFFFF (inclusive), the index (in Unicode code\n     * units) returned is the largest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * largest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true.  In either case, if no such character occurs in this\n     * string, then {@code -1} is returned.  The\n     * {@code String} is searched backwards starting at the last\n     * character.\n     *\n     * @param   ch   a character (Unicode code point).\n     * @return  the index of the last occurrence of the character in the\n     *          character sequence represented by this object, or\n     *          {@code -1} if the character does not occur.\n     */\n    public int lastIndexOf(int ch) {\n        return lastIndexOf(ch, length() - 1);\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of\n     * the specified character, searching backward starting at the\n     * specified index. For values of {@code ch} in the range\n     * from 0 to 0xFFFF (inclusive), the index returned is the largest\n     * value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026lt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * largest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026lt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. In either case, if no such character occurs in this\n     * string at or before position {@code fromIndex}, then\n     * {@code -1} is returned.\n     *\n     * \u003cp\u003eAll indices are specified in {@code char} values\n     * (Unicode code units).\n     *\n     * @param   ch          a character (Unicode code point).\n     * @param   fromIndex   the index to start the search from. There is no\n     *          restriction on the value of {@code fromIndex}. If it is\n     *          greater than or equal to the length of this string, it has\n     *          the same effect as if it were equal to one less than the\n     *          length of this string: this entire string may be searched.\n     *          If it is negative, it has the same effect as if it were -1:\n     *          -1 is returned.\n     * @return  the index of the last occurrence of the character in the\n     *          character sequence represented by this object that is less\n     *          than or equal to {@code fromIndex}, or {@code -1}\n     *          if the character does not occur before that point.\n     */\n    public int lastIndexOf(int ch, int fromIndex) {\n        return isLatin1() ? StringLatin1.lastIndexOf(value, ch, fromIndex)\n                          : StringUTF16.lastIndexOf(value, ch, fromIndex);\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified substring.\n     *\n     * \u003cp\u003eThe returned index is the smallest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     * this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str   the substring to search for.\n     * @return  the index of the first occurrence of the specified substring,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int indexOf(String str) {\n        if (coder() \u003d\u003d str.coder()) {\n            return isLatin1() ? StringLatin1.indexOf(value, str.value)\n                              : StringUTF16.indexOf(value, str.value);\n        }\n        if (coder() \u003d\u003d LATIN1) {  // str.coder \u003d\u003d UTF16\n            return -1;\n        }\n        return StringUTF16.indexOfLatin1(value, str.value);\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified substring, starting at the specified index.\n     *\n     * \u003cp\u003eThe returned index is the smallest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     *     k \u003e\u003d Math.min(fromIndex, this.length()) \u0026\u0026\n     *                   this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str         the substring to search for.\n     * @param   fromIndex   the index from which to start the search.\n     * @return  the index of the first occurrence of the specified substring,\n     *          starting at the specified index,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int indexOf(String str, int fromIndex) {\n        return indexOf(value, coder(), length(), str, fromIndex);\n    }\n\n    /**\n     * Code shared by String and AbstractStringBuilder to do searches. The\n     * source is the character array being searched, and the target\n     * is the string being searched for.\n     *\n     * @param   src       the characters being searched.\n     * @param   srcCoder  the coder of the source string.\n     * @param   srcCount  length of the source string.\n     * @param   tgtStr    the characters being searched for.\n     * @param   fromIndex the index to begin searching from.\n     */\n    static int indexOf(byte[] src, byte srcCoder, int srcCount,\n                       String tgtStr, int fromIndex) {\n        byte[] tgt    \u003d tgtStr.value;\n        byte tgtCoder \u003d tgtStr.coder();\n        int tgtCount  \u003d tgtStr.length();\n\n        if (fromIndex \u003e\u003d srcCount) {\n            return (tgtCount \u003d\u003d 0 ? srcCount : -1);\n        }\n        if (fromIndex \u003c 0) {\n            fromIndex \u003d 0;\n        }\n        if (tgtCount \u003d\u003d 0) {\n            return fromIndex;\n        }\n        if (tgtCount \u003e srcCount) {\n            return -1;\n        }\n        if (srcCoder \u003d\u003d tgtCoder) {\n            return srcCoder \u003d\u003d LATIN1\n                ? StringLatin1.indexOf(src, srcCount, tgt, tgtCount, fromIndex)\n                : StringUTF16.indexOf(src, srcCount, tgt, tgtCount, fromIndex);\n        }\n        if (srcCoder \u003d\u003d LATIN1) {    //  \u0026\u0026 tgtCoder \u003d\u003d UTF16\n            return -1;\n        }\n        // srcCoder \u003d\u003d UTF16 \u0026\u0026 tgtCoder \u003d\u003d LATIN1) {\n        return StringUTF16.indexOfLatin1(src, srcCount, tgt, tgtCount, fromIndex);\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of the\n     * specified substring.  The last occurrence of the empty string \"\"\n     * is considered to occur at the index value {@code this.length()}.\n     *\n     * \u003cp\u003eThe returned index is the largest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     * this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str   the substring to search for.\n     * @return  the index of the last occurrence of the specified substring,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int lastIndexOf(String str) {\n        return lastIndexOf(str, length());\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of the\n     * specified substring, searching backward starting at the specified index.\n     *\n     * \u003cp\u003eThe returned index is the largest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     *     k \u003c\u003d Math.min(fromIndex, this.length()) \u0026\u0026\n     *                   this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str         the substring to search for.\n     * @param   fromIndex   the index to start the search from.\n     * @return  the index of the last occurrence of the specified substring,\n     *          searching backward from the specified index,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int lastIndexOf(String str, int fromIndex) {\n        return lastIndexOf(value, coder(), length(), str, fromIndex);\n    }\n\n    /**\n     * Code shared by String and AbstractStringBuilder to do searches. The\n     * source is the character array being searched, and the target\n     * is the string being searched for.\n     *\n     * @param   src         the characters being searched.\n     * @param   srcCoder    coder handles the mapping between bytes/chars\n     * @param   srcCount    count of the source string.\n     * @param   tgt         the characters being searched for.\n     * @param   fromIndex   the index to begin searching from.\n     */\n    static int lastIndexOf(byte[] src, byte srcCoder, int srcCount,\n                           String tgtStr, int fromIndex) {\n        byte[] tgt \u003d tgtStr.value;\n        byte tgtCoder \u003d tgtStr.coder();\n        int tgtCount \u003d tgtStr.length();\n        /*\n         * Check arguments; return immediately where possible. For\n         * consistency, don\u0027t check for null str.\n         */\n        int rightIndex \u003d srcCount - tgtCount;\n        if (fromIndex \u003e rightIndex) {\n            fromIndex \u003d rightIndex;\n        }\n        if (fromIndex \u003c 0) {\n            return -1;\n        }\n        /* Empty string always matches. */\n        if (tgtCount \u003d\u003d 0) {\n            return fromIndex;\n        }\n        if (srcCoder \u003d\u003d tgtCoder) {\n            return srcCoder \u003d\u003d LATIN1\n                ? StringLatin1.lastIndexOf(src, srcCount, tgt, tgtCount, fromIndex)\n                : StringUTF16.lastIndexOf(src, srcCount, tgt, tgtCount, fromIndex);\n        }\n        if (srcCoder \u003d\u003d LATIN1) {    // \u0026\u0026 tgtCoder \u003d\u003d UTF16\n            return -1;\n        }\n        // srcCoder \u003d\u003d UTF16 \u0026\u0026 tgtCoder \u003d\u003d LATIN1\n        return StringUTF16.lastIndexOfLatin1(src, srcCount, tgt, tgtCount, fromIndex);\n    }\n\n    /**\n     * Returns a string that is a substring of this string. The\n     * substring begins with the character at the specified index and\n     * extends to the end of this string. \u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"unhappy\".substring(2) returns \"happy\"\n     * \"Harbison\".substring(3) returns \"bison\"\n     * \"emptiness\".substring(9) returns \"\" (an empty string)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param      beginIndex   the beginning index, inclusive.\n     * @return     the specified substring.\n     * @exception  IndexOutOfBoundsException  if\n     *             {@code beginIndex} is negative or larger than the\n     *             length of this {@code String} object.\n     */\n    public String substring(int beginIndex) {\n        if (beginIndex \u003c 0) {\n            throw new StringIndexOutOfBoundsException(beginIndex);\n        }\n        int subLen \u003d length() - beginIndex;\n        if (subLen \u003c 0) {\n            throw new StringIndexOutOfBoundsException(subLen);\n        }\n        if (beginIndex \u003d\u003d 0) {\n            return this;\n        }\n        return isLatin1() ? StringLatin1.newString(value, beginIndex, subLen)\n                          : StringUTF16.newString(value, beginIndex, subLen);\n    }\n\n    /**\n     * Returns a string that is a substring of this string. The\n     * substring begins at the specified {@code beginIndex} and\n     * extends to the character at index {@code endIndex - 1}.\n     * Thus the length of the substring is {@code endIndex-beginIndex}.\n     * \u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"hamburger\".substring(4, 8) returns \"urge\"\n     * \"smiles\".substring(1, 5) returns \"mile\"\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param      beginIndex   the beginning index, inclusive.\n     * @param      endIndex     the ending index, exclusive.\n     * @return     the specified substring.\n     * @exception  IndexOutOfBoundsException  if the\n     *             {@code beginIndex} is negative, or\n     *             {@code endIndex} is larger than the length of\n     *             this {@code String} object, or\n     *             {@code beginIndex} is larger than\n     *             {@code endIndex}.\n     */\n    public String substring(int beginIndex, int endIndex) {\n        int length \u003d length();\n        checkBoundsBeginEnd(beginIndex, endIndex, length);\n        int subLen \u003d endIndex - beginIndex;\n        if (beginIndex \u003d\u003d 0 \u0026\u0026 endIndex \u003d\u003d length) {\n            return this;\n        }\n        return isLatin1() ? StringLatin1.newString(value, beginIndex, subLen)\n                          : StringUTF16.newString(value, beginIndex, subLen);\n    }\n\n    /**\n     * Returns a character sequence that is a subsequence of this sequence.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * str.subSequence(begin,\u0026nbsp;end)\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * behaves in exactly the same way as the invocation\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * str.substring(begin,\u0026nbsp;end)\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @apiNote\n     * This method is defined so that the {@code String} class can implement\n     * the {@link CharSequence} interface.\n     *\n     * @param   beginIndex   the begin index, inclusive.\n     * @param   endIndex     the end index, exclusive.\n     * @return  the specified subsequence.\n     *\n     * @throws  IndexOutOfBoundsException\n     *          if {@code beginIndex} or {@code endIndex} is negative,\n     *          if {@code endIndex} is greater than {@code length()},\n     *          or if {@code beginIndex} is greater than {@code endIndex}\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public CharSequence subSequence(int beginIndex, int endIndex) {\n        return this.substring(beginIndex, endIndex);\n    }\n\n    /**\n     * Concatenates the specified string to the end of this string.\n     * \u003cp\u003e\n     * If the length of the argument string is {@code 0}, then this\n     * {@code String} object is returned. Otherwise, a\n     * {@code String} object is returned that represents a character\n     * sequence that is the concatenation of the character sequence\n     * represented by this {@code String} object and the character\n     * sequence represented by the argument string.\u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"cares\".concat(\"s\") returns \"caress\"\n     * \"to\".concat(\"get\").concat(\"her\") returns \"together\"\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param   str   the {@code String} that is concatenated to the end\n     *                of this {@code String}.\n     * @return  a string that represents the concatenation of this object\u0027s\n     *          characters followed by the string argument\u0027s characters.\n     */\n    public String concat(String str) {\n        if (str.isEmpty()) {\n            return this;\n        }\n        if (coder() \u003d\u003d str.coder()) {\n            byte[] val \u003d this.value;\n            byte[] oval \u003d str.value;\n            int len \u003d val.length + oval.length;\n            byte[] buf \u003d Arrays.copyOf(val, len);\n            System.arraycopy(oval, 0, buf, val.length, oval.length);\n            return new String(buf, coder);\n        }\n        int len \u003d length();\n        int olen \u003d str.length();\n        byte[] buf \u003d StringUTF16.newBytesFor(len + olen);\n        getBytes(buf, 0, UTF16);\n        str.getBytes(buf, len, UTF16);\n        return new String(buf, UTF16);\n    }\n\n    /**\n     * Returns a string resulting from replacing all occurrences of\n     * {@code oldChar} in this string with {@code newChar}.\n     * \u003cp\u003e\n     * If the character {@code oldChar} does not occur in the\n     * character sequence represented by this {@code String} object,\n     * then a reference to this {@code String} object is returned.\n     * Otherwise, a {@code String} object is returned that\n     * represents a character sequence identical to the character sequence\n     * represented by this {@code String} object, except that every\n     * occurrence of {@code oldChar} is replaced by an occurrence\n     * of {@code newChar}.\n     * \u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"mesquite in your cellar\".replace(\u0027e\u0027, \u0027o\u0027)\n     *         returns \"mosquito in your collar\"\n     * \"the war of baronets\".replace(\u0027r\u0027, \u0027y\u0027)\n     *         returns \"the way of bayonets\"\n     * \"sparring with a purple porpoise\".replace(\u0027p\u0027, \u0027t\u0027)\n     *         returns \"starring with a turtle tortoise\"\n     * \"JonL\".replace(\u0027q\u0027, \u0027x\u0027) returns \"JonL\" (no change)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param   oldChar   the old character.\n     * @param   newChar   the new character.\n     * @return  a string derived from this string by replacing every\n     *          occurrence of {@code oldChar} with {@code newChar}.\n     */\n    public String replace(char oldChar, char newChar) {\n        if (oldChar !\u003d newChar) {\n            String ret \u003d isLatin1() ? StringLatin1.replace(value, oldChar, newChar)\n                                    : StringUTF16.replace(value, oldChar, newChar);\n            if (ret !\u003d null) {\n                return ret;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Tells whether or not this string matches the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr\u003c/i\u003e{@code .matches(}\u003ci\u003eregex\u003c/i\u003e{@code )} yields exactly the\n     * same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * {@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#matches(String,CharSequence)\n     * matches(\u003ci\u003eregex\u003c/i\u003e, \u003ci\u003estr\u003c/i\u003e)}\n     * \u003c/blockquote\u003e\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     *\n     * @return  {@code true} if, and only if, this string matches the\n     *          given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public boolean matches(String regex) {\n        return Pattern.matches(regex, this);\n    }\n\n    /**\n     * Returns true if and only if this string contains the specified\n     * sequence of char values.\n     *\n     * @param s the sequence to search for\n     * @return true if this string contains {@code s}, false otherwise\n     * @since 1.5\n     */\n    public boolean contains(CharSequence s) {\n        return indexOf(s.toString()) \u003e\u003d 0;\n    }\n\n    /**\n     * Replaces the first substring of this string that matches the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e with the\n     * given replacement.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr\u003c/i\u003e{@code .replaceFirst(}\u003ci\u003eregex\u003c/i\u003e{@code ,} \u003ci\u003erepl\u003c/i\u003e{@code )}\n     * yields exactly the same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * \u003ccode\u003e\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n     * java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher}(\u003ci\u003estr\u003c/i\u003e).{@link\n     * java.util.regex.Matcher#replaceFirst replaceFirst}(\u003ci\u003erepl\u003c/i\u003e)\n     * \u003c/code\u003e\n     * \u003c/blockquote\u003e\n     *\n     *\u003cp\u003e\n     * Note that backslashes ({@code \\}) and dollar signs ({@code $}) in the\n     * replacement string may cause the results to be different than if it were\n     * being treated as a literal replacement string; see\n     * {@link java.util.regex.Matcher#replaceFirst}.\n     * Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special\n     * meaning of these characters, if desired.\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     * @param   replacement\n     *          the string to be substituted for the first match\n     *\n     * @return  The resulting {@code String}\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public String replaceFirst(String regex, String replacement) {\n        return Pattern.compile(regex).matcher(this).replaceFirst(replacement);\n    }\n\n    /**\n     * Replaces each substring of this string that matches the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e with the\n     * given replacement.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr\u003c/i\u003e{@code .replaceAll(}\u003ci\u003eregex\u003c/i\u003e{@code ,} \u003ci\u003erepl\u003c/i\u003e{@code )}\n     * yields exactly the same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * \u003ccode\u003e\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n     * java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher}(\u003ci\u003estr\u003c/i\u003e).{@link\n     * java.util.regex.Matcher#replaceAll replaceAll}(\u003ci\u003erepl\u003c/i\u003e)\n     * \u003c/code\u003e\n     * \u003c/blockquote\u003e\n     *\n     *\u003cp\u003e\n     * Note that backslashes ({@code \\}) and dollar signs ({@code $}) in the\n     * replacement string may cause the results to be different than if it were\n     * being treated as a literal replacement string; see\n     * {@link java.util.regex.Matcher#replaceAll Matcher.replaceAll}.\n     * Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special\n     * meaning of these characters, if desired.\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     * @param   replacement\n     *          the string to be substituted for each match\n     *\n     * @return  The resulting {@code String}\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public String replaceAll(String regex, String replacement) {\n        return Pattern.compile(regex).matcher(this).replaceAll(replacement);\n    }\n\n    /**\n     * Replaces each substring of this string that matches the literal target\n     * sequence with the specified literal replacement sequence. The\n     * replacement proceeds from the beginning of the string to the end, for\n     * example, replacing \"aa\" with \"b\" in the string \"aaa\" will result in\n     * \"ba\" rather than \"ab\".\n     *\n     * @param  target The sequence of char values to be replaced\n     * @param  replacement The replacement sequence of char values\n     * @return  The resulting string\n     * @since 1.5\n     */\n    public String replace(CharSequence target, CharSequence replacement) {\n        String tgtStr \u003d target.toString();\n        String replStr \u003d replacement.toString();\n        int j \u003d indexOf(tgtStr);\n        if (j \u003c 0) {\n            return this;\n        }\n        int tgtLen \u003d tgtStr.length();\n        int tgtLen1 \u003d Math.max(tgtLen, 1);\n        int thisLen \u003d length();\n\n        int newLenHint \u003d thisLen - tgtLen + replStr.length();\n        if (newLenHint \u003c 0) {\n            throw new OutOfMemoryError();\n        }\n        StringBuilder sb \u003d new StringBuilder(newLenHint);\n        int i \u003d 0;\n        do {\n            sb.append(this, i, j).append(replStr);\n            i \u003d j + tgtLen;\n        } while (j \u003c thisLen \u0026\u0026 (j \u003d indexOf(tgtStr, j + tgtLen1)) \u003e 0);\n        return sb.append(this, i, thisLen).toString();\n    }\n\n    /**\n     * Splits this string around matches of the given\n     * \u003ca href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n     *\n     * \u003cp\u003e The array returned by this method contains each substring of this\n     * string that is terminated by another substring that matches the given\n     * expression or is terminated by the end of the string.  The substrings in\n     * the array are in the order in which they occur in this string.  If the\n     * expression does not match any part of the input then the resulting array\n     * has just one element, namely this string.\n     *\n     * \u003cp\u003e When there is a positive-width match at the beginning of this\n     * string then an empty leading substring is included at the beginning\n     * of the resulting array. A zero-width match at the beginning however\n     * never produces such empty leading substring.\n     *\n     * \u003cp\u003e The {@code limit} parameter controls the number of times the\n     * pattern is applied and therefore affects the length of the resulting\n     * array.\n     * \u003cul\u003e\n     *    \u003cli\u003e\u003cp\u003e\n     *    If the \u003ci\u003elimit\u003c/i\u003e is positive then the pattern will be applied\n     *    at most \u003ci\u003elimit\u003c/i\u003e\u0026nbsp;-\u0026nbsp;1 times, the array\u0027s length will be\n     *    no greater than \u003ci\u003elimit\u003c/i\u003e, and the array\u0027s last entry will contain\n     *    all input beyond the last matched delimiter.\u003c/p\u003e\u003c/li\u003e\n     *\n     *    \u003cli\u003e\u003cp\u003e\n     *    If the \u003ci\u003elimit\u003c/i\u003e is zero then the pattern will be applied as\n     *    many times as possible, the array can have any length, and trailing\n     *    empty strings will be discarded.\u003c/p\u003e\u003c/li\u003e\n     *\n     *    \u003cli\u003e\u003cp\u003e\n     *    If the \u003ci\u003elimit\u003c/i\u003e is negative then the pattern will be applied\n     *    as many times as possible and the array can have any length.\u003c/p\u003e\u003c/li\u003e\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003e The string {@code \"boo:and:foo\"}, for example, yields the\n     * following results with these parameters:\n     *\n     * \u003cblockquote\u003e\u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eSplit example showing regex, limit, and result\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *     \u003cth scope\u003d\"col\"\u003eRegex\u003c/th\u003e\n     *     \u003cth scope\u003d\"col\"\u003eLimit\u003c/th\u003e\n     *     \u003cth scope\u003d\"col\"\u003eResult\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" rowspan\u003d\"3\" style\u003d\"font-weight:normal\"\u003e:\u003c/th\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e2\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and:foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- : --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e5\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- : --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e-2\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" rowspan\u003d\"3\" style\u003d\"font-weight:normal\"\u003eo\u003c/th\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e5\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\", \"\", \"\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- o --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e-2\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\", \"\", \"\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- o --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e0\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\u003c/blockquote\u003e\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr.\u003c/i\u003e{@code split(}\u003ci\u003eregex\u003c/i\u003e{@code ,}\u0026nbsp;\u003ci\u003en\u003c/i\u003e{@code )}\n     * yields the same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * \u003ccode\u003e\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n     * java.util.regex.Pattern#split(java.lang.CharSequence,int) split}(\u003ci\u003estr\u003c/i\u003e,\u0026nbsp;\u003ci\u003en\u003c/i\u003e)\n     * \u003c/code\u003e\n     * \u003c/blockquote\u003e\n     *\n     *\n     * @param  regex\n     *         the delimiting regular expression\n     *\n     * @param  limit\n     *         the result threshold, as described above\n     *\n     * @return  the array of strings computed by splitting this string\n     *          around matches of the given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public String[] split(String regex, int limit) {\n        /* fastpath if the regex is a\n         (1)one-char String and this character is not one of the\n            RegEx\u0027s meta characters \".$|()[{^?*+\\\\\", or\n         (2)two-char String and the first char is the backslash and\n            the second is not the ascii digit or ascii letter.\n         */\n        char ch \u003d 0;\n        if (((regex.length() \u003d\u003d 1 \u0026\u0026\n             \".$|()[{^?*+\\\\\".indexOf(ch \u003d regex.charAt(0)) \u003d\u003d -1) ||\n             (regex.length() \u003d\u003d 2 \u0026\u0026\n              regex.charAt(0) \u003d\u003d \u0027\\\\\u0027 \u0026\u0026\n              (((ch \u003d regex.charAt(1))-\u00270\u0027)|(\u00279\u0027-ch)) \u003c 0 \u0026\u0026\n              ((ch-\u0027a\u0027)|(\u0027z\u0027-ch)) \u003c 0 \u0026\u0026\n              ((ch-\u0027A\u0027)|(\u0027Z\u0027-ch)) \u003c 0)) \u0026\u0026\n            (ch \u003c Character.MIN_HIGH_SURROGATE ||\n             ch \u003e Character.MAX_LOW_SURROGATE))\n        {\n            int off \u003d 0;\n            int next \u003d 0;\n            boolean limited \u003d limit \u003e 0;\n            ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();\n            while ((next \u003d indexOf(ch, off)) !\u003d -1) {\n                if (!limited || list.size() \u003c limit - 1) {\n                    list.add(substring(off, next));\n                    off \u003d next + 1;\n                } else {    // last one\n                    //assert (list.size() \u003d\u003d limit - 1);\n                    int last \u003d length();\n                    list.add(substring(off, last));\n                    off \u003d last;\n                    break;\n                }\n            }\n            // If no match was found, return this\n            if (off \u003d\u003d 0)\n                return new String[]{this};\n\n            // Add remaining segment\n            if (!limited || list.size() \u003c limit)\n                list.add(substring(off, length()));\n\n            // Construct result\n            int resultSize \u003d list.size();\n            if (limit \u003d\u003d 0) {\n                while (resultSize \u003e 0 \u0026\u0026 list.get(resultSize - 1).isEmpty()) {\n                    resultSize--;\n                }\n            }\n            String[] result \u003d new String[resultSize];\n            return list.subList(0, resultSize).toArray(result);\n        }\n        return Pattern.compile(regex).split(this, limit);\n    }\n\n    /**\n     * Splits this string around matches of the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n     *\n     * \u003cp\u003e This method works as if by invoking the two-argument {@link\n     * #split(String, int) split} method with the given expression and a limit\n     * argument of zero.  Trailing empty strings are therefore not included in\n     * the resulting array.\n     *\n     * \u003cp\u003e The string {@code \"boo:and:foo\"}, for example, yields the following\n     * results with these expressions:\n     *\n     * \u003cblockquote\u003e\u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eSplit examples showing regex and result\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *  \u003cth scope\u003d\"col\"\u003eRegex\u003c/th\u003e\n     *  \u003cth scope\u003d\"col\"\u003eResult\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" style\u003d\"text-weight:normal\"\u003e:\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" style\u003d\"text-weight:normal\"\u003eo\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\u003c/blockquote\u003e\n     *\n     *\n     * @param  regex\n     *         the delimiting regular expression\n     *\n     * @return  the array of strings computed by splitting this string\n     *          around matches of the given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public String[] split(String regex) {\n        return split(regex, 0);\n    }\n\n    /**\n     * Returns a new String composed of copies of the\n     * {@code CharSequence elements} joined together with a copy of\n     * the specified {@code delimiter}.\n     *\n     * \u003cblockquote\u003eFor example,\n     * \u003cpre\u003e{@code\n     *     String message \u003d String.join(\"-\", \"Java\", \"is\", \"cool\");\n     *     // message returned is: \"Java-is-cool\"\n     * }\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * Note that if an element is null, then {@code \"null\"} is added.\n     *\n     * @param  delimiter the delimiter that separates each element\n     * @param  elements the elements to join together.\n     *\n     * @return a new {@code String} that is composed of the {@code elements}\n     *         separated by the {@code delimiter}\n     *\n     * @throws NullPointerException If {@code delimiter} or {@code elements}\n     *         is {@code null}\n     *\n     * @see java.util.StringJoiner\n     * @since 1.8\n     */\n    public static String join(CharSequence delimiter, CharSequence... elements) {\n        Objects.requireNonNull(delimiter);\n        Objects.requireNonNull(elements);\n        // Number of elements not likely worth Arrays.stream overhead.\n        StringJoiner joiner \u003d new StringJoiner(delimiter);\n        for (CharSequence cs: elements) {\n            joiner.add(cs);\n        }\n        return joiner.toString();\n    }\n\n    /**\n     * Returns a new {@code String} composed of copies of the\n     * {@code CharSequence elements} joined together with a copy of the\n     * specified {@code delimiter}.\n     *\n     * \u003cblockquote\u003eFor example,\n     * \u003cpre\u003e{@code\n     *     List\u003cString\u003e strings \u003d List.of(\"Java\", \"is\", \"cool\");\n     *     String message \u003d String.join(\" \", strings);\n     *     //message returned is: \"Java is cool\"\n     *\n     *     Set\u003cString\u003e strings \u003d\n     *         new LinkedHashSet\u003c\u003e(List.of(\"Java\", \"is\", \"very\", \"cool\"));\n     *     String message \u003d String.join(\"-\", strings);\n     *     //message returned is: \"Java-is-very-cool\"\n     * }\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * Note that if an individual element is {@code null}, then {@code \"null\"} is added.\n     *\n     * @param  delimiter a sequence of characters that is used to separate each\n     *         of the {@code elements} in the resulting {@code String}\n     * @param  elements an {@code Iterable} that will have its {@code elements}\n     *         joined together.\n     *\n     * @return a new {@code String} that is composed from the {@code elements}\n     *         argument\n     *\n     * @throws NullPointerException If {@code delimiter} or {@code elements}\n     *         is {@code null}\n     *\n     * @see    #join(CharSequence,CharSequence...)\n     * @see    java.util.StringJoiner\n     * @since 1.8\n     */\n    public static String join(CharSequence delimiter,\n            Iterable\u003c? extends CharSequence\u003e elements) {\n        Objects.requireNonNull(delimiter);\n        Objects.requireNonNull(elements);\n        StringJoiner joiner \u003d new StringJoiner(delimiter);\n        for (CharSequence cs: elements) {\n            joiner.add(cs);\n        }\n        return joiner.toString();\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to lower\n     * case using the rules of the given {@code Locale}.  Case mapping is based\n     * on the Unicode Standard version specified by the {@link java.lang.Character Character}\n     * class. Since case mappings are not always 1:1 char mappings, the resulting\n     * {@code String} may be a different length than the original {@code String}.\n     * \u003cp\u003e\n     * Examples of lowercase  mappings are in the following table:\n     * \u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eLowercase mapping examples showing language code of locale, upper case, lower case, and description\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLanguage Code of Locale\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eUpper Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLower Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eDescription\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0130\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0069\u003c/td\u003e\n     *   \u003ctd\u003ecapital letter I with dot above -\u0026gt; small letter i\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0049\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0131\u003c/td\u003e\n     *   \u003ctd\u003ecapital letter I -\u0026gt; small letter dotless i \u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003eFrench Fries\u003c/th\u003e\n     *   \u003ctd\u003efrench fries\u003c/td\u003e\n     *   \u003ctd\u003elowercased all chars in String\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\n     *       \u0026Iota;\u0026Chi;\u0026Theta;\u0026Upsilon;\u0026Sigma;\u003c/th\u003e\n     *   \u003ctd\u003e\u0026iota;\u0026chi;\u0026theta;\u0026upsilon;\u0026sigma;\u003c/td\u003e\n     *   \u003ctd\u003elowercased all chars in String\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\n     *\n     * @param locale use the case transformation rules for this locale\n     * @return the {@code String}, converted to lowercase.\n     * @see     java.lang.String#toLowerCase()\n     * @see     java.lang.String#toUpperCase()\n     * @see     java.lang.String#toUpperCase(Locale)\n     * @since   1.1\n     */\n    public String toLowerCase(Locale locale) {\n        return isLatin1() ? StringLatin1.toLowerCase(this, value, locale)\n                          : StringUTF16.toLowerCase(this, value, locale);\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to lower\n     * case using the rules of the default locale. This is equivalent to calling\n     * {@code toLowerCase(Locale.getDefault())}.\n     * \u003cp\u003e\n     * \u003cb\u003eNote:\u003c/b\u003e This method is locale sensitive, and may produce unexpected\n     * results if used for strings that are intended to be interpreted locale\n     * independently.\n     * Examples are programming language identifiers, protocol keys, and HTML\n     * tags.\n     * For instance, {@code \"TITLE\".toLowerCase()} in a Turkish locale\n     * returns {@code \"t\\u005Cu0131tle\"}, where \u0027\\u005Cu0131\u0027 is the\n     * LATIN SMALL LETTER DOTLESS I character.\n     * To obtain correct results for locale insensitive strings, use\n     * {@code toLowerCase(Locale.ROOT)}.\n     *\n     * @return  the {@code String}, converted to lowercase.\n     * @see     java.lang.String#toLowerCase(Locale)\n     */\n    public String toLowerCase() {\n        return toLowerCase(Locale.getDefault());\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to upper\n     * case using the rules of the given {@code Locale}. Case mapping is based\n     * on the Unicode Standard version specified by the {@link java.lang.Character Character}\n     * class. Since case mappings are not always 1:1 char mappings, the resulting\n     * {@code String} may be a different length than the original {@code String}.\n     * \u003cp\u003e\n     * Examples of locale-sensitive and 1:M case mappings are in the following table.\n     *\n     * \u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eExamples of locale-sensitive and 1:M case mappings. Shows Language code of locale, lower case, upper case, and description.\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLanguage Code of Locale\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLower Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eUpper Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eDescription\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0069\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0130\u003c/td\u003e\n     *   \u003ctd\u003esmall letter i -\u0026gt; capital letter I with dot above\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0131\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0049\u003c/td\u003e\n     *   \u003ctd\u003esmall letter dotless i -\u0026gt; capital letter I\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u00df\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0053 \u0026#92;u0053\u003c/td\u003e\n     *   \u003ctd\u003esmall letter sharp s -\u0026gt; two letters: SS\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003eFahrvergn\u0026uuml;gen\u003c/th\u003e\n     *   \u003ctd\u003eFAHRVERGN\u0026Uuml;GEN\u003c/td\u003e\n     *   \u003ctd\u003e\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\n     * @param locale use the case transformation rules for this locale\n     * @return the {@code String}, converted to uppercase.\n     * @see     java.lang.String#toUpperCase()\n     * @see     java.lang.String#toLowerCase()\n     * @see     java.lang.String#toLowerCase(Locale)\n     * @since   1.1\n     */\n    public String toUpperCase(Locale locale) {\n        return isLatin1() ? StringLatin1.toUpperCase(this, value, locale)\n                          : StringUTF16.toUpperCase(this, value, locale);\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to upper\n     * case using the rules of the default locale. This method is equivalent to\n     * {@code toUpperCase(Locale.getDefault())}.\n     * \u003cp\u003e\n     * \u003cb\u003eNote:\u003c/b\u003e This method is locale sensitive, and may produce unexpected\n     * results if used for strings that are intended to be interpreted locale\n     * independently.\n     * Examples are programming language identifiers, protocol keys, and HTML\n     * tags.\n     * For instance, {@code \"title\".toUpperCase()} in a Turkish locale\n     * returns {@code \"T\\u005Cu0130TLE\"}, where \u0027\\u005Cu0130\u0027 is the\n     * LATIN CAPITAL LETTER I WITH DOT ABOVE character.\n     * To obtain correct results for locale insensitive strings, use\n     * {@code toUpperCase(Locale.ROOT)}.\n     *\n     * @return  the {@code String}, converted to uppercase.\n     * @see     java.lang.String#toUpperCase(Locale)\n     */\n    public String toUpperCase() {\n        return toUpperCase(Locale.getDefault());\n    }\n\n    /**\n     * Returns a string whose value is this string, with all leading\n     * and trailing space removed, where space is defined\n     * as any character whose codepoint is less than or equal to\n     * {@code \u0027U+0020\u0027} (the space character).\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty character\n     * sequence, or the first and last characters of character sequence\n     * represented by this {@code String} object both have codes\n     * that are not space (as defined above), then a\n     * reference to this {@code String} object is returned.\n     * \u003cp\u003e\n     * Otherwise, if all characters in this string are space (as\n     * defined above), then a  {@code String} object representing an\n     * empty string is returned.\n     * \u003cp\u003e\n     * Otherwise, let \u003ci\u003ek\u003c/i\u003e be the index of the first character in the\n     * string whose code is not a space (as defined above) and let\n     * \u003ci\u003em\u003c/i\u003e be the index of the last character in the string whose code\n     * is not a space (as defined above). A {@code String}\n     * object is returned, representing the substring of this string that\n     * begins with the character at index \u003ci\u003ek\u003c/i\u003e and ends with the\n     * character at index \u003ci\u003em\u003c/i\u003e-that is, the result of\n     * {@code this.substring(k, m + 1)}.\n     * \u003cp\u003e\n     * This method may be used to trim space (as defined above) from\n     * the beginning and end of a string.\n     *\n     * @return  a string whose value is this string, with all leading\n     *          and trailing space removed, or this string if it\n     *          has no leading or trailing space.\n     */\n    public String trim() {\n        String ret \u003d isLatin1() ? StringLatin1.trim(value)\n                                : StringUTF16.trim(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns a string whose value is this string, with all leading\n     * and trailing {@link Character#isWhitespace(int) white space}\n     * removed.\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty string,\n     * or if all code points in this string are\n     * {@link Character#isWhitespace(int) white space}, then an empty string\n     * is returned.\n     * \u003cp\u003e\n     * Otherwise, returns a substring of this string beginning with the first\n     * code point that is not a {@link Character#isWhitespace(int) white space}\n     * up to and including the last code point that is not a\n     * {@link Character#isWhitespace(int) white space}.\n     * \u003cp\u003e\n     * This method may be used to strip\n     * {@link Character#isWhitespace(int) white space} from\n     * the beginning and end of a string.\n     *\n     * @return  a string whose value is this string, with all leading\n     *          and trailing white space removed\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public String strip() {\n        String ret \u003d isLatin1() ? StringLatin1.strip(value)\n                                : StringUTF16.strip(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns a string whose value is this string, with all leading\n     * {@link Character#isWhitespace(int) white space} removed.\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty string,\n     * or if all code points in this string are\n     * {@link Character#isWhitespace(int) white space}, then an empty string\n     * is returned.\n     * \u003cp\u003e\n     * Otherwise, returns a substring of this string beginning with the first\n     * code point that is not a {@link Character#isWhitespace(int) white space}\n     * up to to and including the last code point of this string.\n     * \u003cp\u003e\n     * This method may be used to trim\n     * {@link Character#isWhitespace(int) white space} from\n     * the beginning of a string.\n     *\n     * @return  a string whose value is this string, with all leading white\n     *          space removed\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public String stripLeading() {\n        String ret \u003d isLatin1() ? StringLatin1.stripLeading(value)\n                                : StringUTF16.stripLeading(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns a string whose value is this string, with all trailing\n     * {@link Character#isWhitespace(int) white space} removed.\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty string,\n     * or if all characters in this string are\n     * {@link Character#isWhitespace(int) white space}, then an empty string\n     * is returned.\n     * \u003cp\u003e\n     * Otherwise, returns a substring of this string beginning with the first\n     * code point of this string up to and including the last code point\n     * that is not a {@link Character#isWhitespace(int) white space}.\n     * \u003cp\u003e\n     * This method may be used to trim\n     * {@link Character#isWhitespace(int) white space} from\n     * the end of a string.\n     *\n     * @return  a string whose value is this string, with all trailing white\n     *          space removed\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public String stripTrailing() {\n        String ret \u003d isLatin1() ? StringLatin1.stripTrailing(value)\n                                : StringUTF16.stripTrailing(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns {@code true} if the string is empty or contains only\n     * {@link Character#isWhitespace(int) white space} codepoints,\n     * otherwise {@code false}.\n     *\n     * @return {@code true} if the string is empty or contains only\n     *         {@link Character#isWhitespace(int) white space} codepoints,\n     *         otherwise {@code false}\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public boolean isBlank() {\n        return indexOfNonWhitespace() \u003d\u003d length();\n    }\n\n    private int indexOfNonWhitespace() {\n        if (isLatin1()) {\n            return StringLatin1.indexOfNonWhitespace(value);\n        } else {\n            return StringUTF16.indexOfNonWhitespace(value);\n        }\n    }\n\n    /**\n     * Returns a stream of lines extracted from this string,\n     * separated by line terminators.\n     * \u003cp\u003e\n     * A \u003ci\u003eline terminator\u003c/i\u003e is one of the following:\n     * a line feed character {@code \"\\n\"} (U+000A),\n     * a carriage return character {@code \"\\r\"} (U+000D),\n     * or a carriage return followed immediately by a line feed\n     * {@code \"\\r\\n\"} (U+000D U+000A).\n     * \u003cp\u003e\n     * A \u003ci\u003eline\u003c/i\u003e is either a sequence of zero or more characters\n     * followed by a line terminator, or it is a sequence of one or\n     * more characters followed by the end of the string. A\n     * line does not include the line terminator.\n     * \u003cp\u003e\n     * The stream returned by this method contains the lines from\n     * this string in the order in which they occur.\n     *\n     * @apiNote This definition of \u003ci\u003eline\u003c/i\u003e implies that an empty\n     *          string has zero lines and that there is no empty line\n     *          following a line terminator at the end of a string.\n     *\n     * @implNote This method provides better performance than\n     *           split(\"\\R\") by supplying elements lazily and\n     *           by faster search of new line terminators.\n     *\n     * @return  the stream of lines extracted from this string\n     *\n     * @since 11\n     */\n    public Stream\u003cString\u003e lines() {\n        return isLatin1() ? StringLatin1.lines(value)\n                          : StringUTF16.lines(value);\n    }\n\n    /**\n     * This object (which is already a string!) is itself returned.\n     *\n     * @return  the string itself.\n     */\n    public String toString() {\n        return this;\n    }\n\n    /**\n     * Returns a stream of {@code int} zero-extending the {@code char} values\n     * from this sequence.  Any char which maps to a \u003ca\n     * href\u003d\"{@docRoot}/java.base/java/lang/Character.html#unicode\"\u003esurrogate code\n     * point\u003c/a\u003e is passed through uninterpreted.\n     *\n     * @return an IntStream of char values from this sequence\n     * @since 9\n     */\n    @Override\n    public IntStream chars() {\n        return StreamSupport.intStream(\n            isLatin1() ? new StringLatin1.CharsSpliterator(value, Spliterator.IMMUTABLE)\n                       : new StringUTF16.CharsSpliterator(value, Spliterator.IMMUTABLE),\n            false);\n    }\n\n\n    /**\n     * Returns a stream of code point values from this sequence.  Any surrogate\n     * pairs encountered in the sequence are combined as if by {@linkplain\n     * Character#toCodePoint Character.toCodePoint} and the result is passed\n     * to the stream. Any other code units, including ordinary BMP characters,\n     * unpaired surrogates, and undefined code units, are zero-extended to\n     * {@code int} values which are then passed to the stream.\n     *\n     * @return an IntStream of Unicode code points from this sequence\n     * @since 9\n     */\n    @Override\n    public IntStream codePoints() {\n        return StreamSupport.intStream(\n            isLatin1() ? new StringLatin1.CharsSpliterator(value, Spliterator.IMMUTABLE)\n                       : new StringUTF16.CodePointsSpliterator(value, Spliterator.IMMUTABLE),\n            false);\n    }\n\n    /**\n     * Converts this string to a new character array.\n     *\n     * @return  a newly allocated character array whose length is the length\n     *          of this string and whose contents are initialized to contain\n     *          the character sequence represented by this string.\n     */\n    public char[] toCharArray() {\n        return isLatin1() ? StringLatin1.toChars(value)\n                          : StringUTF16.toChars(value);\n    }\n\n    /**\n     * Returns a formatted string using the specified format string and\n     * arguments.\n     *\n     * \u003cp\u003e The locale always used is the one returned by {@link\n     * java.util.Locale#getDefault(java.util.Locale.Category)\n     * Locale.getDefault(Locale.Category)} with\n     * {@link java.util.Locale.Category#FORMAT FORMAT} category specified.\n     *\n     * @param  format\n     *         A \u003ca href\u003d\"../util/Formatter.html#syntax\"\u003eformat string\u003c/a\u003e\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in the format\n     *         string.  If there are more arguments than format specifiers, the\n     *         extra arguments are ignored.  The number of arguments is\n     *         variable and may be zero.  The maximum number of arguments is\n     *         limited by the maximum dimension of a Java array as defined by\n     *         \u003ccite\u003eThe Java\u0026trade; Virtual Machine Specification\u003c/cite\u003e.\n     *         The behaviour on a\n     *         {@code null} argument depends on the \u003ca\n     *         href\u003d\"../util/Formatter.html#syntax\"\u003econversion\u003c/a\u003e.\n     *\n     * @throws  java.util.IllegalFormatException\n     *          If a format string contains an illegal syntax, a format\n     *          specifier that is incompatible with the given arguments,\n     *          insufficient arguments given the format string, or other\n     *          illegal conditions.  For specification of all possible\n     *          formatting errors, see the \u003ca\n     *          href\u003d\"../util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the\n     *          formatter class specification.\n     *\n     * @return  A formatted string\n     *\n     * @see  java.util.Formatter\n     * @since  1.5\n     */\n    public static String format(String format, Object... args) {\n        return new Formatter().format(format, args).toString();\n    }\n\n    /**\n     * Returns a formatted string using the specified locale, format string,\n     * and arguments.\n     *\n     * @param  l\n     *         The {@linkplain java.util.Locale locale} to apply during\n     *         formatting.  If {@code l} is {@code null} then no localization\n     *         is applied.\n     *\n     * @param  format\n     *         A \u003ca href\u003d\"../util/Formatter.html#syntax\"\u003eformat string\u003c/a\u003e\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in the format\n     *         string.  If there are more arguments than format specifiers, the\n     *         extra arguments are ignored.  The number of arguments is\n     *         variable and may be zero.  The maximum number of arguments is\n     *         limited by the maximum dimension of a Java array as defined by\n     *         \u003ccite\u003eThe Java\u0026trade; Virtual Machine Specification\u003c/cite\u003e.\n     *         The behaviour on a\n     *         {@code null} argument depends on the\n     *         \u003ca href\u003d\"../util/Formatter.html#syntax\"\u003econversion\u003c/a\u003e.\n     *\n     * @throws  java.util.IllegalFormatException\n     *          If a format string contains an illegal syntax, a format\n     *          specifier that is incompatible with the given arguments,\n     *          insufficient arguments given the format string, or other\n     *          illegal conditions.  For specification of all possible\n     *          formatting errors, see the \u003ca\n     *          href\u003d\"../util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the\n     *          formatter class specification\n     *\n     * @return  A formatted string\n     *\n     * @see  java.util.Formatter\n     * @since  1.5\n     */\n    public static String format(Locale l, String format, Object... args) {\n        return new Formatter(l).format(format, args).toString();\n    }\n\n    /**\n     * Returns the string representation of the {@code Object} argument.\n     *\n     * @param   obj   an {@code Object}.\n     * @return  if the argument is {@code null}, then a string equal to\n     *          {@code \"null\"}; otherwise, the value of\n     *          {@code obj.toString()} is returned.\n     * @see     java.lang.Object#toString()\n     */\n    public static String valueOf(Object obj) {\n        return (obj \u003d\u003d null) ? \"null\" : obj.toString();\n    }\n\n    /**\n     * Returns the string representation of the {@code char} array\n     * argument. The contents of the character array are copied; subsequent\n     * modification of the character array does not affect the returned\n     * string.\n     *\n     * @param   data     the character array.\n     * @return  a {@code String} that contains the characters of the\n     *          character array.\n     */\n    public static String valueOf(char data[]) {\n        return new String(data);\n    }\n\n    /**\n     * Returns the string representation of a specific subarray of the\n     * {@code char} array argument.\n     * \u003cp\u003e\n     * The {@code offset} argument is the index of the first\n     * character of the subarray. The {@code count} argument\n     * specifies the length of the subarray. The contents of the subarray\n     * are copied; subsequent modification of the character array does not\n     * affect the returned string.\n     *\n     * @param   data     the character array.\n     * @param   offset   initial offset of the subarray.\n     * @param   count    length of the subarray.\n     * @return  a {@code String} that contains the characters of the\n     *          specified subarray of the character array.\n     * @exception IndexOutOfBoundsException if {@code offset} is\n     *          negative, or {@code count} is negative, or\n     *          {@code offset+count} is larger than\n     *          {@code data.length}.\n     */\n    public static String valueOf(char data[], int offset, int count) {\n        return new String(data, offset, count);\n    }\n\n    /**\n     * Equivalent to {@link #valueOf(char[], int, int)}.\n     *\n     * @param   data     the character array.\n     * @param   offset   initial offset of the subarray.\n     * @param   count    length of the subarray.\n     * @return  a {@code String} that contains the characters of the\n     *          specified subarray of the character array.\n     * @exception IndexOutOfBoundsException if {@code offset} is\n     *          negative, or {@code count} is negative, or\n     *          {@code offset+count} is larger than\n     *          {@code data.length}.\n     */\n    public static String copyValueOf(char data[], int offset, int count) {\n        return new String(data, offset, count);\n    }\n\n    /**\n     * Equivalent to {@link #valueOf(char[])}.\n     *\n     * @param   data   the character array.\n     * @return  a {@code String} that contains the characters of the\n     *          character array.\n     */\n    public static String copyValueOf(char data[]) {\n        return new String(data);\n    }\n\n    /**\n     * Returns the string representation of the {@code boolean} argument.\n     *\n     * @param   b   a {@code boolean}.\n     * @return  if the argument is {@code true}, a string equal to\n     *          {@code \"true\"} is returned; otherwise, a string equal to\n     *          {@code \"false\"} is returned.\n     */\n    public static String valueOf(boolean b) {\n        return b ? \"true\" : \"false\";\n    }\n\n    /**\n     * Returns the string representation of the {@code char}\n     * argument.\n     *\n     * @param   c   a {@code char}.\n     * @return  a string of length {@code 1} containing\n     *          as its single character the argument {@code c}.\n     */\n    public static String valueOf(char c) {\n        if (COMPACT_STRINGS \u0026\u0026 StringLatin1.canEncode(c)) {\n            return new String(StringLatin1.toBytes(c), LATIN1);\n        }\n        return new String(StringUTF16.toBytes(c), UTF16);\n    }\n\n    /**\n     * Returns the string representation of the {@code int} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Integer.toString} method of one argument.\n     *\n     * @param   i   an {@code int}.\n     * @return  a string representation of the {@code int} argument.\n     * @see     java.lang.Integer#toString(int, int)\n     */\n    public static String valueOf(int i) {\n        return Integer.toString(i);\n    }\n\n    /**\n     * Returns the string representation of the {@code long} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Long.toString} method of one argument.\n     *\n     * @param   l   a {@code long}.\n     * @return  a string representation of the {@code long} argument.\n     * @see     java.lang.Long#toString(long)\n     */\n    public static String valueOf(long l) {\n        return Long.toString(l);\n    }\n\n    /**\n     * Returns the string representation of the {@code float} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Float.toString} method of one argument.\n     *\n     * @param   f   a {@code float}.\n     * @return  a string representation of the {@code float} argument.\n     * @see     java.lang.Float#toString(float)\n     */\n    public static String valueOf(float f) {\n        return Float.toString(f);\n    }\n\n    /**\n     * Returns the string representation of the {@code double} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Double.toString} method of one argument.\n     *\n     * @param   d   a {@code double}.\n     * @return  a  string representation of the {@code double} argument.\n     * @see     java.lang.Double#toString(double)\n     */\n    public static String valueOf(double d) {\n        return Double.toString(d);\n    }\n\n    /**\n     * Returns a canonical representation for the string object.\n     * \u003cp\u003e\n     * A pool of strings, initially empty, is maintained privately by the\n     * class {@code String}.\n     * \u003cp\u003e\n     * When the intern method is invoked, if the pool already contains a\n     * string equal to this {@code String} object as determined by\n     * the {@link #equals(Object)} method, then the string from the pool is\n     * returned. Otherwise, this {@code String} object is added to the\n     * pool and a reference to this {@code String} object is returned.\n     * \u003cp\u003e\n     * It follows that for any two strings {@code s} and {@code t},\n     * {@code s.intern() \u003d\u003d t.intern()} is {@code true}\n     * if and only if {@code s.equals(t)} is {@code true}.\n     * \u003cp\u003e\n     * All literal strings and string-valued constant expressions are\n     * interned. String literals are defined in section 3.10.5 of the\n     * \u003ccite\u003eThe Java\u0026trade; Language Specification\u003c/cite\u003e.\n     *\n     * @return  a string that has the same contents as this string, but is\n     *          guaranteed to be from a pool of unique strings.\n     * @jls 3.10.5 String Literals\n     */\n    public native String intern();\n\n    /**\n     * Returns a string whose value is the concatenation of this\n     * string repeated {@code count} times.\n     * \u003cp\u003e\n     * If this string is empty or count is zero then the empty\n     * string is returned.\n     *\n     * @param   count number of times to repeat\n     *\n     * @return  A string composed of this string repeated\n     *          {@code count} times or the empty string if this\n     *          string is empty or count is zero\n     *\n     * @throws  IllegalArgumentException if the {@code count} is\n     *          negative.\n     *\n     * @since 11\n     */\n    public String repeat(int count) {\n        if (count \u003c 0) {\n            throw new IllegalArgumentException(\"count is negative: \" + count);\n        }\n        if (count \u003d\u003d 1) {\n            return this;\n        }\n        final int len \u003d value.length;\n        if (len \u003d\u003d 0 || count \u003d\u003d 0) {\n            return \"\";\n        }\n        if (len \u003d\u003d 1) {\n            final byte[] single \u003d new byte[count];\n            Arrays.fill(single, value[0]);\n            return new String(single, coder);\n        }\n        if (Integer.MAX_VALUE / count \u003c len) {\n            throw new OutOfMemoryError(\"Repeating \" + len + \" bytes String \" + count +\n                    \" times will produce a String exceeding maximum size.\");\n        }\n        final int limit \u003d len * count;\n        final byte[] multiple \u003d new byte[limit];\n        System.arraycopy(value, 0, multiple, 0, len);\n        int copied \u003d len;\n        for (; copied \u003c limit - copied; copied \u003c\u003c\u003d 1) {\n            System.arraycopy(multiple, 0, multiple, copied, copied);\n        }\n        System.arraycopy(multiple, 0, multiple, copied, limit - copied);\n        return new String(multiple, coder);\n    }\n\n    ////////////////////////////////////////////////////////////////\n\n    /**\n     * Copy character bytes from this string into dst starting at dstBegin.\n     * This method doesn\u0027t perform any range checking.\n     *\n     * Invoker guarantees: dst is in UTF16 (inflate itself for asb), if two\n     * coders are different, and dst is big enough (range check)\n     *\n     * @param dstBegin  the char index, not offset of byte[]\n     * @param coder     the coder of dst[]\n     */\n    void getBytes(byte dst[], int dstBegin, byte coder) {\n        if (coder() \u003d\u003d coder) {\n            System.arraycopy(value, 0, dst, dstBegin \u003c\u003c coder, value.length);\n        } else {    // this.coder \u003d\u003d LATIN \u0026\u0026 coder \u003d\u003d UTF16\n            StringLatin1.inflate(value, 0, dst, dstBegin, value.length);\n        }\n    }\n\n    /*\n     * Package private constructor. Trailing Void argument is there for\n     * disambiguating it against other (public) constructors.\n     *\n     * Stores the char[] value into a byte[] that each byte represents\n     * the8 low-order bits of the corresponding character, if the char[]\n     * contains only latin1 character. Or a byte[] that stores all\n     * characters in their byte sequences defined by the {@code StringUTF16}.\n     */\n    String(char[] value, int off, int len, Void sig) {\n        if (len \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n            return;\n        }\n        if (COMPACT_STRINGS) {\n            byte[] val \u003d StringUTF16.compress(value, off, len);\n            if (val !\u003d null) {\n                this.value \u003d val;\n                this.coder \u003d LATIN1;\n                return;\n            }\n        }\n        this.coder \u003d UTF16;\n        this.value \u003d StringUTF16.toBytes(value, off, len);\n    }\n\n    /*\n     * Package private constructor. Trailing Void argument is there for\n     * disambiguating it against other (public) constructors.\n     */\n    String(AbstractStringBuilder asb, Void sig) {\n        byte[] val \u003d asb.getValue();\n        int length \u003d asb.length();\n        if (asb.isLatin1()) {\n            this.coder \u003d LATIN1;\n            this.value \u003d Arrays.copyOfRange(val, 0, length);\n        } else {\n            if (COMPACT_STRINGS) {\n                byte[] buf \u003d StringUTF16.compress(val, 0, length);\n                if (buf !\u003d null) {\n                    this.coder \u003d LATIN1;\n                    this.value \u003d buf;\n                    return;\n                }\n            }\n            this.coder \u003d UTF16;\n            this.value \u003d Arrays.copyOfRange(val, 0, length \u003c\u003c 1);\n        }\n    }\n\n   /*\n    * Package private constructor which shares value array for speed.\n    */\n    String(byte[] value, byte coder) {\n        this.value \u003d value;\n        this.coder \u003d coder;\n    }\n\n    byte coder() {\n        return COMPACT_STRINGS ? coder : UTF16;\n    }\n\n    byte[] value() {\n        return value;\n    }\n\n    private boolean isLatin1() {\n        return COMPACT_STRINGS \u0026\u0026 coder \u003d\u003d LATIN1;\n    }\n\n    @Native static final byte LATIN1 \u003d 0;\n    @Native static final byte UTF16  \u003d 1;\n\n    /*\n     * StringIndexOutOfBoundsException  if {@code index} is\n     * negative or greater than or equal to {@code length}.\n     */\n    static void checkIndex(int index, int length) {\n        if (index \u003c 0 || index \u003e\u003d length) {\n            throw new StringIndexOutOfBoundsException(\"index \" + index +\n                                                      \",length \" + length);\n        }\n    }\n\n    /*\n     * StringIndexOutOfBoundsException  if {@code offset}\n     * is negative or greater than {@code length}.\n     */\n    static void checkOffset(int offset, int length) {\n        if (offset \u003c 0 || offset \u003e length) {\n            throw new StringIndexOutOfBoundsException(\"offset \" + offset +\n                                                      \",length \" + length);\n        }\n    }\n\n    /*\n     * Check {@code offset}, {@code count} against {@code 0} and {@code length}\n     * bounds.\n     *\n     * @throws  StringIndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative,\n     *          or {@code offset} is greater than {@code length - count}\n     */\n    static void checkBoundsOffCount(int offset, int count, int length) {\n        if (offset \u003c 0 || count \u003c 0 || offset \u003e length - count) {\n            throw new StringIndexOutOfBoundsException(\n                \"offset \" + offset + \", count \" + count + \", length \" + length);\n        }\n    }\n\n    /*\n     * Check {@code begin}, {@code end} against {@code 0} and {@code length}\n     * bounds.\n     *\n     * @throws  StringIndexOutOfBoundsException\n     *          If {@code begin} is negative, {@code begin} is greater than\n     *          {@code end}, or {@code end} is greater than {@code length}.\n     */\n    static void checkBoundsBeginEnd(int begin, int end, int length) {\n        if (begin \u003c 0 || begin \u003e end || end \u003e length) {\n            throw new StringIndexOutOfBoundsException(\n                \"begin \" + begin + \", end \" + end + \", length \" + length);\n        }\n    }\n\n    /**\n     * Returns the string representation of the {@code codePoint}\n     * argument.\n     *\n     * @param   codePoint a {@code codePoint}.\n     * @return  a string of length {@code 1} or {@code 2} containing\n     *          as its single character the argument {@code codePoint}.\n     * @throws IllegalArgumentException if the specified\n     *          {@code codePoint} is not a {@linkplain Character#isValidCodePoint\n     *          valid Unicode code point}.\n     */\n    static String valueOfCodePoint(int codePoint) {\n        if (COMPACT_STRINGS \u0026\u0026 StringLatin1.canEncode(codePoint)) {\n            return new String(StringLatin1.toBytes((char)codePoint), LATIN1);\n        } else if (Character.isBmpCodePoint(codePoint)) {\n            return new String(StringUTF16.toBytes((char)codePoint), UTF16);\n        } else if (Character.isSupplementaryCodePoint(codePoint)) {\n            return new String(StringUTF16.toBytesSupplementary(codePoint), UTF16);\n        }\n\n        throw new IllegalArgumentException(\n            format(\"Not a valid Unicode code point: 0x%X\", codePoint));\n    }\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor20.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:339)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

Jan. 16, 2024 11:36:19 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.base/java/lang/String.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor22.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:358)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

2024.01.16 11:36:20 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java

Uri: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:703)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	jdk.internal.reflect.GeneratedMethodAccessor21.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 16, 2024 11:36:20 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.base/java/lang/String.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 1994, 2018, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.lang;\n\nimport java.io.ObjectStreamField;\nimport java.io.UnsupportedEncodingException;\nimport java.lang.annotation.Native;\nimport java.nio.charset.Charset;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Formatter;\nimport java.util.Locale;\nimport java.util.Objects;\nimport java.util.Spliterator;\nimport java.util.StringJoiner;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport java.util.stream.IntStream;\nimport java.util.stream.Stream;\nimport java.util.stream.StreamSupport;\nimport jdk.internal.HotSpotIntrinsicCandidate;\nimport jdk.internal.vm.annotation.Stable;\n\n/**\n * The {@code String} class represents character strings. All\n * string literals in Java programs, such as {@code \"abc\"}, are\n * implemented as instances of this class.\n * \u003cp\u003e\n * Strings are constant; their values cannot be changed after they\n * are created. String buffers support mutable strings.\n * Because String objects are immutable they can be shared. For example:\n * \u003cblockquote\u003e\u003cpre\u003e\n *     String str \u003d \"abc\";\n * \u003c/pre\u003e\u003c/blockquote\u003e\u003cp\u003e\n * is equivalent to:\n * \u003cblockquote\u003e\u003cpre\u003e\n *     char data[] \u003d {\u0027a\u0027, \u0027b\u0027, \u0027c\u0027};\n *     String str \u003d new String(data);\n * \u003c/pre\u003e\u003c/blockquote\u003e\u003cp\u003e\n * Here are some more examples of how strings can be used:\n * \u003cblockquote\u003e\u003cpre\u003e\n *     System.out.println(\"abc\");\n *     String cde \u003d \"cde\";\n *     System.out.println(\"abc\" + cde);\n *     String c \u003d \"abc\".substring(2,3);\n *     String d \u003d cde.substring(1, 2);\n * \u003c/pre\u003e\u003c/blockquote\u003e\n * \u003cp\u003e\n * The class {@code String} includes methods for examining\n * individual characters of the sequence, for comparing strings, for\n * searching strings, for extracting substrings, and for creating a\n * copy of a string with all characters translated to uppercase or to\n * lowercase. Case mapping is based on the Unicode Standard version\n * specified by the {@link java.lang.Character Character} class.\n * \u003cp\u003e\n * The Java language provides special support for the string\n * concatenation operator (\u0026nbsp;+\u0026nbsp;), and for conversion of\n * other objects to strings. For additional information on string\n * concatenation and conversion, see \u003ci\u003eThe Java\u0026trade; Language Specification\u003c/i\u003e.\n *\n * \u003cp\u003e Unless otherwise noted, passing a {@code null} argument to a constructor\n * or method in this class will cause a {@link NullPointerException} to be\n * thrown.\n *\n * \u003cp\u003eA {@code String} represents a string in the UTF-16 format\n * in which \u003cem\u003esupplementary characters\u003c/em\u003e are represented by \u003cem\u003esurrogate\n * pairs\u003c/em\u003e (see the section \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode\n * Character Representations\u003c/a\u003e in the {@code Character} class for\n * more information).\n * Index values refer to {@code char} code units, so a supplementary\n * character uses two positions in a {@code String}.\n * \u003cp\u003eThe {@code String} class provides methods for dealing with\n * Unicode code points (i.e., characters), in addition to those for\n * dealing with Unicode code units (i.e., {@code char} values).\n *\n * \u003cp\u003eUnless otherwise noted, methods for comparing Strings do not take locale\n * into account.  The {@link java.text.Collator} class provides methods for\n * finer-grain, locale-sensitive String comparison.\n *\n * @implNote The implementation of the string concatenation operator is left to\n * the discretion of a Java compiler, as long as the compiler ultimately conforms\n * to \u003ci\u003eThe Java\u0026trade; Language Specification\u003c/i\u003e. For example, the {@code javac} compiler\n * may implement the operator with {@code StringBuffer}, {@code StringBuilder},\n * or {@code java.lang.invoke.StringConcatFactory} depending on the JDK version. The\n * implementation of string conversion is typically through the method {@code toString},\n * defined by {@code Object} and inherited by all classes in Java.\n *\n * @author  Lee Boynton\n * @author  Arthur van Hoff\n * @author  Martin Buchholz\n * @author  Ulf Zibis\n * @see     java.lang.Object#toString()\n * @see     java.lang.StringBuffer\n * @see     java.lang.StringBuilder\n * @see     java.nio.charset.Charset\n * @since   1.0\n * @jls     15.18.1 String Concatenation Operator +\n */\n\npublic final class String\n    implements java.io.Serializable, Comparable\u003cString\u003e, CharSequence {\n\n    /**\n     * The value is used for character storage.\n     *\n     * @implNote This field is trusted by the VM, and is a subject to\n     * constant folding if String instance is constant. Overwriting this\n     * field after construction will cause problems.\n     *\n     * Additionally, it is marked with {@link Stable} to trust the contents\n     * of the array. No other facility in JDK provides this functionality (yet).\n     * {@link Stable} is safe here, because value is never null.\n     */\n    @Stable\n    private final byte[] value;\n\n    /**\n     * The identifier of the encoding used to encode the bytes in\n     * {@code value}. The supported values in this implementation are\n     *\n     * LATIN1\n     * UTF16\n     *\n     * @implNote This field is trusted by the VM, and is a subject to\n     * constant folding if String instance is constant. Overwriting this\n     * field after construction will cause problems.\n     */\n    private final byte coder;\n\n    /** Cache the hash code for the string */\n    private int hash; // Default to 0\n\n    /** use serialVersionUID from JDK 1.0.2 for interoperability */\n    private static final long serialVersionUID \u003d -6849794470754667710L;\n\n    /**\n     * If String compaction is disabled, the bytes in {@code value} are\n     * always encoded in UTF16.\n     *\n     * For methods with several possible implementation paths, when String\n     * compaction is disabled, only one code path is taken.\n     *\n     * The instance field value is generally opaque to optimizing JIT\n     * compilers. Therefore, in performance-sensitive place, an explicit\n     * check of the static boolean {@code COMPACT_STRINGS} is done first\n     * before checking the {@code coder} field since the static boolean\n     * {@code COMPACT_STRINGS} would be constant folded away by an\n     * optimizing JIT compiler. The idioms for these cases are as follows.\n     *\n     * For code such as:\n     *\n     *    if (coder \u003d\u003d LATIN1) { ... }\n     *\n     * can be written more optimally as\n     *\n     *    if (coder() \u003d\u003d LATIN1) { ... }\n     *\n     * or:\n     *\n     *    if (COMPACT_STRINGS \u0026\u0026 coder \u003d\u003d LATIN1) { ... }\n     *\n     * An optimizing JIT compiler can fold the above conditional as:\n     *\n     *    COMPACT_STRINGS \u003d\u003d true  \u003d\u003e if (coder \u003d\u003d LATIN1) { ... }\n     *    COMPACT_STRINGS \u003d\u003d false \u003d\u003e if (false)           { ... }\n     *\n     * @implNote\n     * The actual value for this field is injected by JVM. The static\n     * initialization block is used to set the value here to communicate\n     * that this static final field is not statically foldable, and to\n     * avoid any possible circular dependency during vm initialization.\n     */\n    static final boolean COMPACT_STRINGS;\n\n    static {\n        COMPACT_STRINGS \u003d true;\n    }\n\n    /**\n     * Class String is special cased within the Serialization Stream Protocol.\n     *\n     * A String instance is written into an ObjectOutputStream according to\n     * \u003ca href\u003d\"{@docRoot}/../specs/serialization/protocol.html#stream-elements\"\u003e\n     * Object Serialization Specification, Section 6.2, \"Stream Elements\"\u003c/a\u003e\n     */\n    private static final ObjectStreamField[] serialPersistentFields \u003d\n        new ObjectStreamField[0];\n\n    /**\n     * Initializes a newly created {@code String} object so that it represents\n     * an empty character sequence.  Note that use of this constructor is\n     * unnecessary since Strings are immutable.\n     */\n    public String() {\n        this.value \u003d \"\".value;\n        this.coder \u003d \"\".coder;\n    }\n\n    /**\n     * Initializes a newly created {@code String} object so that it represents\n     * the same sequence of characters as the argument; in other words, the\n     * newly created string is a copy of the argument string. Unless an\n     * explicit copy of {@code original} is needed, use of this constructor is\n     * unnecessary since Strings are immutable.\n     *\n     * @param  original\n     *         A {@code String}\n     */\n    @HotSpotIntrinsicCandidate\n    public String(String original) {\n        this.value \u003d original.value;\n        this.coder \u003d original.coder;\n        this.hash \u003d original.hash;\n    }\n\n    /**\n     * Allocates a new {@code String} so that it represents the sequence of\n     * characters currently contained in the character array argument. The\n     * contents of the character array are copied; subsequent modification of\n     * the character array does not affect the newly created string.\n     *\n     * @param  value\n     *         The initial value of the string\n     */\n    public String(char value[]) {\n        this(value, 0, value.length, null);\n    }\n\n    /**\n     * Allocates a new {@code String} that contains characters from a subarray\n     * of the character array argument. The {@code offset} argument is the\n     * index of the first character of the subarray and the {@code count}\n     * argument specifies the length of the subarray. The contents of the\n     * subarray are copied; subsequent modification of the character array does\n     * not affect the newly created string.\n     *\n     * @param  value\n     *         Array that is the source of characters\n     *\n     * @param  offset\n     *         The initial offset\n     *\n     * @param  count\n     *         The length\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative, or\n     *          {@code offset} is greater than {@code value.length - count}\n     */\n    public String(char value[], int offset, int count) {\n        this(value, offset, count, rangeCheck(value, offset, count));\n    }\n\n    private static Void rangeCheck(char[] value, int offset, int count) {\n        checkBoundsOffCount(offset, count, value.length);\n        return null;\n    }\n\n    /**\n     * Allocates a new {@code String} that contains characters from a subarray\n     * of the \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode code point\u003c/a\u003e array\n     * argument.  The {@code offset} argument is the index of the first code\n     * point of the subarray and the {@code count} argument specifies the\n     * length of the subarray.  The contents of the subarray are converted to\n     * {@code char}s; subsequent modification of the {@code int} array does not\n     * affect the newly created string.\n     *\n     * @param  codePoints\n     *         Array that is the source of Unicode code points\n     *\n     * @param  offset\n     *         The initial offset\n     *\n     * @param  count\n     *         The length\n     *\n     * @throws  IllegalArgumentException\n     *          If any invalid Unicode code point is found in {@code\n     *          codePoints}\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative, or\n     *          {@code offset} is greater than {@code codePoints.length - count}\n     *\n     * @since  1.5\n     */\n    public String(int[] codePoints, int offset, int count) {\n        checkBoundsOffCount(offset, count, codePoints.length);\n        if (count \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n            return;\n        }\n        if (COMPACT_STRINGS) {\n            byte[] val \u003d StringLatin1.toBytes(codePoints, offset, count);\n            if (val !\u003d null) {\n                this.coder \u003d LATIN1;\n                this.value \u003d val;\n                return;\n            }\n        }\n        this.coder \u003d UTF16;\n        this.value \u003d StringUTF16.toBytes(codePoints, offset, count);\n    }\n\n    /**\n     * Allocates a new {@code String} constructed from a subarray of an array\n     * of 8-bit integer values.\n     *\n     * \u003cp\u003e The {@code offset} argument is the index of the first byte of the\n     * subarray, and the {@code count} argument specifies the length of the\n     * subarray.\n     *\n     * \u003cp\u003e Each {@code byte} in the subarray is converted to a {@code char} as\n     * specified in the {@link #String(byte[],int) String(byte[],int)} constructor.\n     *\n     * @deprecated This method does not properly convert bytes into characters.\n     * As of JDK\u0026nbsp;1.1, the preferred way to do this is via the\n     * {@code String} constructors that take a {@link\n     * java.nio.charset.Charset}, charset name, or that use the platform\u0027s\n     * default charset.\n     *\n     * @param  ascii\n     *         The bytes to be converted to characters\n     *\n     * @param  hibyte\n     *         The top 8 bits of each 16-bit Unicode code unit\n     *\n     * @param  offset\n     *         The initial offset\n     * @param  count\n     *         The length\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative, or\n     *          {@code offset} is greater than {@code ascii.length - count}\n     *\n     * @see  #String(byte[], int)\n     * @see  #String(byte[], int, int, java.lang.String)\n     * @see  #String(byte[], int, int, java.nio.charset.Charset)\n     * @see  #String(byte[], int, int)\n     * @see  #String(byte[], java.lang.String)\n     * @see  #String(byte[], java.nio.charset.Charset)\n     * @see  #String(byte[])\n     */\n    @Deprecated(since\u003d\"1.1\")\n    public String(byte ascii[], int hibyte, int offset, int count) {\n        checkBoundsOffCount(offset, count, ascii.length);\n        if (count \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n            return;\n        }\n        if (COMPACT_STRINGS \u0026\u0026 (byte)hibyte \u003d\u003d 0) {\n            this.value \u003d Arrays.copyOfRange(ascii, offset, offset + count);\n            this.coder \u003d LATIN1;\n        } else {\n            hibyte \u003c\u003c\u003d 8;\n            byte[] val \u003d StringUTF16.newBytesFor(count);\n            for (int i \u003d 0; i \u003c count; i++) {\n                StringUTF16.putChar(val, i, hibyte | (ascii[offset++] \u0026 0xff));\n            }\n            this.value \u003d val;\n            this.coder \u003d UTF16;\n        }\n    }\n\n    /**\n     * Allocates a new {@code String} containing characters constructed from\n     * an array of 8-bit integer values. Each character \u003ci\u003ec\u003c/i\u003e in the\n     * resulting string is constructed from the corresponding component\n     * \u003ci\u003eb\u003c/i\u003e in the byte array such that:\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     *     \u003cb\u003e\u003ci\u003ec\u003c/i\u003e\u003c/b\u003e \u003d\u003d (char)(((hibyte \u0026amp; 0xff) \u0026lt;\u0026lt; 8)\n     *                         | (\u003cb\u003e\u003ci\u003eb\u003c/i\u003e\u003c/b\u003e \u0026amp; 0xff))\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @deprecated  This method does not properly convert bytes into\n     * characters.  As of JDK\u0026nbsp;1.1, the preferred way to do this is via the\n     * {@code String} constructors that take a {@link\n     * java.nio.charset.Charset}, charset name, or that use the platform\u0027s\n     * default charset.\n     *\n     * @param  ascii\n     *         The bytes to be converted to characters\n     *\n     * @param  hibyte\n     *         The top 8 bits of each 16-bit Unicode code unit\n     *\n     * @see  #String(byte[], int, int, java.lang.String)\n     * @see  #String(byte[], int, int, java.nio.charset.Charset)\n     * @see  #String(byte[], int, int)\n     * @see  #String(byte[], java.lang.String)\n     * @see  #String(byte[], java.nio.charset.Charset)\n     * @see  #String(byte[])\n     */\n    @Deprecated(since\u003d\"1.1\")\n    public String(byte ascii[], int hibyte) {\n        this(ascii, hibyte, 0, ascii.length);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the specified charset.  The length of the new {@code String}\n     * is a function of the charset, and hence may not be equal to the length\n     * of the subarray.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code length} is negative, or\n     *          {@code offset} is greater than {@code bytes.length - length}\n     *\n     * @since  1.1\n     */\n    public String(byte bytes[], int offset, int length, String charsetName)\n            throws UnsupportedEncodingException {\n        if (charsetName \u003d\u003d null)\n            throw new NullPointerException(\"charsetName\");\n        checkBoundsOffCount(offset, length, bytes.length);\n        StringCoding.Result ret \u003d\n            StringCoding.decode(charsetName, bytes, offset, length);\n        this.value \u003d ret.value;\n        this.coder \u003d ret.coder;\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the specified {@linkplain java.nio.charset.Charset charset}.\n     * The length of the new {@code String} is a function of the charset, and\n     * hence may not be equal to the length of the subarray.\n     *\n     * \u003cp\u003e This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\u0027s default replacement string.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset charset} to be used to\n     *         decode the {@code bytes}\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code length} is negative, or\n     *          {@code offset} is greater than {@code bytes.length - length}\n     *\n     * @since  1.6\n     */\n    public String(byte bytes[], int offset, int length, Charset charset) {\n        if (charset \u003d\u003d null)\n            throw new NullPointerException(\"charset\");\n        checkBoundsOffCount(offset, length, bytes.length);\n        StringCoding.Result ret \u003d\n            StringCoding.decode(charset, bytes, offset, length);\n        this.value \u003d ret.value;\n        this.coder \u003d ret.coder;\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of bytes\n     * using the specified {@linkplain java.nio.charset.Charset charset}.  The\n     * length of the new {@code String} is a function of the charset, and hence\n     * may not be equal to the length of the byte array.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  1.1\n     */\n    public String(byte bytes[], String charsetName)\n            throws UnsupportedEncodingException {\n        this(bytes, 0, bytes.length, charsetName);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of\n     * bytes using the specified {@linkplain java.nio.charset.Charset charset}.\n     * The length of the new {@code String} is a function of the charset, and\n     * hence may not be equal to the length of the byte array.\n     *\n     * \u003cp\u003e This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\u0027s default replacement string.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset charset} to be used to\n     *         decode the {@code bytes}\n     *\n     * @since  1.6\n     */\n    public String(byte bytes[], Charset charset) {\n        this(bytes, 0, bytes.length, charset);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the platform\u0027s default charset.  The length of the new\n     * {@code String} is a function of the charset, and hence may not be equal\n     * to the length of the subarray.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code length} is negative, or\n     *          {@code offset} is greater than {@code bytes.length - length}\n     *\n     * @since  1.1\n     */\n    public String(byte bytes[], int offset, int length) {\n        checkBoundsOffCount(offset, length, bytes.length);\n        StringCoding.Result ret \u003d StringCoding.decode(bytes, offset, length);\n        this.value \u003d ret.value;\n        this.coder \u003d ret.coder;\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of bytes\n     * using the platform\u0027s default charset.  The length of the new {@code\n     * String} is a function of the charset, and hence may not be equal to the\n     * length of the byte array.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @since  1.1\n     */\n    public String(byte[] bytes) {\n        this(bytes, 0, bytes.length);\n    }\n\n    /**\n     * Allocates a new string that contains the sequence of characters\n     * currently contained in the string buffer argument. The contents of the\n     * string buffer are copied; subsequent modification of the string buffer\n     * does not affect the newly created string.\n     *\n     * @param  buffer\n     *         A {@code StringBuffer}\n     */\n    public String(StringBuffer buffer) {\n        this(buffer.toString());\n    }\n\n    /**\n     * Allocates a new string that contains the sequence of characters\n     * currently contained in the string builder argument. The contents of the\n     * string builder are copied; subsequent modification of the string builder\n     * does not affect the newly created string.\n     *\n     * \u003cp\u003e This constructor is provided to ease migration to {@code\n     * StringBuilder}. Obtaining a string from a string builder via the {@code\n     * toString} method is likely to run faster and is generally preferred.\n     *\n     * @param   builder\n     *          A {@code StringBuilder}\n     *\n     * @since  1.5\n     */\n    public String(StringBuilder builder) {\n        this(builder, null);\n    }\n\n    /**\n     * Returns the length of this string.\n     * The length is equal to the number of \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode\n     * code units\u003c/a\u003e in the string.\n     *\n     * @return  the length of the sequence of characters represented by this\n     *          object.\n     */\n    public int length() {\n        return value.length \u003e\u003e coder();\n    }\n\n    /**\n     * Returns {@code true} if, and only if, {@link #length()} is {@code 0}.\n     *\n     * @return {@code true} if {@link #length()} is {@code 0}, otherwise\n     * {@code false}\n     *\n     * @since 1.6\n     */\n    public boolean isEmpty() {\n        return value.length \u003d\u003d 0;\n    }\n\n    /**\n     * Returns the {@code char} value at the\n     * specified index. An index ranges from {@code 0} to\n     * {@code length() - 1}. The first {@code char} value of the sequence\n     * is at index {@code 0}, the next at index {@code 1},\n     * and so on, as for array indexing.\n     *\n     * \u003cp\u003eIf the {@code char} value specified by the index is a\n     * \u003ca href\u003d\"Character.html#unicode\"\u003esurrogate\u003c/a\u003e, the surrogate\n     * value is returned.\n     *\n     * @param      index   the index of the {@code char} value.\n     * @return     the {@code char} value at the specified index of this string.\n     *             The first {@code char} value is at index {@code 0}.\n     * @exception  IndexOutOfBoundsException  if the {@code index}\n     *             argument is negative or not less than the length of this\n     *             string.\n     */\n    public char charAt(int index) {\n        if (isLatin1()) {\n            return StringLatin1.charAt(value, index);\n        } else {\n            return StringUTF16.charAt(value, index);\n        }\n    }\n\n    /**\n     * Returns the character (Unicode code point) at the specified\n     * index. The index refers to {@code char} values\n     * (Unicode code units) and ranges from {@code 0} to\n     * {@link #length()}{@code  - 1}.\n     *\n     * \u003cp\u003e If the {@code char} value specified at the given index\n     * is in the high-surrogate range, the following index is less\n     * than the length of this {@code String}, and the\n     * {@code char} value at the following index is in the\n     * low-surrogate range, then the supplementary code point\n     * corresponding to this surrogate pair is returned. Otherwise,\n     * the {@code char} value at the given index is returned.\n     *\n     * @param      index the index to the {@code char} values\n     * @return     the code point value of the character at the\n     *             {@code index}\n     * @exception  IndexOutOfBoundsException  if the {@code index}\n     *             argument is negative or not less than the length of this\n     *             string.\n     * @since      1.5\n     */\n    public int codePointAt(int index) {\n        if (isLatin1()) {\n            checkIndex(index, value.length);\n            return value[index] \u0026 0xff;\n        }\n        int length \u003d value.length \u003e\u003e 1;\n        checkIndex(index, length);\n        return StringUTF16.codePointAt(value, index, length);\n    }\n\n    /**\n     * Returns the character (Unicode code point) before the specified\n     * index. The index refers to {@code char} values\n     * (Unicode code units) and ranges from {@code 1} to {@link\n     * CharSequence#length() length}.\n     *\n     * \u003cp\u003e If the {@code char} value at {@code (index - 1)}\n     * is in the low-surrogate range, {@code (index - 2)} is not\n     * negative, and the {@code char} value at {@code (index -\n     * 2)} is in the high-surrogate range, then the\n     * supplementary code point value of the surrogate pair is\n     * returned. If the {@code char} value at {@code index -\n     * 1} is an unpaired low-surrogate or a high-surrogate, the\n     * surrogate value is returned.\n     *\n     * @param     index the index following the code point that should be returned\n     * @return    the Unicode code point value before the given index.\n     * @exception IndexOutOfBoundsException if the {@code index}\n     *            argument is less than 1 or greater than the length\n     *            of this string.\n     * @since     1.5\n     */\n    public int codePointBefore(int index) {\n        int i \u003d index - 1;\n        if (i \u003c 0 || i \u003e\u003d length()) {\n            throw new StringIndexOutOfBoundsException(index);\n        }\n        if (isLatin1()) {\n            return (value[i] \u0026 0xff);\n        }\n        return StringUTF16.codePointBefore(value, index);\n    }\n\n    /**\n     * Returns the number of Unicode code points in the specified text\n     * range of this {@code String}. The text range begins at the\n     * specified {@code beginIndex} and extends to the\n     * {@code char} at index {@code endIndex - 1}. Thus the\n     * length (in {@code char}s) of the text range is\n     * {@code endIndex-beginIndex}. Unpaired surrogates within\n     * the text range count as one code point each.\n     *\n     * @param beginIndex the index to the first {@code char} of\n     * the text range.\n     * @param endIndex the index after the last {@code char} of\n     * the text range.\n     * @return the number of Unicode code points in the specified text\n     * range\n     * @exception IndexOutOfBoundsException if the\n     * {@code beginIndex} is negative, or {@code endIndex}\n     * is larger than the length of this {@code String}, or\n     * {@code beginIndex} is larger than {@code endIndex}.\n     * @since  1.5\n     */\n    public int codePointCount(int beginIndex, int endIndex) {\n        if (beginIndex \u003c 0 || beginIndex \u003e endIndex ||\n            endIndex \u003e length()) {\n            throw new IndexOutOfBoundsException();\n        }\n        if (isLatin1()) {\n            return endIndex - beginIndex;\n        }\n        return StringUTF16.codePointCount(value, beginIndex, endIndex);\n    }\n\n    /**\n     * Returns the index within this {@code String} that is\n     * offset from the given {@code index} by\n     * {@code codePointOffset} code points. Unpaired surrogates\n     * within the text range given by {@code index} and\n     * {@code codePointOffset} count as one code point each.\n     *\n     * @param index the index to be offset\n     * @param codePointOffset the offset in code points\n     * @return the index within this {@code String}\n     * @exception IndexOutOfBoundsException if {@code index}\n     *   is negative or larger then the length of this\n     *   {@code String}, or if {@code codePointOffset} is positive\n     *   and the substring starting with {@code index} has fewer\n     *   than {@code codePointOffset} code points,\n     *   or if {@code codePointOffset} is negative and the substring\n     *   before {@code index} has fewer than the absolute value\n     *   of {@code codePointOffset} code points.\n     * @since 1.5\n     */\n    public int offsetByCodePoints(int index, int codePointOffset) {\n        if (index \u003c 0 || index \u003e length()) {\n            throw new IndexOutOfBoundsException();\n        }\n        return Character.offsetByCodePoints(this, index, codePointOffset);\n    }\n\n    /**\n     * Copies characters from this string into the destination character\n     * array.\n     * \u003cp\u003e\n     * The first character to be copied is at index {@code srcBegin};\n     * the last character to be copied is at index {@code srcEnd-1}\n     * (thus the total number of characters to be copied is\n     * {@code srcEnd-srcBegin}). The characters are copied into the\n     * subarray of {@code dst} starting at index {@code dstBegin}\n     * and ending at index:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     *     dstBegin + (srcEnd-srcBegin) - 1\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param      srcBegin   index of the first character in the string\n     *                        to copy.\n     * @param      srcEnd     index after the last character in the string\n     *                        to copy.\n     * @param      dst        the destination array.\n     * @param      dstBegin   the start offset in the destination array.\n     * @exception IndexOutOfBoundsException If any of the following\n     *            is true:\n     *            \u003cul\u003e\u003cli\u003e{@code srcBegin} is negative.\n     *            \u003cli\u003e{@code srcBegin} is greater than {@code srcEnd}\n     *            \u003cli\u003e{@code srcEnd} is greater than the length of this\n     *                string\n     *            \u003cli\u003e{@code dstBegin} is negative\n     *            \u003cli\u003e{@code dstBegin+(srcEnd-srcBegin)} is larger than\n     *                {@code dst.length}\u003c/ul\u003e\n     */\n    public void getChars(int srcBegin, int srcEnd, char dst[], int dstBegin) {\n        checkBoundsBeginEnd(srcBegin, srcEnd, length());\n        checkBoundsOffCount(dstBegin, srcEnd - srcBegin, dst.length);\n        if (isLatin1()) {\n            StringLatin1.getChars(value, srcBegin, srcEnd, dst, dstBegin);\n        } else {\n            StringUTF16.getChars(value, srcBegin, srcEnd, dst, dstBegin);\n        }\n    }\n\n    /**\n     * Copies characters from this string into the destination byte array. Each\n     * byte receives the 8 low-order bits of the corresponding character. The\n     * eight high-order bits of each character are not copied and do not\n     * participate in the transfer in any way.\n     *\n     * \u003cp\u003e The first character to be copied is at index {@code srcBegin}; the\n     * last character to be copied is at index {@code srcEnd-1}.  The total\n     * number of characters to be copied is {@code srcEnd-srcBegin}. The\n     * characters, converted to bytes, are copied into the subarray of {@code\n     * dst} starting at index {@code dstBegin} and ending at index:\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     *     dstBegin + (srcEnd-srcBegin) - 1\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @deprecated  This method does not properly convert characters into\n     * bytes.  As of JDK\u0026nbsp;1.1, the preferred way to do this is via the\n     * {@link #getBytes()} method, which uses the platform\u0027s default charset.\n     *\n     * @param  srcBegin\n     *         Index of the first character in the string to copy\n     *\n     * @param  srcEnd\n     *         Index after the last character in the string to copy\n     *\n     * @param  dst\n     *         The destination array\n     *\n     * @param  dstBegin\n     *         The start offset in the destination array\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If any of the following is true:\n     *          \u003cul\u003e\n     *            \u003cli\u003e {@code srcBegin} is negative\n     *            \u003cli\u003e {@code srcBegin} is greater than {@code srcEnd}\n     *            \u003cli\u003e {@code srcEnd} is greater than the length of this String\n     *            \u003cli\u003e {@code dstBegin} is negative\n     *            \u003cli\u003e {@code dstBegin+(srcEnd-srcBegin)} is larger than {@code\n     *                 dst.length}\n     *          \u003c/ul\u003e\n     */\n    @Deprecated(since\u003d\"1.1\")\n    public void getBytes(int srcBegin, int srcEnd, byte dst[], int dstBegin) {\n        checkBoundsBeginEnd(srcBegin, srcEnd, length());\n        Objects.requireNonNull(dst);\n        checkBoundsOffCount(dstBegin, srcEnd - srcBegin, dst.length);\n        if (isLatin1()) {\n            StringLatin1.getBytes(value, srcBegin, srcEnd, dst, dstBegin);\n        } else {\n            StringUTF16.getBytes(value, srcBegin, srcEnd, dst, dstBegin);\n        }\n    }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the named\n     * charset, storing the result into a new byte array.\n     *\n     * \u003cp\u003e The behavior of this method when this string cannot be encoded in\n     * the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetEncoder} class should be used when more control\n     * over the encoding process is required.\n     *\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @return  The resultant byte array\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  1.1\n     */\n    public byte[] getBytes(String charsetName)\n            throws UnsupportedEncodingException {\n        if (charsetName \u003d\u003d null) throw new NullPointerException();\n        return StringCoding.encode(charsetName, coder(), value);\n    }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the given\n     * {@linkplain java.nio.charset.Charset charset}, storing the result into a\n     * new byte array.\n     *\n     * \u003cp\u003e This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\u0027s default replacement byte array.  The\n     * {@link java.nio.charset.CharsetEncoder} class should be used when more\n     * control over the encoding process is required.\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset} to be used to encode\n     *         the {@code String}\n     *\n     * @return  The resultant byte array\n     *\n     * @since  1.6\n     */\n    public byte[] getBytes(Charset charset) {\n        if (charset \u003d\u003d null) throw new NullPointerException();\n        return StringCoding.encode(charset, coder(), value);\n     }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the\n     * platform\u0027s default charset, storing the result into a new byte array.\n     *\n     * \u003cp\u003e The behavior of this method when this string cannot be encoded in\n     * the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetEncoder} class should be used when more control\n     * over the encoding process is required.\n     *\n     * @return  The resultant byte array\n     *\n     * @since      1.1\n     */\n    public byte[] getBytes() {\n        return StringCoding.encode(coder(), value);\n    }\n\n    /**\n     * Compares this string to the specified object.  The result is {@code\n     * true} if and only if the argument is not {@code null} and is a {@code\n     * String} object that represents the same sequence of characters as this\n     * object.\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param  anObject\n     *         The object to compare this {@code String} against\n     *\n     * @return  {@code true} if the given object represents a {@code String}\n     *          equivalent to this string, {@code false} otherwise\n     *\n     * @see  #compareTo(String)\n     * @see  #equalsIgnoreCase(String)\n     */\n    public boolean equals(Object anObject) {\n        if (this \u003d\u003d anObject) {\n            return true;\n        }\n        if (anObject instanceof String) {\n            String aString \u003d (String)anObject;\n            if (coder() \u003d\u003d aString.coder()) {\n                return isLatin1() ? StringLatin1.equals(value, aString.value)\n                                  : StringUTF16.equals(value, aString.value);\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Compares this string to the specified {@code StringBuffer}.  The result\n     * is {@code true} if and only if this {@code String} represents the same\n     * sequence of characters as the specified {@code StringBuffer}. This method\n     * synchronizes on the {@code StringBuffer}.\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param  sb\n     *         The {@code StringBuffer} to compare this {@code String} against\n     *\n     * @return  {@code true} if this {@code String} represents the same\n     *          sequence of characters as the specified {@code StringBuffer},\n     *          {@code false} otherwise\n     *\n     * @since  1.4\n     */\n    public boolean contentEquals(StringBuffer sb) {\n        return contentEquals((CharSequence)sb);\n    }\n\n    private boolean nonSyncContentEquals(AbstractStringBuilder sb) {\n        int len \u003d length();\n        if (len !\u003d sb.length()) {\n            return false;\n        }\n        byte v1[] \u003d value;\n        byte v2[] \u003d sb.getValue();\n        if (coder() \u003d\u003d sb.getCoder()) {\n            int n \u003d v1.length;\n            for (int i \u003d 0; i \u003c n; i++) {\n                if (v1[i] !\u003d v2[i]) {\n                    return false;\n                }\n            }\n        } else {\n            if (!isLatin1()) {  // utf16 str and latin1 abs can never be \"equal\"\n                return false;\n            }\n            return StringUTF16.contentEquals(v1, v2, len);\n        }\n        return true;\n    }\n\n    /**\n     * Compares this string to the specified {@code CharSequence}.  The\n     * result is {@code true} if and only if this {@code String} represents the\n     * same sequence of char values as the specified sequence. Note that if the\n     * {@code CharSequence} is a {@code StringBuffer} then the method\n     * synchronizes on it.\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param  cs\n     *         The sequence to compare this {@code String} against\n     *\n     * @return  {@code true} if this {@code String} represents the same\n     *          sequence of char values as the specified sequence, {@code\n     *          false} otherwise\n     *\n     * @since  1.5\n     */\n    public boolean contentEquals(CharSequence cs) {\n        // Argument is a StringBuffer, StringBuilder\n        if (cs instanceof AbstractStringBuilder) {\n            if (cs instanceof StringBuffer) {\n                synchronized(cs) {\n                   return nonSyncContentEquals((AbstractStringBuilder)cs);\n                }\n            } else {\n                return nonSyncContentEquals((AbstractStringBuilder)cs);\n            }\n        }\n        // Argument is a String\n        if (cs instanceof String) {\n            return equals(cs);\n        }\n        // Argument is a generic CharSequence\n        int n \u003d cs.length();\n        if (n !\u003d length()) {\n            return false;\n        }\n        byte[] val \u003d this.value;\n        if (isLatin1()) {\n            for (int i \u003d 0; i \u003c n; i++) {\n                if ((val[i] \u0026 0xff) !\u003d cs.charAt(i)) {\n                    return false;\n                }\n            }\n        } else {\n            if (!StringUTF16.contentEquals(val, cs, n)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Compares this {@code String} to another {@code String}, ignoring case\n     * considerations.  Two strings are considered equal ignoring case if they\n     * are of the same length and corresponding characters in the two strings\n     * are equal ignoring case.\n     *\n     * \u003cp\u003e Two characters {@code c1} and {@code c2} are considered the same\n     * ignoring case if at least one of the following is true:\n     * \u003cul\u003e\n     *   \u003cli\u003e The two characters are the same (as compared by the\n     *        {@code \u003d\u003d} operator)\n     *   \u003cli\u003e Calling {@code Character.toLowerCase(Character.toUpperCase(char))}\n     *        on each character produces the same result\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that this method does \u003cem\u003enot\u003c/em\u003e take locale into account, and\n     * will result in unsatisfactory results for certain locales.  The\n     * {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @param  anotherString\n     *         The {@code String} to compare this {@code String} against\n     *\n     * @return  {@code true} if the argument is not {@code null} and it\n     *          represents an equivalent {@code String} ignoring case; {@code\n     *          false} otherwise\n     *\n     * @see  #equals(Object)\n     */\n    public boolean equalsIgnoreCase(String anotherString) {\n        return (this \u003d\u003d anotherString) ? true\n                : (anotherString !\u003d null)\n                \u0026\u0026 (anotherString.length() \u003d\u003d length())\n                \u0026\u0026 regionMatches(true, 0, anotherString, 0, length());\n    }\n\n    /**\n     * Compares two strings lexicographically.\n     * The comparison is based on the Unicode value of each character in\n     * the strings. The character sequence represented by this\n     * {@code String} object is compared lexicographically to the\n     * character sequence represented by the argument string. The result is\n     * a negative integer if this {@code String} object\n     * lexicographically precedes the argument string. The result is a\n     * positive integer if this {@code String} object lexicographically\n     * follows the argument string. The result is zero if the strings\n     * are equal; {@code compareTo} returns {@code 0} exactly when\n     * the {@link #equals(Object)} method would return {@code true}.\n     * \u003cp\u003e\n     * This is the definition of lexicographic ordering. If two strings are\n     * different, then either they have different characters at some index\n     * that is a valid index for both strings, or their lengths are different,\n     * or both. If they have different characters at one or more index\n     * positions, let \u003ci\u003ek\u003c/i\u003e be the smallest such index; then the string\n     * whose character at position \u003ci\u003ek\u003c/i\u003e has the smaller value, as\n     * determined by using the {@code \u003c} operator, lexicographically precedes the\n     * other string. In this case, {@code compareTo} returns the\n     * difference of the two character values at position {@code k} in\n     * the two string -- that is, the value:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(k)-anotherString.charAt(k)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * If there is no index position at which they differ, then the shorter\n     * string lexicographically precedes the longer string. In this case,\n     * {@code compareTo} returns the difference of the lengths of the\n     * strings -- that is, the value:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.length()-anotherString.length()\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param   anotherString   the {@code String} to be compared.\n     * @return  the value {@code 0} if the argument string is equal to\n     *          this string; a value less than {@code 0} if this string\n     *          is lexicographically less than the string argument; and a\n     *          value greater than {@code 0} if this string is\n     *          lexicographically greater than the string argument.\n     */\n    public int compareTo(String anotherString) {\n        byte v1[] \u003d value;\n        byte v2[] \u003d anotherString.value;\n        if (coder() \u003d\u003d anotherString.coder()) {\n            return isLatin1() ? StringLatin1.compareTo(v1, v2)\n                              : StringUTF16.compareTo(v1, v2);\n        }\n        return isLatin1() ? StringLatin1.compareToUTF16(v1, v2)\n                          : StringUTF16.compareToLatin1(v1, v2);\n     }\n\n    /**\n     * A Comparator that orders {@code String} objects as by\n     * {@code compareToIgnoreCase}. This comparator is serializable.\n     * \u003cp\u003e\n     * Note that this Comparator does \u003cem\u003enot\u003c/em\u003e take locale into account,\n     * and will result in an unsatisfactory ordering for certain locales.\n     * The {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @see     java.text.Collator\n     * @since   1.2\n     */\n    public static final Comparator\u003cString\u003e CASE_INSENSITIVE_ORDER\n                                         \u003d new CaseInsensitiveComparator();\n    private static class CaseInsensitiveComparator\n            implements Comparator\u003cString\u003e, java.io.Serializable {\n        // use serialVersionUID from JDK 1.2.2 for interoperability\n        private static final long serialVersionUID \u003d 8575799808933029326L;\n\n        public int compare(String s1, String s2) {\n            byte v1[] \u003d s1.value;\n            byte v2[] \u003d s2.value;\n            if (s1.coder() \u003d\u003d s2.coder()) {\n                return s1.isLatin1() ? StringLatin1.compareToCI(v1, v2)\n                                     : StringUTF16.compareToCI(v1, v2);\n            }\n            return s1.isLatin1() ? StringLatin1.compareToCI_UTF16(v1, v2)\n                                 : StringUTF16.compareToCI_Latin1(v1, v2);\n        }\n\n        /** Replaces the de-serialized object. */\n        private Object readResolve() { return CASE_INSENSITIVE_ORDER; }\n    }\n\n    /**\n     * Compares two strings lexicographically, ignoring case\n     * differences. This method returns an integer whose sign is that of\n     * calling {@code compareTo} with normalized versions of the strings\n     * where case differences have been eliminated by calling\n     * {@code Character.toLowerCase(Character.toUpperCase(character))} on\n     * each character.\n     * \u003cp\u003e\n     * Note that this method does \u003cem\u003enot\u003c/em\u003e take locale into account,\n     * and will result in an unsatisfactory ordering for certain locales.\n     * The {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @param   str   the {@code String} to be compared.\n     * @return  a negative integer, zero, or a positive integer as the\n     *          specified String is greater than, equal to, or less\n     *          than this String, ignoring case considerations.\n     * @see     java.text.Collator\n     * @since   1.2\n     */\n    public int compareToIgnoreCase(String str) {\n        return CASE_INSENSITIVE_ORDER.compare(this, str);\n    }\n\n    /**\n     * Tests if two string regions are equal.\n     * \u003cp\u003e\n     * A substring of this {@code String} object is compared to a substring\n     * of the argument other. The result is true if these substrings\n     * represent identical character sequences. The substring of this\n     * {@code String} object to be compared begins at index {@code toffset}\n     * and has length {@code len}. The substring of other to be compared\n     * begins at index {@code ooffset} and has length {@code len}. The\n     * result is {@code false} if and only if at least one of the following\n     * is true:\n     * \u003cul\u003e\u003cli\u003e{@code toffset} is negative.\n     * \u003cli\u003e{@code ooffset} is negative.\n     * \u003cli\u003e{@code toffset+len} is greater than the length of this\n     * {@code String} object.\n     * \u003cli\u003e{@code ooffset+len} is greater than the length of the other\n     * argument.\n     * \u003cli\u003eThere is some nonnegative integer \u003ci\u003ek\u003c/i\u003e less than {@code len}\n     * such that:\n     * {@code this.charAt(toffset + }\u003ci\u003ek\u003c/i\u003e{@code ) !\u003d other.charAt(ooffset + }\n     * \u003ci\u003ek\u003c/i\u003e{@code )}\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that this method does \u003cem\u003enot\u003c/em\u003e take locale into account.  The\n     * {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @param   toffset   the starting offset of the subregion in this string.\n     * @param   other     the string argument.\n     * @param   ooffset   the starting offset of the subregion in the string\n     *                    argument.\n     * @param   len       the number of characters to compare.\n     * @return  {@code true} if the specified subregion of this string\n     *          exactly matches the specified subregion of the string argument;\n     *          {@code false} otherwise.\n     */\n    public boolean regionMatches(int toffset, String other, int ooffset, int len) {\n        byte tv[] \u003d value;\n        byte ov[] \u003d other.value;\n        // Note: toffset, ooffset, or len might be near -1\u003e\u003e\u003e1.\n        if ((ooffset \u003c 0) || (toffset \u003c 0) ||\n             (toffset \u003e (long)length() - len) ||\n             (ooffset \u003e (long)other.length() - len)) {\n            return false;\n        }\n        if (coder() \u003d\u003d other.coder()) {\n            if (!isLatin1() \u0026\u0026 (len \u003e 0)) {\n                toffset \u003d toffset \u003c\u003c 1;\n                ooffset \u003d ooffset \u003c\u003c 1;\n                len \u003d len \u003c\u003c 1;\n            }\n            while (len-- \u003e 0) {\n                if (tv[toffset++] !\u003d ov[ooffset++]) {\n                    return false;\n                }\n            }\n        } else {\n            if (coder() \u003d\u003d LATIN1) {\n                while (len-- \u003e 0) {\n                    if (StringLatin1.getChar(tv, toffset++) !\u003d\n                        StringUTF16.getChar(ov, ooffset++)) {\n                        return false;\n                    }\n                }\n            } else {\n                while (len-- \u003e 0) {\n                    if (StringUTF16.getChar(tv, toffset++) !\u003d\n                        StringLatin1.getChar(ov, ooffset++)) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Tests if two string regions are equal.\n     * \u003cp\u003e\n     * A substring of this {@code String} object is compared to a substring\n     * of the argument {@code other}. The result is {@code true} if these\n     * substrings represent character sequences that are the same, ignoring\n     * case if and only if {@code ignoreCase} is true. The substring of\n     * this {@code String} object to be compared begins at index\n     * {@code toffset} and has length {@code len}. The substring of\n     * {@code other} to be compared begins at index {@code ooffset} and\n     * has length {@code len}. The result is {@code false} if and only if\n     * at least one of the following is true:\n     * \u003cul\u003e\u003cli\u003e{@code toffset} is negative.\n     * \u003cli\u003e{@code ooffset} is negative.\n     * \u003cli\u003e{@code toffset+len} is greater than the length of this\n     * {@code String} object.\n     * \u003cli\u003e{@code ooffset+len} is greater than the length of the other\n     * argument.\n     * \u003cli\u003e{@code ignoreCase} is {@code false} and there is some nonnegative\n     * integer \u003ci\u003ek\u003c/i\u003e less than {@code len} such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(toffset+k) !\u003d other.charAt(ooffset+k)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * \u003cli\u003e{@code ignoreCase} is {@code true} and there is some nonnegative\n     * integer \u003ci\u003ek\u003c/i\u003e less than {@code len} such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * Character.toLowerCase(Character.toUpperCase(this.charAt(toffset+k))) !\u003d\n     Character.toLowerCase(Character.toUpperCase(other.charAt(ooffset+k)))\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that this method does \u003cem\u003enot\u003c/em\u003e take locale into account,\n     * and will result in unsatisfactory results for certain locales when\n     * {@code ignoreCase} is {@code true}.  The {@link java.text.Collator} class\n     * provides locale-sensitive comparison.\n     *\n     * @param   ignoreCase   if {@code true}, ignore case when comparing\n     *                       characters.\n     * @param   toffset      the starting offset of the subregion in this\n     *                       string.\n     * @param   other        the string argument.\n     * @param   ooffset      the starting offset of the subregion in the string\n     *                       argument.\n     * @param   len          the number of characters to compare.\n     * @return  {@code true} if the specified subregion of this string\n     *          matches the specified subregion of the string argument;\n     *          {@code false} otherwise. Whether the matching is exact\n     *          or case insensitive depends on the {@code ignoreCase}\n     *          argument.\n     */\n    public boolean regionMatches(boolean ignoreCase, int toffset,\n            String other, int ooffset, int len) {\n        if (!ignoreCase) {\n            return regionMatches(toffset, other, ooffset, len);\n        }\n        // Note: toffset, ooffset, or len might be near -1\u003e\u003e\u003e1.\n        if ((ooffset \u003c 0) || (toffset \u003c 0)\n                || (toffset \u003e (long)length() - len)\n                || (ooffset \u003e (long)other.length() - len)) {\n            return false;\n        }\n        byte tv[] \u003d value;\n        byte ov[] \u003d other.value;\n        if (coder() \u003d\u003d other.coder()) {\n            return isLatin1()\n              ? StringLatin1.regionMatchesCI(tv, toffset, ov, ooffset, len)\n              : StringUTF16.regionMatchesCI(tv, toffset, ov, ooffset, len);\n        }\n        return isLatin1()\n              ? StringLatin1.regionMatchesCI_UTF16(tv, toffset, ov, ooffset, len)\n              : StringUTF16.regionMatchesCI_Latin1(tv, toffset, ov, ooffset, len);\n    }\n\n    /**\n     * Tests if the substring of this string beginning at the\n     * specified index starts with the specified prefix.\n     *\n     * @param   prefix    the prefix.\n     * @param   toffset   where to begin looking in this string.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a prefix of the substring of this object starting\n     *          at index {@code toffset}; {@code false} otherwise.\n     *          The result is {@code false} if {@code toffset} is\n     *          negative or greater than the length of this\n     *          {@code String} object; otherwise the result is the same\n     *          as the result of the expression\n     *          \u003cpre\u003e\n     *          this.substring(toffset).startsWith(prefix)\n     *          \u003c/pre\u003e\n     */\n    public boolean startsWith(String prefix, int toffset) {\n        // Note: toffset might be near -1\u003e\u003e\u003e1.\n        if (toffset \u003c 0 || toffset \u003e length() - prefix.length()) {\n            return false;\n        }\n        byte ta[] \u003d value;\n        byte pa[] \u003d prefix.value;\n        int po \u003d 0;\n        int pc \u003d pa.length;\n        if (coder() \u003d\u003d prefix.coder()) {\n            int to \u003d isLatin1() ? toffset : toffset \u003c\u003c 1;\n            while (po \u003c pc) {\n                if (ta[to++] !\u003d pa[po++]) {\n                    return false;\n                }\n            }\n        } else {\n            if (isLatin1()) {  // \u0026\u0026 pcoder \u003d\u003d UTF16\n                return false;\n            }\n            // coder \u003d\u003d UTF16 \u0026\u0026 pcoder \u003d\u003d LATIN1)\n            while (po \u003c pc) {\n                if (StringUTF16.getChar(ta, toffset++) !\u003d (pa[po++] \u0026 0xff)) {\n                    return false;\n               }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Tests if this string starts with the specified prefix.\n     *\n     * @param   prefix   the prefix.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a prefix of the character sequence represented by\n     *          this string; {@code false} otherwise.\n     *          Note also that {@code true} will be returned if the\n     *          argument is an empty string or is equal to this\n     *          {@code String} object as determined by the\n     *          {@link #equals(Object)} method.\n     * @since   1.0\n     */\n    public boolean startsWith(String prefix) {\n        return startsWith(prefix, 0);\n    }\n\n    /**\n     * Tests if this string ends with the specified suffix.\n     *\n     * @param   suffix   the suffix.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a suffix of the character sequence represented by\n     *          this object; {@code false} otherwise. Note that the\n     *          result will be {@code true} if the argument is the\n     *          empty string or is equal to this {@code String} object\n     *          as determined by the {@link #equals(Object)} method.\n     */\n    public boolean endsWith(String suffix) {\n        return startsWith(suffix, length() - suffix.length());\n    }\n\n    /**\n     * Returns a hash code for this string. The hash code for a\n     * {@code String} object is computed as\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * using {@code int} arithmetic, where {@code s[i]} is the\n     * \u003ci\u003ei\u003c/i\u003eth character of the string, {@code n} is the length of\n     * the string, and {@code ^} indicates exponentiation.\n     * (The hash value of the empty string is zero.)\n     *\n     * @return  a hash code value for this object.\n     */\n    public int hashCode() {\n        int h \u003d hash;\n        if (h \u003d\u003d 0 \u0026\u0026 value.length \u003e 0) {\n            hash \u003d h \u003d isLatin1() ? StringLatin1.hashCode(value)\n                                  : StringUTF16.hashCode(value);\n        }\n        return h;\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of\n     * the specified character. If a character with value\n     * {@code ch} occurs in the character sequence represented by\n     * this {@code String} object, then the index (in Unicode\n     * code units) of the first such occurrence is returned. For\n     * values of {@code ch} in the range from 0 to 0xFFFF\n     * (inclusive), this is the smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. In either case, if no such character occurs in this\n     * string, then {@code -1} is returned.\n     *\n     * @param   ch   a character (Unicode code point).\n     * @return  the index of the first occurrence of the character in the\n     *          character sequence represented by this object, or\n     *          {@code -1} if the character does not occur.\n     */\n    public int indexOf(int ch) {\n        return indexOf(ch, 0);\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified character, starting the search at the specified index.\n     * \u003cp\u003e\n     * If a character with value {@code ch} occurs in the\n     * character sequence represented by this {@code String}\n     * object at an index no smaller than {@code fromIndex}, then\n     * the index of the first such occurrence is returned. For values\n     * of {@code ch} in the range from 0 to 0xFFFF (inclusive),\n     * this is the smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026gt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026gt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. In either case, if no such character occurs in this\n     * string at or after position {@code fromIndex}, then\n     * {@code -1} is returned.\n     *\n     * \u003cp\u003e\n     * There is no restriction on the value of {@code fromIndex}. If it\n     * is negative, it has the same effect as if it were zero: this entire\n     * string may be searched. If it is greater than the length of this\n     * string, it has the same effect as if it were equal to the length of\n     * this string: {@code -1} is returned.\n     *\n     * \u003cp\u003eAll indices are specified in {@code char} values\n     * (Unicode code units).\n     *\n     * @param   ch          a character (Unicode code point).\n     * @param   fromIndex   the index to start the search from.\n     * @return  the index of the first occurrence of the character in the\n     *          character sequence represented by this object that is greater\n     *          than or equal to {@code fromIndex}, or {@code -1}\n     *          if the character does not occur.\n     */\n    public int indexOf(int ch, int fromIndex) {\n        return isLatin1() ? StringLatin1.indexOf(value, ch, fromIndex)\n                          : StringUTF16.indexOf(value, ch, fromIndex);\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of\n     * the specified character. For values of {@code ch} in the\n     * range from 0 to 0xFFFF (inclusive), the index (in Unicode code\n     * units) returned is the largest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * largest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true.  In either case, if no such character occurs in this\n     * string, then {@code -1} is returned.  The\n     * {@code String} is searched backwards starting at the last\n     * character.\n     *\n     * @param   ch   a character (Unicode code point).\n     * @return  the index of the last occurrence of the character in the\n     *          character sequence represented by this object, or\n     *          {@code -1} if the character does not occur.\n     */\n    public int lastIndexOf(int ch) {\n        return lastIndexOf(ch, length() - 1);\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of\n     * the specified character, searching backward starting at the\n     * specified index. For values of {@code ch} in the range\n     * from 0 to 0xFFFF (inclusive), the index returned is the largest\n     * value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026lt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * largest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026lt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. In either case, if no such character occurs in this\n     * string at or before position {@code fromIndex}, then\n     * {@code -1} is returned.\n     *\n     * \u003cp\u003eAll indices are specified in {@code char} values\n     * (Unicode code units).\n     *\n     * @param   ch          a character (Unicode code point).\n     * @param   fromIndex   the index to start the search from. There is no\n     *          restriction on the value of {@code fromIndex}. If it is\n     *          greater than or equal to the length of this string, it has\n     *          the same effect as if it were equal to one less than the\n     *          length of this string: this entire string may be searched.\n     *          If it is negative, it has the same effect as if it were -1:\n     *          -1 is returned.\n     * @return  the index of the last occurrence of the character in the\n     *          character sequence represented by this object that is less\n     *          than or equal to {@code fromIndex}, or {@code -1}\n     *          if the character does not occur before that point.\n     */\n    public int lastIndexOf(int ch, int fromIndex) {\n        return isLatin1() ? StringLatin1.lastIndexOf(value, ch, fromIndex)\n                          : StringUTF16.lastIndexOf(value, ch, fromIndex);\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified substring.\n     *\n     * \u003cp\u003eThe returned index is the smallest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     * this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str   the substring to search for.\n     * @return  the index of the first occurrence of the specified substring,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int indexOf(String str) {\n        if (coder() \u003d\u003d str.coder()) {\n            return isLatin1() ? StringLatin1.indexOf(value, str.value)\n                              : StringUTF16.indexOf(value, str.value);\n        }\n        if (coder() \u003d\u003d LATIN1) {  // str.coder \u003d\u003d UTF16\n            return -1;\n        }\n        return StringUTF16.indexOfLatin1(value, str.value);\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified substring, starting at the specified index.\n     *\n     * \u003cp\u003eThe returned index is the smallest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     *     k \u003e\u003d Math.min(fromIndex, this.length()) \u0026\u0026\n     *                   this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str         the substring to search for.\n     * @param   fromIndex   the index from which to start the search.\n     * @return  the index of the first occurrence of the specified substring,\n     *          starting at the specified index,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int indexOf(String str, int fromIndex) {\n        return indexOf(value, coder(), length(), str, fromIndex);\n    }\n\n    /**\n     * Code shared by String and AbstractStringBuilder to do searches. The\n     * source is the character array being searched, and the target\n     * is the string being searched for.\n     *\n     * @param   src       the characters being searched.\n     * @param   srcCoder  the coder of the source string.\n     * @param   srcCount  length of the source string.\n     * @param   tgtStr    the characters being searched for.\n     * @param   fromIndex the index to begin searching from.\n     */\n    static int indexOf(byte[] src, byte srcCoder, int srcCount,\n                       String tgtStr, int fromIndex) {\n        byte[] tgt    \u003d tgtStr.value;\n        byte tgtCoder \u003d tgtStr.coder();\n        int tgtCount  \u003d tgtStr.length();\n\n        if (fromIndex \u003e\u003d srcCount) {\n            return (tgtCount \u003d\u003d 0 ? srcCount : -1);\n        }\n        if (fromIndex \u003c 0) {\n            fromIndex \u003d 0;\n        }\n        if (tgtCount \u003d\u003d 0) {\n            return fromIndex;\n        }\n        if (tgtCount \u003e srcCount) {\n            return -1;\n        }\n        if (srcCoder \u003d\u003d tgtCoder) {\n            return srcCoder \u003d\u003d LATIN1\n                ? StringLatin1.indexOf(src, srcCount, tgt, tgtCount, fromIndex)\n                : StringUTF16.indexOf(src, srcCount, tgt, tgtCount, fromIndex);\n        }\n        if (srcCoder \u003d\u003d LATIN1) {    //  \u0026\u0026 tgtCoder \u003d\u003d UTF16\n            return -1;\n        }\n        // srcCoder \u003d\u003d UTF16 \u0026\u0026 tgtCoder \u003d\u003d LATIN1) {\n        return StringUTF16.indexOfLatin1(src, srcCount, tgt, tgtCount, fromIndex);\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of the\n     * specified substring.  The last occurrence of the empty string \"\"\n     * is considered to occur at the index value {@code this.length()}.\n     *\n     * \u003cp\u003eThe returned index is the largest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     * this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str   the substring to search for.\n     * @return  the index of the last occurrence of the specified substring,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int lastIndexOf(String str) {\n        return lastIndexOf(str, length());\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of the\n     * specified substring, searching backward starting at the specified index.\n     *\n     * \u003cp\u003eThe returned index is the largest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     *     k \u003c\u003d Math.min(fromIndex, this.length()) \u0026\u0026\n     *                   this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str         the substring to search for.\n     * @param   fromIndex   the index to start the search from.\n     * @return  the index of the last occurrence of the specified substring,\n     *          searching backward from the specified index,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int lastIndexOf(String str, int fromIndex) {\n        return lastIndexOf(value, coder(), length(), str, fromIndex);\n    }\n\n    /**\n     * Code shared by String and AbstractStringBuilder to do searches. The\n     * source is the character array being searched, and the target\n     * is the string being searched for.\n     *\n     * @param   src         the characters being searched.\n     * @param   srcCoder    coder handles the mapping between bytes/chars\n     * @param   srcCount    count of the source string.\n     * @param   tgt         the characters being searched for.\n     * @param   fromIndex   the index to begin searching from.\n     */\n    static int lastIndexOf(byte[] src, byte srcCoder, int srcCount,\n                           String tgtStr, int fromIndex) {\n        byte[] tgt \u003d tgtStr.value;\n        byte tgtCoder \u003d tgtStr.coder();\n        int tgtCount \u003d tgtStr.length();\n        /*\n         * Check arguments; return immediately where possible. For\n         * consistency, don\u0027t check for null str.\n         */\n        int rightIndex \u003d srcCount - tgtCount;\n        if (fromIndex \u003e rightIndex) {\n            fromIndex \u003d rightIndex;\n        }\n        if (fromIndex \u003c 0) {\n            return -1;\n        }\n        /* Empty string always matches. */\n        if (tgtCount \u003d\u003d 0) {\n            return fromIndex;\n        }\n        if (srcCoder \u003d\u003d tgtCoder) {\n            return srcCoder \u003d\u003d LATIN1\n                ? StringLatin1.lastIndexOf(src, srcCount, tgt, tgtCount, fromIndex)\n                : StringUTF16.lastIndexOf(src, srcCount, tgt, tgtCount, fromIndex);\n        }\n        if (srcCoder \u003d\u003d LATIN1) {    // \u0026\u0026 tgtCoder \u003d\u003d UTF16\n            return -1;\n        }\n        // srcCoder \u003d\u003d UTF16 \u0026\u0026 tgtCoder \u003d\u003d LATIN1\n        return StringUTF16.lastIndexOfLatin1(src, srcCount, tgt, tgtCount, fromIndex);\n    }\n\n    /**\n     * Returns a string that is a substring of this string. The\n     * substring begins with the character at the specified index and\n     * extends to the end of this string. \u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"unhappy\".substring(2) returns \"happy\"\n     * \"Harbison\".substring(3) returns \"bison\"\n     * \"emptiness\".substring(9) returns \"\" (an empty string)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param      beginIndex   the beginning index, inclusive.\n     * @return     the specified substring.\n     * @exception  IndexOutOfBoundsException  if\n     *             {@code beginIndex} is negative or larger than the\n     *             length of this {@code String} object.\n     */\n    public String substring(int beginIndex) {\n        if (beginIndex \u003c 0) {\n            throw new StringIndexOutOfBoundsException(beginIndex);\n        }\n        int subLen \u003d length() - beginIndex;\n        if (subLen \u003c 0) {\n            throw new StringIndexOutOfBoundsException(subLen);\n        }\n        if (beginIndex \u003d\u003d 0) {\n            return this;\n        }\n        return isLatin1() ? StringLatin1.newString(value, beginIndex, subLen)\n                          : StringUTF16.newString(value, beginIndex, subLen);\n    }\n\n    /**\n     * Returns a string that is a substring of this string. The\n     * substring begins at the specified {@code beginIndex} and\n     * extends to the character at index {@code endIndex - 1}.\n     * Thus the length of the substring is {@code endIndex-beginIndex}.\n     * \u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"hamburger\".substring(4, 8) returns \"urge\"\n     * \"smiles\".substring(1, 5) returns \"mile\"\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param      beginIndex   the beginning index, inclusive.\n     * @param      endIndex     the ending index, exclusive.\n     * @return     the specified substring.\n     * @exception  IndexOutOfBoundsException  if the\n     *             {@code beginIndex} is negative, or\n     *             {@code endIndex} is larger than the length of\n     *             this {@code String} object, or\n     *             {@code beginIndex} is larger than\n     *             {@code endIndex}.\n     */\n    public String substring(int beginIndex, int endIndex) {\n        int length \u003d length();\n        checkBoundsBeginEnd(beginIndex, endIndex, length);\n        int subLen \u003d endIndex - beginIndex;\n        if (beginIndex \u003d\u003d 0 \u0026\u0026 endIndex \u003d\u003d length) {\n            return this;\n        }\n        return isLatin1() ? StringLatin1.newString(value, beginIndex, subLen)\n                          : StringUTF16.newString(value, beginIndex, subLen);\n    }\n\n    /**\n     * Returns a character sequence that is a subsequence of this sequence.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * str.subSequence(begin,\u0026nbsp;end)\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * behaves in exactly the same way as the invocation\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * str.substring(begin,\u0026nbsp;end)\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @apiNote\n     * This method is defined so that the {@code String} class can implement\n     * the {@link CharSequence} interface.\n     *\n     * @param   beginIndex   the begin index, inclusive.\n     * @param   endIndex     the end index, exclusive.\n     * @return  the specified subsequence.\n     *\n     * @throws  IndexOutOfBoundsException\n     *          if {@code beginIndex} or {@code endIndex} is negative,\n     *          if {@code endIndex} is greater than {@code length()},\n     *          or if {@code beginIndex} is greater than {@code endIndex}\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public CharSequence subSequence(int beginIndex, int endIndex) {\n        return this.substring(beginIndex, endIndex);\n    }\n\n    /**\n     * Concatenates the specified string to the end of this string.\n     * \u003cp\u003e\n     * If the length of the argument string is {@code 0}, then this\n     * {@code String} object is returned. Otherwise, a\n     * {@code String} object is returned that represents a character\n     * sequence that is the concatenation of the character sequence\n     * represented by this {@code String} object and the character\n     * sequence represented by the argument string.\u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"cares\".concat(\"s\") returns \"caress\"\n     * \"to\".concat(\"get\").concat(\"her\") returns \"together\"\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param   str   the {@code String} that is concatenated to the end\n     *                of this {@code String}.\n     * @return  a string that represents the concatenation of this object\u0027s\n     *          characters followed by the string argument\u0027s characters.\n     */\n    public String concat(String str) {\n        if (str.isEmpty()) {\n            return this;\n        }\n        if (coder() \u003d\u003d str.coder()) {\n            byte[] val \u003d this.value;\n            byte[] oval \u003d str.value;\n            int len \u003d val.length + oval.length;\n            byte[] buf \u003d Arrays.copyOf(val, len);\n            System.arraycopy(oval, 0, buf, val.length, oval.length);\n            return new String(buf, coder);\n        }\n        int len \u003d length();\n        int olen \u003d str.length();\n        byte[] buf \u003d StringUTF16.newBytesFor(len + olen);\n        getBytes(buf, 0, UTF16);\n        str.getBytes(buf, len, UTF16);\n        return new String(buf, UTF16);\n    }\n\n    /**\n     * Returns a string resulting from replacing all occurrences of\n     * {@code oldChar} in this string with {@code newChar}.\n     * \u003cp\u003e\n     * If the character {@code oldChar} does not occur in the\n     * character sequence represented by this {@code String} object,\n     * then a reference to this {@code String} object is returned.\n     * Otherwise, a {@code String} object is returned that\n     * represents a character sequence identical to the character sequence\n     * represented by this {@code String} object, except that every\n     * occurrence of {@code oldChar} is replaced by an occurrence\n     * of {@code newChar}.\n     * \u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"mesquite in your cellar\".replace(\u0027e\u0027, \u0027o\u0027)\n     *         returns \"mosquito in your collar\"\n     * \"the war of baronets\".replace(\u0027r\u0027, \u0027y\u0027)\n     *         returns \"the way of bayonets\"\n     * \"sparring with a purple porpoise\".replace(\u0027p\u0027, \u0027t\u0027)\n     *         returns \"starring with a turtle tortoise\"\n     * \"JonL\".replace(\u0027q\u0027, \u0027x\u0027) returns \"JonL\" (no change)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param   oldChar   the old character.\n     * @param   newChar   the new character.\n     * @return  a string derived from this string by replacing every\n     *          occurrence of {@code oldChar} with {@code newChar}.\n     */\n    public String replace(char oldChar, char newChar) {\n        if (oldChar !\u003d newChar) {\n            String ret \u003d isLatin1() ? StringLatin1.replace(value, oldChar, newChar)\n                                    : StringUTF16.replace(value, oldChar, newChar);\n            if (ret !\u003d null) {\n                return ret;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Tells whether or not this string matches the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr\u003c/i\u003e{@code .matches(}\u003ci\u003eregex\u003c/i\u003e{@code )} yields exactly the\n     * same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * {@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#matches(String,CharSequence)\n     * matches(\u003ci\u003eregex\u003c/i\u003e, \u003ci\u003estr\u003c/i\u003e)}\n     * \u003c/blockquote\u003e\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     *\n     * @return  {@code true} if, and only if, this string matches the\n     *          given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public boolean matches(String regex) {\n        return Pattern.matches(regex, this);\n    }\n\n    /**\n     * Returns true if and only if this string contains the specified\n     * sequence of char values.\n     *\n     * @param s the sequence to search for\n     * @return true if this string contains {@code s}, false otherwise\n     * @since 1.5\n     */\n    public boolean contains(CharSequence s) {\n        return indexOf(s.toString()) \u003e\u003d 0;\n    }\n\n    /**\n     * Replaces the first substring of this string that matches the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e with the\n     * given replacement.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr\u003c/i\u003e{@code .replaceFirst(}\u003ci\u003eregex\u003c/i\u003e{@code ,} \u003ci\u003erepl\u003c/i\u003e{@code )}\n     * yields exactly the same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * \u003ccode\u003e\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n     * java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher}(\u003ci\u003estr\u003c/i\u003e).{@link\n     * java.util.regex.Matcher#replaceFirst replaceFirst}(\u003ci\u003erepl\u003c/i\u003e)\n     * \u003c/code\u003e\n     * \u003c/blockquote\u003e\n     *\n     *\u003cp\u003e\n     * Note that backslashes ({@code \\}) and dollar signs ({@code $}) in the\n     * replacement string may cause the results to be different than if it were\n     * being treated as a literal replacement string; see\n     * {@link java.util.regex.Matcher#replaceFirst}.\n     * Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special\n     * meaning of these characters, if desired.\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     * @param   replacement\n     *          the string to be substituted for the first match\n     *\n     * @return  The resulting {@code String}\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public String replaceFirst(String regex, String replacement) {\n        return Pattern.compile(regex).matcher(this).replaceFirst(replacement);\n    }\n\n    /**\n     * Replaces each substring of this string that matches the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e with the\n     * given replacement.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr\u003c/i\u003e{@code .replaceAll(}\u003ci\u003eregex\u003c/i\u003e{@code ,} \u003ci\u003erepl\u003c/i\u003e{@code )}\n     * yields exactly the same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * \u003ccode\u003e\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n     * java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher}(\u003ci\u003estr\u003c/i\u003e).{@link\n     * java.util.regex.Matcher#replaceAll replaceAll}(\u003ci\u003erepl\u003c/i\u003e)\n     * \u003c/code\u003e\n     * \u003c/blockquote\u003e\n     *\n     *\u003cp\u003e\n     * Note that backslashes ({@code \\}) and dollar signs ({@code $}) in the\n     * replacement string may cause the results to be different than if it were\n     * being treated as a literal replacement string; see\n     * {@link java.util.regex.Matcher#replaceAll Matcher.replaceAll}.\n     * Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special\n     * meaning of these characters, if desired.\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     * @param   replacement\n     *          the string to be substituted for each match\n     *\n     * @return  The resulting {@code String}\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public String replaceAll(String regex, String replacement) {\n        return Pattern.compile(regex).matcher(this).replaceAll(replacement);\n    }\n\n    /**\n     * Replaces each substring of this string that matches the literal target\n     * sequence with the specified literal replacement sequence. The\n     * replacement proceeds from the beginning of the string to the end, for\n     * example, replacing \"aa\" with \"b\" in the string \"aaa\" will result in\n     * \"ba\" rather than \"ab\".\n     *\n     * @param  target The sequence of char values to be replaced\n     * @param  replacement The replacement sequence of char values\n     * @return  The resulting string\n     * @since 1.5\n     */\n    public String replace(CharSequence target, CharSequence replacement) {\n        String tgtStr \u003d target.toString();\n        String replStr \u003d replacement.toString();\n        int j \u003d indexOf(tgtStr);\n        if (j \u003c 0) {\n            return this;\n        }\n        int tgtLen \u003d tgtStr.length();\n        int tgtLen1 \u003d Math.max(tgtLen, 1);\n        int thisLen \u003d length();\n\n        int newLenHint \u003d thisLen - tgtLen + replStr.length();\n        if (newLenHint \u003c 0) {\n            throw new OutOfMemoryError();\n        }\n        StringBuilder sb \u003d new StringBuilder(newLenHint);\n        int i \u003d 0;\n        do {\n            sb.append(this, i, j).append(replStr);\n            i \u003d j + tgtLen;\n        } while (j \u003c thisLen \u0026\u0026 (j \u003d indexOf(tgtStr, j + tgtLen1)) \u003e 0);\n        return sb.append(this, i, thisLen).toString();\n    }\n\n    /**\n     * Splits this string around matches of the given\n     * \u003ca href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n     *\n     * \u003cp\u003e The array returned by this method contains each substring of this\n     * string that is terminated by another substring that matches the given\n     * expression or is terminated by the end of the string.  The substrings in\n     * the array are in the order in which they occur in this string.  If the\n     * expression does not match any part of the input then the resulting array\n     * has just one element, namely this string.\n     *\n     * \u003cp\u003e When there is a positive-width match at the beginning of this\n     * string then an empty leading substring is included at the beginning\n     * of the resulting array. A zero-width match at the beginning however\n     * never produces such empty leading substring.\n     *\n     * \u003cp\u003e The {@code limit} parameter controls the number of times the\n     * pattern is applied and therefore affects the length of the resulting\n     * array.\n     * \u003cul\u003e\n     *    \u003cli\u003e\u003cp\u003e\n     *    If the \u003ci\u003elimit\u003c/i\u003e is positive then the pattern will be applied\n     *    at most \u003ci\u003elimit\u003c/i\u003e\u0026nbsp;-\u0026nbsp;1 times, the array\u0027s length will be\n     *    no greater than \u003ci\u003elimit\u003c/i\u003e, and the array\u0027s last entry will contain\n     *    all input beyond the last matched delimiter.\u003c/p\u003e\u003c/li\u003e\n     *\n     *    \u003cli\u003e\u003cp\u003e\n     *    If the \u003ci\u003elimit\u003c/i\u003e is zero then the pattern will be applied as\n     *    many times as possible, the array can have any length, and trailing\n     *    empty strings will be discarded.\u003c/p\u003e\u003c/li\u003e\n     *\n     *    \u003cli\u003e\u003cp\u003e\n     *    If the \u003ci\u003elimit\u003c/i\u003e is negative then the pattern will be applied\n     *    as many times as possible and the array can have any length.\u003c/p\u003e\u003c/li\u003e\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003e The string {@code \"boo:and:foo\"}, for example, yields the\n     * following results with these parameters:\n     *\n     * \u003cblockquote\u003e\u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eSplit example showing regex, limit, and result\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *     \u003cth scope\u003d\"col\"\u003eRegex\u003c/th\u003e\n     *     \u003cth scope\u003d\"col\"\u003eLimit\u003c/th\u003e\n     *     \u003cth scope\u003d\"col\"\u003eResult\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" rowspan\u003d\"3\" style\u003d\"font-weight:normal\"\u003e:\u003c/th\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e2\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and:foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- : --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e5\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- : --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e-2\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" rowspan\u003d\"3\" style\u003d\"font-weight:normal\"\u003eo\u003c/th\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e5\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\", \"\", \"\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- o --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e-2\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\", \"\", \"\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- o --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e0\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\u003c/blockquote\u003e\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr.\u003c/i\u003e{@code split(}\u003ci\u003eregex\u003c/i\u003e{@code ,}\u0026nbsp;\u003ci\u003en\u003c/i\u003e{@code )}\n     * yields the same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * \u003ccode\u003e\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n     * java.util.regex.Pattern#split(java.lang.CharSequence,int) split}(\u003ci\u003estr\u003c/i\u003e,\u0026nbsp;\u003ci\u003en\u003c/i\u003e)\n     * \u003c/code\u003e\n     * \u003c/blockquote\u003e\n     *\n     *\n     * @param  regex\n     *         the delimiting regular expression\n     *\n     * @param  limit\n     *         the result threshold, as described above\n     *\n     * @return  the array of strings computed by splitting this string\n     *          around matches of the given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public String[] split(String regex, int limit) {\n        /* fastpath if the regex is a\n         (1)one-char String and this character is not one of the\n            RegEx\u0027s meta characters \".$|()[{^?*+\\\\\", or\n         (2)two-char String and the first char is the backslash and\n            the second is not the ascii digit or ascii letter.\n         */\n        char ch \u003d 0;\n        if (((regex.length() \u003d\u003d 1 \u0026\u0026\n             \".$|()[{^?*+\\\\\".indexOf(ch \u003d regex.charAt(0)) \u003d\u003d -1) ||\n             (regex.length() \u003d\u003d 2 \u0026\u0026\n              regex.charAt(0) \u003d\u003d \u0027\\\\\u0027 \u0026\u0026\n              (((ch \u003d regex.charAt(1))-\u00270\u0027)|(\u00279\u0027-ch)) \u003c 0 \u0026\u0026\n              ((ch-\u0027a\u0027)|(\u0027z\u0027-ch)) \u003c 0 \u0026\u0026\n              ((ch-\u0027A\u0027)|(\u0027Z\u0027-ch)) \u003c 0)) \u0026\u0026\n            (ch \u003c Character.MIN_HIGH_SURROGATE ||\n             ch \u003e Character.MAX_LOW_SURROGATE))\n        {\n            int off \u003d 0;\n            int next \u003d 0;\n            boolean limited \u003d limit \u003e 0;\n            ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();\n            while ((next \u003d indexOf(ch, off)) !\u003d -1) {\n                if (!limited || list.size() \u003c limit - 1) {\n                    list.add(substring(off, next));\n                    off \u003d next + 1;\n                } else {    // last one\n                    //assert (list.size() \u003d\u003d limit - 1);\n                    int last \u003d length();\n                    list.add(substring(off, last));\n                    off \u003d last;\n                    break;\n                }\n            }\n            // If no match was found, return this\n            if (off \u003d\u003d 0)\n                return new String[]{this};\n\n            // Add remaining segment\n            if (!limited || list.size() \u003c limit)\n                list.add(substring(off, length()));\n\n            // Construct result\n            int resultSize \u003d list.size();\n            if (limit \u003d\u003d 0) {\n                while (resultSize \u003e 0 \u0026\u0026 list.get(resultSize - 1).isEmpty()) {\n                    resultSize--;\n                }\n            }\n            String[] result \u003d new String[resultSize];\n            return list.subList(0, resultSize).toArray(result);\n        }\n        return Pattern.compile(regex).split(this, limit);\n    }\n\n    /**\n     * Splits this string around matches of the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n     *\n     * \u003cp\u003e This method works as if by invoking the two-argument {@link\n     * #split(String, int) split} method with the given expression and a limit\n     * argument of zero.  Trailing empty strings are therefore not included in\n     * the resulting array.\n     *\n     * \u003cp\u003e The string {@code \"boo:and:foo\"}, for example, yields the following\n     * results with these expressions:\n     *\n     * \u003cblockquote\u003e\u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eSplit examples showing regex and result\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *  \u003cth scope\u003d\"col\"\u003eRegex\u003c/th\u003e\n     *  \u003cth scope\u003d\"col\"\u003eResult\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" style\u003d\"text-weight:normal\"\u003e:\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" style\u003d\"text-weight:normal\"\u003eo\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\u003c/blockquote\u003e\n     *\n     *\n     * @param  regex\n     *         the delimiting regular expression\n     *\n     * @return  the array of strings computed by splitting this string\n     *          around matches of the given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public String[] split(String regex) {\n        return split(regex, 0);\n    }\n\n    /**\n     * Returns a new String composed of copies of the\n     * {@code CharSequence elements} joined together with a copy of\n     * the specified {@code delimiter}.\n     *\n     * \u003cblockquote\u003eFor example,\n     * \u003cpre\u003e{@code\n     *     String message \u003d String.join(\"-\", \"Java\", \"is\", \"cool\");\n     *     // message returned is: \"Java-is-cool\"\n     * }\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * Note that if an element is null, then {@code \"null\"} is added.\n     *\n     * @param  delimiter the delimiter that separates each element\n     * @param  elements the elements to join together.\n     *\n     * @return a new {@code String} that is composed of the {@code elements}\n     *         separated by the {@code delimiter}\n     *\n     * @throws NullPointerException If {@code delimiter} or {@code elements}\n     *         is {@code null}\n     *\n     * @see java.util.StringJoiner\n     * @since 1.8\n     */\n    public static String join(CharSequence delimiter, CharSequence... elements) {\n        Objects.requireNonNull(delimiter);\n        Objects.requireNonNull(elements);\n        // Number of elements not likely worth Arrays.stream overhead.\n        StringJoiner joiner \u003d new StringJoiner(delimiter);\n        for (CharSequence cs: elements) {\n            joiner.add(cs);\n        }\n        return joiner.toString();\n    }\n\n    /**\n     * Returns a new {@code String} composed of copies of the\n     * {@code CharSequence elements} joined together with a copy of the\n     * specified {@code delimiter}.\n     *\n     * \u003cblockquote\u003eFor example,\n     * \u003cpre\u003e{@code\n     *     List\u003cString\u003e strings \u003d List.of(\"Java\", \"is\", \"cool\");\n     *     String message \u003d String.join(\" \", strings);\n     *     //message returned is: \"Java is cool\"\n     *\n     *     Set\u003cString\u003e strings \u003d\n     *         new LinkedHashSet\u003c\u003e(List.of(\"Java\", \"is\", \"very\", \"cool\"));\n     *     String message \u003d String.join(\"-\", strings);\n     *     //message returned is: \"Java-is-very-cool\"\n     * }\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * Note that if an individual element is {@code null}, then {@code \"null\"} is added.\n     *\n     * @param  delimiter a sequence of characters that is used to separate each\n     *         of the {@code elements} in the resulting {@code String}\n     * @param  elements an {@code Iterable} that will have its {@code elements}\n     *         joined together.\n     *\n     * @return a new {@code String} that is composed from the {@code elements}\n     *         argument\n     *\n     * @throws NullPointerException If {@code delimiter} or {@code elements}\n     *         is {@code null}\n     *\n     * @see    #join(CharSequence,CharSequence...)\n     * @see    java.util.StringJoiner\n     * @since 1.8\n     */\n    public static String join(CharSequence delimiter,\n            Iterable\u003c? extends CharSequence\u003e elements) {\n        Objects.requireNonNull(delimiter);\n        Objects.requireNonNull(elements);\n        StringJoiner joiner \u003d new StringJoiner(delimiter);\n        for (CharSequence cs: elements) {\n            joiner.add(cs);\n        }\n        return joiner.toString();\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to lower\n     * case using the rules of the given {@code Locale}.  Case mapping is based\n     * on the Unicode Standard version specified by the {@link java.lang.Character Character}\n     * class. Since case mappings are not always 1:1 char mappings, the resulting\n     * {@code String} may be a different length than the original {@code String}.\n     * \u003cp\u003e\n     * Examples of lowercase  mappings are in the following table:\n     * \u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eLowercase mapping examples showing language code of locale, upper case, lower case, and description\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLanguage Code of Locale\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eUpper Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLower Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eDescription\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0130\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0069\u003c/td\u003e\n     *   \u003ctd\u003ecapital letter I with dot above -\u0026gt; small letter i\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0049\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0131\u003c/td\u003e\n     *   \u003ctd\u003ecapital letter I -\u0026gt; small letter dotless i \u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003eFrench Fries\u003c/th\u003e\n     *   \u003ctd\u003efrench fries\u003c/td\u003e\n     *   \u003ctd\u003elowercased all chars in String\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\n     *       \u0026Iota;\u0026Chi;\u0026Theta;\u0026Upsilon;\u0026Sigma;\u003c/th\u003e\n     *   \u003ctd\u003e\u0026iota;\u0026chi;\u0026theta;\u0026upsilon;\u0026sigma;\u003c/td\u003e\n     *   \u003ctd\u003elowercased all chars in String\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\n     *\n     * @param locale use the case transformation rules for this locale\n     * @return the {@code String}, converted to lowercase.\n     * @see     java.lang.String#toLowerCase()\n     * @see     java.lang.String#toUpperCase()\n     * @see     java.lang.String#toUpperCase(Locale)\n     * @since   1.1\n     */\n    public String toLowerCase(Locale locale) {\n        return isLatin1() ? StringLatin1.toLowerCase(this, value, locale)\n                          : StringUTF16.toLowerCase(this, value, locale);\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to lower\n     * case using the rules of the default locale. This is equivalent to calling\n     * {@code toLowerCase(Locale.getDefault())}.\n     * \u003cp\u003e\n     * \u003cb\u003eNote:\u003c/b\u003e This method is locale sensitive, and may produce unexpected\n     * results if used for strings that are intended to be interpreted locale\n     * independently.\n     * Examples are programming language identifiers, protocol keys, and HTML\n     * tags.\n     * For instance, {@code \"TITLE\".toLowerCase()} in a Turkish locale\n     * returns {@code \"t\\u005Cu0131tle\"}, where \u0027\\u005Cu0131\u0027 is the\n     * LATIN SMALL LETTER DOTLESS I character.\n     * To obtain correct results for locale insensitive strings, use\n     * {@code toLowerCase(Locale.ROOT)}.\n     *\n     * @return  the {@code String}, converted to lowercase.\n     * @see     java.lang.String#toLowerCase(Locale)\n     */\n    public String toLowerCase() {\n        return toLowerCase(Locale.getDefault());\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to upper\n     * case using the rules of the given {@code Locale}. Case mapping is based\n     * on the Unicode Standard version specified by the {@link java.lang.Character Character}\n     * class. Since case mappings are not always 1:1 char mappings, the resulting\n     * {@code String} may be a different length than the original {@code String}.\n     * \u003cp\u003e\n     * Examples of locale-sensitive and 1:M case mappings are in the following table.\n     *\n     * \u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eExamples of locale-sensitive and 1:M case mappings. Shows Language code of locale, lower case, upper case, and description.\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLanguage Code of Locale\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLower Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eUpper Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eDescription\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0069\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0130\u003c/td\u003e\n     *   \u003ctd\u003esmall letter i -\u0026gt; capital letter I with dot above\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0131\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0049\u003c/td\u003e\n     *   \u003ctd\u003esmall letter dotless i -\u0026gt; capital letter I\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u00df\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0053 \u0026#92;u0053\u003c/td\u003e\n     *   \u003ctd\u003esmall letter sharp s -\u0026gt; two letters: SS\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003eFahrvergn\u0026uuml;gen\u003c/th\u003e\n     *   \u003ctd\u003eFAHRVERGN\u0026Uuml;GEN\u003c/td\u003e\n     *   \u003ctd\u003e\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\n     * @param locale use the case transformation rules for this locale\n     * @return the {@code String}, converted to uppercase.\n     * @see     java.lang.String#toUpperCase()\n     * @see     java.lang.String#toLowerCase()\n     * @see     java.lang.String#toLowerCase(Locale)\n     * @since   1.1\n     */\n    public String toUpperCase(Locale locale) {\n        return isLatin1() ? StringLatin1.toUpperCase(this, value, locale)\n                          : StringUTF16.toUpperCase(this, value, locale);\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to upper\n     * case using the rules of the default locale. This method is equivalent to\n     * {@code toUpperCase(Locale.getDefault())}.\n     * \u003cp\u003e\n     * \u003cb\u003eNote:\u003c/b\u003e This method is locale sensitive, and may produce unexpected\n     * results if used for strings that are intended to be interpreted locale\n     * independently.\n     * Examples are programming language identifiers, protocol keys, and HTML\n     * tags.\n     * For instance, {@code \"title\".toUpperCase()} in a Turkish locale\n     * returns {@code \"T\\u005Cu0130TLE\"}, where \u0027\\u005Cu0130\u0027 is the\n     * LATIN CAPITAL LETTER I WITH DOT ABOVE character.\n     * To obtain correct results for locale insensitive strings, use\n     * {@code toUpperCase(Locale.ROOT)}.\n     *\n     * @return  the {@code String}, converted to uppercase.\n     * @see     java.lang.String#toUpperCase(Locale)\n     */\n    public String toUpperCase() {\n        return toUpperCase(Locale.getDefault());\n    }\n\n    /**\n     * Returns a string whose value is this string, with all leading\n     * and trailing space removed, where space is defined\n     * as any character whose codepoint is less than or equal to\n     * {@code \u0027U+0020\u0027} (the space character).\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty character\n     * sequence, or the first and last characters of character sequence\n     * represented by this {@code String} object both have codes\n     * that are not space (as defined above), then a\n     * reference to this {@code String} object is returned.\n     * \u003cp\u003e\n     * Otherwise, if all characters in this string are space (as\n     * defined above), then a  {@code String} object representing an\n     * empty string is returned.\n     * \u003cp\u003e\n     * Otherwise, let \u003ci\u003ek\u003c/i\u003e be the index of the first character in the\n     * string whose code is not a space (as defined above) and let\n     * \u003ci\u003em\u003c/i\u003e be the index of the last character in the string whose code\n     * is not a space (as defined above). A {@code String}\n     * object is returned, representing the substring of this string that\n     * begins with the character at index \u003ci\u003ek\u003c/i\u003e and ends with the\n     * character at index \u003ci\u003em\u003c/i\u003e-that is, the result of\n     * {@code this.substring(k, m + 1)}.\n     * \u003cp\u003e\n     * This method may be used to trim space (as defined above) from\n     * the beginning and end of a string.\n     *\n     * @return  a string whose value is this string, with all leading\n     *          and trailing space removed, or this string if it\n     *          has no leading or trailing space.\n     */\n    public String trim() {\n        String ret \u003d isLatin1() ? StringLatin1.trim(value)\n                                : StringUTF16.trim(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns a string whose value is this string, with all leading\n     * and trailing {@link Character#isWhitespace(int) white space}\n     * removed.\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty string,\n     * or if all code points in this string are\n     * {@link Character#isWhitespace(int) white space}, then an empty string\n     * is returned.\n     * \u003cp\u003e\n     * Otherwise, returns a substring of this string beginning with the first\n     * code point that is not a {@link Character#isWhitespace(int) white space}\n     * up to and including the last code point that is not a\n     * {@link Character#isWhitespace(int) white space}.\n     * \u003cp\u003e\n     * This method may be used to strip\n     * {@link Character#isWhitespace(int) white space} from\n     * the beginning and end of a string.\n     *\n     * @return  a string whose value is this string, with all leading\n     *          and trailing white space removed\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public String strip() {\n        String ret \u003d isLatin1() ? StringLatin1.strip(value)\n                                : StringUTF16.strip(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns a string whose value is this string, with all leading\n     * {@link Character#isWhitespace(int) white space} removed.\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty string,\n     * or if all code points in this string are\n     * {@link Character#isWhitespace(int) white space}, then an empty string\n     * is returned.\n     * \u003cp\u003e\n     * Otherwise, returns a substring of this string beginning with the first\n     * code point that is not a {@link Character#isWhitespace(int) white space}\n     * up to to and including the last code point of this string.\n     * \u003cp\u003e\n     * This method may be used to trim\n     * {@link Character#isWhitespace(int) white space} from\n     * the beginning of a string.\n     *\n     * @return  a string whose value is this string, with all leading white\n     *          space removed\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public String stripLeading() {\n        String ret \u003d isLatin1() ? StringLatin1.stripLeading(value)\n                                : StringUTF16.stripLeading(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns a string whose value is this string, with all trailing\n     * {@link Character#isWhitespace(int) white space} removed.\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty string,\n     * or if all characters in this string are\n     * {@link Character#isWhitespace(int) white space}, then an empty string\n     * is returned.\n     * \u003cp\u003e\n     * Otherwise, returns a substring of this string beginning with the first\n     * code point of this string up to and including the last code point\n     * that is not a {@link Character#isWhitespace(int) white space}.\n     * \u003cp\u003e\n     * This method may be used to trim\n     * {@link Character#isWhitespace(int) white space} from\n     * the end of a string.\n     *\n     * @return  a string whose value is this string, with all trailing white\n     *          space removed\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public String stripTrailing() {\n        String ret \u003d isLatin1() ? StringLatin1.stripTrailing(value)\n                                : StringUTF16.stripTrailing(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns {@code true} if the string is empty or contains only\n     * {@link Character#isWhitespace(int) white space} codepoints,\n     * otherwise {@code false}.\n     *\n     * @return {@code true} if the string is empty or contains only\n     *         {@link Character#isWhitespace(int) white space} codepoints,\n     *         otherwise {@code false}\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public boolean isBlank() {\n        return indexOfNonWhitespace() \u003d\u003d length();\n    }\n\n    private int indexOfNonWhitespace() {\n        if (isLatin1()) {\n            return StringLatin1.indexOfNonWhitespace(value);\n        } else {\n            return StringUTF16.indexOfNonWhitespace(value);\n        }\n    }\n\n    /**\n     * Returns a stream of lines extracted from this string,\n     * separated by line terminators.\n     * \u003cp\u003e\n     * A \u003ci\u003eline terminator\u003c/i\u003e is one of the following:\n     * a line feed character {@code \"\\n\"} (U+000A),\n     * a carriage return character {@code \"\\r\"} (U+000D),\n     * or a carriage return followed immediately by a line feed\n     * {@code \"\\r\\n\"} (U+000D U+000A).\n     * \u003cp\u003e\n     * A \u003ci\u003eline\u003c/i\u003e is either a sequence of zero or more characters\n     * followed by a line terminator, or it is a sequence of one or\n     * more characters followed by the end of the string. A\n     * line does not include the line terminator.\n     * \u003cp\u003e\n     * The stream returned by this method contains the lines from\n     * this string in the order in which they occur.\n     *\n     * @apiNote This definition of \u003ci\u003eline\u003c/i\u003e implies that an empty\n     *          string has zero lines and that there is no empty line\n     *          following a line terminator at the end of a string.\n     *\n     * @implNote This method provides better performance than\n     *           split(\"\\R\") by supplying elements lazily and\n     *           by faster search of new line terminators.\n     *\n     * @return  the stream of lines extracted from this string\n     *\n     * @since 11\n     */\n    public Stream\u003cString\u003e lines() {\n        return isLatin1() ? StringLatin1.lines(value)\n                          : StringUTF16.lines(value);\n    }\n\n    /**\n     * This object (which is already a string!) is itself returned.\n     *\n     * @return  the string itself.\n     */\n    public String toString() {\n        return this;\n    }\n\n    /**\n     * Returns a stream of {@code int} zero-extending the {@code char} values\n     * from this sequence.  Any char which maps to a \u003ca\n     * href\u003d\"{@docRoot}/java.base/java/lang/Character.html#unicode\"\u003esurrogate code\n     * point\u003c/a\u003e is passed through uninterpreted.\n     *\n     * @return an IntStream of char values from this sequence\n     * @since 9\n     */\n    @Override\n    public IntStream chars() {\n        return StreamSupport.intStream(\n            isLatin1() ? new StringLatin1.CharsSpliterator(value, Spliterator.IMMUTABLE)\n                       : new StringUTF16.CharsSpliterator(value, Spliterator.IMMUTABLE),\n            false);\n    }\n\n\n    /**\n     * Returns a stream of code point values from this sequence.  Any surrogate\n     * pairs encountered in the sequence are combined as if by {@linkplain\n     * Character#toCodePoint Character.toCodePoint} and the result is passed\n     * to the stream. Any other code units, including ordinary BMP characters,\n     * unpaired surrogates, and undefined code units, are zero-extended to\n     * {@code int} values which are then passed to the stream.\n     *\n     * @return an IntStream of Unicode code points from this sequence\n     * @since 9\n     */\n    @Override\n    public IntStream codePoints() {\n        return StreamSupport.intStream(\n            isLatin1() ? new StringLatin1.CharsSpliterator(value, Spliterator.IMMUTABLE)\n                       : new StringUTF16.CodePointsSpliterator(value, Spliterator.IMMUTABLE),\n            false);\n    }\n\n    /**\n     * Converts this string to a new character array.\n     *\n     * @return  a newly allocated character array whose length is the length\n     *          of this string and whose contents are initialized to contain\n     *          the character sequence represented by this string.\n     */\n    public char[] toCharArray() {\n        return isLatin1() ? StringLatin1.toChars(value)\n                          : StringUTF16.toChars(value);\n    }\n\n    /**\n     * Returns a formatted string using the specified format string and\n     * arguments.\n     *\n     * \u003cp\u003e The locale always used is the one returned by {@link\n     * java.util.Locale#getDefault(java.util.Locale.Category)\n     * Locale.getDefault(Locale.Category)} with\n     * {@link java.util.Locale.Category#FORMAT FORMAT} category specified.\n     *\n     * @param  format\n     *         A \u003ca href\u003d\"../util/Formatter.html#syntax\"\u003eformat string\u003c/a\u003e\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in the format\n     *         string.  If there are more arguments than format specifiers, the\n     *         extra arguments are ignored.  The number of arguments is\n     *         variable and may be zero.  The maximum number of arguments is\n     *         limited by the maximum dimension of a Java array as defined by\n     *         \u003ccite\u003eThe Java\u0026trade; Virtual Machine Specification\u003c/cite\u003e.\n     *         The behaviour on a\n     *         {@code null} argument depends on the \u003ca\n     *         href\u003d\"../util/Formatter.html#syntax\"\u003econversion\u003c/a\u003e.\n     *\n     * @throws  java.util.IllegalFormatException\n     *          If a format string contains an illegal syntax, a format\n     *          specifier that is incompatible with the given arguments,\n     *          insufficient arguments given the format string, or other\n     *          illegal conditions.  For specification of all possible\n     *          formatting errors, see the \u003ca\n     *          href\u003d\"../util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the\n     *          formatter class specification.\n     *\n     * @return  A formatted string\n     *\n     * @see  java.util.Formatter\n     * @since  1.5\n     */\n    public static String format(String format, Object... args) {\n        return new Formatter().format(format, args).toString();\n    }\n\n    /**\n     * Returns a formatted string using the specified locale, format string,\n     * and arguments.\n     *\n     * @param  l\n     *         The {@linkplain java.util.Locale locale} to apply during\n     *         formatting.  If {@code l} is {@code null} then no localization\n     *         is applied.\n     *\n     * @param  format\n     *         A \u003ca href\u003d\"../util/Formatter.html#syntax\"\u003eformat string\u003c/a\u003e\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in the format\n     *         string.  If there are more arguments than format specifiers, the\n     *         extra arguments are ignored.  The number of arguments is\n     *         variable and may be zero.  The maximum number of arguments is\n     *         limited by the maximum dimension of a Java array as defined by\n     *         \u003ccite\u003eThe Java\u0026trade; Virtual Machine Specification\u003c/cite\u003e.\n     *         The behaviour on a\n     *         {@code null} argument depends on the\n     *         \u003ca href\u003d\"../util/Formatter.html#syntax\"\u003econversion\u003c/a\u003e.\n     *\n     * @throws  java.util.IllegalFormatException\n     *          If a format string contains an illegal syntax, a format\n     *          specifier that is incompatible with the given arguments,\n     *          insufficient arguments given the format string, or other\n     *          illegal conditions.  For specification of all possible\n     *          formatting errors, see the \u003ca\n     *          href\u003d\"../util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the\n     *          formatter class specification\n     *\n     * @return  A formatted string\n     *\n     * @see  java.util.Formatter\n     * @since  1.5\n     */\n    public static String format(Locale l, String format, Object... args) {\n        return new Formatter(l).format(format, args).toString();\n    }\n\n    /**\n     * Returns the string representation of the {@code Object} argument.\n     *\n     * @param   obj   an {@code Object}.\n     * @return  if the argument is {@code null}, then a string equal to\n     *          {@code \"null\"}; otherwise, the value of\n     *          {@code obj.toString()} is returned.\n     * @see     java.lang.Object#toString()\n     */\n    public static String valueOf(Object obj) {\n        return (obj \u003d\u003d null) ? \"null\" : obj.toString();\n    }\n\n    /**\n     * Returns the string representation of the {@code char} array\n     * argument. The contents of the character array are copied; subsequent\n     * modification of the character array does not affect the returned\n     * string.\n     *\n     * @param   data     the character array.\n     * @return  a {@code String} that contains the characters of the\n     *          character array.\n     */\n    public static String valueOf(char data[]) {\n        return new String(data);\n    }\n\n    /**\n     * Returns the string representation of a specific subarray of the\n     * {@code char} array argument.\n     * \u003cp\u003e\n     * The {@code offset} argument is the index of the first\n     * character of the subarray. The {@code count} argument\n     * specifies the length of the subarray. The contents of the subarray\n     * are copied; subsequent modification of the character array does not\n     * affect the returned string.\n     *\n     * @param   data     the character array.\n     * @param   offset   initial offset of the subarray.\n     * @param   count    length of the subarray.\n     * @return  a {@code String} that contains the characters of the\n     *          specified subarray of the character array.\n     * @exception IndexOutOfBoundsException if {@code offset} is\n     *          negative, or {@code count} is negative, or\n     *          {@code offset+count} is larger than\n     *          {@code data.length}.\n     */\n    public static String valueOf(char data[], int offset, int count) {\n        return new String(data, offset, count);\n    }\n\n    /**\n     * Equivalent to {@link #valueOf(char[], int, int)}.\n     *\n     * @param   data     the character array.\n     * @param   offset   initial offset of the subarray.\n     * @param   count    length of the subarray.\n     * @return  a {@code String} that contains the characters of the\n     *          specified subarray of the character array.\n     * @exception IndexOutOfBoundsException if {@code offset} is\n     *          negative, or {@code count} is negative, or\n     *          {@code offset+count} is larger than\n     *          {@code data.length}.\n     */\n    public static String copyValueOf(char data[], int offset, int count) {\n        return new String(data, offset, count);\n    }\n\n    /**\n     * Equivalent to {@link #valueOf(char[])}.\n     *\n     * @param   data   the character array.\n     * @return  a {@code String} that contains the characters of the\n     *          character array.\n     */\n    public static String copyValueOf(char data[]) {\n        return new String(data);\n    }\n\n    /**\n     * Returns the string representation of the {@code boolean} argument.\n     *\n     * @param   b   a {@code boolean}.\n     * @return  if the argument is {@code true}, a string equal to\n     *          {@code \"true\"} is returned; otherwise, a string equal to\n     *          {@code \"false\"} is returned.\n     */\n    public static String valueOf(boolean b) {\n        return b ? \"true\" : \"false\";\n    }\n\n    /**\n     * Returns the string representation of the {@code char}\n     * argument.\n     *\n     * @param   c   a {@code char}.\n     * @return  a string of length {@code 1} containing\n     *          as its single character the argument {@code c}.\n     */\n    public static String valueOf(char c) {\n        if (COMPACT_STRINGS \u0026\u0026 StringLatin1.canEncode(c)) {\n            return new String(StringLatin1.toBytes(c), LATIN1);\n        }\n        return new String(StringUTF16.toBytes(c), UTF16);\n    }\n\n    /**\n     * Returns the string representation of the {@code int} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Integer.toString} method of one argument.\n     *\n     * @param   i   an {@code int}.\n     * @return  a string representation of the {@code int} argument.\n     * @see     java.lang.Integer#toString(int, int)\n     */\n    public static String valueOf(int i) {\n        return Integer.toString(i);\n    }\n\n    /**\n     * Returns the string representation of the {@code long} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Long.toString} method of one argument.\n     *\n     * @param   l   a {@code long}.\n     * @return  a string representation of the {@code long} argument.\n     * @see     java.lang.Long#toString(long)\n     */\n    public static String valueOf(long l) {\n        return Long.toString(l);\n    }\n\n    /**\n     * Returns the string representation of the {@code float} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Float.toString} method of one argument.\n     *\n     * @param   f   a {@code float}.\n     * @return  a string representation of the {@code float} argument.\n     * @see     java.lang.Float#toString(float)\n     */\n    public static String valueOf(float f) {\n        return Float.toString(f);\n    }\n\n    /**\n     * Returns the string representation of the {@code double} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Double.toString} method of one argument.\n     *\n     * @param   d   a {@code double}.\n     * @return  a  string representation of the {@code double} argument.\n     * @see     java.lang.Double#toString(double)\n     */\n    public static String valueOf(double d) {\n        return Double.toString(d);\n    }\n\n    /**\n     * Returns a canonical representation for the string object.\n     * \u003cp\u003e\n     * A pool of strings, initially empty, is maintained privately by the\n     * class {@code String}.\n     * \u003cp\u003e\n     * When the intern method is invoked, if the pool already contains a\n     * string equal to this {@code String} object as determined by\n     * the {@link #equals(Object)} method, then the string from the pool is\n     * returned. Otherwise, this {@code String} object is added to the\n     * pool and a reference to this {@code String} object is returned.\n     * \u003cp\u003e\n     * It follows that for any two strings {@code s} and {@code t},\n     * {@code s.intern() \u003d\u003d t.intern()} is {@code true}\n     * if and only if {@code s.equals(t)} is {@code true}.\n     * \u003cp\u003e\n     * All literal strings and string-valued constant expressions are\n     * interned. String literals are defined in section 3.10.5 of the\n     * \u003ccite\u003eThe Java\u0026trade; Language Specification\u003c/cite\u003e.\n     *\n     * @return  a string that has the same contents as this string, but is\n     *          guaranteed to be from a pool of unique strings.\n     * @jls 3.10.5 String Literals\n     */\n    public native String intern();\n\n    /**\n     * Returns a string whose value is the concatenation of this\n     * string repeated {@code count} times.\n     * \u003cp\u003e\n     * If this string is empty or count is zero then the empty\n     * string is returned.\n     *\n     * @param   count number of times to repeat\n     *\n     * @return  A string composed of this string repeated\n     *          {@code count} times or the empty string if this\n     *          string is empty or count is zero\n     *\n     * @throws  IllegalArgumentException if the {@code count} is\n     *          negative.\n     *\n     * @since 11\n     */\n    public String repeat(int count) {\n        if (count \u003c 0) {\n            throw new IllegalArgumentException(\"count is negative: \" + count);\n        }\n        if (count \u003d\u003d 1) {\n            return this;\n        }\n        final int len \u003d value.length;\n        if (len \u003d\u003d 0 || count \u003d\u003d 0) {\n            return \"\";\n        }\n        if (len \u003d\u003d 1) {\n            final byte[] single \u003d new byte[count];\n            Arrays.fill(single, value[0]);\n            return new String(single, coder);\n        }\n        if (Integer.MAX_VALUE / count \u003c len) {\n            throw new OutOfMemoryError(\"Repeating \" + len + \" bytes String \" + count +\n                    \" times will produce a String exceeding maximum size.\");\n        }\n        final int limit \u003d len * count;\n        final byte[] multiple \u003d new byte[limit];\n        System.arraycopy(value, 0, multiple, 0, len);\n        int copied \u003d len;\n        for (; copied \u003c limit - copied; copied \u003c\u003c\u003d 1) {\n            System.arraycopy(multiple, 0, multiple, copied, copied);\n        }\n        System.arraycopy(multiple, 0, multiple, copied, limit - copied);\n        return new String(multiple, coder);\n    }\n\n    ////////////////////////////////////////////////////////////////\n\n    /**\n     * Copy character bytes from this string into dst starting at dstBegin.\n     * This method doesn\u0027t perform any range checking.\n     *\n     * Invoker guarantees: dst is in UTF16 (inflate itself for asb), if two\n     * coders are different, and dst is big enough (range check)\n     *\n     * @param dstBegin  the char index, not offset of byte[]\n     * @param coder     the coder of dst[]\n     */\n    void getBytes(byte dst[], int dstBegin, byte coder) {\n        if (coder() \u003d\u003d coder) {\n            System.arraycopy(value, 0, dst, dstBegin \u003c\u003c coder, value.length);\n        } else {    // this.coder \u003d\u003d LATIN \u0026\u0026 coder \u003d\u003d UTF16\n            StringLatin1.inflate(value, 0, dst, dstBegin, value.length);\n        }\n    }\n\n    /*\n     * Package private constructor. Trailing Void argument is there for\n     * disambiguating it against other (public) constructors.\n     *\n     * Stores the char[] value into a byte[] that each byte represents\n     * the8 low-order bits of the corresponding character, if the char[]\n     * contains only latin1 character. Or a byte[] that stores all\n     * characters in their byte sequences defined by the {@code StringUTF16}.\n     */\n    String(char[] value, int off, int len, Void sig) {\n        if (len \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n            return;\n        }\n        if (COMPACT_STRINGS) {\n            byte[] val \u003d StringUTF16.compress(value, off, len);\n            if (val !\u003d null) {\n                this.value \u003d val;\n                this.coder \u003d LATIN1;\n                return;\n            }\n        }\n        this.coder \u003d UTF16;\n        this.value \u003d StringUTF16.toBytes(value, off, len);\n    }\n\n    /*\n     * Package private constructor. Trailing Void argument is there for\n     * disambiguating it against other (public) constructors.\n     */\n    String(AbstractStringBuilder asb, Void sig) {\n        byte[] val \u003d asb.getValue();\n        int length \u003d asb.length();\n        if (asb.isLatin1()) {\n            this.coder \u003d LATIN1;\n            this.value \u003d Arrays.copyOfRange(val, 0, length);\n        } else {\n            if (COMPACT_STRINGS) {\n                byte[] buf \u003d StringUTF16.compress(val, 0, length);\n                if (buf !\u003d null) {\n                    this.coder \u003d LATIN1;\n                    this.value \u003d buf;\n                    return;\n                }\n            }\n            this.coder \u003d UTF16;\n            this.value \u003d Arrays.copyOfRange(val, 0, length \u003c\u003c 1);\n        }\n    }\n\n   /*\n    * Package private constructor which shares value array for speed.\n    */\n    String(byte[] value, byte coder) {\n        this.value \u003d value;\n        this.coder \u003d coder;\n    }\n\n    byte coder() {\n        return COMPACT_STRINGS ? coder : UTF16;\n    }\n\n    byte[] value() {\n        return value;\n    }\n\n    private boolean isLatin1() {\n        return COMPACT_STRINGS \u0026\u0026 coder \u003d\u003d LATIN1;\n    }\n\n    @Native static final byte LATIN1 \u003d 0;\n    @Native static final byte UTF16  \u003d 1;\n\n    /*\n     * StringIndexOutOfBoundsException  if {@code index} is\n     * negative or greater than or equal to {@code length}.\n     */\n    static void checkIndex(int index, int length) {\n        if (index \u003c 0 || index \u003e\u003d length) {\n            throw new StringIndexOutOfBoundsException(\"index \" + index +\n                                                      \",length \" + length);\n        }\n    }\n\n    /*\n     * StringIndexOutOfBoundsException  if {@code offset}\n     * is negative or greater than {@code length}.\n     */\n    static void checkOffset(int offset, int length) {\n        if (offset \u003c 0 || offset \u003e length) {\n            throw new StringIndexOutOfBoundsException(\"offset \" + offset +\n                                                      \",length \" + length);\n        }\n    }\n\n    /*\n     * Check {@code offset}, {@code count} against {@code 0} and {@code length}\n     * bounds.\n     *\n     * @throws  StringIndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative,\n     *          or {@code offset} is greater than {@code length - count}\n     */\n    static void checkBoundsOffCount(int offset, int count, int length) {\n        if (offset \u003c 0 || count \u003c 0 || offset \u003e length - count) {\n            throw new StringIndexOutOfBoundsException(\n                \"offset \" + offset + \", count \" + count + \", length \" + length);\n        }\n    }\n\n    /*\n     * Check {@code begin}, {@code end} against {@code 0} and {@code length}\n     * bounds.\n     *\n     * @throws  StringIndexOutOfBoundsException\n     *          If {@code begin} is negative, {@code begin} is greater than\n     *          {@code end}, or {@code end} is greater than {@code length}.\n     */\n    static void checkBoundsBeginEnd(int begin, int end, int length) {\n        if (begin \u003c 0 || begin \u003e end || end \u003e length) {\n            throw new StringIndexOutOfBoundsException(\n                \"begin \" + begin + \", end \" + end + \", length \" + length);\n        }\n    }\n\n    /**\n     * Returns the string representation of the {@code codePoint}\n     * argument.\n     *\n     * @param   codePoint a {@code codePoint}.\n     * @return  a string of length {@code 1} or {@code 2} containing\n     *          as its single character the argument {@code codePoint}.\n     * @throws IllegalArgumentException if the specified\n     *          {@code codePoint} is not a {@linkplain Character#isValidCodePoint\n     *          valid Unicode code point}.\n     */\n    static String valueOfCodePoint(int codePoint) {\n        if (COMPACT_STRINGS \u0026\u0026 StringLatin1.canEncode(codePoint)) {\n            return new String(StringLatin1.toBytes((char)codePoint), LATIN1);\n        } else if (Character.isBmpCodePoint(codePoint)) {\n            return new String(StringUTF16.toBytes((char)codePoint), UTF16);\n        } else if (Character.isSupplementaryCodePoint(codePoint)) {\n            return new String(StringUTF16.toBytesSupplementary(codePoint), UTF16);\n        }\n\n        throw new IllegalArgumentException(\n            format(\"Not a valid Unicode code point: 0x%X\", codePoint));\n    }\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor20.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:339)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

Jan. 16, 2024 11:36:20 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.base/java/lang/String.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor22.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:358)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

2024.01.16 11:36:20 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java

Uri: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:703)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	jdk.internal.reflect.GeneratedMethodAccessor21.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 16, 2024 11:36:21 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.base/java/lang/String.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 1994, 2018, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.lang;\n\nimport java.io.ObjectStreamField;\nimport java.io.UnsupportedEncodingException;\nimport java.lang.annotation.Native;\nimport java.nio.charset.Charset;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Formatter;\nimport java.util.Locale;\nimport java.util.Objects;\nimport java.util.Spliterator;\nimport java.util.StringJoiner;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport java.util.stream.IntStream;\nimport java.util.stream.Stream;\nimport java.util.stream.StreamSupport;\nimport jdk.internal.HotSpotIntrinsicCandidate;\nimport jdk.internal.vm.annotation.Stable;\n\n/**\n * The {@code String} class represents character strings. All\n * string literals in Java programs, such as {@code \"abc\"}, are\n * implemented as instances of this class.\n * \u003cp\u003e\n * Strings are constant; their values cannot be changed after they\n * are created. String buffers support mutable strings.\n * Because String objects are immutable they can be shared. For example:\n * \u003cblockquote\u003e\u003cpre\u003e\n *     String str \u003d \"abc\";\n * \u003c/pre\u003e\u003c/blockquote\u003e\u003cp\u003e\n * is equivalent to:\n * \u003cblockquote\u003e\u003cpre\u003e\n *     char data[] \u003d {\u0027a\u0027, \u0027b\u0027, \u0027c\u0027};\n *     String str \u003d new String(data);\n * \u003c/pre\u003e\u003c/blockquote\u003e\u003cp\u003e\n * Here are some more examples of how strings can be used:\n * \u003cblockquote\u003e\u003cpre\u003e\n *     System.out.println(\"abc\");\n *     String cde \u003d \"cde\";\n *     System.out.println(\"abc\" + cde);\n *     String c \u003d \"abc\".substring(2,3);\n *     String d \u003d cde.substring(1, 2);\n * \u003c/pre\u003e\u003c/blockquote\u003e\n * \u003cp\u003e\n * The class {@code String} includes methods for examining\n * individual characters of the sequence, for comparing strings, for\n * searching strings, for extracting substrings, and for creating a\n * copy of a string with all characters translated to uppercase or to\n * lowercase. Case mapping is based on the Unicode Standard version\n * specified by the {@link java.lang.Character Character} class.\n * \u003cp\u003e\n * The Java language provides special support for the string\n * concatenation operator (\u0026nbsp;+\u0026nbsp;), and for conversion of\n * other objects to strings. For additional information on string\n * concatenation and conversion, see \u003ci\u003eThe Java\u0026trade; Language Specification\u003c/i\u003e.\n *\n * \u003cp\u003e Unless otherwise noted, passing a {@code null} argument to a constructor\n * or method in this class will cause a {@link NullPointerException} to be\n * thrown.\n *\n * \u003cp\u003eA {@code String} represents a string in the UTF-16 format\n * in which \u003cem\u003esupplementary characters\u003c/em\u003e are represented by \u003cem\u003esurrogate\n * pairs\u003c/em\u003e (see the section \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode\n * Character Representations\u003c/a\u003e in the {@code Character} class for\n * more information).\n * Index values refer to {@code char} code units, so a supplementary\n * character uses two positions in a {@code String}.\n * \u003cp\u003eThe {@code String} class provides methods for dealing with\n * Unicode code points (i.e., characters), in addition to those for\n * dealing with Unicode code units (i.e., {@code char} values).\n *\n * \u003cp\u003eUnless otherwise noted, methods for comparing Strings do not take locale\n * into account.  The {@link java.text.Collator} class provides methods for\n * finer-grain, locale-sensitive String comparison.\n *\n * @implNote The implementation of the string concatenation operator is left to\n * the discretion of a Java compiler, as long as the compiler ultimately conforms\n * to \u003ci\u003eThe Java\u0026trade; Language Specification\u003c/i\u003e. For example, the {@code javac} compiler\n * may implement the operator with {@code StringBuffer}, {@code StringBuilder},\n * or {@code java.lang.invoke.StringConcatFactory} depending on the JDK version. The\n * implementation of string conversion is typically through the method {@code toString},\n * defined by {@code Object} and inherited by all classes in Java.\n *\n * @author  Lee Boynton\n * @author  Arthur van Hoff\n * @author  Martin Buchholz\n * @author  Ulf Zibis\n * @see     java.lang.Object#toString()\n * @see     java.lang.StringBuffer\n * @see     java.lang.StringBuilder\n * @see     java.nio.charset.Charset\n * @since   1.0\n * @jls     15.18.1 String Concatenation Operator +\n */\n\npublic final class String\n    implements java.io.Serializable, Comparable\u003cString\u003e, CharSequence {\n\n    /**\n     * The value is used for character storage.\n     *\n     * @implNote This field is trusted by the VM, and is a subject to\n     * constant folding if String instance is constant. Overwriting this\n     * field after construction will cause problems.\n     *\n     * Additionally, it is marked with {@link Stable} to trust the contents\n     * of the array. No other facility in JDK provides this functionality (yet).\n     * {@link Stable} is safe here, because value is never null.\n     */\n    @Stable\n    private final byte[] value;\n\n    /**\n     * The identifier of the encoding used to encode the bytes in\n     * {@code value}. The supported values in this implementation are\n     *\n     * LATIN1\n     * UTF16\n     *\n     * @implNote This field is trusted by the VM, and is a subject to\n     * constant folding if String instance is constant. Overwriting this\n     * field after construction will cause problems.\n     */\n    private final byte coder;\n\n    /** Cache the hash code for the string */\n    private int hash; // Default to 0\n\n    /** use serialVersionUID from JDK 1.0.2 for interoperability */\n    private static final long serialVersionUID \u003d -6849794470754667710L;\n\n    /**\n     * If String compaction is disabled, the bytes in {@code value} are\n     * always encoded in UTF16.\n     *\n     * For methods with several possible implementation paths, when String\n     * compaction is disabled, only one code path is taken.\n     *\n     * The instance field value is generally opaque to optimizing JIT\n     * compilers. Therefore, in performance-sensitive place, an explicit\n     * check of the static boolean {@code COMPACT_STRINGS} is done first\n     * before checking the {@code coder} field since the static boolean\n     * {@code COMPACT_STRINGS} would be constant folded away by an\n     * optimizing JIT compiler. The idioms for these cases are as follows.\n     *\n     * For code such as:\n     *\n     *    if (coder \u003d\u003d LATIN1) { ... }\n     *\n     * can be written more optimally as\n     *\n     *    if (coder() \u003d\u003d LATIN1) { ... }\n     *\n     * or:\n     *\n     *    if (COMPACT_STRINGS \u0026\u0026 coder \u003d\u003d LATIN1) { ... }\n     *\n     * An optimizing JIT compiler can fold the above conditional as:\n     *\n     *    COMPACT_STRINGS \u003d\u003d true  \u003d\u003e if (coder \u003d\u003d LATIN1) { ... }\n     *    COMPACT_STRINGS \u003d\u003d false \u003d\u003e if (false)           { ... }\n     *\n     * @implNote\n     * The actual value for this field is injected by JVM. The static\n     * initialization block is used to set the value here to communicate\n     * that this static final field is not statically foldable, and to\n     * avoid any possible circular dependency during vm initialization.\n     */\n    static final boolean COMPACT_STRINGS;\n\n    static {\n        COMPACT_STRINGS \u003d true;\n    }\n\n    /**\n     * Class String is special cased within the Serialization Stream Protocol.\n     *\n     * A String instance is written into an ObjectOutputStream according to\n     * \u003ca href\u003d\"{@docRoot}/../specs/serialization/protocol.html#stream-elements\"\u003e\n     * Object Serialization Specification, Section 6.2, \"Stream Elements\"\u003c/a\u003e\n     */\n    private static final ObjectStreamField[] serialPersistentFields \u003d\n        new ObjectStreamField[0];\n\n    /**\n     * Initializes a newly created {@code String} object so that it represents\n     * an empty character sequence.  Note that use of this constructor is\n     * unnecessary since Strings are immutable.\n     */\n    public String() {\n        this.value \u003d \"\".value;\n        this.coder \u003d \"\".coder;\n    }\n\n    /**\n     * Initializes a newly created {@code String} object so that it represents\n     * the same sequence of characters as the argument; in other words, the\n     * newly created string is a copy of the argument string. Unless an\n     * explicit copy of {@code original} is needed, use of this constructor is\n     * unnecessary since Strings are immutable.\n     *\n     * @param  original\n     *         A {@code String}\n     */\n    @HotSpotIntrinsicCandidate\n    public String(String original) {\n        this.value \u003d original.value;\n        this.coder \u003d original.coder;\n        this.hash \u003d original.hash;\n    }\n\n    /**\n     * Allocates a new {@code String} so that it represents the sequence of\n     * characters currently contained in the character array argument. The\n     * contents of the character array are copied; subsequent modification of\n     * the character array does not affect the newly created string.\n     *\n     * @param  value\n     *         The initial value of the string\n     */\n    public String(char value[]) {\n        this(value, 0, value.length, null);\n    }\n\n    /**\n     * Allocates a new {@code String} that contains characters from a subarray\n     * of the character array argument. The {@code offset} argument is the\n     * index of the first character of the subarray and the {@code count}\n     * argument specifies the length of the subarray. The contents of the\n     * subarray are copied; subsequent modification of the character array does\n     * not affect the newly created string.\n     *\n     * @param  value\n     *         Array that is the source of characters\n     *\n     * @param  offset\n     *         The initial offset\n     *\n     * @param  count\n     *         The length\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative, or\n     *          {@code offset} is greater than {@code value.length - count}\n     */\n    public String(char value[], int offset, int count) {\n        this(value, offset, count, rangeCheck(value, offset, count));\n    }\n\n    private static Void rangeCheck(char[] value, int offset, int count) {\n        checkBoundsOffCount(offset, count, value.length);\n        return null;\n    }\n\n    /**\n     * Allocates a new {@code String} that contains characters from a subarray\n     * of the \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode code point\u003c/a\u003e array\n     * argument.  The {@code offset} argument is the index of the first code\n     * point of the subarray and the {@code count} argument specifies the\n     * length of the subarray.  The contents of the subarray are converted to\n     * {@code char}s; subsequent modification of the {@code int} array does not\n     * affect the newly created string.\n     *\n     * @param  codePoints\n     *         Array that is the source of Unicode code points\n     *\n     * @param  offset\n     *         The initial offset\n     *\n     * @param  count\n     *         The length\n     *\n     * @throws  IllegalArgumentException\n     *          If any invalid Unicode code point is found in {@code\n     *          codePoints}\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative, or\n     *          {@code offset} is greater than {@code codePoints.length - count}\n     *\n     * @since  1.5\n     */\n    public String(int[] codePoints, int offset, int count) {\n        checkBoundsOffCount(offset, count, codePoints.length);\n        if (count \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n            return;\n        }\n        if (COMPACT_STRINGS) {\n            byte[] val \u003d StringLatin1.toBytes(codePoints, offset, count);\n            if (val !\u003d null) {\n                this.coder \u003d LATIN1;\n                this.value \u003d val;\n                return;\n            }\n        }\n        this.coder \u003d UTF16;\n        this.value \u003d StringUTF16.toBytes(codePoints, offset, count);\n    }\n\n    /**\n     * Allocates a new {@code String} constructed from a subarray of an array\n     * of 8-bit integer values.\n     *\n     * \u003cp\u003e The {@code offset} argument is the index of the first byte of the\n     * subarray, and the {@code count} argument specifies the length of the\n     * subarray.\n     *\n     * \u003cp\u003e Each {@code byte} in the subarray is converted to a {@code char} as\n     * specified in the {@link #String(byte[],int) String(byte[],int)} constructor.\n     *\n     * @deprecated This method does not properly convert bytes into characters.\n     * As of JDK\u0026nbsp;1.1, the preferred way to do this is via the\n     * {@code String} constructors that take a {@link\n     * java.nio.charset.Charset}, charset name, or that use the platform\u0027s\n     * default charset.\n     *\n     * @param  ascii\n     *         The bytes to be converted to characters\n     *\n     * @param  hibyte\n     *         The top 8 bits of each 16-bit Unicode code unit\n     *\n     * @param  offset\n     *         The initial offset\n     * @param  count\n     *         The length\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative, or\n     *          {@code offset} is greater than {@code ascii.length - count}\n     *\n     * @see  #String(byte[], int)\n     * @see  #String(byte[], int, int, java.lang.String)\n     * @see  #String(byte[], int, int, java.nio.charset.Charset)\n     * @see  #String(byte[], int, int)\n     * @see  #String(byte[], java.lang.String)\n     * @see  #String(byte[], java.nio.charset.Charset)\n     * @see  #String(byte[])\n     */\n    @Deprecated(since\u003d\"1.1\")\n    public String(byte ascii[], int hibyte, int offset, int count) {\n        checkBoundsOffCount(offset, count, ascii.length);\n        if (count \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n            return;\n        }\n        if (COMPACT_STRINGS \u0026\u0026 (byte)hibyte \u003d\u003d 0) {\n            this.value \u003d Arrays.copyOfRange(ascii, offset, offset + count);\n            this.coder \u003d LATIN1;\n        } else {\n            hibyte \u003c\u003c\u003d 8;\n            byte[] val \u003d StringUTF16.newBytesFor(count);\n            for (int i \u003d 0; i \u003c count; i++) {\n                StringUTF16.putChar(val, i, hibyte | (ascii[offset++] \u0026 0xff));\n            }\n            this.value \u003d val;\n            this.coder \u003d UTF16;\n        }\n    }\n\n    /**\n     * Allocates a new {@code String} containing characters constructed from\n     * an array of 8-bit integer values. Each character \u003ci\u003ec\u003c/i\u003e in the\n     * resulting string is constructed from the corresponding component\n     * \u003ci\u003eb\u003c/i\u003e in the byte array such that:\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     *     \u003cb\u003e\u003ci\u003ec\u003c/i\u003e\u003c/b\u003e \u003d\u003d (char)(((hibyte \u0026amp; 0xff) \u0026lt;\u0026lt; 8)\n     *                         | (\u003cb\u003e\u003ci\u003eb\u003c/i\u003e\u003c/b\u003e \u0026amp; 0xff))\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @deprecated  This method does not properly convert bytes into\n     * characters.  As of JDK\u0026nbsp;1.1, the preferred way to do this is via the\n     * {@code String} constructors that take a {@link\n     * java.nio.charset.Charset}, charset name, or that use the platform\u0027s\n     * default charset.\n     *\n     * @param  ascii\n     *         The bytes to be converted to characters\n     *\n     * @param  hibyte\n     *         The top 8 bits of each 16-bit Unicode code unit\n     *\n     * @see  #String(byte[], int, int, java.lang.String)\n     * @see  #String(byte[], int, int, java.nio.charset.Charset)\n     * @see  #String(byte[], int, int)\n     * @see  #String(byte[], java.lang.String)\n     * @see  #String(byte[], java.nio.charset.Charset)\n     * @see  #String(byte[])\n     */\n    @Deprecated(since\u003d\"1.1\")\n    public String(byte ascii[], int hibyte) {\n        this(ascii, hibyte, 0, ascii.length);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the specified charset.  The length of the new {@code String}\n     * is a function of the charset, and hence may not be equal to the length\n     * of the subarray.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code length} is negative, or\n     *          {@code offset} is greater than {@code bytes.length - length}\n     *\n     * @since  1.1\n     */\n    public String(byte bytes[], int offset, int length, String charsetName)\n            throws UnsupportedEncodingException {\n        if (charsetName \u003d\u003d null)\n            throw new NullPointerException(\"charsetName\");\n        checkBoundsOffCount(offset, length, bytes.length);\n        StringCoding.Result ret \u003d\n            StringCoding.decode(charsetName, bytes, offset, length);\n        this.value \u003d ret.value;\n        this.coder \u003d ret.coder;\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the specified {@linkplain java.nio.charset.Charset charset}.\n     * The length of the new {@code String} is a function of the charset, and\n     * hence may not be equal to the length of the subarray.\n     *\n     * \u003cp\u003e This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\u0027s default replacement string.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset charset} to be used to\n     *         decode the {@code bytes}\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code length} is negative, or\n     *          {@code offset} is greater than {@code bytes.length - length}\n     *\n     * @since  1.6\n     */\n    public String(byte bytes[], int offset, int length, Charset charset) {\n        if (charset \u003d\u003d null)\n            throw new NullPointerException(\"charset\");\n        checkBoundsOffCount(offset, length, bytes.length);\n        StringCoding.Result ret \u003d\n            StringCoding.decode(charset, bytes, offset, length);\n        this.value \u003d ret.value;\n        this.coder \u003d ret.coder;\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of bytes\n     * using the specified {@linkplain java.nio.charset.Charset charset}.  The\n     * length of the new {@code String} is a function of the charset, and hence\n     * may not be equal to the length of the byte array.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  1.1\n     */\n    public String(byte bytes[], String charsetName)\n            throws UnsupportedEncodingException {\n        this(bytes, 0, bytes.length, charsetName);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of\n     * bytes using the specified {@linkplain java.nio.charset.Charset charset}.\n     * The length of the new {@code String} is a function of the charset, and\n     * hence may not be equal to the length of the byte array.\n     *\n     * \u003cp\u003e This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\u0027s default replacement string.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset charset} to be used to\n     *         decode the {@code bytes}\n     *\n     * @since  1.6\n     */\n    public String(byte bytes[], Charset charset) {\n        this(bytes, 0, bytes.length, charset);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the platform\u0027s default charset.  The length of the new\n     * {@code String} is a function of the charset, and hence may not be equal\n     * to the length of the subarray.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code length} is negative, or\n     *          {@code offset} is greater than {@code bytes.length - length}\n     *\n     * @since  1.1\n     */\n    public String(byte bytes[], int offset, int length) {\n        checkBoundsOffCount(offset, length, bytes.length);\n        StringCoding.Result ret \u003d StringCoding.decode(bytes, offset, length);\n        this.value \u003d ret.value;\n        this.coder \u003d ret.coder;\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of bytes\n     * using the platform\u0027s default charset.  The length of the new {@code\n     * String} is a function of the charset, and hence may not be equal to the\n     * length of the byte array.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @since  1.1\n     */\n    public String(byte[] bytes) {\n        this(bytes, 0, bytes.length);\n    }\n\n    /**\n     * Allocates a new string that contains the sequence of characters\n     * currently contained in the string buffer argument. The contents of the\n     * string buffer are copied; subsequent modification of the string buffer\n     * does not affect the newly created string.\n     *\n     * @param  buffer\n     *         A {@code StringBuffer}\n     */\n    public String(StringBuffer buffer) {\n        this(buffer.toString());\n    }\n\n    /**\n     * Allocates a new string that contains the sequence of characters\n     * currently contained in the string builder argument. The contents of the\n     * string builder are copied; subsequent modification of the string builder\n     * does not affect the newly created string.\n     *\n     * \u003cp\u003e This constructor is provided to ease migration to {@code\n     * StringBuilder}. Obtaining a string from a string builder via the {@code\n     * toString} method is likely to run faster and is generally preferred.\n     *\n     * @param   builder\n     *          A {@code StringBuilder}\n     *\n     * @since  1.5\n     */\n    public String(StringBuilder builder) {\n        this(builder, null);\n    }\n\n    /**\n     * Returns the length of this string.\n     * The length is equal to the number of \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode\n     * code units\u003c/a\u003e in the string.\n     *\n     * @return  the length of the sequence of characters represented by this\n     *          object.\n     */\n    public int length() {\n        return value.length \u003e\u003e coder();\n    }\n\n    /**\n     * Returns {@code true} if, and only if, {@link #length()} is {@code 0}.\n     *\n     * @return {@code true} if {@link #length()} is {@code 0}, otherwise\n     * {@code false}\n     *\n     * @since 1.6\n     */\n    public boolean isEmpty() {\n        return value.length \u003d\u003d 0;\n    }\n\n    /**\n     * Returns the {@code char} value at the\n     * specified index. An index ranges from {@code 0} to\n     * {@code length() - 1}. The first {@code char} value of the sequence\n     * is at index {@code 0}, the next at index {@code 1},\n     * and so on, as for array indexing.\n     *\n     * \u003cp\u003eIf the {@code char} value specified by the index is a\n     * \u003ca href\u003d\"Character.html#unicode\"\u003esurrogate\u003c/a\u003e, the surrogate\n     * value is returned.\n     *\n     * @param      index   the index of the {@code char} value.\n     * @return     the {@code char} value at the specified index of this string.\n     *             The first {@code char} value is at index {@code 0}.\n     * @exception  IndexOutOfBoundsException  if the {@code index}\n     *             argument is negative or not less than the length of this\n     *             string.\n     */\n    public char charAt(int index) {\n        if (isLatin1()) {\n            return StringLatin1.charAt(value, index);\n        } else {\n            return StringUTF16.charAt(value, index);\n        }\n    }\n\n    /**\n     * Returns the character (Unicode code point) at the specified\n     * index. The index refers to {@code char} values\n     * (Unicode code units) and ranges from {@code 0} to\n     * {@link #length()}{@code  - 1}.\n     *\n     * \u003cp\u003e If the {@code char} value specified at the given index\n     * is in the high-surrogate range, the following index is less\n     * than the length of this {@code String}, and the\n     * {@code char} value at the following index is in the\n     * low-surrogate range, then the supplementary code point\n     * corresponding to this surrogate pair is returned. Otherwise,\n     * the {@code char} value at the given index is returned.\n     *\n     * @param      index the index to the {@code char} values\n     * @return     the code point value of the character at the\n     *             {@code index}\n     * @exception  IndexOutOfBoundsException  if the {@code index}\n     *             argument is negative or not less than the length of this\n     *             string.\n     * @since      1.5\n     */\n    public int codePointAt(int index) {\n        if (isLatin1()) {\n            checkIndex(index, value.length);\n            return value[index] \u0026 0xff;\n        }\n        int length \u003d value.length \u003e\u003e 1;\n        checkIndex(index, length);\n        return StringUTF16.codePointAt(value, index, length);\n    }\n\n    /**\n     * Returns the character (Unicode code point) before the specified\n     * index. The index refers to {@code char} values\n     * (Unicode code units) and ranges from {@code 1} to {@link\n     * CharSequence#length() length}.\n     *\n     * \u003cp\u003e If the {@code char} value at {@code (index - 1)}\n     * is in the low-surrogate range, {@code (index - 2)} is not\n     * negative, and the {@code char} value at {@code (index -\n     * 2)} is in the high-surrogate range, then the\n     * supplementary code point value of the surrogate pair is\n     * returned. If the {@code char} value at {@code index -\n     * 1} is an unpaired low-surrogate or a high-surrogate, the\n     * surrogate value is returned.\n     *\n     * @param     index the index following the code point that should be returned\n     * @return    the Unicode code point value before the given index.\n     * @exception IndexOutOfBoundsException if the {@code index}\n     *            argument is less than 1 or greater than the length\n     *            of this string.\n     * @since     1.5\n     */\n    public int codePointBefore(int index) {\n        int i \u003d index - 1;\n        if (i \u003c 0 || i \u003e\u003d length()) {\n            throw new StringIndexOutOfBoundsException(index);\n        }\n        if (isLatin1()) {\n            return (value[i] \u0026 0xff);\n        }\n        return StringUTF16.codePointBefore(value, index);\n    }\n\n    /**\n     * Returns the number of Unicode code points in the specified text\n     * range of this {@code String}. The text range begins at the\n     * specified {@code beginIndex} and extends to the\n     * {@code char} at index {@code endIndex - 1}. Thus the\n     * length (in {@code char}s) of the text range is\n     * {@code endIndex-beginIndex}. Unpaired surrogates within\n     * the text range count as one code point each.\n     *\n     * @param beginIndex the index to the first {@code char} of\n     * the text range.\n     * @param endIndex the index after the last {@code char} of\n     * the text range.\n     * @return the number of Unicode code points in the specified text\n     * range\n     * @exception IndexOutOfBoundsException if the\n     * {@code beginIndex} is negative, or {@code endIndex}\n     * is larger than the length of this {@code String}, or\n     * {@code beginIndex} is larger than {@code endIndex}.\n     * @since  1.5\n     */\n    public int codePointCount(int beginIndex, int endIndex) {\n        if (beginIndex \u003c 0 || beginIndex \u003e endIndex ||\n            endIndex \u003e length()) {\n            throw new IndexOutOfBoundsException();\n        }\n        if (isLatin1()) {\n            return endIndex - beginIndex;\n        }\n        return StringUTF16.codePointCount(value, beginIndex, endIndex);\n    }\n\n    /**\n     * Returns the index within this {@code String} that is\n     * offset from the given {@code index} by\n     * {@code codePointOffset} code points. Unpaired surrogates\n     * within the text range given by {@code index} and\n     * {@code codePointOffset} count as one code point each.\n     *\n     * @param index the index to be offset\n     * @param codePointOffset the offset in code points\n     * @return the index within this {@code String}\n     * @exception IndexOutOfBoundsException if {@code index}\n     *   is negative or larger then the length of this\n     *   {@code String}, or if {@code codePointOffset} is positive\n     *   and the substring starting with {@code index} has fewer\n     *   than {@code codePointOffset} code points,\n     *   or if {@code codePointOffset} is negative and the substring\n     *   before {@code index} has fewer than the absolute value\n     *   of {@code codePointOffset} code points.\n     * @since 1.5\n     */\n    public int offsetByCodePoints(int index, int codePointOffset) {\n        if (index \u003c 0 || index \u003e length()) {\n            throw new IndexOutOfBoundsException();\n        }\n        return Character.offsetByCodePoints(this, index, codePointOffset);\n    }\n\n    /**\n     * Copies characters from this string into the destination character\n     * array.\n     * \u003cp\u003e\n     * The first character to be copied is at index {@code srcBegin};\n     * the last character to be copied is at index {@code srcEnd-1}\n     * (thus the total number of characters to be copied is\n     * {@code srcEnd-srcBegin}). The characters are copied into the\n     * subarray of {@code dst} starting at index {@code dstBegin}\n     * and ending at index:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     *     dstBegin + (srcEnd-srcBegin) - 1\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param      srcBegin   index of the first character in the string\n     *                        to copy.\n     * @param      srcEnd     index after the last character in the string\n     *                        to copy.\n     * @param      dst        the destination array.\n     * @param      dstBegin   the start offset in the destination array.\n     * @exception IndexOutOfBoundsException If any of the following\n     *            is true:\n     *            \u003cul\u003e\u003cli\u003e{@code srcBegin} is negative.\n     *            \u003cli\u003e{@code srcBegin} is greater than {@code srcEnd}\n     *            \u003cli\u003e{@code srcEnd} is greater than the length of this\n     *                string\n     *            \u003cli\u003e{@code dstBegin} is negative\n     *            \u003cli\u003e{@code dstBegin+(srcEnd-srcBegin)} is larger than\n     *                {@code dst.length}\u003c/ul\u003e\n     */\n    public void getChars(int srcBegin, int srcEnd, char dst[], int dstBegin) {\n        checkBoundsBeginEnd(srcBegin, srcEnd, length());\n        checkBoundsOffCount(dstBegin, srcEnd - srcBegin, dst.length);\n        if (isLatin1()) {\n            StringLatin1.getChars(value, srcBegin, srcEnd, dst, dstBegin);\n        } else {\n            StringUTF16.getChars(value, srcBegin, srcEnd, dst, dstBegin);\n        }\n    }\n\n    /**\n     * Copies characters from this string into the destination byte array. Each\n     * byte receives the 8 low-order bits of the corresponding character. The\n     * eight high-order bits of each character are not copied and do not\n     * participate in the transfer in any way.\n     *\n     * \u003cp\u003e The first character to be copied is at index {@code srcBegin}; the\n     * last character to be copied is at index {@code srcEnd-1}.  The total\n     * number of characters to be copied is {@code srcEnd-srcBegin}. The\n     * characters, converted to bytes, are copied into the subarray of {@code\n     * dst} starting at index {@code dstBegin} and ending at index:\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     *     dstBegin + (srcEnd-srcBegin) - 1\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @deprecated  This method does not properly convert characters into\n     * bytes.  As of JDK\u0026nbsp;1.1, the preferred way to do this is via the\n     * {@link #getBytes()} method, which uses the platform\u0027s default charset.\n     *\n     * @param  srcBegin\n     *         Index of the first character in the string to copy\n     *\n     * @param  srcEnd\n     *         Index after the last character in the string to copy\n     *\n     * @param  dst\n     *         The destination array\n     *\n     * @param  dstBegin\n     *         The start offset in the destination array\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If any of the following is true:\n     *          \u003cul\u003e\n     *            \u003cli\u003e {@code srcBegin} is negative\n     *            \u003cli\u003e {@code srcBegin} is greater than {@code srcEnd}\n     *            \u003cli\u003e {@code srcEnd} is greater than the length of this String\n     *            \u003cli\u003e {@code dstBegin} is negative\n     *            \u003cli\u003e {@code dstBegin+(srcEnd-srcBegin)} is larger than {@code\n     *                 dst.length}\n     *          \u003c/ul\u003e\n     */\n    @Deprecated(since\u003d\"1.1\")\n    public void getBytes(int srcBegin, int srcEnd, byte dst[], int dstBegin) {\n        checkBoundsBeginEnd(srcBegin, srcEnd, length());\n        Objects.requireNonNull(dst);\n        checkBoundsOffCount(dstBegin, srcEnd - srcBegin, dst.length);\n        if (isLatin1()) {\n            StringLatin1.getBytes(value, srcBegin, srcEnd, dst, dstBegin);\n        } else {\n            StringUTF16.getBytes(value, srcBegin, srcEnd, dst, dstBegin);\n        }\n    }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the named\n     * charset, storing the result into a new byte array.\n     *\n     * \u003cp\u003e The behavior of this method when this string cannot be encoded in\n     * the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetEncoder} class should be used when more control\n     * over the encoding process is required.\n     *\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @return  The resultant byte array\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  1.1\n     */\n    public byte[] getBytes(String charsetName)\n            throws UnsupportedEncodingException {\n        if (charsetName \u003d\u003d null) throw new NullPointerException();\n        return StringCoding.encode(charsetName, coder(), value);\n    }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the given\n     * {@linkplain java.nio.charset.Charset charset}, storing the result into a\n     * new byte array.\n     *\n     * \u003cp\u003e This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\u0027s default replacement byte array.  The\n     * {@link java.nio.charset.CharsetEncoder} class should be used when more\n     * control over the encoding process is required.\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset} to be used to encode\n     *         the {@code String}\n     *\n     * @return  The resultant byte array\n     *\n     * @since  1.6\n     */\n    public byte[] getBytes(Charset charset) {\n        if (charset \u003d\u003d null) throw new NullPointerException();\n        return StringCoding.encode(charset, coder(), value);\n     }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the\n     * platform\u0027s default charset, storing the result into a new byte array.\n     *\n     * \u003cp\u003e The behavior of this method when this string cannot be encoded in\n     * the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetEncoder} class should be used when more control\n     * over the encoding process is required.\n     *\n     * @return  The resultant byte array\n     *\n     * @since      1.1\n     */\n    public byte[] getBytes() {\n        return StringCoding.encode(coder(), value);\n    }\n\n    /**\n     * Compares this string to the specified object.  The result is {@code\n     * true} if and only if the argument is not {@code null} and is a {@code\n     * String} object that represents the same sequence of characters as this\n     * object.\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param  anObject\n     *         The object to compare this {@code String} against\n     *\n     * @return  {@code true} if the given object represents a {@code String}\n     *          equivalent to this string, {@code false} otherwise\n     *\n     * @see  #compareTo(String)\n     * @see  #equalsIgnoreCase(String)\n     */\n    public boolean equals(Object anObject) {\n        if (this \u003d\u003d anObject) {\n            return true;\n        }\n        if (anObject instanceof String) {\n            String aString \u003d (String)anObject;\n            if (coder() \u003d\u003d aString.coder()) {\n                return isLatin1() ? StringLatin1.equals(value, aString.value)\n                                  : StringUTF16.equals(value, aString.value);\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Compares this string to the specified {@code StringBuffer}.  The result\n     * is {@code true} if and only if this {@code String} represents the same\n     * sequence of characters as the specified {@code StringBuffer}. This method\n     * synchronizes on the {@code StringBuffer}.\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param  sb\n     *         The {@code StringBuffer} to compare this {@code String} against\n     *\n     * @return  {@code true} if this {@code String} represents the same\n     *          sequence of characters as the specified {@code StringBuffer},\n     *          {@code false} otherwise\n     *\n     * @since  1.4\n     */\n    public boolean contentEquals(StringBuffer sb) {\n        return contentEquals((CharSequence)sb);\n    }\n\n    private boolean nonSyncContentEquals(AbstractStringBuilder sb) {\n        int len \u003d length();\n        if (len !\u003d sb.length()) {\n            return false;\n        }\n        byte v1[] \u003d value;\n        byte v2[] \u003d sb.getValue();\n        if (coder() \u003d\u003d sb.getCoder()) {\n            int n \u003d v1.length;\n            for (int i \u003d 0; i \u003c n; i++) {\n                if (v1[i] !\u003d v2[i]) {\n                    return false;\n                }\n            }\n        } else {\n            if (!isLatin1()) {  // utf16 str and latin1 abs can never be \"equal\"\n                return false;\n            }\n            return StringUTF16.contentEquals(v1, v2, len);\n        }\n        return true;\n    }\n\n    /**\n     * Compares this string to the specified {@code CharSequence}.  The\n     * result is {@code true} if and only if this {@code String} represents the\n     * same sequence of char values as the specified sequence. Note that if the\n     * {@code CharSequence} is a {@code StringBuffer} then the method\n     * synchronizes on it.\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param  cs\n     *         The sequence to compare this {@code String} against\n     *\n     * @return  {@code true} if this {@code String} represents the same\n     *          sequence of char values as the specified sequence, {@code\n     *          false} otherwise\n     *\n     * @since  1.5\n     */\n    public boolean contentEquals(CharSequence cs) {\n        // Argument is a StringBuffer, StringBuilder\n        if (cs instanceof AbstractStringBuilder) {\n            if (cs instanceof StringBuffer) {\n                synchronized(cs) {\n                   return nonSyncContentEquals((AbstractStringBuilder)cs);\n                }\n            } else {\n                return nonSyncContentEquals((AbstractStringBuilder)cs);\n            }\n        }\n        // Argument is a String\n        if (cs instanceof String) {\n            return equals(cs);\n        }\n        // Argument is a generic CharSequence\n        int n \u003d cs.length();\n        if (n !\u003d length()) {\n            return false;\n        }\n        byte[] val \u003d this.value;\n        if (isLatin1()) {\n            for (int i \u003d 0; i \u003c n; i++) {\n                if ((val[i] \u0026 0xff) !\u003d cs.charAt(i)) {\n                    return false;\n                }\n            }\n        } else {\n            if (!StringUTF16.contentEquals(val, cs, n)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Compares this {@code String} to another {@code String}, ignoring case\n     * considerations.  Two strings are considered equal ignoring case if they\n     * are of the same length and corresponding characters in the two strings\n     * are equal ignoring case.\n     *\n     * \u003cp\u003e Two characters {@code c1} and {@code c2} are considered the same\n     * ignoring case if at least one of the following is true:\n     * \u003cul\u003e\n     *   \u003cli\u003e The two characters are the same (as compared by the\n     *        {@code \u003d\u003d} operator)\n     *   \u003cli\u003e Calling {@code Character.toLowerCase(Character.toUpperCase(char))}\n     *        on each character produces the same result\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that this method does \u003cem\u003enot\u003c/em\u003e take locale into account, and\n     * will result in unsatisfactory results for certain locales.  The\n     * {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @param  anotherString\n     *         The {@code String} to compare this {@code String} against\n     *\n     * @return  {@code true} if the argument is not {@code null} and it\n     *          represents an equivalent {@code String} ignoring case; {@code\n     *          false} otherwise\n     *\n     * @see  #equals(Object)\n     */\n    public boolean equalsIgnoreCase(String anotherString) {\n        return (this \u003d\u003d anotherString) ? true\n                : (anotherString !\u003d null)\n                \u0026\u0026 (anotherString.length() \u003d\u003d length())\n                \u0026\u0026 regionMatches(true, 0, anotherString, 0, length());\n    }\n\n    /**\n     * Compares two strings lexicographically.\n     * The comparison is based on the Unicode value of each character in\n     * the strings. The character sequence represented by this\n     * {@code String} object is compared lexicographically to the\n     * character sequence represented by the argument string. The result is\n     * a negative integer if this {@code String} object\n     * lexicographically precedes the argument string. The result is a\n     * positive integer if this {@code String} object lexicographically\n     * follows the argument string. The result is zero if the strings\n     * are equal; {@code compareTo} returns {@code 0} exactly when\n     * the {@link #equals(Object)} method would return {@code true}.\n     * \u003cp\u003e\n     * This is the definition of lexicographic ordering. If two strings are\n     * different, then either they have different characters at some index\n     * that is a valid index for both strings, or their lengths are different,\n     * or both. If they have different characters at one or more index\n     * positions, let \u003ci\u003ek\u003c/i\u003e be the smallest such index; then the string\n     * whose character at position \u003ci\u003ek\u003c/i\u003e has the smaller value, as\n     * determined by using the {@code \u003c} operator, lexicographically precedes the\n     * other string. In this case, {@code compareTo} returns the\n     * difference of the two character values at position {@code k} in\n     * the two string -- that is, the value:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(k)-anotherString.charAt(k)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * If there is no index position at which they differ, then the shorter\n     * string lexicographically precedes the longer string. In this case,\n     * {@code compareTo} returns the difference of the lengths of the\n     * strings -- that is, the value:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.length()-anotherString.length()\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param   anotherString   the {@code String} to be compared.\n     * @return  the value {@code 0} if the argument string is equal to\n     *          this string; a value less than {@code 0} if this string\n     *          is lexicographically less than the string argument; and a\n     *          value greater than {@code 0} if this string is\n     *          lexicographically greater than the string argument.\n     */\n    public int compareTo(String anotherString) {\n        byte v1[] \u003d value;\n        byte v2[] \u003d anotherString.value;\n        if (coder() \u003d\u003d anotherString.coder()) {\n            return isLatin1() ? StringLatin1.compareTo(v1, v2)\n                              : StringUTF16.compareTo(v1, v2);\n        }\n        return isLatin1() ? StringLatin1.compareToUTF16(v1, v2)\n                          : StringUTF16.compareToLatin1(v1, v2);\n     }\n\n    /**\n     * A Comparator that orders {@code String} objects as by\n     * {@code compareToIgnoreCase}. This comparator is serializable.\n     * \u003cp\u003e\n     * Note that this Comparator does \u003cem\u003enot\u003c/em\u003e take locale into account,\n     * and will result in an unsatisfactory ordering for certain locales.\n     * The {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @see     java.text.Collator\n     * @since   1.2\n     */\n    public static final Comparator\u003cString\u003e CASE_INSENSITIVE_ORDER\n                                         \u003d new CaseInsensitiveComparator();\n    private static class CaseInsensitiveComparator\n            implements Comparator\u003cString\u003e, java.io.Serializable {\n        // use serialVersionUID from JDK 1.2.2 for interoperability\n        private static final long serialVersionUID \u003d 8575799808933029326L;\n\n        public int compare(String s1, String s2) {\n            byte v1[] \u003d s1.value;\n            byte v2[] \u003d s2.value;\n            if (s1.coder() \u003d\u003d s2.coder()) {\n                return s1.isLatin1() ? StringLatin1.compareToCI(v1, v2)\n                                     : StringUTF16.compareToCI(v1, v2);\n            }\n            return s1.isLatin1() ? StringLatin1.compareToCI_UTF16(v1, v2)\n                                 : StringUTF16.compareToCI_Latin1(v1, v2);\n        }\n\n        /** Replaces the de-serialized object. */\n        private Object readResolve() { return CASE_INSENSITIVE_ORDER; }\n    }\n\n    /**\n     * Compares two strings lexicographically, ignoring case\n     * differences. This method returns an integer whose sign is that of\n     * calling {@code compareTo} with normalized versions of the strings\n     * where case differences have been eliminated by calling\n     * {@code Character.toLowerCase(Character.toUpperCase(character))} on\n     * each character.\n     * \u003cp\u003e\n     * Note that this method does \u003cem\u003enot\u003c/em\u003e take locale into account,\n     * and will result in an unsatisfactory ordering for certain locales.\n     * The {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @param   str   the {@code String} to be compared.\n     * @return  a negative integer, zero, or a positive integer as the\n     *          specified String is greater than, equal to, or less\n     *          than this String, ignoring case considerations.\n     * @see     java.text.Collator\n     * @since   1.2\n     */\n    public int compareToIgnoreCase(String str) {\n        return CASE_INSENSITIVE_ORDER.compare(this, str);\n    }\n\n    /**\n     * Tests if two string regions are equal.\n     * \u003cp\u003e\n     * A substring of this {@code String} object is compared to a substring\n     * of the argument other. The result is true if these substrings\n     * represent identical character sequences. The substring of this\n     * {@code String} object to be compared begins at index {@code toffset}\n     * and has length {@code len}. The substring of other to be compared\n     * begins at index {@code ooffset} and has length {@code len}. The\n     * result is {@code false} if and only if at least one of the following\n     * is true:\n     * \u003cul\u003e\u003cli\u003e{@code toffset} is negative.\n     * \u003cli\u003e{@code ooffset} is negative.\n     * \u003cli\u003e{@code toffset+len} is greater than the length of this\n     * {@code String} object.\n     * \u003cli\u003e{@code ooffset+len} is greater than the length of the other\n     * argument.\n     * \u003cli\u003eThere is some nonnegative integer \u003ci\u003ek\u003c/i\u003e less than {@code len}\n     * such that:\n     * {@code this.charAt(toffset + }\u003ci\u003ek\u003c/i\u003e{@code ) !\u003d other.charAt(ooffset + }\n     * \u003ci\u003ek\u003c/i\u003e{@code )}\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that this method does \u003cem\u003enot\u003c/em\u003e take locale into account.  The\n     * {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @param   toffset   the starting offset of the subregion in this string.\n     * @param   other     the string argument.\n     * @param   ooffset   the starting offset of the subregion in the string\n     *                    argument.\n     * @param   len       the number of characters to compare.\n     * @return  {@code true} if the specified subregion of this string\n     *          exactly matches the specified subregion of the string argument;\n     *          {@code false} otherwise.\n     */\n    public boolean regionMatches(int toffset, String other, int ooffset, int len) {\n        byte tv[] \u003d value;\n        byte ov[] \u003d other.value;\n        // Note: toffset, ooffset, or len might be near -1\u003e\u003e\u003e1.\n        if ((ooffset \u003c 0) || (toffset \u003c 0) ||\n             (toffset \u003e (long)length() - len) ||\n             (ooffset \u003e (long)other.length() - len)) {\n            return false;\n        }\n        if (coder() \u003d\u003d other.coder()) {\n            if (!isLatin1() \u0026\u0026 (len \u003e 0)) {\n                toffset \u003d toffset \u003c\u003c 1;\n                ooffset \u003d ooffset \u003c\u003c 1;\n                len \u003d len \u003c\u003c 1;\n            }\n            while (len-- \u003e 0) {\n                if (tv[toffset++] !\u003d ov[ooffset++]) {\n                    return false;\n                }\n            }\n        } else {\n            if (coder() \u003d\u003d LATIN1) {\n                while (len-- \u003e 0) {\n                    if (StringLatin1.getChar(tv, toffset++) !\u003d\n                        StringUTF16.getChar(ov, ooffset++)) {\n                        return false;\n                    }\n                }\n            } else {\n                while (len-- \u003e 0) {\n                    if (StringUTF16.getChar(tv, toffset++) !\u003d\n                        StringLatin1.getChar(ov, ooffset++)) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Tests if two string regions are equal.\n     * \u003cp\u003e\n     * A substring of this {@code String} object is compared to a substring\n     * of the argument {@code other}. The result is {@code true} if these\n     * substrings represent character sequences that are the same, ignoring\n     * case if and only if {@code ignoreCase} is true. The substring of\n     * this {@code String} object to be compared begins at index\n     * {@code toffset} and has length {@code len}. The substring of\n     * {@code other} to be compared begins at index {@code ooffset} and\n     * has length {@code len}. The result is {@code false} if and only if\n     * at least one of the following is true:\n     * \u003cul\u003e\u003cli\u003e{@code toffset} is negative.\n     * \u003cli\u003e{@code ooffset} is negative.\n     * \u003cli\u003e{@code toffset+len} is greater than the length of this\n     * {@code String} object.\n     * \u003cli\u003e{@code ooffset+len} is greater than the length of the other\n     * argument.\n     * \u003cli\u003e{@code ignoreCase} is {@code false} and there is some nonnegative\n     * integer \u003ci\u003ek\u003c/i\u003e less than {@code len} such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(toffset+k) !\u003d other.charAt(ooffset+k)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * \u003cli\u003e{@code ignoreCase} is {@code true} and there is some nonnegative\n     * integer \u003ci\u003ek\u003c/i\u003e less than {@code len} such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * Character.toLowerCase(Character.toUpperCase(this.charAt(toffset+k))) !\u003d\n     Character.toLowerCase(Character.toUpperCase(other.charAt(ooffset+k)))\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that this method does \u003cem\u003enot\u003c/em\u003e take locale into account,\n     * and will result in unsatisfactory results for certain locales when\n     * {@code ignoreCase} is {@code true}.  The {@link java.text.Collator} class\n     * provides locale-sensitive comparison.\n     *\n     * @param   ignoreCase   if {@code true}, ignore case when comparing\n     *                       characters.\n     * @param   toffset      the starting offset of the subregion in this\n     *                       string.\n     * @param   other        the string argument.\n     * @param   ooffset      the starting offset of the subregion in the string\n     *                       argument.\n     * @param   len          the number of characters to compare.\n     * @return  {@code true} if the specified subregion of this string\n     *          matches the specified subregion of the string argument;\n     *          {@code false} otherwise. Whether the matching is exact\n     *          or case insensitive depends on the {@code ignoreCase}\n     *          argument.\n     */\n    public boolean regionMatches(boolean ignoreCase, int toffset,\n            String other, int ooffset, int len) {\n        if (!ignoreCase) {\n            return regionMatches(toffset, other, ooffset, len);\n        }\n        // Note: toffset, ooffset, or len might be near -1\u003e\u003e\u003e1.\n        if ((ooffset \u003c 0) || (toffset \u003c 0)\n                || (toffset \u003e (long)length() - len)\n                || (ooffset \u003e (long)other.length() - len)) {\n            return false;\n        }\n        byte tv[] \u003d value;\n        byte ov[] \u003d other.value;\n        if (coder() \u003d\u003d other.coder()) {\n            return isLatin1()\n              ? StringLatin1.regionMatchesCI(tv, toffset, ov, ooffset, len)\n              : StringUTF16.regionMatchesCI(tv, toffset, ov, ooffset, len);\n        }\n        return isLatin1()\n              ? StringLatin1.regionMatchesCI_UTF16(tv, toffset, ov, ooffset, len)\n              : StringUTF16.regionMatchesCI_Latin1(tv, toffset, ov, ooffset, len);\n    }\n\n    /**\n     * Tests if the substring of this string beginning at the\n     * specified index starts with the specified prefix.\n     *\n     * @param   prefix    the prefix.\n     * @param   toffset   where to begin looking in this string.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a prefix of the substring of this object starting\n     *          at index {@code toffset}; {@code false} otherwise.\n     *          The result is {@code false} if {@code toffset} is\n     *          negative or greater than the length of this\n     *          {@code String} object; otherwise the result is the same\n     *          as the result of the expression\n     *          \u003cpre\u003e\n     *          this.substring(toffset).startsWith(prefix)\n     *          \u003c/pre\u003e\n     */\n    public boolean startsWith(String prefix, int toffset) {\n        // Note: toffset might be near -1\u003e\u003e\u003e1.\n        if (toffset \u003c 0 || toffset \u003e length() - prefix.length()) {\n            return false;\n        }\n        byte ta[] \u003d value;\n        byte pa[] \u003d prefix.value;\n        int po \u003d 0;\n        int pc \u003d pa.length;\n        if (coder() \u003d\u003d prefix.coder()) {\n            int to \u003d isLatin1() ? toffset : toffset \u003c\u003c 1;\n            while (po \u003c pc) {\n                if (ta[to++] !\u003d pa[po++]) {\n                    return false;\n                }\n            }\n        } else {\n            if (isLatin1()) {  // \u0026\u0026 pcoder \u003d\u003d UTF16\n                return false;\n            }\n            // coder \u003d\u003d UTF16 \u0026\u0026 pcoder \u003d\u003d LATIN1)\n            while (po \u003c pc) {\n                if (StringUTF16.getChar(ta, toffset++) !\u003d (pa[po++] \u0026 0xff)) {\n                    return false;\n               }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Tests if this string starts with the specified prefix.\n     *\n     * @param   prefix   the prefix.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a prefix of the character sequence represented by\n     *          this string; {@code false} otherwise.\n     *          Note also that {@code true} will be returned if the\n     *          argument is an empty string or is equal to this\n     *          {@code String} object as determined by the\n     *          {@link #equals(Object)} method.\n     * @since   1.0\n     */\n    public boolean startsWith(String prefix) {\n        return startsWith(prefix, 0);\n    }\n\n    /**\n     * Tests if this string ends with the specified suffix.\n     *\n     * @param   suffix   the suffix.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a suffix of the character sequence represented by\n     *          this object; {@code false} otherwise. Note that the\n     *          result will be {@code true} if the argument is the\n     *          empty string or is equal to this {@code String} object\n     *          as determined by the {@link #equals(Object)} method.\n     */\n    public boolean endsWith(String suffix) {\n        return startsWith(suffix, length() - suffix.length());\n    }\n\n    /**\n     * Returns a hash code for this string. The hash code for a\n     * {@code String} object is computed as\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * using {@code int} arithmetic, where {@code s[i]} is the\n     * \u003ci\u003ei\u003c/i\u003eth character of the string, {@code n} is the length of\n     * the string, and {@code ^} indicates exponentiation.\n     * (The hash value of the empty string is zero.)\n     *\n     * @return  a hash code value for this object.\n     */\n    public int hashCode() {\n        int h \u003d hash;\n        if (h \u003d\u003d 0 \u0026\u0026 value.length \u003e 0) {\n            hash \u003d h \u003d isLatin1() ? StringLatin1.hashCode(value)\n                                  : StringUTF16.hashCode(value);\n        }\n        return h;\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of\n     * the specified character. If a character with value\n     * {@code ch} occurs in the character sequence represented by\n     * this {@code String} object, then the index (in Unicode\n     * code units) of the first such occurrence is returned. For\n     * values of {@code ch} in the range from 0 to 0xFFFF\n     * (inclusive), this is the smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. In either case, if no such character occurs in this\n     * string, then {@code -1} is returned.\n     *\n     * @param   ch   a character (Unicode code point).\n     * @return  the index of the first occurrence of the character in the\n     *          character sequence represented by this object, or\n     *          {@code -1} if the character does not occur.\n     */\n    public int indexOf(int ch) {\n        return indexOf(ch, 0);\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified character, starting the search at the specified index.\n     * \u003cp\u003e\n     * If a character with value {@code ch} occurs in the\n     * character sequence represented by this {@code String}\n     * object at an index no smaller than {@code fromIndex}, then\n     * the index of the first such occurrence is returned. For values\n     * of {@code ch} in the range from 0 to 0xFFFF (inclusive),\n     * this is the smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026gt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026gt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. In either case, if no such character occurs in this\n     * string at or after position {@code fromIndex}, then\n     * {@code -1} is returned.\n     *\n     * \u003cp\u003e\n     * There is no restriction on the value of {@code fromIndex}. If it\n     * is negative, it has the same effect as if it were zero: this entire\n     * string may be searched. If it is greater than the length of this\n     * string, it has the same effect as if it were equal to the length of\n     * this string: {@code -1} is returned.\n     *\n     * \u003cp\u003eAll indices are specified in {@code char} values\n     * (Unicode code units).\n     *\n     * @param   ch          a character (Unicode code point).\n     * @param   fromIndex   the index to start the search from.\n     * @return  the index of the first occurrence of the character in the\n     *          character sequence represented by this object that is greater\n     *          than or equal to {@code fromIndex}, or {@code -1}\n     *          if the character does not occur.\n     */\n    public int indexOf(int ch, int fromIndex) {\n        return isLatin1() ? StringLatin1.indexOf(value, ch, fromIndex)\n                          : StringUTF16.indexOf(value, ch, fromIndex);\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of\n     * the specified character. For values of {@code ch} in the\n     * range from 0 to 0xFFFF (inclusive), the index (in Unicode code\n     * units) returned is the largest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * largest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true.  In either case, if no such character occurs in this\n     * string, then {@code -1} is returned.  The\n     * {@code String} is searched backwards starting at the last\n     * character.\n     *\n     * @param   ch   a character (Unicode code point).\n     * @return  the index of the last occurrence of the character in the\n     *          character sequence represented by this object, or\n     *          {@code -1} if the character does not occur.\n     */\n    public int lastIndexOf(int ch) {\n        return lastIndexOf(ch, length() - 1);\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of\n     * the specified character, searching backward starting at the\n     * specified index. For values of {@code ch} in the range\n     * from 0 to 0xFFFF (inclusive), the index returned is the largest\n     * value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026lt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * largest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026lt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. In either case, if no such character occurs in this\n     * string at or before position {@code fromIndex}, then\n     * {@code -1} is returned.\n     *\n     * \u003cp\u003eAll indices are specified in {@code char} values\n     * (Unicode code units).\n     *\n     * @param   ch          a character (Unicode code point).\n     * @param   fromIndex   the index to start the search from. There is no\n     *          restriction on the value of {@code fromIndex}. If it is\n     *          greater than or equal to the length of this string, it has\n     *          the same effect as if it were equal to one less than the\n     *          length of this string: this entire string may be searched.\n     *          If it is negative, it has the same effect as if it were -1:\n     *          -1 is returned.\n     * @return  the index of the last occurrence of the character in the\n     *          character sequence represented by this object that is less\n     *          than or equal to {@code fromIndex}, or {@code -1}\n     *          if the character does not occur before that point.\n     */\n    public int lastIndexOf(int ch, int fromIndex) {\n        return isLatin1() ? StringLatin1.lastIndexOf(value, ch, fromIndex)\n                          : StringUTF16.lastIndexOf(value, ch, fromIndex);\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified substring.\n     *\n     * \u003cp\u003eThe returned index is the smallest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     * this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str   the substring to search for.\n     * @return  the index of the first occurrence of the specified substring,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int indexOf(String str) {\n        if (coder() \u003d\u003d str.coder()) {\n            return isLatin1() ? StringLatin1.indexOf(value, str.value)\n                              : StringUTF16.indexOf(value, str.value);\n        }\n        if (coder() \u003d\u003d LATIN1) {  // str.coder \u003d\u003d UTF16\n            return -1;\n        }\n        return StringUTF16.indexOfLatin1(value, str.value);\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified substring, starting at the specified index.\n     *\n     * \u003cp\u003eThe returned index is the smallest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     *     k \u003e\u003d Math.min(fromIndex, this.length()) \u0026\u0026\n     *                   this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str         the substring to search for.\n     * @param   fromIndex   the index from which to start the search.\n     * @return  the index of the first occurrence of the specified substring,\n     *          starting at the specified index,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int indexOf(String str, int fromIndex) {\n        return indexOf(value, coder(), length(), str, fromIndex);\n    }\n\n    /**\n     * Code shared by String and AbstractStringBuilder to do searches. The\n     * source is the character array being searched, and the target\n     * is the string being searched for.\n     *\n     * @param   src       the characters being searched.\n     * @param   srcCoder  the coder of the source string.\n     * @param   srcCount  length of the source string.\n     * @param   tgtStr    the characters being searched for.\n     * @param   fromIndex the index to begin searching from.\n     */\n    static int indexOf(byte[] src, byte srcCoder, int srcCount,\n                       String tgtStr, int fromIndex) {\n        byte[] tgt    \u003d tgtStr.value;\n        byte tgtCoder \u003d tgtStr.coder();\n        int tgtCount  \u003d tgtStr.length();\n\n        if (fromIndex \u003e\u003d srcCount) {\n            return (tgtCount \u003d\u003d 0 ? srcCount : -1);\n        }\n        if (fromIndex \u003c 0) {\n            fromIndex \u003d 0;\n        }\n        if (tgtCount \u003d\u003d 0) {\n            return fromIndex;\n        }\n        if (tgtCount \u003e srcCount) {\n            return -1;\n        }\n        if (srcCoder \u003d\u003d tgtCoder) {\n            return srcCoder \u003d\u003d LATIN1\n                ? StringLatin1.indexOf(src, srcCount, tgt, tgtCount, fromIndex)\n                : StringUTF16.indexOf(src, srcCount, tgt, tgtCount, fromIndex);\n        }\n        if (srcCoder \u003d\u003d LATIN1) {    //  \u0026\u0026 tgtCoder \u003d\u003d UTF16\n            return -1;\n        }\n        // srcCoder \u003d\u003d UTF16 \u0026\u0026 tgtCoder \u003d\u003d LATIN1) {\n        return StringUTF16.indexOfLatin1(src, srcCount, tgt, tgtCount, fromIndex);\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of the\n     * specified substring.  The last occurrence of the empty string \"\"\n     * is considered to occur at the index value {@code this.length()}.\n     *\n     * \u003cp\u003eThe returned index is the largest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     * this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str   the substring to search for.\n     * @return  the index of the last occurrence of the specified substring,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int lastIndexOf(String str) {\n        return lastIndexOf(str, length());\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of the\n     * specified substring, searching backward starting at the specified index.\n     *\n     * \u003cp\u003eThe returned index is the largest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     *     k \u003c\u003d Math.min(fromIndex, this.length()) \u0026\u0026\n     *                   this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str         the substring to search for.\n     * @param   fromIndex   the index to start the search from.\n     * @return  the index of the last occurrence of the specified substring,\n     *          searching backward from the specified index,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int lastIndexOf(String str, int fromIndex) {\n        return lastIndexOf(value, coder(), length(), str, fromIndex);\n    }\n\n    /**\n     * Code shared by String and AbstractStringBuilder to do searches. The\n     * source is the character array being searched, and the target\n     * is the string being searched for.\n     *\n     * @param   src         the characters being searched.\n     * @param   srcCoder    coder handles the mapping between bytes/chars\n     * @param   srcCount    count of the source string.\n     * @param   tgt         the characters being searched for.\n     * @param   fromIndex   the index to begin searching from.\n     */\n    static int lastIndexOf(byte[] src, byte srcCoder, int srcCount,\n                           String tgtStr, int fromIndex) {\n        byte[] tgt \u003d tgtStr.value;\n        byte tgtCoder \u003d tgtStr.coder();\n        int tgtCount \u003d tgtStr.length();\n        /*\n         * Check arguments; return immediately where possible. For\n         * consistency, don\u0027t check for null str.\n         */\n        int rightIndex \u003d srcCount - tgtCount;\n        if (fromIndex \u003e rightIndex) {\n            fromIndex \u003d rightIndex;\n        }\n        if (fromIndex \u003c 0) {\n            return -1;\n        }\n        /* Empty string always matches. */\n        if (tgtCount \u003d\u003d 0) {\n            return fromIndex;\n        }\n        if (srcCoder \u003d\u003d tgtCoder) {\n            return srcCoder \u003d\u003d LATIN1\n                ? StringLatin1.lastIndexOf(src, srcCount, tgt, tgtCount, fromIndex)\n                : StringUTF16.lastIndexOf(src, srcCount, tgt, tgtCount, fromIndex);\n        }\n        if (srcCoder \u003d\u003d LATIN1) {    // \u0026\u0026 tgtCoder \u003d\u003d UTF16\n            return -1;\n        }\n        // srcCoder \u003d\u003d UTF16 \u0026\u0026 tgtCoder \u003d\u003d LATIN1\n        return StringUTF16.lastIndexOfLatin1(src, srcCount, tgt, tgtCount, fromIndex);\n    }\n\n    /**\n     * Returns a string that is a substring of this string. The\n     * substring begins with the character at the specified index and\n     * extends to the end of this string. \u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"unhappy\".substring(2) returns \"happy\"\n     * \"Harbison\".substring(3) returns \"bison\"\n     * \"emptiness\".substring(9) returns \"\" (an empty string)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param      beginIndex   the beginning index, inclusive.\n     * @return     the specified substring.\n     * @exception  IndexOutOfBoundsException  if\n     *             {@code beginIndex} is negative or larger than the\n     *             length of this {@code String} object.\n     */\n    public String substring(int beginIndex) {\n        if (beginIndex \u003c 0) {\n            throw new StringIndexOutOfBoundsException(beginIndex);\n        }\n        int subLen \u003d length() - beginIndex;\n        if (subLen \u003c 0) {\n            throw new StringIndexOutOfBoundsException(subLen);\n        }\n        if (beginIndex \u003d\u003d 0) {\n            return this;\n        }\n        return isLatin1() ? StringLatin1.newString(value, beginIndex, subLen)\n                          : StringUTF16.newString(value, beginIndex, subLen);\n    }\n\n    /**\n     * Returns a string that is a substring of this string. The\n     * substring begins at the specified {@code beginIndex} and\n     * extends to the character at index {@code endIndex - 1}.\n     * Thus the length of the substring is {@code endIndex-beginIndex}.\n     * \u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"hamburger\".substring(4, 8) returns \"urge\"\n     * \"smiles\".substring(1, 5) returns \"mile\"\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param      beginIndex   the beginning index, inclusive.\n     * @param      endIndex     the ending index, exclusive.\n     * @return     the specified substring.\n     * @exception  IndexOutOfBoundsException  if the\n     *             {@code beginIndex} is negative, or\n     *             {@code endIndex} is larger than the length of\n     *             this {@code String} object, or\n     *             {@code beginIndex} is larger than\n     *             {@code endIndex}.\n     */\n    public String substring(int beginIndex, int endIndex) {\n        int length \u003d length();\n        checkBoundsBeginEnd(beginIndex, endIndex, length);\n        int subLen \u003d endIndex - beginIndex;\n        if (beginIndex \u003d\u003d 0 \u0026\u0026 endIndex \u003d\u003d length) {\n            return this;\n        }\n        return isLatin1() ? StringLatin1.newString(value, beginIndex, subLen)\n                          : StringUTF16.newString(value, beginIndex, subLen);\n    }\n\n    /**\n     * Returns a character sequence that is a subsequence of this sequence.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * str.subSequence(begin,\u0026nbsp;end)\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * behaves in exactly the same way as the invocation\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * str.substring(begin,\u0026nbsp;end)\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @apiNote\n     * This method is defined so that the {@code String} class can implement\n     * the {@link CharSequence} interface.\n     *\n     * @param   beginIndex   the begin index, inclusive.\n     * @param   endIndex     the end index, exclusive.\n     * @return  the specified subsequence.\n     *\n     * @throws  IndexOutOfBoundsException\n     *          if {@code beginIndex} or {@code endIndex} is negative,\n     *          if {@code endIndex} is greater than {@code length()},\n     *          or if {@code beginIndex} is greater than {@code endIndex}\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public CharSequence subSequence(int beginIndex, int endIndex) {\n        return this.substring(beginIndex, endIndex);\n    }\n\n    /**\n     * Concatenates the specified string to the end of this string.\n     * \u003cp\u003e\n     * If the length of the argument string is {@code 0}, then this\n     * {@code String} object is returned. Otherwise, a\n     * {@code String} object is returned that represents a character\n     * sequence that is the concatenation of the character sequence\n     * represented by this {@code String} object and the character\n     * sequence represented by the argument string.\u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"cares\".concat(\"s\") returns \"caress\"\n     * \"to\".concat(\"get\").concat(\"her\") returns \"together\"\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param   str   the {@code String} that is concatenated to the end\n     *                of this {@code String}.\n     * @return  a string that represents the concatenation of this object\u0027s\n     *          characters followed by the string argument\u0027s characters.\n     */\n    public String concat(String str) {\n        if (str.isEmpty()) {\n            return this;\n        }\n        if (coder() \u003d\u003d str.coder()) {\n            byte[] val \u003d this.value;\n            byte[] oval \u003d str.value;\n            int len \u003d val.length + oval.length;\n            byte[] buf \u003d Arrays.copyOf(val, len);\n            System.arraycopy(oval, 0, buf, val.length, oval.length);\n            return new String(buf, coder);\n        }\n        int len \u003d length();\n        int olen \u003d str.length();\n        byte[] buf \u003d StringUTF16.newBytesFor(len + olen);\n        getBytes(buf, 0, UTF16);\n        str.getBytes(buf, len, UTF16);\n        return new String(buf, UTF16);\n    }\n\n    /**\n     * Returns a string resulting from replacing all occurrences of\n     * {@code oldChar} in this string with {@code newChar}.\n     * \u003cp\u003e\n     * If the character {@code oldChar} does not occur in the\n     * character sequence represented by this {@code String} object,\n     * then a reference to this {@code String} object is returned.\n     * Otherwise, a {@code String} object is returned that\n     * represents a character sequence identical to the character sequence\n     * represented by this {@code String} object, except that every\n     * occurrence of {@code oldChar} is replaced by an occurrence\n     * of {@code newChar}.\n     * \u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"mesquite in your cellar\".replace(\u0027e\u0027, \u0027o\u0027)\n     *         returns \"mosquito in your collar\"\n     * \"the war of baronets\".replace(\u0027r\u0027, \u0027y\u0027)\n     *         returns \"the way of bayonets\"\n     * \"sparring with a purple porpoise\".replace(\u0027p\u0027, \u0027t\u0027)\n     *         returns \"starring with a turtle tortoise\"\n     * \"JonL\".replace(\u0027q\u0027, \u0027x\u0027) returns \"JonL\" (no change)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param   oldChar   the old character.\n     * @param   newChar   the new character.\n     * @return  a string derived from this string by replacing every\n     *          occurrence of {@code oldChar} with {@code newChar}.\n     */\n    public String replace(char oldChar, char newChar) {\n        if (oldChar !\u003d newChar) {\n            String ret \u003d isLatin1() ? StringLatin1.replace(value, oldChar, newChar)\n                                    : StringUTF16.replace(value, oldChar, newChar);\n            if (ret !\u003d null) {\n                return ret;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Tells whether or not this string matches the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr\u003c/i\u003e{@code .matches(}\u003ci\u003eregex\u003c/i\u003e{@code )} yields exactly the\n     * same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * {@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#matches(String,CharSequence)\n     * matches(\u003ci\u003eregex\u003c/i\u003e, \u003ci\u003estr\u003c/i\u003e)}\n     * \u003c/blockquote\u003e\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     *\n     * @return  {@code true} if, and only if, this string matches the\n     *          given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public boolean matches(String regex) {\n        return Pattern.matches(regex, this);\n    }\n\n    /**\n     * Returns true if and only if this string contains the specified\n     * sequence of char values.\n     *\n     * @param s the sequence to search for\n     * @return true if this string contains {@code s}, false otherwise\n     * @since 1.5\n     */\n    public boolean contains(CharSequence s) {\n        return indexOf(s.toString()) \u003e\u003d 0;\n    }\n\n    /**\n     * Replaces the first substring of this string that matches the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e with the\n     * given replacement.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr\u003c/i\u003e{@code .replaceFirst(}\u003ci\u003eregex\u003c/i\u003e{@code ,} \u003ci\u003erepl\u003c/i\u003e{@code )}\n     * yields exactly the same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * \u003ccode\u003e\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n     * java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher}(\u003ci\u003estr\u003c/i\u003e).{@link\n     * java.util.regex.Matcher#replaceFirst replaceFirst}(\u003ci\u003erepl\u003c/i\u003e)\n     * \u003c/code\u003e\n     * \u003c/blockquote\u003e\n     *\n     *\u003cp\u003e\n     * Note that backslashes ({@code \\}) and dollar signs ({@code $}) in the\n     * replacement string may cause the results to be different than if it were\n     * being treated as a literal replacement string; see\n     * {@link java.util.regex.Matcher#replaceFirst}.\n     * Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special\n     * meaning of these characters, if desired.\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     * @param   replacement\n     *          the string to be substituted for the first match\n     *\n     * @return  The resulting {@code String}\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public String replaceFirst(String regex, String replacement) {\n        return Pattern.compile(regex).matcher(this).replaceFirst(replacement);\n    }\n\n    /**\n     * Replaces each substring of this string that matches the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e with the\n     * given replacement.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr\u003c/i\u003e{@code .replaceAll(}\u003ci\u003eregex\u003c/i\u003e{@code ,} \u003ci\u003erepl\u003c/i\u003e{@code )}\n     * yields exactly the same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * \u003ccode\u003e\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n     * java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher}(\u003ci\u003estr\u003c/i\u003e).{@link\n     * java.util.regex.Matcher#replaceAll replaceAll}(\u003ci\u003erepl\u003c/i\u003e)\n     * \u003c/code\u003e\n     * \u003c/blockquote\u003e\n     *\n     *\u003cp\u003e\n     * Note that backslashes ({@code \\}) and dollar signs ({@code $}) in the\n     * replacement string may cause the results to be different than if it were\n     * being treated as a literal replacement string; see\n     * {@link java.util.regex.Matcher#replaceAll Matcher.replaceAll}.\n     * Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special\n     * meaning of these characters, if desired.\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     * @param   replacement\n     *          the string to be substituted for each match\n     *\n     * @return  The resulting {@code String}\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public String replaceAll(String regex, String replacement) {\n        return Pattern.compile(regex).matcher(this).replaceAll(replacement);\n    }\n\n    /**\n     * Replaces each substring of this string that matches the literal target\n     * sequence with the specified literal replacement sequence. The\n     * replacement proceeds from the beginning of the string to the end, for\n     * example, replacing \"aa\" with \"b\" in the string \"aaa\" will result in\n     * \"ba\" rather than \"ab\".\n     *\n     * @param  target The sequence of char values to be replaced\n     * @param  replacement The replacement sequence of char values\n     * @return  The resulting string\n     * @since 1.5\n     */\n    public String replace(CharSequence target, CharSequence replacement) {\n        String tgtStr \u003d target.toString();\n        String replStr \u003d replacement.toString();\n        int j \u003d indexOf(tgtStr);\n        if (j \u003c 0) {\n            return this;\n        }\n        int tgtLen \u003d tgtStr.length();\n        int tgtLen1 \u003d Math.max(tgtLen, 1);\n        int thisLen \u003d length();\n\n        int newLenHint \u003d thisLen - tgtLen + replStr.length();\n        if (newLenHint \u003c 0) {\n            throw new OutOfMemoryError();\n        }\n        StringBuilder sb \u003d new StringBuilder(newLenHint);\n        int i \u003d 0;\n        do {\n            sb.append(this, i, j).append(replStr);\n            i \u003d j + tgtLen;\n        } while (j \u003c thisLen \u0026\u0026 (j \u003d indexOf(tgtStr, j + tgtLen1)) \u003e 0);\n        return sb.append(this, i, thisLen).toString();\n    }\n\n    /**\n     * Splits this string around matches of the given\n     * \u003ca href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n     *\n     * \u003cp\u003e The array returned by this method contains each substring of this\n     * string that is terminated by another substring that matches the given\n     * expression or is terminated by the end of the string.  The substrings in\n     * the array are in the order in which they occur in this string.  If the\n     * expression does not match any part of the input then the resulting array\n     * has just one element, namely this string.\n     *\n     * \u003cp\u003e When there is a positive-width match at the beginning of this\n     * string then an empty leading substring is included at the beginning\n     * of the resulting array. A zero-width match at the beginning however\n     * never produces such empty leading substring.\n     *\n     * \u003cp\u003e The {@code limit} parameter controls the number of times the\n     * pattern is applied and therefore affects the length of the resulting\n     * array.\n     * \u003cul\u003e\n     *    \u003cli\u003e\u003cp\u003e\n     *    If the \u003ci\u003elimit\u003c/i\u003e is positive then the pattern will be applied\n     *    at most \u003ci\u003elimit\u003c/i\u003e\u0026nbsp;-\u0026nbsp;1 times, the array\u0027s length will be\n     *    no greater than \u003ci\u003elimit\u003c/i\u003e, and the array\u0027s last entry will contain\n     *    all input beyond the last matched delimiter.\u003c/p\u003e\u003c/li\u003e\n     *\n     *    \u003cli\u003e\u003cp\u003e\n     *    If the \u003ci\u003elimit\u003c/i\u003e is zero then the pattern will be applied as\n     *    many times as possible, the array can have any length, and trailing\n     *    empty strings will be discarded.\u003c/p\u003e\u003c/li\u003e\n     *\n     *    \u003cli\u003e\u003cp\u003e\n     *    If the \u003ci\u003elimit\u003c/i\u003e is negative then the pattern will be applied\n     *    as many times as possible and the array can have any length.\u003c/p\u003e\u003c/li\u003e\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003e The string {@code \"boo:and:foo\"}, for example, yields the\n     * following results with these parameters:\n     *\n     * \u003cblockquote\u003e\u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eSplit example showing regex, limit, and result\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *     \u003cth scope\u003d\"col\"\u003eRegex\u003c/th\u003e\n     *     \u003cth scope\u003d\"col\"\u003eLimit\u003c/th\u003e\n     *     \u003cth scope\u003d\"col\"\u003eResult\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" rowspan\u003d\"3\" style\u003d\"font-weight:normal\"\u003e:\u003c/th\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e2\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and:foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- : --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e5\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- : --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e-2\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" rowspan\u003d\"3\" style\u003d\"font-weight:normal\"\u003eo\u003c/th\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e5\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\", \"\", \"\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- o --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e-2\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\", \"\", \"\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- o --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e0\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\u003c/blockquote\u003e\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr.\u003c/i\u003e{@code split(}\u003ci\u003eregex\u003c/i\u003e{@code ,}\u0026nbsp;\u003ci\u003en\u003c/i\u003e{@code )}\n     * yields the same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * \u003ccode\u003e\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n     * java.util.regex.Pattern#split(java.lang.CharSequence,int) split}(\u003ci\u003estr\u003c/i\u003e,\u0026nbsp;\u003ci\u003en\u003c/i\u003e)\n     * \u003c/code\u003e\n     * \u003c/blockquote\u003e\n     *\n     *\n     * @param  regex\n     *         the delimiting regular expression\n     *\n     * @param  limit\n     *         the result threshold, as described above\n     *\n     * @return  the array of strings computed by splitting this string\n     *          around matches of the given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public String[] split(String regex, int limit) {\n        /* fastpath if the regex is a\n         (1)one-char String and this character is not one of the\n            RegEx\u0027s meta characters \".$|()[{^?*+\\\\\", or\n         (2)two-char String and the first char is the backslash and\n            the second is not the ascii digit or ascii letter.\n         */\n        char ch \u003d 0;\n        if (((regex.length() \u003d\u003d 1 \u0026\u0026\n             \".$|()[{^?*+\\\\\".indexOf(ch \u003d regex.charAt(0)) \u003d\u003d -1) ||\n             (regex.length() \u003d\u003d 2 \u0026\u0026\n              regex.charAt(0) \u003d\u003d \u0027\\\\\u0027 \u0026\u0026\n              (((ch \u003d regex.charAt(1))-\u00270\u0027)|(\u00279\u0027-ch)) \u003c 0 \u0026\u0026\n              ((ch-\u0027a\u0027)|(\u0027z\u0027-ch)) \u003c 0 \u0026\u0026\n              ((ch-\u0027A\u0027)|(\u0027Z\u0027-ch)) \u003c 0)) \u0026\u0026\n            (ch \u003c Character.MIN_HIGH_SURROGATE ||\n             ch \u003e Character.MAX_LOW_SURROGATE))\n        {\n            int off \u003d 0;\n            int next \u003d 0;\n            boolean limited \u003d limit \u003e 0;\n            ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();\n            while ((next \u003d indexOf(ch, off)) !\u003d -1) {\n                if (!limited || list.size() \u003c limit - 1) {\n                    list.add(substring(off, next));\n                    off \u003d next + 1;\n                } else {    // last one\n                    //assert (list.size() \u003d\u003d limit - 1);\n                    int last \u003d length();\n                    list.add(substring(off, last));\n                    off \u003d last;\n                    break;\n                }\n            }\n            // If no match was found, return this\n            if (off \u003d\u003d 0)\n                return new String[]{this};\n\n            // Add remaining segment\n            if (!limited || list.size() \u003c limit)\n                list.add(substring(off, length()));\n\n            // Construct result\n            int resultSize \u003d list.size();\n            if (limit \u003d\u003d 0) {\n                while (resultSize \u003e 0 \u0026\u0026 list.get(resultSize - 1).isEmpty()) {\n                    resultSize--;\n                }\n            }\n            String[] result \u003d new String[resultSize];\n            return list.subList(0, resultSize).toArray(result);\n        }\n        return Pattern.compile(regex).split(this, limit);\n    }\n\n    /**\n     * Splits this string around matches of the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n     *\n     * \u003cp\u003e This method works as if by invoking the two-argument {@link\n     * #split(String, int) split} method with the given expression and a limit\n     * argument of zero.  Trailing empty strings are therefore not included in\n     * the resulting array.\n     *\n     * \u003cp\u003e The string {@code \"boo:and:foo\"}, for example, yields the following\n     * results with these expressions:\n     *\n     * \u003cblockquote\u003e\u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eSplit examples showing regex and result\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *  \u003cth scope\u003d\"col\"\u003eRegex\u003c/th\u003e\n     *  \u003cth scope\u003d\"col\"\u003eResult\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" style\u003d\"text-weight:normal\"\u003e:\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" style\u003d\"text-weight:normal\"\u003eo\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\u003c/blockquote\u003e\n     *\n     *\n     * @param  regex\n     *         the delimiting regular expression\n     *\n     * @return  the array of strings computed by splitting this string\n     *          around matches of the given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public String[] split(String regex) {\n        return split(regex, 0);\n    }\n\n    /**\n     * Returns a new String composed of copies of the\n     * {@code CharSequence elements} joined together with a copy of\n     * the specified {@code delimiter}.\n     *\n     * \u003cblockquote\u003eFor example,\n     * \u003cpre\u003e{@code\n     *     String message \u003d String.join(\"-\", \"Java\", \"is\", \"cool\");\n     *     // message returned is: \"Java-is-cool\"\n     * }\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * Note that if an element is null, then {@code \"null\"} is added.\n     *\n     * @param  delimiter the delimiter that separates each element\n     * @param  elements the elements to join together.\n     *\n     * @return a new {@code String} that is composed of the {@code elements}\n     *         separated by the {@code delimiter}\n     *\n     * @throws NullPointerException If {@code delimiter} or {@code elements}\n     *         is {@code null}\n     *\n     * @see java.util.StringJoiner\n     * @since 1.8\n     */\n    public static String join(CharSequence delimiter, CharSequence... elements) {\n        Objects.requireNonNull(delimiter);\n        Objects.requireNonNull(elements);\n        // Number of elements not likely worth Arrays.stream overhead.\n        StringJoiner joiner \u003d new StringJoiner(delimiter);\n        for (CharSequence cs: elements) {\n            joiner.add(cs);\n        }\n        return joiner.toString();\n    }\n\n    /**\n     * Returns a new {@code String} composed of copies of the\n     * {@code CharSequence elements} joined together with a copy of the\n     * specified {@code delimiter}.\n     *\n     * \u003cblockquote\u003eFor example,\n     * \u003cpre\u003e{@code\n     *     List\u003cString\u003e strings \u003d List.of(\"Java\", \"is\", \"cool\");\n     *     String message \u003d String.join(\" \", strings);\n     *     //message returned is: \"Java is cool\"\n     *\n     *     Set\u003cString\u003e strings \u003d\n     *         new LinkedHashSet\u003c\u003e(List.of(\"Java\", \"is\", \"very\", \"cool\"));\n     *     String message \u003d String.join(\"-\", strings);\n     *     //message returned is: \"Java-is-very-cool\"\n     * }\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * Note that if an individual element is {@code null}, then {@code \"null\"} is added.\n     *\n     * @param  delimiter a sequence of characters that is used to separate each\n     *         of the {@code elements} in the resulting {@code String}\n     * @param  elements an {@code Iterable} that will have its {@code elements}\n     *         joined together.\n     *\n     * @return a new {@code String} that is composed from the {@code elements}\n     *         argument\n     *\n     * @throws NullPointerException If {@code delimiter} or {@code elements}\n     *         is {@code null}\n     *\n     * @see    #join(CharSequence,CharSequence...)\n     * @see    java.util.StringJoiner\n     * @since 1.8\n     */\n    public static String join(CharSequence delimiter,\n            Iterable\u003c? extends CharSequence\u003e elements) {\n        Objects.requireNonNull(delimiter);\n        Objects.requireNonNull(elements);\n        StringJoiner joiner \u003d new StringJoiner(delimiter);\n        for (CharSequence cs: elements) {\n            joiner.add(cs);\n        }\n        return joiner.toString();\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to lower\n     * case using the rules of the given {@code Locale}.  Case mapping is based\n     * on the Unicode Standard version specified by the {@link java.lang.Character Character}\n     * class. Since case mappings are not always 1:1 char mappings, the resulting\n     * {@code String} may be a different length than the original {@code String}.\n     * \u003cp\u003e\n     * Examples of lowercase  mappings are in the following table:\n     * \u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eLowercase mapping examples showing language code of locale, upper case, lower case, and description\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLanguage Code of Locale\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eUpper Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLower Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eDescription\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0130\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0069\u003c/td\u003e\n     *   \u003ctd\u003ecapital letter I with dot above -\u0026gt; small letter i\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0049\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0131\u003c/td\u003e\n     *   \u003ctd\u003ecapital letter I -\u0026gt; small letter dotless i \u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003eFrench Fries\u003c/th\u003e\n     *   \u003ctd\u003efrench fries\u003c/td\u003e\n     *   \u003ctd\u003elowercased all chars in String\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\n     *       \u0026Iota;\u0026Chi;\u0026Theta;\u0026Upsilon;\u0026Sigma;\u003c/th\u003e\n     *   \u003ctd\u003e\u0026iota;\u0026chi;\u0026theta;\u0026upsilon;\u0026sigma;\u003c/td\u003e\n     *   \u003ctd\u003elowercased all chars in String\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\n     *\n     * @param locale use the case transformation rules for this locale\n     * @return the {@code String}, converted to lowercase.\n     * @see     java.lang.String#toLowerCase()\n     * @see     java.lang.String#toUpperCase()\n     * @see     java.lang.String#toUpperCase(Locale)\n     * @since   1.1\n     */\n    public String toLowerCase(Locale locale) {\n        return isLatin1() ? StringLatin1.toLowerCase(this, value, locale)\n                          : StringUTF16.toLowerCase(this, value, locale);\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to lower\n     * case using the rules of the default locale. This is equivalent to calling\n     * {@code toLowerCase(Locale.getDefault())}.\n     * \u003cp\u003e\n     * \u003cb\u003eNote:\u003c/b\u003e This method is locale sensitive, and may produce unexpected\n     * results if used for strings that are intended to be interpreted locale\n     * independently.\n     * Examples are programming language identifiers, protocol keys, and HTML\n     * tags.\n     * For instance, {@code \"TITLE\".toLowerCase()} in a Turkish locale\n     * returns {@code \"t\\u005Cu0131tle\"}, where \u0027\\u005Cu0131\u0027 is the\n     * LATIN SMALL LETTER DOTLESS I character.\n     * To obtain correct results for locale insensitive strings, use\n     * {@code toLowerCase(Locale.ROOT)}.\n     *\n     * @return  the {@code String}, converted to lowercase.\n     * @see     java.lang.String#toLowerCase(Locale)\n     */\n    public String toLowerCase() {\n        return toLowerCase(Locale.getDefault());\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to upper\n     * case using the rules of the given {@code Locale}. Case mapping is based\n     * on the Unicode Standard version specified by the {@link java.lang.Character Character}\n     * class. Since case mappings are not always 1:1 char mappings, the resulting\n     * {@code String} may be a different length than the original {@code String}.\n     * \u003cp\u003e\n     * Examples of locale-sensitive and 1:M case mappings are in the following table.\n     *\n     * \u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eExamples of locale-sensitive and 1:M case mappings. Shows Language code of locale, lower case, upper case, and description.\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLanguage Code of Locale\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLower Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eUpper Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eDescription\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0069\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0130\u003c/td\u003e\n     *   \u003ctd\u003esmall letter i -\u0026gt; capital letter I with dot above\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0131\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0049\u003c/td\u003e\n     *   \u003ctd\u003esmall letter dotless i -\u0026gt; capital letter I\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u00df\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0053 \u0026#92;u0053\u003c/td\u003e\n     *   \u003ctd\u003esmall letter sharp s -\u0026gt; two letters: SS\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003eFahrvergn\u0026uuml;gen\u003c/th\u003e\n     *   \u003ctd\u003eFAHRVERGN\u0026Uuml;GEN\u003c/td\u003e\n     *   \u003ctd\u003e\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\n     * @param locale use the case transformation rules for this locale\n     * @return the {@code String}, converted to uppercase.\n     * @see     java.lang.String#toUpperCase()\n     * @see     java.lang.String#toLowerCase()\n     * @see     java.lang.String#toLowerCase(Locale)\n     * @since   1.1\n     */\n    public String toUpperCase(Locale locale) {\n        return isLatin1() ? StringLatin1.toUpperCase(this, value, locale)\n                          : StringUTF16.toUpperCase(this, value, locale);\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to upper\n     * case using the rules of the default locale. This method is equivalent to\n     * {@code toUpperCase(Locale.getDefault())}.\n     * \u003cp\u003e\n     * \u003cb\u003eNote:\u003c/b\u003e This method is locale sensitive, and may produce unexpected\n     * results if used for strings that are intended to be interpreted locale\n     * independently.\n     * Examples are programming language identifiers, protocol keys, and HTML\n     * tags.\n     * For instance, {@code \"title\".toUpperCase()} in a Turkish locale\n     * returns {@code \"T\\u005Cu0130TLE\"}, where \u0027\\u005Cu0130\u0027 is the\n     * LATIN CAPITAL LETTER I WITH DOT ABOVE character.\n     * To obtain correct results for locale insensitive strings, use\n     * {@code toUpperCase(Locale.ROOT)}.\n     *\n     * @return  the {@code String}, converted to uppercase.\n     * @see     java.lang.String#toUpperCase(Locale)\n     */\n    public String toUpperCase() {\n        return toUpperCase(Locale.getDefault());\n    }\n\n    /**\n     * Returns a string whose value is this string, with all leading\n     * and trailing space removed, where space is defined\n     * as any character whose codepoint is less than or equal to\n     * {@code \u0027U+0020\u0027} (the space character).\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty character\n     * sequence, or the first and last characters of character sequence\n     * represented by this {@code String} object both have codes\n     * that are not space (as defined above), then a\n     * reference to this {@code String} object is returned.\n     * \u003cp\u003e\n     * Otherwise, if all characters in this string are space (as\n     * defined above), then a  {@code String} object representing an\n     * empty string is returned.\n     * \u003cp\u003e\n     * Otherwise, let \u003ci\u003ek\u003c/i\u003e be the index of the first character in the\n     * string whose code is not a space (as defined above) and let\n     * \u003ci\u003em\u003c/i\u003e be the index of the last character in the string whose code\n     * is not a space (as defined above). A {@code String}\n     * object is returned, representing the substring of this string that\n     * begins with the character at index \u003ci\u003ek\u003c/i\u003e and ends with the\n     * character at index \u003ci\u003em\u003c/i\u003e-that is, the result of\n     * {@code this.substring(k, m + 1)}.\n     * \u003cp\u003e\n     * This method may be used to trim space (as defined above) from\n     * the beginning and end of a string.\n     *\n     * @return  a string whose value is this string, with all leading\n     *          and trailing space removed, or this string if it\n     *          has no leading or trailing space.\n     */\n    public String trim() {\n        String ret \u003d isLatin1() ? StringLatin1.trim(value)\n                                : StringUTF16.trim(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns a string whose value is this string, with all leading\n     * and trailing {@link Character#isWhitespace(int) white space}\n     * removed.\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty string,\n     * or if all code points in this string are\n     * {@link Character#isWhitespace(int) white space}, then an empty string\n     * is returned.\n     * \u003cp\u003e\n     * Otherwise, returns a substring of this string beginning with the first\n     * code point that is not a {@link Character#isWhitespace(int) white space}\n     * up to and including the last code point that is not a\n     * {@link Character#isWhitespace(int) white space}.\n     * \u003cp\u003e\n     * This method may be used to strip\n     * {@link Character#isWhitespace(int) white space} from\n     * the beginning and end of a string.\n     *\n     * @return  a string whose value is this string, with all leading\n     *          and trailing white space removed\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public String strip() {\n        String ret \u003d isLatin1() ? StringLatin1.strip(value)\n                                : StringUTF16.strip(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns a string whose value is this string, with all leading\n     * {@link Character#isWhitespace(int) white space} removed.\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty string,\n     * or if all code points in this string are\n     * {@link Character#isWhitespace(int) white space}, then an empty string\n     * is returned.\n     * \u003cp\u003e\n     * Otherwise, returns a substring of this string beginning with the first\n     * code point that is not a {@link Character#isWhitespace(int) white space}\n     * up to to and including the last code point of this string.\n     * \u003cp\u003e\n     * This method may be used to trim\n     * {@link Character#isWhitespace(int) white space} from\n     * the beginning of a string.\n     *\n     * @return  a string whose value is this string, with all leading white\n     *          space removed\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public String stripLeading() {\n        String ret \u003d isLatin1() ? StringLatin1.stripLeading(value)\n                                : StringUTF16.stripLeading(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns a string whose value is this string, with all trailing\n     * {@link Character#isWhitespace(int) white space} removed.\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty string,\n     * or if all characters in this string are\n     * {@link Character#isWhitespace(int) white space}, then an empty string\n     * is returned.\n     * \u003cp\u003e\n     * Otherwise, returns a substring of this string beginning with the first\n     * code point of this string up to and including the last code point\n     * that is not a {@link Character#isWhitespace(int) white space}.\n     * \u003cp\u003e\n     * This method may be used to trim\n     * {@link Character#isWhitespace(int) white space} from\n     * the end of a string.\n     *\n     * @return  a string whose value is this string, with all trailing white\n     *          space removed\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public String stripTrailing() {\n        String ret \u003d isLatin1() ? StringLatin1.stripTrailing(value)\n                                : StringUTF16.stripTrailing(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns {@code true} if the string is empty or contains only\n     * {@link Character#isWhitespace(int) white space} codepoints,\n     * otherwise {@code false}.\n     *\n     * @return {@code true} if the string is empty or contains only\n     *         {@link Character#isWhitespace(int) white space} codepoints,\n     *         otherwise {@code false}\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public boolean isBlank() {\n        return indexOfNonWhitespace() \u003d\u003d length();\n    }\n\n    private int indexOfNonWhitespace() {\n        if (isLatin1()) {\n            return StringLatin1.indexOfNonWhitespace(value);\n        } else {\n            return StringUTF16.indexOfNonWhitespace(value);\n        }\n    }\n\n    /**\n     * Returns a stream of lines extracted from this string,\n     * separated by line terminators.\n     * \u003cp\u003e\n     * A \u003ci\u003eline terminator\u003c/i\u003e is one of the following:\n     * a line feed character {@code \"\\n\"} (U+000A),\n     * a carriage return character {@code \"\\r\"} (U+000D),\n     * or a carriage return followed immediately by a line feed\n     * {@code \"\\r\\n\"} (U+000D U+000A).\n     * \u003cp\u003e\n     * A \u003ci\u003eline\u003c/i\u003e is either a sequence of zero or more characters\n     * followed by a line terminator, or it is a sequence of one or\n     * more characters followed by the end of the string. A\n     * line does not include the line terminator.\n     * \u003cp\u003e\n     * The stream returned by this method contains the lines from\n     * this string in the order in which they occur.\n     *\n     * @apiNote This definition of \u003ci\u003eline\u003c/i\u003e implies that an empty\n     *          string has zero lines and that there is no empty line\n     *          following a line terminator at the end of a string.\n     *\n     * @implNote This method provides better performance than\n     *           split(\"\\R\") by supplying elements lazily and\n     *           by faster search of new line terminators.\n     *\n     * @return  the stream of lines extracted from this string\n     *\n     * @since 11\n     */\n    public Stream\u003cString\u003e lines() {\n        return isLatin1() ? StringLatin1.lines(value)\n                          : StringUTF16.lines(value);\n    }\n\n    /**\n     * This object (which is already a string!) is itself returned.\n     *\n     * @return  the string itself.\n     */\n    public String toString() {\n        return this;\n    }\n\n    /**\n     * Returns a stream of {@code int} zero-extending the {@code char} values\n     * from this sequence.  Any char which maps to a \u003ca\n     * href\u003d\"{@docRoot}/java.base/java/lang/Character.html#unicode\"\u003esurrogate code\n     * point\u003c/a\u003e is passed through uninterpreted.\n     *\n     * @return an IntStream of char values from this sequence\n     * @since 9\n     */\n    @Override\n    public IntStream chars() {\n        return StreamSupport.intStream(\n            isLatin1() ? new StringLatin1.CharsSpliterator(value, Spliterator.IMMUTABLE)\n                       : new StringUTF16.CharsSpliterator(value, Spliterator.IMMUTABLE),\n            false);\n    }\n\n\n    /**\n     * Returns a stream of code point values from this sequence.  Any surrogate\n     * pairs encountered in the sequence are combined as if by {@linkplain\n     * Character#toCodePoint Character.toCodePoint} and the result is passed\n     * to the stream. Any other code units, including ordinary BMP characters,\n     * unpaired surrogates, and undefined code units, are zero-extended to\n     * {@code int} values which are then passed to the stream.\n     *\n     * @return an IntStream of Unicode code points from this sequence\n     * @since 9\n     */\n    @Override\n    public IntStream codePoints() {\n        return StreamSupport.intStream(\n            isLatin1() ? new StringLatin1.CharsSpliterator(value, Spliterator.IMMUTABLE)\n                       : new StringUTF16.CodePointsSpliterator(value, Spliterator.IMMUTABLE),\n            false);\n    }\n\n    /**\n     * Converts this string to a new character array.\n     *\n     * @return  a newly allocated character array whose length is the length\n     *          of this string and whose contents are initialized to contain\n     *          the character sequence represented by this string.\n     */\n    public char[] toCharArray() {\n        return isLatin1() ? StringLatin1.toChars(value)\n                          : StringUTF16.toChars(value);\n    }\n\n    /**\n     * Returns a formatted string using the specified format string and\n     * arguments.\n     *\n     * \u003cp\u003e The locale always used is the one returned by {@link\n     * java.util.Locale#getDefault(java.util.Locale.Category)\n     * Locale.getDefault(Locale.Category)} with\n     * {@link java.util.Locale.Category#FORMAT FORMAT} category specified.\n     *\n     * @param  format\n     *         A \u003ca href\u003d\"../util/Formatter.html#syntax\"\u003eformat string\u003c/a\u003e\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in the format\n     *         string.  If there are more arguments than format specifiers, the\n     *         extra arguments are ignored.  The number of arguments is\n     *         variable and may be zero.  The maximum number of arguments is\n     *         limited by the maximum dimension of a Java array as defined by\n     *         \u003ccite\u003eThe Java\u0026trade; Virtual Machine Specification\u003c/cite\u003e.\n     *         The behaviour on a\n     *         {@code null} argument depends on the \u003ca\n     *         href\u003d\"../util/Formatter.html#syntax\"\u003econversion\u003c/a\u003e.\n     *\n     * @throws  java.util.IllegalFormatException\n     *          If a format string contains an illegal syntax, a format\n     *          specifier that is incompatible with the given arguments,\n     *          insufficient arguments given the format string, or other\n     *          illegal conditions.  For specification of all possible\n     *          formatting errors, see the \u003ca\n     *          href\u003d\"../util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the\n     *          formatter class specification.\n     *\n     * @return  A formatted string\n     *\n     * @see  java.util.Formatter\n     * @since  1.5\n     */\n    public static String format(String format, Object... args) {\n        return new Formatter().format(format, args).toString();\n    }\n\n    /**\n     * Returns a formatted string using the specified locale, format string,\n     * and arguments.\n     *\n     * @param  l\n     *         The {@linkplain java.util.Locale locale} to apply during\n     *         formatting.  If {@code l} is {@code null} then no localization\n     *         is applied.\n     *\n     * @param  format\n     *         A \u003ca href\u003d\"../util/Formatter.html#syntax\"\u003eformat string\u003c/a\u003e\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in the format\n     *         string.  If there are more arguments than format specifiers, the\n     *         extra arguments are ignored.  The number of arguments is\n     *         variable and may be zero.  The maximum number of arguments is\n     *         limited by the maximum dimension of a Java array as defined by\n     *         \u003ccite\u003eThe Java\u0026trade; Virtual Machine Specification\u003c/cite\u003e.\n     *         The behaviour on a\n     *         {@code null} argument depends on the\n     *         \u003ca href\u003d\"../util/Formatter.html#syntax\"\u003econversion\u003c/a\u003e.\n     *\n     * @throws  java.util.IllegalFormatException\n     *          If a format string contains an illegal syntax, a format\n     *          specifier that is incompatible with the given arguments,\n     *          insufficient arguments given the format string, or other\n     *          illegal conditions.  For specification of all possible\n     *          formatting errors, see the \u003ca\n     *          href\u003d\"../util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the\n     *          formatter class specification\n     *\n     * @return  A formatted string\n     *\n     * @see  java.util.Formatter\n     * @since  1.5\n     */\n    public static String format(Locale l, String format, Object... args) {\n        return new Formatter(l).format(format, args).toString();\n    }\n\n    /**\n     * Returns the string representation of the {@code Object} argument.\n     *\n     * @param   obj   an {@code Object}.\n     * @return  if the argument is {@code null}, then a string equal to\n     *          {@code \"null\"}; otherwise, the value of\n     *          {@code obj.toString()} is returned.\n     * @see     java.lang.Object#toString()\n     */\n    public static String valueOf(Object obj) {\n        return (obj \u003d\u003d null) ? \"null\" : obj.toString();\n    }\n\n    /**\n     * Returns the string representation of the {@code char} array\n     * argument. The contents of the character array are copied; subsequent\n     * modification of the character array does not affect the returned\n     * string.\n     *\n     * @param   data     the character array.\n     * @return  a {@code String} that contains the characters of the\n     *          character array.\n     */\n    public static String valueOf(char data[]) {\n        return new String(data);\n    }\n\n    /**\n     * Returns the string representation of a specific subarray of the\n     * {@code char} array argument.\n     * \u003cp\u003e\n     * The {@code offset} argument is the index of the first\n     * character of the subarray. The {@code count} argument\n     * specifies the length of the subarray. The contents of the subarray\n     * are copied; subsequent modification of the character array does not\n     * affect the returned string.\n     *\n     * @param   data     the character array.\n     * @param   offset   initial offset of the subarray.\n     * @param   count    length of the subarray.\n     * @return  a {@code String} that contains the characters of the\n     *          specified subarray of the character array.\n     * @exception IndexOutOfBoundsException if {@code offset} is\n     *          negative, or {@code count} is negative, or\n     *          {@code offset+count} is larger than\n     *          {@code data.length}.\n     */\n    public static String valueOf(char data[], int offset, int count) {\n        return new String(data, offset, count);\n    }\n\n    /**\n     * Equivalent to {@link #valueOf(char[], int, int)}.\n     *\n     * @param   data     the character array.\n     * @param   offset   initial offset of the subarray.\n     * @param   count    length of the subarray.\n     * @return  a {@code String} that contains the characters of the\n     *          specified subarray of the character array.\n     * @exception IndexOutOfBoundsException if {@code offset} is\n     *          negative, or {@code count} is negative, or\n     *          {@code offset+count} is larger than\n     *          {@code data.length}.\n     */\n    public static String copyValueOf(char data[], int offset, int count) {\n        return new String(data, offset, count);\n    }\n\n    /**\n     * Equivalent to {@link #valueOf(char[])}.\n     *\n     * @param   data   the character array.\n     * @return  a {@code String} that contains the characters of the\n     *          character array.\n     */\n    public static String copyValueOf(char data[]) {\n        return new String(data);\n    }\n\n    /**\n     * Returns the string representation of the {@code boolean} argument.\n     *\n     * @param   b   a {@code boolean}.\n     * @return  if the argument is {@code true}, a string equal to\n     *          {@code \"true\"} is returned; otherwise, a string equal to\n     *          {@code \"false\"} is returned.\n     */\n    public static String valueOf(boolean b) {\n        return b ? \"true\" : \"false\";\n    }\n\n    /**\n     * Returns the string representation of the {@code char}\n     * argument.\n     *\n     * @param   c   a {@code char}.\n     * @return  a string of length {@code 1} containing\n     *          as its single character the argument {@code c}.\n     */\n    public static String valueOf(char c) {\n        if (COMPACT_STRINGS \u0026\u0026 StringLatin1.canEncode(c)) {\n            return new String(StringLatin1.toBytes(c), LATIN1);\n        }\n        return new String(StringUTF16.toBytes(c), UTF16);\n    }\n\n    /**\n     * Returns the string representation of the {@code int} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Integer.toString} method of one argument.\n     *\n     * @param   i   an {@code int}.\n     * @return  a string representation of the {@code int} argument.\n     * @see     java.lang.Integer#toString(int, int)\n     */\n    public static String valueOf(int i) {\n        return Integer.toString(i);\n    }\n\n    /**\n     * Returns the string representation of the {@code long} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Long.toString} method of one argument.\n     *\n     * @param   l   a {@code long}.\n     * @return  a string representation of the {@code long} argument.\n     * @see     java.lang.Long#toString(long)\n     */\n    public static String valueOf(long l) {\n        return Long.toString(l);\n    }\n\n    /**\n     * Returns the string representation of the {@code float} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Float.toString} method of one argument.\n     *\n     * @param   f   a {@code float}.\n     * @return  a string representation of the {@code float} argument.\n     * @see     java.lang.Float#toString(float)\n     */\n    public static String valueOf(float f) {\n        return Float.toString(f);\n    }\n\n    /**\n     * Returns the string representation of the {@code double} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Double.toString} method of one argument.\n     *\n     * @param   d   a {@code double}.\n     * @return  a  string representation of the {@code double} argument.\n     * @see     java.lang.Double#toString(double)\n     */\n    public static String valueOf(double d) {\n        return Double.toString(d);\n    }\n\n    /**\n     * Returns a canonical representation for the string object.\n     * \u003cp\u003e\n     * A pool of strings, initially empty, is maintained privately by the\n     * class {@code String}.\n     * \u003cp\u003e\n     * When the intern method is invoked, if the pool already contains a\n     * string equal to this {@code String} object as determined by\n     * the {@link #equals(Object)} method, then the string from the pool is\n     * returned. Otherwise, this {@code String} object is added to the\n     * pool and a reference to this {@code String} object is returned.\n     * \u003cp\u003e\n     * It follows that for any two strings {@code s} and {@code t},\n     * {@code s.intern() \u003d\u003d t.intern()} is {@code true}\n     * if and only if {@code s.equals(t)} is {@code true}.\n     * \u003cp\u003e\n     * All literal strings and string-valued constant expressions are\n     * interned. String literals are defined in section 3.10.5 of the\n     * \u003ccite\u003eThe Java\u0026trade; Language Specification\u003c/cite\u003e.\n     *\n     * @return  a string that has the same contents as this string, but is\n     *          guaranteed to be from a pool of unique strings.\n     * @jls 3.10.5 String Literals\n     */\n    public native String intern();\n\n    /**\n     * Returns a string whose value is the concatenation of this\n     * string repeated {@code count} times.\n     * \u003cp\u003e\n     * If this string is empty or count is zero then the empty\n     * string is returned.\n     *\n     * @param   count number of times to repeat\n     *\n     * @return  A string composed of this string repeated\n     *          {@code count} times or the empty string if this\n     *          string is empty or count is zero\n     *\n     * @throws  IllegalArgumentException if the {@code count} is\n     *          negative.\n     *\n     * @since 11\n     */\n    public String repeat(int count) {\n        if (count \u003c 0) {\n            throw new IllegalArgumentException(\"count is negative: \" + count);\n        }\n        if (count \u003d\u003d 1) {\n            return this;\n        }\n        final int len \u003d value.length;\n        if (len \u003d\u003d 0 || count \u003d\u003d 0) {\n            return \"\";\n        }\n        if (len \u003d\u003d 1) {\n            final byte[] single \u003d new byte[count];\n            Arrays.fill(single, value[0]);\n            return new String(single, coder);\n        }\n        if (Integer.MAX_VALUE / count \u003c len) {\n            throw new OutOfMemoryError(\"Repeating \" + len + \" bytes String \" + count +\n                    \" times will produce a String exceeding maximum size.\");\n        }\n        final int limit \u003d len * count;\n        final byte[] multiple \u003d new byte[limit];\n        System.arraycopy(value, 0, multiple, 0, len);\n        int copied \u003d len;\n        for (; copied \u003c limit - copied; copied \u003c\u003c\u003d 1) {\n            System.arraycopy(multiple, 0, multiple, copied, copied);\n        }\n        System.arraycopy(multiple, 0, multiple, copied, limit - copied);\n        return new String(multiple, coder);\n    }\n\n    ////////////////////////////////////////////////////////////////\n\n    /**\n     * Copy character bytes from this string into dst starting at dstBegin.\n     * This method doesn\u0027t perform any range checking.\n     *\n     * Invoker guarantees: dst is in UTF16 (inflate itself for asb), if two\n     * coders are different, and dst is big enough (range check)\n     *\n     * @param dstBegin  the char index, not offset of byte[]\n     * @param coder     the coder of dst[]\n     */\n    void getBytes(byte dst[], int dstBegin, byte coder) {\n        if (coder() \u003d\u003d coder) {\n            System.arraycopy(value, 0, dst, dstBegin \u003c\u003c coder, value.length);\n        } else {    // this.coder \u003d\u003d LATIN \u0026\u0026 coder \u003d\u003d UTF16\n            StringLatin1.inflate(value, 0, dst, dstBegin, value.length);\n        }\n    }\n\n    /*\n     * Package private constructor. Trailing Void argument is there for\n     * disambiguating it against other (public) constructors.\n     *\n     * Stores the char[] value into a byte[] that each byte represents\n     * the8 low-order bits of the corresponding character, if the char[]\n     * contains only latin1 character. Or a byte[] that stores all\n     * characters in their byte sequences defined by the {@code StringUTF16}.\n     */\n    String(char[] value, int off, int len, Void sig) {\n        if (len \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n            return;\n        }\n        if (COMPACT_STRINGS) {\n            byte[] val \u003d StringUTF16.compress(value, off, len);\n            if (val !\u003d null) {\n                this.value \u003d val;\n                this.coder \u003d LATIN1;\n                return;\n            }\n        }\n        this.coder \u003d UTF16;\n        this.value \u003d StringUTF16.toBytes(value, off, len);\n    }\n\n    /*\n     * Package private constructor. Trailing Void argument is there for\n     * disambiguating it against other (public) constructors.\n     */\n    String(AbstractStringBuilder asb, Void sig) {\n        byte[] val \u003d asb.getValue();\n        int length \u003d asb.length();\n        if (asb.isLatin1()) {\n            this.coder \u003d LATIN1;\n            this.value \u003d Arrays.copyOfRange(val, 0, length);\n        } else {\n            if (COMPACT_STRINGS) {\n                byte[] buf \u003d StringUTF16.compress(val, 0, length);\n                if (buf !\u003d null) {\n                    this.coder \u003d LATIN1;\n                    this.value \u003d buf;\n                    return;\n                }\n            }\n            this.coder \u003d UTF16;\n            this.value \u003d Arrays.copyOfRange(val, 0, length \u003c\u003c 1);\n        }\n    }\n\n   /*\n    * Package private constructor which shares value array for speed.\n    */\n    String(byte[] value, byte coder) {\n        this.value \u003d value;\n        this.coder \u003d coder;\n    }\n\n    byte coder() {\n        return COMPACT_STRINGS ? coder : UTF16;\n    }\n\n    byte[] value() {\n        return value;\n    }\n\n    private boolean isLatin1() {\n        return COMPACT_STRINGS \u0026\u0026 coder \u003d\u003d LATIN1;\n    }\n\n    @Native static final byte LATIN1 \u003d 0;\n    @Native static final byte UTF16  \u003d 1;\n\n    /*\n     * StringIndexOutOfBoundsException  if {@code index} is\n     * negative or greater than or equal to {@code length}.\n     */\n    static void checkIndex(int index, int length) {\n        if (index \u003c 0 || index \u003e\u003d length) {\n            throw new StringIndexOutOfBoundsException(\"index \" + index +\n                                                      \",length \" + length);\n        }\n    }\n\n    /*\n     * StringIndexOutOfBoundsException  if {@code offset}\n     * is negative or greater than {@code length}.\n     */\n    static void checkOffset(int offset, int length) {\n        if (offset \u003c 0 || offset \u003e length) {\n            throw new StringIndexOutOfBoundsException(\"offset \" + offset +\n                                                      \",length \" + length);\n        }\n    }\n\n    /*\n     * Check {@code offset}, {@code count} against {@code 0} and {@code length}\n     * bounds.\n     *\n     * @throws  StringIndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative,\n     *          or {@code offset} is greater than {@code length - count}\n     */\n    static void checkBoundsOffCount(int offset, int count, int length) {\n        if (offset \u003c 0 || count \u003c 0 || offset \u003e length - count) {\n            throw new StringIndexOutOfBoundsException(\n                \"offset \" + offset + \", count \" + count + \", length \" + length);\n        }\n    }\n\n    /*\n     * Check {@code begin}, {@code end} against {@code 0} and {@code length}\n     * bounds.\n     *\n     * @throws  StringIndexOutOfBoundsException\n     *          If {@code begin} is negative, {@code begin} is greater than\n     *          {@code end}, or {@code end} is greater than {@code length}.\n     */\n    static void checkBoundsBeginEnd(int begin, int end, int length) {\n        if (begin \u003c 0 || begin \u003e end || end \u003e length) {\n            throw new StringIndexOutOfBoundsException(\n                \"begin \" + begin + \", end \" + end + \", length \" + length);\n        }\n    }\n\n    /**\n     * Returns the string representation of the {@code codePoint}\n     * argument.\n     *\n     * @param   codePoint a {@code codePoint}.\n     * @return  a string of length {@code 1} or {@code 2} containing\n     *          as its single character the argument {@code codePoint}.\n     * @throws IllegalArgumentException if the specified\n     *          {@code codePoint} is not a {@linkplain Character#isValidCodePoint\n     *          valid Unicode code point}.\n     */\n    static String valueOfCodePoint(int codePoint) {\n        if (COMPACT_STRINGS \u0026\u0026 StringLatin1.canEncode(codePoint)) {\n            return new String(StringLatin1.toBytes((char)codePoint), LATIN1);\n        } else if (Character.isBmpCodePoint(codePoint)) {\n            return new String(StringUTF16.toBytes((char)codePoint), UTF16);\n        } else if (Character.isSupplementaryCodePoint(codePoint)) {\n            return new String(StringUTF16.toBytesSupplementary(codePoint), UTF16);\n        }\n\n        throw new IllegalArgumentException(\n            format(\"Not a valid Unicode code point: 0x%X\", codePoint));\n    }\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor20.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:339)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

Jan. 16, 2024 11:36:21 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.base/java/lang/String.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor22.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:358)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

Jan. 16, 2024 11:43:14 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 23764
2024.01.16 11:43:45 WARN  Using indexes to guess the definition of boundary
2024.01.16 11:43:46 WARN  Using indexes to guess the definition of boundary
Jan. 16, 2024 11:46:31 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 24052
2024.01.16 11:47:03 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java

Uri: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:703)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	jdk.internal.reflect.GeneratedMethodAccessor21.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 16, 2024 11:47:03 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.base/java/lang/String.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 1994, 2018, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.lang;\n\nimport java.io.ObjectStreamField;\nimport java.io.UnsupportedEncodingException;\nimport java.lang.annotation.Native;\nimport java.nio.charset.Charset;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Formatter;\nimport java.util.Locale;\nimport java.util.Objects;\nimport java.util.Spliterator;\nimport java.util.StringJoiner;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\nimport java.util.stream.IntStream;\nimport java.util.stream.Stream;\nimport java.util.stream.StreamSupport;\nimport jdk.internal.HotSpotIntrinsicCandidate;\nimport jdk.internal.vm.annotation.Stable;\n\n/**\n * The {@code String} class represents character strings. All\n * string literals in Java programs, such as {@code \"abc\"}, are\n * implemented as instances of this class.\n * \u003cp\u003e\n * Strings are constant; their values cannot be changed after they\n * are created. String buffers support mutable strings.\n * Because String objects are immutable they can be shared. For example:\n * \u003cblockquote\u003e\u003cpre\u003e\n *     String str \u003d \"abc\";\n * \u003c/pre\u003e\u003c/blockquote\u003e\u003cp\u003e\n * is equivalent to:\n * \u003cblockquote\u003e\u003cpre\u003e\n *     char data[] \u003d {\u0027a\u0027, \u0027b\u0027, \u0027c\u0027};\n *     String str \u003d new String(data);\n * \u003c/pre\u003e\u003c/blockquote\u003e\u003cp\u003e\n * Here are some more examples of how strings can be used:\n * \u003cblockquote\u003e\u003cpre\u003e\n *     System.out.println(\"abc\");\n *     String cde \u003d \"cde\";\n *     System.out.println(\"abc\" + cde);\n *     String c \u003d \"abc\".substring(2,3);\n *     String d \u003d cde.substring(1, 2);\n * \u003c/pre\u003e\u003c/blockquote\u003e\n * \u003cp\u003e\n * The class {@code String} includes methods for examining\n * individual characters of the sequence, for comparing strings, for\n * searching strings, for extracting substrings, and for creating a\n * copy of a string with all characters translated to uppercase or to\n * lowercase. Case mapping is based on the Unicode Standard version\n * specified by the {@link java.lang.Character Character} class.\n * \u003cp\u003e\n * The Java language provides special support for the string\n * concatenation operator (\u0026nbsp;+\u0026nbsp;), and for conversion of\n * other objects to strings. For additional information on string\n * concatenation and conversion, see \u003ci\u003eThe Java\u0026trade; Language Specification\u003c/i\u003e.\n *\n * \u003cp\u003e Unless otherwise noted, passing a {@code null} argument to a constructor\n * or method in this class will cause a {@link NullPointerException} to be\n * thrown.\n *\n * \u003cp\u003eA {@code String} represents a string in the UTF-16 format\n * in which \u003cem\u003esupplementary characters\u003c/em\u003e are represented by \u003cem\u003esurrogate\n * pairs\u003c/em\u003e (see the section \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode\n * Character Representations\u003c/a\u003e in the {@code Character} class for\n * more information).\n * Index values refer to {@code char} code units, so a supplementary\n * character uses two positions in a {@code String}.\n * \u003cp\u003eThe {@code String} class provides methods for dealing with\n * Unicode code points (i.e., characters), in addition to those for\n * dealing with Unicode code units (i.e., {@code char} values).\n *\n * \u003cp\u003eUnless otherwise noted, methods for comparing Strings do not take locale\n * into account.  The {@link java.text.Collator} class provides methods for\n * finer-grain, locale-sensitive String comparison.\n *\n * @implNote The implementation of the string concatenation operator is left to\n * the discretion of a Java compiler, as long as the compiler ultimately conforms\n * to \u003ci\u003eThe Java\u0026trade; Language Specification\u003c/i\u003e. For example, the {@code javac} compiler\n * may implement the operator with {@code StringBuffer}, {@code StringBuilder},\n * or {@code java.lang.invoke.StringConcatFactory} depending on the JDK version. The\n * implementation of string conversion is typically through the method {@code toString},\n * defined by {@code Object} and inherited by all classes in Java.\n *\n * @author  Lee Boynton\n * @author  Arthur van Hoff\n * @author  Martin Buchholz\n * @author  Ulf Zibis\n * @see     java.lang.Object#toString()\n * @see     java.lang.StringBuffer\n * @see     java.lang.StringBuilder\n * @see     java.nio.charset.Charset\n * @since   1.0\n * @jls     15.18.1 String Concatenation Operator +\n */\n\npublic final class String\n    implements java.io.Serializable, Comparable\u003cString\u003e, CharSequence {\n\n    /**\n     * The value is used for character storage.\n     *\n     * @implNote This field is trusted by the VM, and is a subject to\n     * constant folding if String instance is constant. Overwriting this\n     * field after construction will cause problems.\n     *\n     * Additionally, it is marked with {@link Stable} to trust the contents\n     * of the array. No other facility in JDK provides this functionality (yet).\n     * {@link Stable} is safe here, because value is never null.\n     */\n    @Stable\n    private final byte[] value;\n\n    /**\n     * The identifier of the encoding used to encode the bytes in\n     * {@code value}. The supported values in this implementation are\n     *\n     * LATIN1\n     * UTF16\n     *\n     * @implNote This field is trusted by the VM, and is a subject to\n     * constant folding if String instance is constant. Overwriting this\n     * field after construction will cause problems.\n     */\n    private final byte coder;\n\n    /** Cache the hash code for the string */\n    private int hash; // Default to 0\n\n    /** use serialVersionUID from JDK 1.0.2 for interoperability */\n    private static final long serialVersionUID \u003d -6849794470754667710L;\n\n    /**\n     * If String compaction is disabled, the bytes in {@code value} are\n     * always encoded in UTF16.\n     *\n     * For methods with several possible implementation paths, when String\n     * compaction is disabled, only one code path is taken.\n     *\n     * The instance field value is generally opaque to optimizing JIT\n     * compilers. Therefore, in performance-sensitive place, an explicit\n     * check of the static boolean {@code COMPACT_STRINGS} is done first\n     * before checking the {@code coder} field since the static boolean\n     * {@code COMPACT_STRINGS} would be constant folded away by an\n     * optimizing JIT compiler. The idioms for these cases are as follows.\n     *\n     * For code such as:\n     *\n     *    if (coder \u003d\u003d LATIN1) { ... }\n     *\n     * can be written more optimally as\n     *\n     *    if (coder() \u003d\u003d LATIN1) { ... }\n     *\n     * or:\n     *\n     *    if (COMPACT_STRINGS \u0026\u0026 coder \u003d\u003d LATIN1) { ... }\n     *\n     * An optimizing JIT compiler can fold the above conditional as:\n     *\n     *    COMPACT_STRINGS \u003d\u003d true  \u003d\u003e if (coder \u003d\u003d LATIN1) { ... }\n     *    COMPACT_STRINGS \u003d\u003d false \u003d\u003e if (false)           { ... }\n     *\n     * @implNote\n     * The actual value for this field is injected by JVM. The static\n     * initialization block is used to set the value here to communicate\n     * that this static final field is not statically foldable, and to\n     * avoid any possible circular dependency during vm initialization.\n     */\n    static final boolean COMPACT_STRINGS;\n\n    static {\n        COMPACT_STRINGS \u003d true;\n    }\n\n    /**\n     * Class String is special cased within the Serialization Stream Protocol.\n     *\n     * A String instance is written into an ObjectOutputStream according to\n     * \u003ca href\u003d\"{@docRoot}/../specs/serialization/protocol.html#stream-elements\"\u003e\n     * Object Serialization Specification, Section 6.2, \"Stream Elements\"\u003c/a\u003e\n     */\n    private static final ObjectStreamField[] serialPersistentFields \u003d\n        new ObjectStreamField[0];\n\n    /**\n     * Initializes a newly created {@code String} object so that it represents\n     * an empty character sequence.  Note that use of this constructor is\n     * unnecessary since Strings are immutable.\n     */\n    public String() {\n        this.value \u003d \"\".value;\n        this.coder \u003d \"\".coder;\n    }\n\n    /**\n     * Initializes a newly created {@code String} object so that it represents\n     * the same sequence of characters as the argument; in other words, the\n     * newly created string is a copy of the argument string. Unless an\n     * explicit copy of {@code original} is needed, use of this constructor is\n     * unnecessary since Strings are immutable.\n     *\n     * @param  original\n     *         A {@code String}\n     */\n    @HotSpotIntrinsicCandidate\n    public String(String original) {\n        this.value \u003d original.value;\n        this.coder \u003d original.coder;\n        this.hash \u003d original.hash;\n    }\n\n    /**\n     * Allocates a new {@code String} so that it represents the sequence of\n     * characters currently contained in the character array argument. The\n     * contents of the character array are copied; subsequent modification of\n     * the character array does not affect the newly created string.\n     *\n     * @param  value\n     *         The initial value of the string\n     */\n    public String(char value[]) {\n        this(value, 0, value.length, null);\n    }\n\n    /**\n     * Allocates a new {@code String} that contains characters from a subarray\n     * of the character array argument. The {@code offset} argument is the\n     * index of the first character of the subarray and the {@code count}\n     * argument specifies the length of the subarray. The contents of the\n     * subarray are copied; subsequent modification of the character array does\n     * not affect the newly created string.\n     *\n     * @param  value\n     *         Array that is the source of characters\n     *\n     * @param  offset\n     *         The initial offset\n     *\n     * @param  count\n     *         The length\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative, or\n     *          {@code offset} is greater than {@code value.length - count}\n     */\n    public String(char value[], int offset, int count) {\n        this(value, offset, count, rangeCheck(value, offset, count));\n    }\n\n    private static Void rangeCheck(char[] value, int offset, int count) {\n        checkBoundsOffCount(offset, count, value.length);\n        return null;\n    }\n\n    /**\n     * Allocates a new {@code String} that contains characters from a subarray\n     * of the \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode code point\u003c/a\u003e array\n     * argument.  The {@code offset} argument is the index of the first code\n     * point of the subarray and the {@code count} argument specifies the\n     * length of the subarray.  The contents of the subarray are converted to\n     * {@code char}s; subsequent modification of the {@code int} array does not\n     * affect the newly created string.\n     *\n     * @param  codePoints\n     *         Array that is the source of Unicode code points\n     *\n     * @param  offset\n     *         The initial offset\n     *\n     * @param  count\n     *         The length\n     *\n     * @throws  IllegalArgumentException\n     *          If any invalid Unicode code point is found in {@code\n     *          codePoints}\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative, or\n     *          {@code offset} is greater than {@code codePoints.length - count}\n     *\n     * @since  1.5\n     */\n    public String(int[] codePoints, int offset, int count) {\n        checkBoundsOffCount(offset, count, codePoints.length);\n        if (count \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n            return;\n        }\n        if (COMPACT_STRINGS) {\n            byte[] val \u003d StringLatin1.toBytes(codePoints, offset, count);\n            if (val !\u003d null) {\n                this.coder \u003d LATIN1;\n                this.value \u003d val;\n                return;\n            }\n        }\n        this.coder \u003d UTF16;\n        this.value \u003d StringUTF16.toBytes(codePoints, offset, count);\n    }\n\n    /**\n     * Allocates a new {@code String} constructed from a subarray of an array\n     * of 8-bit integer values.\n     *\n     * \u003cp\u003e The {@code offset} argument is the index of the first byte of the\n     * subarray, and the {@code count} argument specifies the length of the\n     * subarray.\n     *\n     * \u003cp\u003e Each {@code byte} in the subarray is converted to a {@code char} as\n     * specified in the {@link #String(byte[],int) String(byte[],int)} constructor.\n     *\n     * @deprecated This method does not properly convert bytes into characters.\n     * As of JDK\u0026nbsp;1.1, the preferred way to do this is via the\n     * {@code String} constructors that take a {@link\n     * java.nio.charset.Charset}, charset name, or that use the platform\u0027s\n     * default charset.\n     *\n     * @param  ascii\n     *         The bytes to be converted to characters\n     *\n     * @param  hibyte\n     *         The top 8 bits of each 16-bit Unicode code unit\n     *\n     * @param  offset\n     *         The initial offset\n     * @param  count\n     *         The length\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative, or\n     *          {@code offset} is greater than {@code ascii.length - count}\n     *\n     * @see  #String(byte[], int)\n     * @see  #String(byte[], int, int, java.lang.String)\n     * @see  #String(byte[], int, int, java.nio.charset.Charset)\n     * @see  #String(byte[], int, int)\n     * @see  #String(byte[], java.lang.String)\n     * @see  #String(byte[], java.nio.charset.Charset)\n     * @see  #String(byte[])\n     */\n    @Deprecated(since\u003d\"1.1\")\n    public String(byte ascii[], int hibyte, int offset, int count) {\n        checkBoundsOffCount(offset, count, ascii.length);\n        if (count \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n            return;\n        }\n        if (COMPACT_STRINGS \u0026\u0026 (byte)hibyte \u003d\u003d 0) {\n            this.value \u003d Arrays.copyOfRange(ascii, offset, offset + count);\n            this.coder \u003d LATIN1;\n        } else {\n            hibyte \u003c\u003c\u003d 8;\n            byte[] val \u003d StringUTF16.newBytesFor(count);\n            for (int i \u003d 0; i \u003c count; i++) {\n                StringUTF16.putChar(val, i, hibyte | (ascii[offset++] \u0026 0xff));\n            }\n            this.value \u003d val;\n            this.coder \u003d UTF16;\n        }\n    }\n\n    /**\n     * Allocates a new {@code String} containing characters constructed from\n     * an array of 8-bit integer values. Each character \u003ci\u003ec\u003c/i\u003e in the\n     * resulting string is constructed from the corresponding component\n     * \u003ci\u003eb\u003c/i\u003e in the byte array such that:\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     *     \u003cb\u003e\u003ci\u003ec\u003c/i\u003e\u003c/b\u003e \u003d\u003d (char)(((hibyte \u0026amp; 0xff) \u0026lt;\u0026lt; 8)\n     *                         | (\u003cb\u003e\u003ci\u003eb\u003c/i\u003e\u003c/b\u003e \u0026amp; 0xff))\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @deprecated  This method does not properly convert bytes into\n     * characters.  As of JDK\u0026nbsp;1.1, the preferred way to do this is via the\n     * {@code String} constructors that take a {@link\n     * java.nio.charset.Charset}, charset name, or that use the platform\u0027s\n     * default charset.\n     *\n     * @param  ascii\n     *         The bytes to be converted to characters\n     *\n     * @param  hibyte\n     *         The top 8 bits of each 16-bit Unicode code unit\n     *\n     * @see  #String(byte[], int, int, java.lang.String)\n     * @see  #String(byte[], int, int, java.nio.charset.Charset)\n     * @see  #String(byte[], int, int)\n     * @see  #String(byte[], java.lang.String)\n     * @see  #String(byte[], java.nio.charset.Charset)\n     * @see  #String(byte[])\n     */\n    @Deprecated(since\u003d\"1.1\")\n    public String(byte ascii[], int hibyte) {\n        this(ascii, hibyte, 0, ascii.length);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the specified charset.  The length of the new {@code String}\n     * is a function of the charset, and hence may not be equal to the length\n     * of the subarray.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code length} is negative, or\n     *          {@code offset} is greater than {@code bytes.length - length}\n     *\n     * @since  1.1\n     */\n    public String(byte bytes[], int offset, int length, String charsetName)\n            throws UnsupportedEncodingException {\n        if (charsetName \u003d\u003d null)\n            throw new NullPointerException(\"charsetName\");\n        checkBoundsOffCount(offset, length, bytes.length);\n        StringCoding.Result ret \u003d\n            StringCoding.decode(charsetName, bytes, offset, length);\n        this.value \u003d ret.value;\n        this.coder \u003d ret.coder;\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the specified {@linkplain java.nio.charset.Charset charset}.\n     * The length of the new {@code String} is a function of the charset, and\n     * hence may not be equal to the length of the subarray.\n     *\n     * \u003cp\u003e This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\u0027s default replacement string.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset charset} to be used to\n     *         decode the {@code bytes}\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code length} is negative, or\n     *          {@code offset} is greater than {@code bytes.length - length}\n     *\n     * @since  1.6\n     */\n    public String(byte bytes[], int offset, int length, Charset charset) {\n        if (charset \u003d\u003d null)\n            throw new NullPointerException(\"charset\");\n        checkBoundsOffCount(offset, length, bytes.length);\n        StringCoding.Result ret \u003d\n            StringCoding.decode(charset, bytes, offset, length);\n        this.value \u003d ret.value;\n        this.coder \u003d ret.coder;\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of bytes\n     * using the specified {@linkplain java.nio.charset.Charset charset}.  The\n     * length of the new {@code String} is a function of the charset, and hence\n     * may not be equal to the length of the byte array.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  1.1\n     */\n    public String(byte bytes[], String charsetName)\n            throws UnsupportedEncodingException {\n        this(bytes, 0, bytes.length, charsetName);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of\n     * bytes using the specified {@linkplain java.nio.charset.Charset charset}.\n     * The length of the new {@code String} is a function of the charset, and\n     * hence may not be equal to the length of the byte array.\n     *\n     * \u003cp\u003e This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\u0027s default replacement string.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset charset} to be used to\n     *         decode the {@code bytes}\n     *\n     * @since  1.6\n     */\n    public String(byte bytes[], Charset charset) {\n        this(bytes, 0, bytes.length, charset);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the platform\u0027s default charset.  The length of the new\n     * {@code String} is a function of the charset, and hence may not be equal\n     * to the length of the subarray.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code length} is negative, or\n     *          {@code offset} is greater than {@code bytes.length - length}\n     *\n     * @since  1.1\n     */\n    public String(byte bytes[], int offset, int length) {\n        checkBoundsOffCount(offset, length, bytes.length);\n        StringCoding.Result ret \u003d StringCoding.decode(bytes, offset, length);\n        this.value \u003d ret.value;\n        this.coder \u003d ret.coder;\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of bytes\n     * using the platform\u0027s default charset.  The length of the new {@code\n     * String} is a function of the charset, and hence may not be equal to the\n     * length of the byte array.\n     *\n     * \u003cp\u003e The behavior of this constructor when the given bytes are not valid\n     * in the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @since  1.1\n     */\n    public String(byte[] bytes) {\n        this(bytes, 0, bytes.length);\n    }\n\n    /**\n     * Allocates a new string that contains the sequence of characters\n     * currently contained in the string buffer argument. The contents of the\n     * string buffer are copied; subsequent modification of the string buffer\n     * does not affect the newly created string.\n     *\n     * @param  buffer\n     *         A {@code StringBuffer}\n     */\n    public String(StringBuffer buffer) {\n        this(buffer.toString());\n    }\n\n    /**\n     * Allocates a new string that contains the sequence of characters\n     * currently contained in the string builder argument. The contents of the\n     * string builder are copied; subsequent modification of the string builder\n     * does not affect the newly created string.\n     *\n     * \u003cp\u003e This constructor is provided to ease migration to {@code\n     * StringBuilder}. Obtaining a string from a string builder via the {@code\n     * toString} method is likely to run faster and is generally preferred.\n     *\n     * @param   builder\n     *          A {@code StringBuilder}\n     *\n     * @since  1.5\n     */\n    public String(StringBuilder builder) {\n        this(builder, null);\n    }\n\n    /**\n     * Returns the length of this string.\n     * The length is equal to the number of \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode\n     * code units\u003c/a\u003e in the string.\n     *\n     * @return  the length of the sequence of characters represented by this\n     *          object.\n     */\n    public int length() {\n        return value.length \u003e\u003e coder();\n    }\n\n    /**\n     * Returns {@code true} if, and only if, {@link #length()} is {@code 0}.\n     *\n     * @return {@code true} if {@link #length()} is {@code 0}, otherwise\n     * {@code false}\n     *\n     * @since 1.6\n     */\n    public boolean isEmpty() {\n        return value.length \u003d\u003d 0;\n    }\n\n    /**\n     * Returns the {@code char} value at the\n     * specified index. An index ranges from {@code 0} to\n     * {@code length() - 1}. The first {@code char} value of the sequence\n     * is at index {@code 0}, the next at index {@code 1},\n     * and so on, as for array indexing.\n     *\n     * \u003cp\u003eIf the {@code char} value specified by the index is a\n     * \u003ca href\u003d\"Character.html#unicode\"\u003esurrogate\u003c/a\u003e, the surrogate\n     * value is returned.\n     *\n     * @param      index   the index of the {@code char} value.\n     * @return     the {@code char} value at the specified index of this string.\n     *             The first {@code char} value is at index {@code 0}.\n     * @exception  IndexOutOfBoundsException  if the {@code index}\n     *             argument is negative or not less than the length of this\n     *             string.\n     */\n    public char charAt(int index) {\n        if (isLatin1()) {\n            return StringLatin1.charAt(value, index);\n        } else {\n            return StringUTF16.charAt(value, index);\n        }\n    }\n\n    /**\n     * Returns the character (Unicode code point) at the specified\n     * index. The index refers to {@code char} values\n     * (Unicode code units) and ranges from {@code 0} to\n     * {@link #length()}{@code  - 1}.\n     *\n     * \u003cp\u003e If the {@code char} value specified at the given index\n     * is in the high-surrogate range, the following index is less\n     * than the length of this {@code String}, and the\n     * {@code char} value at the following index is in the\n     * low-surrogate range, then the supplementary code point\n     * corresponding to this surrogate pair is returned. Otherwise,\n     * the {@code char} value at the given index is returned.\n     *\n     * @param      index the index to the {@code char} values\n     * @return     the code point value of the character at the\n     *             {@code index}\n     * @exception  IndexOutOfBoundsException  if the {@code index}\n     *             argument is negative or not less than the length of this\n     *             string.\n     * @since      1.5\n     */\n    public int codePointAt(int index) {\n        if (isLatin1()) {\n            checkIndex(index, value.length);\n            return value[index] \u0026 0xff;\n        }\n        int length \u003d value.length \u003e\u003e 1;\n        checkIndex(index, length);\n        return StringUTF16.codePointAt(value, index, length);\n    }\n\n    /**\n     * Returns the character (Unicode code point) before the specified\n     * index. The index refers to {@code char} values\n     * (Unicode code units) and ranges from {@code 1} to {@link\n     * CharSequence#length() length}.\n     *\n     * \u003cp\u003e If the {@code char} value at {@code (index - 1)}\n     * is in the low-surrogate range, {@code (index - 2)} is not\n     * negative, and the {@code char} value at {@code (index -\n     * 2)} is in the high-surrogate range, then the\n     * supplementary code point value of the surrogate pair is\n     * returned. If the {@code char} value at {@code index -\n     * 1} is an unpaired low-surrogate or a high-surrogate, the\n     * surrogate value is returned.\n     *\n     * @param     index the index following the code point that should be returned\n     * @return    the Unicode code point value before the given index.\n     * @exception IndexOutOfBoundsException if the {@code index}\n     *            argument is less than 1 or greater than the length\n     *            of this string.\n     * @since     1.5\n     */\n    public int codePointBefore(int index) {\n        int i \u003d index - 1;\n        if (i \u003c 0 || i \u003e\u003d length()) {\n            throw new StringIndexOutOfBoundsException(index);\n        }\n        if (isLatin1()) {\n            return (value[i] \u0026 0xff);\n        }\n        return StringUTF16.codePointBefore(value, index);\n    }\n\n    /**\n     * Returns the number of Unicode code points in the specified text\n     * range of this {@code String}. The text range begins at the\n     * specified {@code beginIndex} and extends to the\n     * {@code char} at index {@code endIndex - 1}. Thus the\n     * length (in {@code char}s) of the text range is\n     * {@code endIndex-beginIndex}. Unpaired surrogates within\n     * the text range count as one code point each.\n     *\n     * @param beginIndex the index to the first {@code char} of\n     * the text range.\n     * @param endIndex the index after the last {@code char} of\n     * the text range.\n     * @return the number of Unicode code points in the specified text\n     * range\n     * @exception IndexOutOfBoundsException if the\n     * {@code beginIndex} is negative, or {@code endIndex}\n     * is larger than the length of this {@code String}, or\n     * {@code beginIndex} is larger than {@code endIndex}.\n     * @since  1.5\n     */\n    public int codePointCount(int beginIndex, int endIndex) {\n        if (beginIndex \u003c 0 || beginIndex \u003e endIndex ||\n            endIndex \u003e length()) {\n            throw new IndexOutOfBoundsException();\n        }\n        if (isLatin1()) {\n            return endIndex - beginIndex;\n        }\n        return StringUTF16.codePointCount(value, beginIndex, endIndex);\n    }\n\n    /**\n     * Returns the index within this {@code String} that is\n     * offset from the given {@code index} by\n     * {@code codePointOffset} code points. Unpaired surrogates\n     * within the text range given by {@code index} and\n     * {@code codePointOffset} count as one code point each.\n     *\n     * @param index the index to be offset\n     * @param codePointOffset the offset in code points\n     * @return the index within this {@code String}\n     * @exception IndexOutOfBoundsException if {@code index}\n     *   is negative or larger then the length of this\n     *   {@code String}, or if {@code codePointOffset} is positive\n     *   and the substring starting with {@code index} has fewer\n     *   than {@code codePointOffset} code points,\n     *   or if {@code codePointOffset} is negative and the substring\n     *   before {@code index} has fewer than the absolute value\n     *   of {@code codePointOffset} code points.\n     * @since 1.5\n     */\n    public int offsetByCodePoints(int index, int codePointOffset) {\n        if (index \u003c 0 || index \u003e length()) {\n            throw new IndexOutOfBoundsException();\n        }\n        return Character.offsetByCodePoints(this, index, codePointOffset);\n    }\n\n    /**\n     * Copies characters from this string into the destination character\n     * array.\n     * \u003cp\u003e\n     * The first character to be copied is at index {@code srcBegin};\n     * the last character to be copied is at index {@code srcEnd-1}\n     * (thus the total number of characters to be copied is\n     * {@code srcEnd-srcBegin}). The characters are copied into the\n     * subarray of {@code dst} starting at index {@code dstBegin}\n     * and ending at index:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     *     dstBegin + (srcEnd-srcBegin) - 1\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param      srcBegin   index of the first character in the string\n     *                        to copy.\n     * @param      srcEnd     index after the last character in the string\n     *                        to copy.\n     * @param      dst        the destination array.\n     * @param      dstBegin   the start offset in the destination array.\n     * @exception IndexOutOfBoundsException If any of the following\n     *            is true:\n     *            \u003cul\u003e\u003cli\u003e{@code srcBegin} is negative.\n     *            \u003cli\u003e{@code srcBegin} is greater than {@code srcEnd}\n     *            \u003cli\u003e{@code srcEnd} is greater than the length of this\n     *                string\n     *            \u003cli\u003e{@code dstBegin} is negative\n     *            \u003cli\u003e{@code dstBegin+(srcEnd-srcBegin)} is larger than\n     *                {@code dst.length}\u003c/ul\u003e\n     */\n    public void getChars(int srcBegin, int srcEnd, char dst[], int dstBegin) {\n        checkBoundsBeginEnd(srcBegin, srcEnd, length());\n        checkBoundsOffCount(dstBegin, srcEnd - srcBegin, dst.length);\n        if (isLatin1()) {\n            StringLatin1.getChars(value, srcBegin, srcEnd, dst, dstBegin);\n        } else {\n            StringUTF16.getChars(value, srcBegin, srcEnd, dst, dstBegin);\n        }\n    }\n\n    /**\n     * Copies characters from this string into the destination byte array. Each\n     * byte receives the 8 low-order bits of the corresponding character. The\n     * eight high-order bits of each character are not copied and do not\n     * participate in the transfer in any way.\n     *\n     * \u003cp\u003e The first character to be copied is at index {@code srcBegin}; the\n     * last character to be copied is at index {@code srcEnd-1}.  The total\n     * number of characters to be copied is {@code srcEnd-srcBegin}. The\n     * characters, converted to bytes, are copied into the subarray of {@code\n     * dst} starting at index {@code dstBegin} and ending at index:\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     *     dstBegin + (srcEnd-srcBegin) - 1\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @deprecated  This method does not properly convert characters into\n     * bytes.  As of JDK\u0026nbsp;1.1, the preferred way to do this is via the\n     * {@link #getBytes()} method, which uses the platform\u0027s default charset.\n     *\n     * @param  srcBegin\n     *         Index of the first character in the string to copy\n     *\n     * @param  srcEnd\n     *         Index after the last character in the string to copy\n     *\n     * @param  dst\n     *         The destination array\n     *\n     * @param  dstBegin\n     *         The start offset in the destination array\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If any of the following is true:\n     *          \u003cul\u003e\n     *            \u003cli\u003e {@code srcBegin} is negative\n     *            \u003cli\u003e {@code srcBegin} is greater than {@code srcEnd}\n     *            \u003cli\u003e {@code srcEnd} is greater than the length of this String\n     *            \u003cli\u003e {@code dstBegin} is negative\n     *            \u003cli\u003e {@code dstBegin+(srcEnd-srcBegin)} is larger than {@code\n     *                 dst.length}\n     *          \u003c/ul\u003e\n     */\n    @Deprecated(since\u003d\"1.1\")\n    public void getBytes(int srcBegin, int srcEnd, byte dst[], int dstBegin) {\n        checkBoundsBeginEnd(srcBegin, srcEnd, length());\n        Objects.requireNonNull(dst);\n        checkBoundsOffCount(dstBegin, srcEnd - srcBegin, dst.length);\n        if (isLatin1()) {\n            StringLatin1.getBytes(value, srcBegin, srcEnd, dst, dstBegin);\n        } else {\n            StringUTF16.getBytes(value, srcBegin, srcEnd, dst, dstBegin);\n        }\n    }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the named\n     * charset, storing the result into a new byte array.\n     *\n     * \u003cp\u003e The behavior of this method when this string cannot be encoded in\n     * the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetEncoder} class should be used when more control\n     * over the encoding process is required.\n     *\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @return  The resultant byte array\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  1.1\n     */\n    public byte[] getBytes(String charsetName)\n            throws UnsupportedEncodingException {\n        if (charsetName \u003d\u003d null) throw new NullPointerException();\n        return StringCoding.encode(charsetName, coder(), value);\n    }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the given\n     * {@linkplain java.nio.charset.Charset charset}, storing the result into a\n     * new byte array.\n     *\n     * \u003cp\u003e This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\u0027s default replacement byte array.  The\n     * {@link java.nio.charset.CharsetEncoder} class should be used when more\n     * control over the encoding process is required.\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset} to be used to encode\n     *         the {@code String}\n     *\n     * @return  The resultant byte array\n     *\n     * @since  1.6\n     */\n    public byte[] getBytes(Charset charset) {\n        if (charset \u003d\u003d null) throw new NullPointerException();\n        return StringCoding.encode(charset, coder(), value);\n     }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the\n     * platform\u0027s default charset, storing the result into a new byte array.\n     *\n     * \u003cp\u003e The behavior of this method when this string cannot be encoded in\n     * the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetEncoder} class should be used when more control\n     * over the encoding process is required.\n     *\n     * @return  The resultant byte array\n     *\n     * @since      1.1\n     */\n    public byte[] getBytes() {\n        return StringCoding.encode(coder(), value);\n    }\n\n    /**\n     * Compares this string to the specified object.  The result is {@code\n     * true} if and only if the argument is not {@code null} and is a {@code\n     * String} object that represents the same sequence of characters as this\n     * object.\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param  anObject\n     *         The object to compare this {@code String} against\n     *\n     * @return  {@code true} if the given object represents a {@code String}\n     *          equivalent to this string, {@code false} otherwise\n     *\n     * @see  #compareTo(String)\n     * @see  #equalsIgnoreCase(String)\n     */\n    public boolean equals(Object anObject) {\n        if (this \u003d\u003d anObject) {\n            return true;\n        }\n        if (anObject instanceof String) {\n            String aString \u003d (String)anObject;\n            if (coder() \u003d\u003d aString.coder()) {\n                return isLatin1() ? StringLatin1.equals(value, aString.value)\n                                  : StringUTF16.equals(value, aString.value);\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Compares this string to the specified {@code StringBuffer}.  The result\n     * is {@code true} if and only if this {@code String} represents the same\n     * sequence of characters as the specified {@code StringBuffer}. This method\n     * synchronizes on the {@code StringBuffer}.\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param  sb\n     *         The {@code StringBuffer} to compare this {@code String} against\n     *\n     * @return  {@code true} if this {@code String} represents the same\n     *          sequence of characters as the specified {@code StringBuffer},\n     *          {@code false} otherwise\n     *\n     * @since  1.4\n     */\n    public boolean contentEquals(StringBuffer sb) {\n        return contentEquals((CharSequence)sb);\n    }\n\n    private boolean nonSyncContentEquals(AbstractStringBuilder sb) {\n        int len \u003d length();\n        if (len !\u003d sb.length()) {\n            return false;\n        }\n        byte v1[] \u003d value;\n        byte v2[] \u003d sb.getValue();\n        if (coder() \u003d\u003d sb.getCoder()) {\n            int n \u003d v1.length;\n            for (int i \u003d 0; i \u003c n; i++) {\n                if (v1[i] !\u003d v2[i]) {\n                    return false;\n                }\n            }\n        } else {\n            if (!isLatin1()) {  // utf16 str and latin1 abs can never be \"equal\"\n                return false;\n            }\n            return StringUTF16.contentEquals(v1, v2, len);\n        }\n        return true;\n    }\n\n    /**\n     * Compares this string to the specified {@code CharSequence}.  The\n     * result is {@code true} if and only if this {@code String} represents the\n     * same sequence of char values as the specified sequence. Note that if the\n     * {@code CharSequence} is a {@code StringBuffer} then the method\n     * synchronizes on it.\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param  cs\n     *         The sequence to compare this {@code String} against\n     *\n     * @return  {@code true} if this {@code String} represents the same\n     *          sequence of char values as the specified sequence, {@code\n     *          false} otherwise\n     *\n     * @since  1.5\n     */\n    public boolean contentEquals(CharSequence cs) {\n        // Argument is a StringBuffer, StringBuilder\n        if (cs instanceof AbstractStringBuilder) {\n            if (cs instanceof StringBuffer) {\n                synchronized(cs) {\n                   return nonSyncContentEquals((AbstractStringBuilder)cs);\n                }\n            } else {\n                return nonSyncContentEquals((AbstractStringBuilder)cs);\n            }\n        }\n        // Argument is a String\n        if (cs instanceof String) {\n            return equals(cs);\n        }\n        // Argument is a generic CharSequence\n        int n \u003d cs.length();\n        if (n !\u003d length()) {\n            return false;\n        }\n        byte[] val \u003d this.value;\n        if (isLatin1()) {\n            for (int i \u003d 0; i \u003c n; i++) {\n                if ((val[i] \u0026 0xff) !\u003d cs.charAt(i)) {\n                    return false;\n                }\n            }\n        } else {\n            if (!StringUTF16.contentEquals(val, cs, n)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Compares this {@code String} to another {@code String}, ignoring case\n     * considerations.  Two strings are considered equal ignoring case if they\n     * are of the same length and corresponding characters in the two strings\n     * are equal ignoring case.\n     *\n     * \u003cp\u003e Two characters {@code c1} and {@code c2} are considered the same\n     * ignoring case if at least one of the following is true:\n     * \u003cul\u003e\n     *   \u003cli\u003e The two characters are the same (as compared by the\n     *        {@code \u003d\u003d} operator)\n     *   \u003cli\u003e Calling {@code Character.toLowerCase(Character.toUpperCase(char))}\n     *        on each character produces the same result\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that this method does \u003cem\u003enot\u003c/em\u003e take locale into account, and\n     * will result in unsatisfactory results for certain locales.  The\n     * {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @param  anotherString\n     *         The {@code String} to compare this {@code String} against\n     *\n     * @return  {@code true} if the argument is not {@code null} and it\n     *          represents an equivalent {@code String} ignoring case; {@code\n     *          false} otherwise\n     *\n     * @see  #equals(Object)\n     */\n    public boolean equalsIgnoreCase(String anotherString) {\n        return (this \u003d\u003d anotherString) ? true\n                : (anotherString !\u003d null)\n                \u0026\u0026 (anotherString.length() \u003d\u003d length())\n                \u0026\u0026 regionMatches(true, 0, anotherString, 0, length());\n    }\n\n    /**\n     * Compares two strings lexicographically.\n     * The comparison is based on the Unicode value of each character in\n     * the strings. The character sequence represented by this\n     * {@code String} object is compared lexicographically to the\n     * character sequence represented by the argument string. The result is\n     * a negative integer if this {@code String} object\n     * lexicographically precedes the argument string. The result is a\n     * positive integer if this {@code String} object lexicographically\n     * follows the argument string. The result is zero if the strings\n     * are equal; {@code compareTo} returns {@code 0} exactly when\n     * the {@link #equals(Object)} method would return {@code true}.\n     * \u003cp\u003e\n     * This is the definition of lexicographic ordering. If two strings are\n     * different, then either they have different characters at some index\n     * that is a valid index for both strings, or their lengths are different,\n     * or both. If they have different characters at one or more index\n     * positions, let \u003ci\u003ek\u003c/i\u003e be the smallest such index; then the string\n     * whose character at position \u003ci\u003ek\u003c/i\u003e has the smaller value, as\n     * determined by using the {@code \u003c} operator, lexicographically precedes the\n     * other string. In this case, {@code compareTo} returns the\n     * difference of the two character values at position {@code k} in\n     * the two string -- that is, the value:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(k)-anotherString.charAt(k)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * If there is no index position at which they differ, then the shorter\n     * string lexicographically precedes the longer string. In this case,\n     * {@code compareTo} returns the difference of the lengths of the\n     * strings -- that is, the value:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.length()-anotherString.length()\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * \u003cp\u003eFor finer-grained String comparison, refer to\n     * {@link java.text.Collator}.\n     *\n     * @param   anotherString   the {@code String} to be compared.\n     * @return  the value {@code 0} if the argument string is equal to\n     *          this string; a value less than {@code 0} if this string\n     *          is lexicographically less than the string argument; and a\n     *          value greater than {@code 0} if this string is\n     *          lexicographically greater than the string argument.\n     */\n    public int compareTo(String anotherString) {\n        byte v1[] \u003d value;\n        byte v2[] \u003d anotherString.value;\n        if (coder() \u003d\u003d anotherString.coder()) {\n            return isLatin1() ? StringLatin1.compareTo(v1, v2)\n                              : StringUTF16.compareTo(v1, v2);\n        }\n        return isLatin1() ? StringLatin1.compareToUTF16(v1, v2)\n                          : StringUTF16.compareToLatin1(v1, v2);\n     }\n\n    /**\n     * A Comparator that orders {@code String} objects as by\n     * {@code compareToIgnoreCase}. This comparator is serializable.\n     * \u003cp\u003e\n     * Note that this Comparator does \u003cem\u003enot\u003c/em\u003e take locale into account,\n     * and will result in an unsatisfactory ordering for certain locales.\n     * The {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @see     java.text.Collator\n     * @since   1.2\n     */\n    public static final Comparator\u003cString\u003e CASE_INSENSITIVE_ORDER\n                                         \u003d new CaseInsensitiveComparator();\n    private static class CaseInsensitiveComparator\n            implements Comparator\u003cString\u003e, java.io.Serializable {\n        // use serialVersionUID from JDK 1.2.2 for interoperability\n        private static final long serialVersionUID \u003d 8575799808933029326L;\n\n        public int compare(String s1, String s2) {\n            byte v1[] \u003d s1.value;\n            byte v2[] \u003d s2.value;\n            if (s1.coder() \u003d\u003d s2.coder()) {\n                return s1.isLatin1() ? StringLatin1.compareToCI(v1, v2)\n                                     : StringUTF16.compareToCI(v1, v2);\n            }\n            return s1.isLatin1() ? StringLatin1.compareToCI_UTF16(v1, v2)\n                                 : StringUTF16.compareToCI_Latin1(v1, v2);\n        }\n\n        /** Replaces the de-serialized object. */\n        private Object readResolve() { return CASE_INSENSITIVE_ORDER; }\n    }\n\n    /**\n     * Compares two strings lexicographically, ignoring case\n     * differences. This method returns an integer whose sign is that of\n     * calling {@code compareTo} with normalized versions of the strings\n     * where case differences have been eliminated by calling\n     * {@code Character.toLowerCase(Character.toUpperCase(character))} on\n     * each character.\n     * \u003cp\u003e\n     * Note that this method does \u003cem\u003enot\u003c/em\u003e take locale into account,\n     * and will result in an unsatisfactory ordering for certain locales.\n     * The {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @param   str   the {@code String} to be compared.\n     * @return  a negative integer, zero, or a positive integer as the\n     *          specified String is greater than, equal to, or less\n     *          than this String, ignoring case considerations.\n     * @see     java.text.Collator\n     * @since   1.2\n     */\n    public int compareToIgnoreCase(String str) {\n        return CASE_INSENSITIVE_ORDER.compare(this, str);\n    }\n\n    /**\n     * Tests if two string regions are equal.\n     * \u003cp\u003e\n     * A substring of this {@code String} object is compared to a substring\n     * of the argument other. The result is true if these substrings\n     * represent identical character sequences. The substring of this\n     * {@code String} object to be compared begins at index {@code toffset}\n     * and has length {@code len}. The substring of other to be compared\n     * begins at index {@code ooffset} and has length {@code len}. The\n     * result is {@code false} if and only if at least one of the following\n     * is true:\n     * \u003cul\u003e\u003cli\u003e{@code toffset} is negative.\n     * \u003cli\u003e{@code ooffset} is negative.\n     * \u003cli\u003e{@code toffset+len} is greater than the length of this\n     * {@code String} object.\n     * \u003cli\u003e{@code ooffset+len} is greater than the length of the other\n     * argument.\n     * \u003cli\u003eThere is some nonnegative integer \u003ci\u003ek\u003c/i\u003e less than {@code len}\n     * such that:\n     * {@code this.charAt(toffset + }\u003ci\u003ek\u003c/i\u003e{@code ) !\u003d other.charAt(ooffset + }\n     * \u003ci\u003ek\u003c/i\u003e{@code )}\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that this method does \u003cem\u003enot\u003c/em\u003e take locale into account.  The\n     * {@link java.text.Collator} class provides locale-sensitive comparison.\n     *\n     * @param   toffset   the starting offset of the subregion in this string.\n     * @param   other     the string argument.\n     * @param   ooffset   the starting offset of the subregion in the string\n     *                    argument.\n     * @param   len       the number of characters to compare.\n     * @return  {@code true} if the specified subregion of this string\n     *          exactly matches the specified subregion of the string argument;\n     *          {@code false} otherwise.\n     */\n    public boolean regionMatches(int toffset, String other, int ooffset, int len) {\n        byte tv[] \u003d value;\n        byte ov[] \u003d other.value;\n        // Note: toffset, ooffset, or len might be near -1\u003e\u003e\u003e1.\n        if ((ooffset \u003c 0) || (toffset \u003c 0) ||\n             (toffset \u003e (long)length() - len) ||\n             (ooffset \u003e (long)other.length() - len)) {\n            return false;\n        }\n        if (coder() \u003d\u003d other.coder()) {\n            if (!isLatin1() \u0026\u0026 (len \u003e 0)) {\n                toffset \u003d toffset \u003c\u003c 1;\n                ooffset \u003d ooffset \u003c\u003c 1;\n                len \u003d len \u003c\u003c 1;\n            }\n            while (len-- \u003e 0) {\n                if (tv[toffset++] !\u003d ov[ooffset++]) {\n                    return false;\n                }\n            }\n        } else {\n            if (coder() \u003d\u003d LATIN1) {\n                while (len-- \u003e 0) {\n                    if (StringLatin1.getChar(tv, toffset++) !\u003d\n                        StringUTF16.getChar(ov, ooffset++)) {\n                        return false;\n                    }\n                }\n            } else {\n                while (len-- \u003e 0) {\n                    if (StringUTF16.getChar(tv, toffset++) !\u003d\n                        StringLatin1.getChar(ov, ooffset++)) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Tests if two string regions are equal.\n     * \u003cp\u003e\n     * A substring of this {@code String} object is compared to a substring\n     * of the argument {@code other}. The result is {@code true} if these\n     * substrings represent character sequences that are the same, ignoring\n     * case if and only if {@code ignoreCase} is true. The substring of\n     * this {@code String} object to be compared begins at index\n     * {@code toffset} and has length {@code len}. The substring of\n     * {@code other} to be compared begins at index {@code ooffset} and\n     * has length {@code len}. The result is {@code false} if and only if\n     * at least one of the following is true:\n     * \u003cul\u003e\u003cli\u003e{@code toffset} is negative.\n     * \u003cli\u003e{@code ooffset} is negative.\n     * \u003cli\u003e{@code toffset+len} is greater than the length of this\n     * {@code String} object.\n     * \u003cli\u003e{@code ooffset+len} is greater than the length of the other\n     * argument.\n     * \u003cli\u003e{@code ignoreCase} is {@code false} and there is some nonnegative\n     * integer \u003ci\u003ek\u003c/i\u003e less than {@code len} such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(toffset+k) !\u003d other.charAt(ooffset+k)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * \u003cli\u003e{@code ignoreCase} is {@code true} and there is some nonnegative\n     * integer \u003ci\u003ek\u003c/i\u003e less than {@code len} such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * Character.toLowerCase(Character.toUpperCase(this.charAt(toffset+k))) !\u003d\n     Character.toLowerCase(Character.toUpperCase(other.charAt(ooffset+k)))\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003eNote that this method does \u003cem\u003enot\u003c/em\u003e take locale into account,\n     * and will result in unsatisfactory results for certain locales when\n     * {@code ignoreCase} is {@code true}.  The {@link java.text.Collator} class\n     * provides locale-sensitive comparison.\n     *\n     * @param   ignoreCase   if {@code true}, ignore case when comparing\n     *                       characters.\n     * @param   toffset      the starting offset of the subregion in this\n     *                       string.\n     * @param   other        the string argument.\n     * @param   ooffset      the starting offset of the subregion in the string\n     *                       argument.\n     * @param   len          the number of characters to compare.\n     * @return  {@code true} if the specified subregion of this string\n     *          matches the specified subregion of the string argument;\n     *          {@code false} otherwise. Whether the matching is exact\n     *          or case insensitive depends on the {@code ignoreCase}\n     *          argument.\n     */\n    public boolean regionMatches(boolean ignoreCase, int toffset,\n            String other, int ooffset, int len) {\n        if (!ignoreCase) {\n            return regionMatches(toffset, other, ooffset, len);\n        }\n        // Note: toffset, ooffset, or len might be near -1\u003e\u003e\u003e1.\n        if ((ooffset \u003c 0) || (toffset \u003c 0)\n                || (toffset \u003e (long)length() - len)\n                || (ooffset \u003e (long)other.length() - len)) {\n            return false;\n        }\n        byte tv[] \u003d value;\n        byte ov[] \u003d other.value;\n        if (coder() \u003d\u003d other.coder()) {\n            return isLatin1()\n              ? StringLatin1.regionMatchesCI(tv, toffset, ov, ooffset, len)\n              : StringUTF16.regionMatchesCI(tv, toffset, ov, ooffset, len);\n        }\n        return isLatin1()\n              ? StringLatin1.regionMatchesCI_UTF16(tv, toffset, ov, ooffset, len)\n              : StringUTF16.regionMatchesCI_Latin1(tv, toffset, ov, ooffset, len);\n    }\n\n    /**\n     * Tests if the substring of this string beginning at the\n     * specified index starts with the specified prefix.\n     *\n     * @param   prefix    the prefix.\n     * @param   toffset   where to begin looking in this string.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a prefix of the substring of this object starting\n     *          at index {@code toffset}; {@code false} otherwise.\n     *          The result is {@code false} if {@code toffset} is\n     *          negative or greater than the length of this\n     *          {@code String} object; otherwise the result is the same\n     *          as the result of the expression\n     *          \u003cpre\u003e\n     *          this.substring(toffset).startsWith(prefix)\n     *          \u003c/pre\u003e\n     */\n    public boolean startsWith(String prefix, int toffset) {\n        // Note: toffset might be near -1\u003e\u003e\u003e1.\n        if (toffset \u003c 0 || toffset \u003e length() - prefix.length()) {\n            return false;\n        }\n        byte ta[] \u003d value;\n        byte pa[] \u003d prefix.value;\n        int po \u003d 0;\n        int pc \u003d pa.length;\n        if (coder() \u003d\u003d prefix.coder()) {\n            int to \u003d isLatin1() ? toffset : toffset \u003c\u003c 1;\n            while (po \u003c pc) {\n                if (ta[to++] !\u003d pa[po++]) {\n                    return false;\n                }\n            }\n        } else {\n            if (isLatin1()) {  // \u0026\u0026 pcoder \u003d\u003d UTF16\n                return false;\n            }\n            // coder \u003d\u003d UTF16 \u0026\u0026 pcoder \u003d\u003d LATIN1)\n            while (po \u003c pc) {\n                if (StringUTF16.getChar(ta, toffset++) !\u003d (pa[po++] \u0026 0xff)) {\n                    return false;\n               }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Tests if this string starts with the specified prefix.\n     *\n     * @param   prefix   the prefix.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a prefix of the character sequence represented by\n     *          this string; {@code false} otherwise.\n     *          Note also that {@code true} will be returned if the\n     *          argument is an empty string or is equal to this\n     *          {@code String} object as determined by the\n     *          {@link #equals(Object)} method.\n     * @since   1.0\n     */\n    public boolean startsWith(String prefix) {\n        return startsWith(prefix, 0);\n    }\n\n    /**\n     * Tests if this string ends with the specified suffix.\n     *\n     * @param   suffix   the suffix.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a suffix of the character sequence represented by\n     *          this object; {@code false} otherwise. Note that the\n     *          result will be {@code true} if the argument is the\n     *          empty string or is equal to this {@code String} object\n     *          as determined by the {@link #equals(Object)} method.\n     */\n    public boolean endsWith(String suffix) {\n        return startsWith(suffix, length() - suffix.length());\n    }\n\n    /**\n     * Returns a hash code for this string. The hash code for a\n     * {@code String} object is computed as\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * using {@code int} arithmetic, where {@code s[i]} is the\n     * \u003ci\u003ei\u003c/i\u003eth character of the string, {@code n} is the length of\n     * the string, and {@code ^} indicates exponentiation.\n     * (The hash value of the empty string is zero.)\n     *\n     * @return  a hash code value for this object.\n     */\n    public int hashCode() {\n        int h \u003d hash;\n        if (h \u003d\u003d 0 \u0026\u0026 value.length \u003e 0) {\n            hash \u003d h \u003d isLatin1() ? StringLatin1.hashCode(value)\n                                  : StringUTF16.hashCode(value);\n        }\n        return h;\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of\n     * the specified character. If a character with value\n     * {@code ch} occurs in the character sequence represented by\n     * this {@code String} object, then the index (in Unicode\n     * code units) of the first such occurrence is returned. For\n     * values of {@code ch} in the range from 0 to 0xFFFF\n     * (inclusive), this is the smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. In either case, if no such character occurs in this\n     * string, then {@code -1} is returned.\n     *\n     * @param   ch   a character (Unicode code point).\n     * @return  the index of the first occurrence of the character in the\n     *          character sequence represented by this object, or\n     *          {@code -1} if the character does not occur.\n     */\n    public int indexOf(int ch) {\n        return indexOf(ch, 0);\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified character, starting the search at the specified index.\n     * \u003cp\u003e\n     * If a character with value {@code ch} occurs in the\n     * character sequence represented by this {@code String}\n     * object at an index no smaller than {@code fromIndex}, then\n     * the index of the first such occurrence is returned. For values\n     * of {@code ch} in the range from 0 to 0xFFFF (inclusive),\n     * this is the smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026gt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * smallest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026gt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. In either case, if no such character occurs in this\n     * string at or after position {@code fromIndex}, then\n     * {@code -1} is returned.\n     *\n     * \u003cp\u003e\n     * There is no restriction on the value of {@code fromIndex}. If it\n     * is negative, it has the same effect as if it were zero: this entire\n     * string may be searched. If it is greater than the length of this\n     * string, it has the same effect as if it were equal to the length of\n     * this string: {@code -1} is returned.\n     *\n     * \u003cp\u003eAll indices are specified in {@code char} values\n     * (Unicode code units).\n     *\n     * @param   ch          a character (Unicode code point).\n     * @param   fromIndex   the index to start the search from.\n     * @return  the index of the first occurrence of the character in the\n     *          character sequence represented by this object that is greater\n     *          than or equal to {@code fromIndex}, or {@code -1}\n     *          if the character does not occur.\n     */\n    public int indexOf(int ch, int fromIndex) {\n        return isLatin1() ? StringLatin1.indexOf(value, ch, fromIndex)\n                          : StringUTF16.indexOf(value, ch, fromIndex);\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of\n     * the specified character. For values of {@code ch} in the\n     * range from 0 to 0xFFFF (inclusive), the index (in Unicode code\n     * units) returned is the largest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * largest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true.  In either case, if no such character occurs in this\n     * string, then {@code -1} is returned.  The\n     * {@code String} is searched backwards starting at the last\n     * character.\n     *\n     * @param   ch   a character (Unicode code point).\n     * @return  the index of the last occurrence of the character in the\n     *          character sequence represented by this object, or\n     *          {@code -1} if the character does not occur.\n     */\n    public int lastIndexOf(int ch) {\n        return lastIndexOf(ch, length() - 1);\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of\n     * the specified character, searching backward starting at the\n     * specified index. For values of {@code ch} in the range\n     * from 0 to 0xFFFF (inclusive), the index returned is the largest\n     * value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.charAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026lt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. For other values of {@code ch}, it is the\n     * largest value \u003ci\u003ek\u003c/i\u003e such that:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * (this.codePointAt(\u003ci\u003ek\u003c/i\u003e) \u003d\u003d ch) {@code \u0026\u0026} (\u003ci\u003ek\u003c/i\u003e \u0026lt;\u003d fromIndex)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * is true. In either case, if no such character occurs in this\n     * string at or before position {@code fromIndex}, then\n     * {@code -1} is returned.\n     *\n     * \u003cp\u003eAll indices are specified in {@code char} values\n     * (Unicode code units).\n     *\n     * @param   ch          a character (Unicode code point).\n     * @param   fromIndex   the index to start the search from. There is no\n     *          restriction on the value of {@code fromIndex}. If it is\n     *          greater than or equal to the length of this string, it has\n     *          the same effect as if it were equal to one less than the\n     *          length of this string: this entire string may be searched.\n     *          If it is negative, it has the same effect as if it were -1:\n     *          -1 is returned.\n     * @return  the index of the last occurrence of the character in the\n     *          character sequence represented by this object that is less\n     *          than or equal to {@code fromIndex}, or {@code -1}\n     *          if the character does not occur before that point.\n     */\n    public int lastIndexOf(int ch, int fromIndex) {\n        return isLatin1() ? StringLatin1.lastIndexOf(value, ch, fromIndex)\n                          : StringUTF16.lastIndexOf(value, ch, fromIndex);\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified substring.\n     *\n     * \u003cp\u003eThe returned index is the smallest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     * this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str   the substring to search for.\n     * @return  the index of the first occurrence of the specified substring,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int indexOf(String str) {\n        if (coder() \u003d\u003d str.coder()) {\n            return isLatin1() ? StringLatin1.indexOf(value, str.value)\n                              : StringUTF16.indexOf(value, str.value);\n        }\n        if (coder() \u003d\u003d LATIN1) {  // str.coder \u003d\u003d UTF16\n            return -1;\n        }\n        return StringUTF16.indexOfLatin1(value, str.value);\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified substring, starting at the specified index.\n     *\n     * \u003cp\u003eThe returned index is the smallest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     *     k \u003e\u003d Math.min(fromIndex, this.length()) \u0026\u0026\n     *                   this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str         the substring to search for.\n     * @param   fromIndex   the index from which to start the search.\n     * @return  the index of the first occurrence of the specified substring,\n     *          starting at the specified index,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int indexOf(String str, int fromIndex) {\n        return indexOf(value, coder(), length(), str, fromIndex);\n    }\n\n    /**\n     * Code shared by String and AbstractStringBuilder to do searches. The\n     * source is the character array being searched, and the target\n     * is the string being searched for.\n     *\n     * @param   src       the characters being searched.\n     * @param   srcCoder  the coder of the source string.\n     * @param   srcCount  length of the source string.\n     * @param   tgtStr    the characters being searched for.\n     * @param   fromIndex the index to begin searching from.\n     */\n    static int indexOf(byte[] src, byte srcCoder, int srcCount,\n                       String tgtStr, int fromIndex) {\n        byte[] tgt    \u003d tgtStr.value;\n        byte tgtCoder \u003d tgtStr.coder();\n        int tgtCount  \u003d tgtStr.length();\n\n        if (fromIndex \u003e\u003d srcCount) {\n            return (tgtCount \u003d\u003d 0 ? srcCount : -1);\n        }\n        if (fromIndex \u003c 0) {\n            fromIndex \u003d 0;\n        }\n        if (tgtCount \u003d\u003d 0) {\n            return fromIndex;\n        }\n        if (tgtCount \u003e srcCount) {\n            return -1;\n        }\n        if (srcCoder \u003d\u003d tgtCoder) {\n            return srcCoder \u003d\u003d LATIN1\n                ? StringLatin1.indexOf(src, srcCount, tgt, tgtCount, fromIndex)\n                : StringUTF16.indexOf(src, srcCount, tgt, tgtCount, fromIndex);\n        }\n        if (srcCoder \u003d\u003d LATIN1) {    //  \u0026\u0026 tgtCoder \u003d\u003d UTF16\n            return -1;\n        }\n        // srcCoder \u003d\u003d UTF16 \u0026\u0026 tgtCoder \u003d\u003d LATIN1) {\n        return StringUTF16.indexOfLatin1(src, srcCount, tgt, tgtCount, fromIndex);\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of the\n     * specified substring.  The last occurrence of the empty string \"\"\n     * is considered to occur at the index value {@code this.length()}.\n     *\n     * \u003cp\u003eThe returned index is the largest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     * this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str   the substring to search for.\n     * @return  the index of the last occurrence of the specified substring,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int lastIndexOf(String str) {\n        return lastIndexOf(str, length());\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of the\n     * specified substring, searching backward starting at the specified index.\n     *\n     * \u003cp\u003eThe returned index is the largest value {@code k} for which:\n     * \u003cpre\u003e{@code\n     *     k \u003c\u003d Math.min(fromIndex, this.length()) \u0026\u0026\n     *                   this.startsWith(str, k)\n     * }\u003c/pre\u003e\n     * If no such value of {@code k} exists, then {@code -1} is returned.\n     *\n     * @param   str         the substring to search for.\n     * @param   fromIndex   the index to start the search from.\n     * @return  the index of the last occurrence of the specified substring,\n     *          searching backward from the specified index,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int lastIndexOf(String str, int fromIndex) {\n        return lastIndexOf(value, coder(), length(), str, fromIndex);\n    }\n\n    /**\n     * Code shared by String and AbstractStringBuilder to do searches. The\n     * source is the character array being searched, and the target\n     * is the string being searched for.\n     *\n     * @param   src         the characters being searched.\n     * @param   srcCoder    coder handles the mapping between bytes/chars\n     * @param   srcCount    count of the source string.\n     * @param   tgt         the characters being searched for.\n     * @param   fromIndex   the index to begin searching from.\n     */\n    static int lastIndexOf(byte[] src, byte srcCoder, int srcCount,\n                           String tgtStr, int fromIndex) {\n        byte[] tgt \u003d tgtStr.value;\n        byte tgtCoder \u003d tgtStr.coder();\n        int tgtCount \u003d tgtStr.length();\n        /*\n         * Check arguments; return immediately where possible. For\n         * consistency, don\u0027t check for null str.\n         */\n        int rightIndex \u003d srcCount - tgtCount;\n        if (fromIndex \u003e rightIndex) {\n            fromIndex \u003d rightIndex;\n        }\n        if (fromIndex \u003c 0) {\n            return -1;\n        }\n        /* Empty string always matches. */\n        if (tgtCount \u003d\u003d 0) {\n            return fromIndex;\n        }\n        if (srcCoder \u003d\u003d tgtCoder) {\n            return srcCoder \u003d\u003d LATIN1\n                ? StringLatin1.lastIndexOf(src, srcCount, tgt, tgtCount, fromIndex)\n                : StringUTF16.lastIndexOf(src, srcCount, tgt, tgtCount, fromIndex);\n        }\n        if (srcCoder \u003d\u003d LATIN1) {    // \u0026\u0026 tgtCoder \u003d\u003d UTF16\n            return -1;\n        }\n        // srcCoder \u003d\u003d UTF16 \u0026\u0026 tgtCoder \u003d\u003d LATIN1\n        return StringUTF16.lastIndexOfLatin1(src, srcCount, tgt, tgtCount, fromIndex);\n    }\n\n    /**\n     * Returns a string that is a substring of this string. The\n     * substring begins with the character at the specified index and\n     * extends to the end of this string. \u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"unhappy\".substring(2) returns \"happy\"\n     * \"Harbison\".substring(3) returns \"bison\"\n     * \"emptiness\".substring(9) returns \"\" (an empty string)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param      beginIndex   the beginning index, inclusive.\n     * @return     the specified substring.\n     * @exception  IndexOutOfBoundsException  if\n     *             {@code beginIndex} is negative or larger than the\n     *             length of this {@code String} object.\n     */\n    public String substring(int beginIndex) {\n        if (beginIndex \u003c 0) {\n            throw new StringIndexOutOfBoundsException(beginIndex);\n        }\n        int subLen \u003d length() - beginIndex;\n        if (subLen \u003c 0) {\n            throw new StringIndexOutOfBoundsException(subLen);\n        }\n        if (beginIndex \u003d\u003d 0) {\n            return this;\n        }\n        return isLatin1() ? StringLatin1.newString(value, beginIndex, subLen)\n                          : StringUTF16.newString(value, beginIndex, subLen);\n    }\n\n    /**\n     * Returns a string that is a substring of this string. The\n     * substring begins at the specified {@code beginIndex} and\n     * extends to the character at index {@code endIndex - 1}.\n     * Thus the length of the substring is {@code endIndex-beginIndex}.\n     * \u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"hamburger\".substring(4, 8) returns \"urge\"\n     * \"smiles\".substring(1, 5) returns \"mile\"\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param      beginIndex   the beginning index, inclusive.\n     * @param      endIndex     the ending index, exclusive.\n     * @return     the specified substring.\n     * @exception  IndexOutOfBoundsException  if the\n     *             {@code beginIndex} is negative, or\n     *             {@code endIndex} is larger than the length of\n     *             this {@code String} object, or\n     *             {@code beginIndex} is larger than\n     *             {@code endIndex}.\n     */\n    public String substring(int beginIndex, int endIndex) {\n        int length \u003d length();\n        checkBoundsBeginEnd(beginIndex, endIndex, length);\n        int subLen \u003d endIndex - beginIndex;\n        if (beginIndex \u003d\u003d 0 \u0026\u0026 endIndex \u003d\u003d length) {\n            return this;\n        }\n        return isLatin1() ? StringLatin1.newString(value, beginIndex, subLen)\n                          : StringUTF16.newString(value, beginIndex, subLen);\n    }\n\n    /**\n     * Returns a character sequence that is a subsequence of this sequence.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * str.subSequence(begin,\u0026nbsp;end)\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * behaves in exactly the same way as the invocation\n     *\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * str.substring(begin,\u0026nbsp;end)\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @apiNote\n     * This method is defined so that the {@code String} class can implement\n     * the {@link CharSequence} interface.\n     *\n     * @param   beginIndex   the begin index, inclusive.\n     * @param   endIndex     the end index, exclusive.\n     * @return  the specified subsequence.\n     *\n     * @throws  IndexOutOfBoundsException\n     *          if {@code beginIndex} or {@code endIndex} is negative,\n     *          if {@code endIndex} is greater than {@code length()},\n     *          or if {@code beginIndex} is greater than {@code endIndex}\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public CharSequence subSequence(int beginIndex, int endIndex) {\n        return this.substring(beginIndex, endIndex);\n    }\n\n    /**\n     * Concatenates the specified string to the end of this string.\n     * \u003cp\u003e\n     * If the length of the argument string is {@code 0}, then this\n     * {@code String} object is returned. Otherwise, a\n     * {@code String} object is returned that represents a character\n     * sequence that is the concatenation of the character sequence\n     * represented by this {@code String} object and the character\n     * sequence represented by the argument string.\u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"cares\".concat(\"s\") returns \"caress\"\n     * \"to\".concat(\"get\").concat(\"her\") returns \"together\"\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param   str   the {@code String} that is concatenated to the end\n     *                of this {@code String}.\n     * @return  a string that represents the concatenation of this object\u0027s\n     *          characters followed by the string argument\u0027s characters.\n     */\n    public String concat(String str) {\n        if (str.isEmpty()) {\n            return this;\n        }\n        if (coder() \u003d\u003d str.coder()) {\n            byte[] val \u003d this.value;\n            byte[] oval \u003d str.value;\n            int len \u003d val.length + oval.length;\n            byte[] buf \u003d Arrays.copyOf(val, len);\n            System.arraycopy(oval, 0, buf, val.length, oval.length);\n            return new String(buf, coder);\n        }\n        int len \u003d length();\n        int olen \u003d str.length();\n        byte[] buf \u003d StringUTF16.newBytesFor(len + olen);\n        getBytes(buf, 0, UTF16);\n        str.getBytes(buf, len, UTF16);\n        return new String(buf, UTF16);\n    }\n\n    /**\n     * Returns a string resulting from replacing all occurrences of\n     * {@code oldChar} in this string with {@code newChar}.\n     * \u003cp\u003e\n     * If the character {@code oldChar} does not occur in the\n     * character sequence represented by this {@code String} object,\n     * then a reference to this {@code String} object is returned.\n     * Otherwise, a {@code String} object is returned that\n     * represents a character sequence identical to the character sequence\n     * represented by this {@code String} object, except that every\n     * occurrence of {@code oldChar} is replaced by an occurrence\n     * of {@code newChar}.\n     * \u003cp\u003e\n     * Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * \"mesquite in your cellar\".replace(\u0027e\u0027, \u0027o\u0027)\n     *         returns \"mosquito in your collar\"\n     * \"the war of baronets\".replace(\u0027r\u0027, \u0027y\u0027)\n     *         returns \"the way of bayonets\"\n     * \"sparring with a purple porpoise\".replace(\u0027p\u0027, \u0027t\u0027)\n     *         returns \"starring with a turtle tortoise\"\n     * \"JonL\".replace(\u0027q\u0027, \u0027x\u0027) returns \"JonL\" (no change)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @param   oldChar   the old character.\n     * @param   newChar   the new character.\n     * @return  a string derived from this string by replacing every\n     *          occurrence of {@code oldChar} with {@code newChar}.\n     */\n    public String replace(char oldChar, char newChar) {\n        if (oldChar !\u003d newChar) {\n            String ret \u003d isLatin1() ? StringLatin1.replace(value, oldChar, newChar)\n                                    : StringUTF16.replace(value, oldChar, newChar);\n            if (ret !\u003d null) {\n                return ret;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Tells whether or not this string matches the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr\u003c/i\u003e{@code .matches(}\u003ci\u003eregex\u003c/i\u003e{@code )} yields exactly the\n     * same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * {@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#matches(String,CharSequence)\n     * matches(\u003ci\u003eregex\u003c/i\u003e, \u003ci\u003estr\u003c/i\u003e)}\n     * \u003c/blockquote\u003e\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     *\n     * @return  {@code true} if, and only if, this string matches the\n     *          given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public boolean matches(String regex) {\n        return Pattern.matches(regex, this);\n    }\n\n    /**\n     * Returns true if and only if this string contains the specified\n     * sequence of char values.\n     *\n     * @param s the sequence to search for\n     * @return true if this string contains {@code s}, false otherwise\n     * @since 1.5\n     */\n    public boolean contains(CharSequence s) {\n        return indexOf(s.toString()) \u003e\u003d 0;\n    }\n\n    /**\n     * Replaces the first substring of this string that matches the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e with the\n     * given replacement.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr\u003c/i\u003e{@code .replaceFirst(}\u003ci\u003eregex\u003c/i\u003e{@code ,} \u003ci\u003erepl\u003c/i\u003e{@code )}\n     * yields exactly the same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * \u003ccode\u003e\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n     * java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher}(\u003ci\u003estr\u003c/i\u003e).{@link\n     * java.util.regex.Matcher#replaceFirst replaceFirst}(\u003ci\u003erepl\u003c/i\u003e)\n     * \u003c/code\u003e\n     * \u003c/blockquote\u003e\n     *\n     *\u003cp\u003e\n     * Note that backslashes ({@code \\}) and dollar signs ({@code $}) in the\n     * replacement string may cause the results to be different than if it were\n     * being treated as a literal replacement string; see\n     * {@link java.util.regex.Matcher#replaceFirst}.\n     * Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special\n     * meaning of these characters, if desired.\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     * @param   replacement\n     *          the string to be substituted for the first match\n     *\n     * @return  The resulting {@code String}\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public String replaceFirst(String regex, String replacement) {\n        return Pattern.compile(regex).matcher(this).replaceFirst(replacement);\n    }\n\n    /**\n     * Replaces each substring of this string that matches the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e with the\n     * given replacement.\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr\u003c/i\u003e{@code .replaceAll(}\u003ci\u003eregex\u003c/i\u003e{@code ,} \u003ci\u003erepl\u003c/i\u003e{@code )}\n     * yields exactly the same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * \u003ccode\u003e\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n     * java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher}(\u003ci\u003estr\u003c/i\u003e).{@link\n     * java.util.regex.Matcher#replaceAll replaceAll}(\u003ci\u003erepl\u003c/i\u003e)\n     * \u003c/code\u003e\n     * \u003c/blockquote\u003e\n     *\n     *\u003cp\u003e\n     * Note that backslashes ({@code \\}) and dollar signs ({@code $}) in the\n     * replacement string may cause the results to be different than if it were\n     * being treated as a literal replacement string; see\n     * {@link java.util.regex.Matcher#replaceAll Matcher.replaceAll}.\n     * Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special\n     * meaning of these characters, if desired.\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     * @param   replacement\n     *          the string to be substituted for each match\n     *\n     * @return  The resulting {@code String}\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public String replaceAll(String regex, String replacement) {\n        return Pattern.compile(regex).matcher(this).replaceAll(replacement);\n    }\n\n    /**\n     * Replaces each substring of this string that matches the literal target\n     * sequence with the specified literal replacement sequence. The\n     * replacement proceeds from the beginning of the string to the end, for\n     * example, replacing \"aa\" with \"b\" in the string \"aaa\" will result in\n     * \"ba\" rather than \"ab\".\n     *\n     * @param  target The sequence of char values to be replaced\n     * @param  replacement The replacement sequence of char values\n     * @return  The resulting string\n     * @since 1.5\n     */\n    public String replace(CharSequence target, CharSequence replacement) {\n        String tgtStr \u003d target.toString();\n        String replStr \u003d replacement.toString();\n        int j \u003d indexOf(tgtStr);\n        if (j \u003c 0) {\n            return this;\n        }\n        int tgtLen \u003d tgtStr.length();\n        int tgtLen1 \u003d Math.max(tgtLen, 1);\n        int thisLen \u003d length();\n\n        int newLenHint \u003d thisLen - tgtLen + replStr.length();\n        if (newLenHint \u003c 0) {\n            throw new OutOfMemoryError();\n        }\n        StringBuilder sb \u003d new StringBuilder(newLenHint);\n        int i \u003d 0;\n        do {\n            sb.append(this, i, j).append(replStr);\n            i \u003d j + tgtLen;\n        } while (j \u003c thisLen \u0026\u0026 (j \u003d indexOf(tgtStr, j + tgtLen1)) \u003e 0);\n        return sb.append(this, i, thisLen).toString();\n    }\n\n    /**\n     * Splits this string around matches of the given\n     * \u003ca href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n     *\n     * \u003cp\u003e The array returned by this method contains each substring of this\n     * string that is terminated by another substring that matches the given\n     * expression or is terminated by the end of the string.  The substrings in\n     * the array are in the order in which they occur in this string.  If the\n     * expression does not match any part of the input then the resulting array\n     * has just one element, namely this string.\n     *\n     * \u003cp\u003e When there is a positive-width match at the beginning of this\n     * string then an empty leading substring is included at the beginning\n     * of the resulting array. A zero-width match at the beginning however\n     * never produces such empty leading substring.\n     *\n     * \u003cp\u003e The {@code limit} parameter controls the number of times the\n     * pattern is applied and therefore affects the length of the resulting\n     * array.\n     * \u003cul\u003e\n     *    \u003cli\u003e\u003cp\u003e\n     *    If the \u003ci\u003elimit\u003c/i\u003e is positive then the pattern will be applied\n     *    at most \u003ci\u003elimit\u003c/i\u003e\u0026nbsp;-\u0026nbsp;1 times, the array\u0027s length will be\n     *    no greater than \u003ci\u003elimit\u003c/i\u003e, and the array\u0027s last entry will contain\n     *    all input beyond the last matched delimiter.\u003c/p\u003e\u003c/li\u003e\n     *\n     *    \u003cli\u003e\u003cp\u003e\n     *    If the \u003ci\u003elimit\u003c/i\u003e is zero then the pattern will be applied as\n     *    many times as possible, the array can have any length, and trailing\n     *    empty strings will be discarded.\u003c/p\u003e\u003c/li\u003e\n     *\n     *    \u003cli\u003e\u003cp\u003e\n     *    If the \u003ci\u003elimit\u003c/i\u003e is negative then the pattern will be applied\n     *    as many times as possible and the array can have any length.\u003c/p\u003e\u003c/li\u003e\n     * \u003c/ul\u003e\n     *\n     * \u003cp\u003e The string {@code \"boo:and:foo\"}, for example, yields the\n     * following results with these parameters:\n     *\n     * \u003cblockquote\u003e\u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eSplit example showing regex, limit, and result\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *     \u003cth scope\u003d\"col\"\u003eRegex\u003c/th\u003e\n     *     \u003cth scope\u003d\"col\"\u003eLimit\u003c/th\u003e\n     *     \u003cth scope\u003d\"col\"\u003eResult\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" rowspan\u003d\"3\" style\u003d\"font-weight:normal\"\u003e:\u003c/th\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e2\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and:foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- : --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e5\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- : --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e-2\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" rowspan\u003d\"3\" style\u003d\"font-weight:normal\"\u003eo\u003c/th\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e5\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\", \"\", \"\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- o --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e-2\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\", \"\", \"\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003c!-- o --\u003e\n     *     \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:right; padding-right:1em\"\u003e0\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\u003c/blockquote\u003e\n     *\n     * \u003cp\u003e An invocation of this method of the form\n     * \u003ci\u003estr.\u003c/i\u003e{@code split(}\u003ci\u003eregex\u003c/i\u003e{@code ,}\u0026nbsp;\u003ci\u003en\u003c/i\u003e{@code )}\n     * yields the same result as the expression\n     *\n     * \u003cblockquote\u003e\n     * \u003ccode\u003e\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile compile}(\u003ci\u003eregex\u003c/i\u003e).{@link\n     * java.util.regex.Pattern#split(java.lang.CharSequence,int) split}(\u003ci\u003estr\u003c/i\u003e,\u0026nbsp;\u003ci\u003en\u003c/i\u003e)\n     * \u003c/code\u003e\n     * \u003c/blockquote\u003e\n     *\n     *\n     * @param  regex\n     *         the delimiting regular expression\n     *\n     * @param  limit\n     *         the result threshold, as described above\n     *\n     * @return  the array of strings computed by splitting this string\n     *          around matches of the given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public String[] split(String regex, int limit) {\n        /* fastpath if the regex is a\n         (1)one-char String and this character is not one of the\n            RegEx\u0027s meta characters \".$|()[{^?*+\\\\\", or\n         (2)two-char String and the first char is the backslash and\n            the second is not the ascii digit or ascii letter.\n         */\n        char ch \u003d 0;\n        if (((regex.length() \u003d\u003d 1 \u0026\u0026\n             \".$|()[{^?*+\\\\\".indexOf(ch \u003d regex.charAt(0)) \u003d\u003d -1) ||\n             (regex.length() \u003d\u003d 2 \u0026\u0026\n              regex.charAt(0) \u003d\u003d \u0027\\\\\u0027 \u0026\u0026\n              (((ch \u003d regex.charAt(1))-\u00270\u0027)|(\u00279\u0027-ch)) \u003c 0 \u0026\u0026\n              ((ch-\u0027a\u0027)|(\u0027z\u0027-ch)) \u003c 0 \u0026\u0026\n              ((ch-\u0027A\u0027)|(\u0027Z\u0027-ch)) \u003c 0)) \u0026\u0026\n            (ch \u003c Character.MIN_HIGH_SURROGATE ||\n             ch \u003e Character.MAX_LOW_SURROGATE))\n        {\n            int off \u003d 0;\n            int next \u003d 0;\n            boolean limited \u003d limit \u003e 0;\n            ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();\n            while ((next \u003d indexOf(ch, off)) !\u003d -1) {\n                if (!limited || list.size() \u003c limit - 1) {\n                    list.add(substring(off, next));\n                    off \u003d next + 1;\n                } else {    // last one\n                    //assert (list.size() \u003d\u003d limit - 1);\n                    int last \u003d length();\n                    list.add(substring(off, last));\n                    off \u003d last;\n                    break;\n                }\n            }\n            // If no match was found, return this\n            if (off \u003d\u003d 0)\n                return new String[]{this};\n\n            // Add remaining segment\n            if (!limited || list.size() \u003c limit)\n                list.add(substring(off, length()));\n\n            // Construct result\n            int resultSize \u003d list.size();\n            if (limit \u003d\u003d 0) {\n                while (resultSize \u003e 0 \u0026\u0026 list.get(resultSize - 1).isEmpty()) {\n                    resultSize--;\n                }\n            }\n            String[] result \u003d new String[resultSize];\n            return list.subList(0, resultSize).toArray(result);\n        }\n        return Pattern.compile(regex).split(this, limit);\n    }\n\n    /**\n     * Splits this string around matches of the given \u003ca\n     * href\u003d\"../util/regex/Pattern.html#sum\"\u003eregular expression\u003c/a\u003e.\n     *\n     * \u003cp\u003e This method works as if by invoking the two-argument {@link\n     * #split(String, int) split} method with the given expression and a limit\n     * argument of zero.  Trailing empty strings are therefore not included in\n     * the resulting array.\n     *\n     * \u003cp\u003e The string {@code \"boo:and:foo\"}, for example, yields the following\n     * results with these expressions:\n     *\n     * \u003cblockquote\u003e\u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eSplit examples showing regex and result\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *  \u003cth scope\u003d\"col\"\u003eRegex\u003c/th\u003e\n     *  \u003cth scope\u003d\"col\"\u003eResult\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" style\u003d\"text-weight:normal\"\u003e:\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"boo\", \"and\", \"foo\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\" style\u003d\"text-weight:normal\"\u003eo\u003c/th\u003e\n     *     \u003ctd\u003e{@code { \"b\", \"\", \":and:f\" }}\u003c/td\u003e\u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\u003c/blockquote\u003e\n     *\n     *\n     * @param  regex\n     *         the delimiting regular expression\n     *\n     * @return  the array of strings computed by splitting this string\n     *          around matches of the given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\u0027s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public String[] split(String regex) {\n        return split(regex, 0);\n    }\n\n    /**\n     * Returns a new String composed of copies of the\n     * {@code CharSequence elements} joined together with a copy of\n     * the specified {@code delimiter}.\n     *\n     * \u003cblockquote\u003eFor example,\n     * \u003cpre\u003e{@code\n     *     String message \u003d String.join(\"-\", \"Java\", \"is\", \"cool\");\n     *     // message returned is: \"Java-is-cool\"\n     * }\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * Note that if an element is null, then {@code \"null\"} is added.\n     *\n     * @param  delimiter the delimiter that separates each element\n     * @param  elements the elements to join together.\n     *\n     * @return a new {@code String} that is composed of the {@code elements}\n     *         separated by the {@code delimiter}\n     *\n     * @throws NullPointerException If {@code delimiter} or {@code elements}\n     *         is {@code null}\n     *\n     * @see java.util.StringJoiner\n     * @since 1.8\n     */\n    public static String join(CharSequence delimiter, CharSequence... elements) {\n        Objects.requireNonNull(delimiter);\n        Objects.requireNonNull(elements);\n        // Number of elements not likely worth Arrays.stream overhead.\n        StringJoiner joiner \u003d new StringJoiner(delimiter);\n        for (CharSequence cs: elements) {\n            joiner.add(cs);\n        }\n        return joiner.toString();\n    }\n\n    /**\n     * Returns a new {@code String} composed of copies of the\n     * {@code CharSequence elements} joined together with a copy of the\n     * specified {@code delimiter}.\n     *\n     * \u003cblockquote\u003eFor example,\n     * \u003cpre\u003e{@code\n     *     List\u003cString\u003e strings \u003d List.of(\"Java\", \"is\", \"cool\");\n     *     String message \u003d String.join(\" \", strings);\n     *     //message returned is: \"Java is cool\"\n     *\n     *     Set\u003cString\u003e strings \u003d\n     *         new LinkedHashSet\u003c\u003e(List.of(\"Java\", \"is\", \"very\", \"cool\"));\n     *     String message \u003d String.join(\"-\", strings);\n     *     //message returned is: \"Java-is-very-cool\"\n     * }\u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * Note that if an individual element is {@code null}, then {@code \"null\"} is added.\n     *\n     * @param  delimiter a sequence of characters that is used to separate each\n     *         of the {@code elements} in the resulting {@code String}\n     * @param  elements an {@code Iterable} that will have its {@code elements}\n     *         joined together.\n     *\n     * @return a new {@code String} that is composed from the {@code elements}\n     *         argument\n     *\n     * @throws NullPointerException If {@code delimiter} or {@code elements}\n     *         is {@code null}\n     *\n     * @see    #join(CharSequence,CharSequence...)\n     * @see    java.util.StringJoiner\n     * @since 1.8\n     */\n    public static String join(CharSequence delimiter,\n            Iterable\u003c? extends CharSequence\u003e elements) {\n        Objects.requireNonNull(delimiter);\n        Objects.requireNonNull(elements);\n        StringJoiner joiner \u003d new StringJoiner(delimiter);\n        for (CharSequence cs: elements) {\n            joiner.add(cs);\n        }\n        return joiner.toString();\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to lower\n     * case using the rules of the given {@code Locale}.  Case mapping is based\n     * on the Unicode Standard version specified by the {@link java.lang.Character Character}\n     * class. Since case mappings are not always 1:1 char mappings, the resulting\n     * {@code String} may be a different length than the original {@code String}.\n     * \u003cp\u003e\n     * Examples of lowercase  mappings are in the following table:\n     * \u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eLowercase mapping examples showing language code of locale, upper case, lower case, and description\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLanguage Code of Locale\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eUpper Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLower Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eDescription\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0130\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0069\u003c/td\u003e\n     *   \u003ctd\u003ecapital letter I with dot above -\u0026gt; small letter i\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0049\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0131\u003c/td\u003e\n     *   \u003ctd\u003ecapital letter I -\u0026gt; small letter dotless i \u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003eFrench Fries\u003c/th\u003e\n     *   \u003ctd\u003efrench fries\u003c/td\u003e\n     *   \u003ctd\u003elowercased all chars in String\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\n     *       \u0026Iota;\u0026Chi;\u0026Theta;\u0026Upsilon;\u0026Sigma;\u003c/th\u003e\n     *   \u003ctd\u003e\u0026iota;\u0026chi;\u0026theta;\u0026upsilon;\u0026sigma;\u003c/td\u003e\n     *   \u003ctd\u003elowercased all chars in String\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\n     *\n     * @param locale use the case transformation rules for this locale\n     * @return the {@code String}, converted to lowercase.\n     * @see     java.lang.String#toLowerCase()\n     * @see     java.lang.String#toUpperCase()\n     * @see     java.lang.String#toUpperCase(Locale)\n     * @since   1.1\n     */\n    public String toLowerCase(Locale locale) {\n        return isLatin1() ? StringLatin1.toLowerCase(this, value, locale)\n                          : StringUTF16.toLowerCase(this, value, locale);\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to lower\n     * case using the rules of the default locale. This is equivalent to calling\n     * {@code toLowerCase(Locale.getDefault())}.\n     * \u003cp\u003e\n     * \u003cb\u003eNote:\u003c/b\u003e This method is locale sensitive, and may produce unexpected\n     * results if used for strings that are intended to be interpreted locale\n     * independently.\n     * Examples are programming language identifiers, protocol keys, and HTML\n     * tags.\n     * For instance, {@code \"TITLE\".toLowerCase()} in a Turkish locale\n     * returns {@code \"t\\u005Cu0131tle\"}, where \u0027\\u005Cu0131\u0027 is the\n     * LATIN SMALL LETTER DOTLESS I character.\n     * To obtain correct results for locale insensitive strings, use\n     * {@code toLowerCase(Locale.ROOT)}.\n     *\n     * @return  the {@code String}, converted to lowercase.\n     * @see     java.lang.String#toLowerCase(Locale)\n     */\n    public String toLowerCase() {\n        return toLowerCase(Locale.getDefault());\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to upper\n     * case using the rules of the given {@code Locale}. Case mapping is based\n     * on the Unicode Standard version specified by the {@link java.lang.Character Character}\n     * class. Since case mappings are not always 1:1 char mappings, the resulting\n     * {@code String} may be a different length than the original {@code String}.\n     * \u003cp\u003e\n     * Examples of locale-sensitive and 1:M case mappings are in the following table.\n     *\n     * \u003ctable class\u003d\"plain\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eExamples of locale-sensitive and 1:M case mappings. Shows Language code of locale, lower case, upper case, and description.\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLanguage Code of Locale\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eLower Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eUpper Case\u003c/th\u003e\n     *   \u003cth scope\u003d\"col\"\u003eDescription\u003c/th\u003e\n     * \u003c/tr\u003e\n     * \u003c/thead\u003e\n     * \u003ctbody\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0069\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0130\u003c/td\u003e\n     *   \u003ctd\u003esmall letter i -\u0026gt; capital letter I with dot above\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003etr (Turkish)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u0131\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0049\u003c/td\u003e\n     *   \u003ctd\u003esmall letter dotless i -\u0026gt; capital letter I\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u0026#92;u00df\u003c/th\u003e\n     *   \u003ctd\u003e\u0026#92;u0053 \u0026#92;u0053\u003c/td\u003e\n     *   \u003ctd\u003esmall letter sharp s -\u0026gt; two letters: SS\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003ctr\u003e\n     *   \u003ctd\u003e(all)\u003c/td\u003e\n     *   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003eFahrvergn\u0026uuml;gen\u003c/th\u003e\n     *   \u003ctd\u003eFAHRVERGN\u0026Uuml;GEN\u003c/td\u003e\n     *   \u003ctd\u003e\u003c/td\u003e\n     * \u003c/tr\u003e\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\n     * @param locale use the case transformation rules for this locale\n     * @return the {@code String}, converted to uppercase.\n     * @see     java.lang.String#toUpperCase()\n     * @see     java.lang.String#toLowerCase()\n     * @see     java.lang.String#toLowerCase(Locale)\n     * @since   1.1\n     */\n    public String toUpperCase(Locale locale) {\n        return isLatin1() ? StringLatin1.toUpperCase(this, value, locale)\n                          : StringUTF16.toUpperCase(this, value, locale);\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to upper\n     * case using the rules of the default locale. This method is equivalent to\n     * {@code toUpperCase(Locale.getDefault())}.\n     * \u003cp\u003e\n     * \u003cb\u003eNote:\u003c/b\u003e This method is locale sensitive, and may produce unexpected\n     * results if used for strings that are intended to be interpreted locale\n     * independently.\n     * Examples are programming language identifiers, protocol keys, and HTML\n     * tags.\n     * For instance, {@code \"title\".toUpperCase()} in a Turkish locale\n     * returns {@code \"T\\u005Cu0130TLE\"}, where \u0027\\u005Cu0130\u0027 is the\n     * LATIN CAPITAL LETTER I WITH DOT ABOVE character.\n     * To obtain correct results for locale insensitive strings, use\n     * {@code toUpperCase(Locale.ROOT)}.\n     *\n     * @return  the {@code String}, converted to uppercase.\n     * @see     java.lang.String#toUpperCase(Locale)\n     */\n    public String toUpperCase() {\n        return toUpperCase(Locale.getDefault());\n    }\n\n    /**\n     * Returns a string whose value is this string, with all leading\n     * and trailing space removed, where space is defined\n     * as any character whose codepoint is less than or equal to\n     * {@code \u0027U+0020\u0027} (the space character).\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty character\n     * sequence, or the first and last characters of character sequence\n     * represented by this {@code String} object both have codes\n     * that are not space (as defined above), then a\n     * reference to this {@code String} object is returned.\n     * \u003cp\u003e\n     * Otherwise, if all characters in this string are space (as\n     * defined above), then a  {@code String} object representing an\n     * empty string is returned.\n     * \u003cp\u003e\n     * Otherwise, let \u003ci\u003ek\u003c/i\u003e be the index of the first character in the\n     * string whose code is not a space (as defined above) and let\n     * \u003ci\u003em\u003c/i\u003e be the index of the last character in the string whose code\n     * is not a space (as defined above). A {@code String}\n     * object is returned, representing the substring of this string that\n     * begins with the character at index \u003ci\u003ek\u003c/i\u003e and ends with the\n     * character at index \u003ci\u003em\u003c/i\u003e-that is, the result of\n     * {@code this.substring(k, m + 1)}.\n     * \u003cp\u003e\n     * This method may be used to trim space (as defined above) from\n     * the beginning and end of a string.\n     *\n     * @return  a string whose value is this string, with all leading\n     *          and trailing space removed, or this string if it\n     *          has no leading or trailing space.\n     */\n    public String trim() {\n        String ret \u003d isLatin1() ? StringLatin1.trim(value)\n                                : StringUTF16.trim(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns a string whose value is this string, with all leading\n     * and trailing {@link Character#isWhitespace(int) white space}\n     * removed.\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty string,\n     * or if all code points in this string are\n     * {@link Character#isWhitespace(int) white space}, then an empty string\n     * is returned.\n     * \u003cp\u003e\n     * Otherwise, returns a substring of this string beginning with the first\n     * code point that is not a {@link Character#isWhitespace(int) white space}\n     * up to and including the last code point that is not a\n     * {@link Character#isWhitespace(int) white space}.\n     * \u003cp\u003e\n     * This method may be used to strip\n     * {@link Character#isWhitespace(int) white space} from\n     * the beginning and end of a string.\n     *\n     * @return  a string whose value is this string, with all leading\n     *          and trailing white space removed\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public String strip() {\n        String ret \u003d isLatin1() ? StringLatin1.strip(value)\n                                : StringUTF16.strip(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns a string whose value is this string, with all leading\n     * {@link Character#isWhitespace(int) white space} removed.\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty string,\n     * or if all code points in this string are\n     * {@link Character#isWhitespace(int) white space}, then an empty string\n     * is returned.\n     * \u003cp\u003e\n     * Otherwise, returns a substring of this string beginning with the first\n     * code point that is not a {@link Character#isWhitespace(int) white space}\n     * up to to and including the last code point of this string.\n     * \u003cp\u003e\n     * This method may be used to trim\n     * {@link Character#isWhitespace(int) white space} from\n     * the beginning of a string.\n     *\n     * @return  a string whose value is this string, with all leading white\n     *          space removed\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public String stripLeading() {\n        String ret \u003d isLatin1() ? StringLatin1.stripLeading(value)\n                                : StringUTF16.stripLeading(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns a string whose value is this string, with all trailing\n     * {@link Character#isWhitespace(int) white space} removed.\n     * \u003cp\u003e\n     * If this {@code String} object represents an empty string,\n     * or if all characters in this string are\n     * {@link Character#isWhitespace(int) white space}, then an empty string\n     * is returned.\n     * \u003cp\u003e\n     * Otherwise, returns a substring of this string beginning with the first\n     * code point of this string up to and including the last code point\n     * that is not a {@link Character#isWhitespace(int) white space}.\n     * \u003cp\u003e\n     * This method may be used to trim\n     * {@link Character#isWhitespace(int) white space} from\n     * the end of a string.\n     *\n     * @return  a string whose value is this string, with all trailing white\n     *          space removed\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public String stripTrailing() {\n        String ret \u003d isLatin1() ? StringLatin1.stripTrailing(value)\n                                : StringUTF16.stripTrailing(value);\n        return ret \u003d\u003d null ? this : ret;\n    }\n\n    /**\n     * Returns {@code true} if the string is empty or contains only\n     * {@link Character#isWhitespace(int) white space} codepoints,\n     * otherwise {@code false}.\n     *\n     * @return {@code true} if the string is empty or contains only\n     *         {@link Character#isWhitespace(int) white space} codepoints,\n     *         otherwise {@code false}\n     *\n     * @see Character#isWhitespace(int)\n     *\n     * @since 11\n     */\n    public boolean isBlank() {\n        return indexOfNonWhitespace() \u003d\u003d length();\n    }\n\n    private int indexOfNonWhitespace() {\n        if (isLatin1()) {\n            return StringLatin1.indexOfNonWhitespace(value);\n        } else {\n            return StringUTF16.indexOfNonWhitespace(value);\n        }\n    }\n\n    /**\n     * Returns a stream of lines extracted from this string,\n     * separated by line terminators.\n     * \u003cp\u003e\n     * A \u003ci\u003eline terminator\u003c/i\u003e is one of the following:\n     * a line feed character {@code \"\\n\"} (U+000A),\n     * a carriage return character {@code \"\\r\"} (U+000D),\n     * or a carriage return followed immediately by a line feed\n     * {@code \"\\r\\n\"} (U+000D U+000A).\n     * \u003cp\u003e\n     * A \u003ci\u003eline\u003c/i\u003e is either a sequence of zero or more characters\n     * followed by a line terminator, or it is a sequence of one or\n     * more characters followed by the end of the string. A\n     * line does not include the line terminator.\n     * \u003cp\u003e\n     * The stream returned by this method contains the lines from\n     * this string in the order in which they occur.\n     *\n     * @apiNote This definition of \u003ci\u003eline\u003c/i\u003e implies that an empty\n     *          string has zero lines and that there is no empty line\n     *          following a line terminator at the end of a string.\n     *\n     * @implNote This method provides better performance than\n     *           split(\"\\R\") by supplying elements lazily and\n     *           by faster search of new line terminators.\n     *\n     * @return  the stream of lines extracted from this string\n     *\n     * @since 11\n     */\n    public Stream\u003cString\u003e lines() {\n        return isLatin1() ? StringLatin1.lines(value)\n                          : StringUTF16.lines(value);\n    }\n\n    /**\n     * This object (which is already a string!) is itself returned.\n     *\n     * @return  the string itself.\n     */\n    public String toString() {\n        return this;\n    }\n\n    /**\n     * Returns a stream of {@code int} zero-extending the {@code char} values\n     * from this sequence.  Any char which maps to a \u003ca\n     * href\u003d\"{@docRoot}/java.base/java/lang/Character.html#unicode\"\u003esurrogate code\n     * point\u003c/a\u003e is passed through uninterpreted.\n     *\n     * @return an IntStream of char values from this sequence\n     * @since 9\n     */\n    @Override\n    public IntStream chars() {\n        return StreamSupport.intStream(\n            isLatin1() ? new StringLatin1.CharsSpliterator(value, Spliterator.IMMUTABLE)\n                       : new StringUTF16.CharsSpliterator(value, Spliterator.IMMUTABLE),\n            false);\n    }\n\n\n    /**\n     * Returns a stream of code point values from this sequence.  Any surrogate\n     * pairs encountered in the sequence are combined as if by {@linkplain\n     * Character#toCodePoint Character.toCodePoint} and the result is passed\n     * to the stream. Any other code units, including ordinary BMP characters,\n     * unpaired surrogates, and undefined code units, are zero-extended to\n     * {@code int} values which are then passed to the stream.\n     *\n     * @return an IntStream of Unicode code points from this sequence\n     * @since 9\n     */\n    @Override\n    public IntStream codePoints() {\n        return StreamSupport.intStream(\n            isLatin1() ? new StringLatin1.CharsSpliterator(value, Spliterator.IMMUTABLE)\n                       : new StringUTF16.CodePointsSpliterator(value, Spliterator.IMMUTABLE),\n            false);\n    }\n\n    /**\n     * Converts this string to a new character array.\n     *\n     * @return  a newly allocated character array whose length is the length\n     *          of this string and whose contents are initialized to contain\n     *          the character sequence represented by this string.\n     */\n    public char[] toCharArray() {\n        return isLatin1() ? StringLatin1.toChars(value)\n                          : StringUTF16.toChars(value);\n    }\n\n    /**\n     * Returns a formatted string using the specified format string and\n     * arguments.\n     *\n     * \u003cp\u003e The locale always used is the one returned by {@link\n     * java.util.Locale#getDefault(java.util.Locale.Category)\n     * Locale.getDefault(Locale.Category)} with\n     * {@link java.util.Locale.Category#FORMAT FORMAT} category specified.\n     *\n     * @param  format\n     *         A \u003ca href\u003d\"../util/Formatter.html#syntax\"\u003eformat string\u003c/a\u003e\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in the format\n     *         string.  If there are more arguments than format specifiers, the\n     *         extra arguments are ignored.  The number of arguments is\n     *         variable and may be zero.  The maximum number of arguments is\n     *         limited by the maximum dimension of a Java array as defined by\n     *         \u003ccite\u003eThe Java\u0026trade; Virtual Machine Specification\u003c/cite\u003e.\n     *         The behaviour on a\n     *         {@code null} argument depends on the \u003ca\n     *         href\u003d\"../util/Formatter.html#syntax\"\u003econversion\u003c/a\u003e.\n     *\n     * @throws  java.util.IllegalFormatException\n     *          If a format string contains an illegal syntax, a format\n     *          specifier that is incompatible with the given arguments,\n     *          insufficient arguments given the format string, or other\n     *          illegal conditions.  For specification of all possible\n     *          formatting errors, see the \u003ca\n     *          href\u003d\"../util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the\n     *          formatter class specification.\n     *\n     * @return  A formatted string\n     *\n     * @see  java.util.Formatter\n     * @since  1.5\n     */\n    public static String format(String format, Object... args) {\n        return new Formatter().format(format, args).toString();\n    }\n\n    /**\n     * Returns a formatted string using the specified locale, format string,\n     * and arguments.\n     *\n     * @param  l\n     *         The {@linkplain java.util.Locale locale} to apply during\n     *         formatting.  If {@code l} is {@code null} then no localization\n     *         is applied.\n     *\n     * @param  format\n     *         A \u003ca href\u003d\"../util/Formatter.html#syntax\"\u003eformat string\u003c/a\u003e\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in the format\n     *         string.  If there are more arguments than format specifiers, the\n     *         extra arguments are ignored.  The number of arguments is\n     *         variable and may be zero.  The maximum number of arguments is\n     *         limited by the maximum dimension of a Java array as defined by\n     *         \u003ccite\u003eThe Java\u0026trade; Virtual Machine Specification\u003c/cite\u003e.\n     *         The behaviour on a\n     *         {@code null} argument depends on the\n     *         \u003ca href\u003d\"../util/Formatter.html#syntax\"\u003econversion\u003c/a\u003e.\n     *\n     * @throws  java.util.IllegalFormatException\n     *          If a format string contains an illegal syntax, a format\n     *          specifier that is incompatible with the given arguments,\n     *          insufficient arguments given the format string, or other\n     *          illegal conditions.  For specification of all possible\n     *          formatting errors, see the \u003ca\n     *          href\u003d\"../util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the\n     *          formatter class specification\n     *\n     * @return  A formatted string\n     *\n     * @see  java.util.Formatter\n     * @since  1.5\n     */\n    public static String format(Locale l, String format, Object... args) {\n        return new Formatter(l).format(format, args).toString();\n    }\n\n    /**\n     * Returns the string representation of the {@code Object} argument.\n     *\n     * @param   obj   an {@code Object}.\n     * @return  if the argument is {@code null}, then a string equal to\n     *          {@code \"null\"}; otherwise, the value of\n     *          {@code obj.toString()} is returned.\n     * @see     java.lang.Object#toString()\n     */\n    public static String valueOf(Object obj) {\n        return (obj \u003d\u003d null) ? \"null\" : obj.toString();\n    }\n\n    /**\n     * Returns the string representation of the {@code char} array\n     * argument. The contents of the character array are copied; subsequent\n     * modification of the character array does not affect the returned\n     * string.\n     *\n     * @param   data     the character array.\n     * @return  a {@code String} that contains the characters of the\n     *          character array.\n     */\n    public static String valueOf(char data[]) {\n        return new String(data);\n    }\n\n    /**\n     * Returns the string representation of a specific subarray of the\n     * {@code char} array argument.\n     * \u003cp\u003e\n     * The {@code offset} argument is the index of the first\n     * character of the subarray. The {@code count} argument\n     * specifies the length of the subarray. The contents of the subarray\n     * are copied; subsequent modification of the character array does not\n     * affect the returned string.\n     *\n     * @param   data     the character array.\n     * @param   offset   initial offset of the subarray.\n     * @param   count    length of the subarray.\n     * @return  a {@code String} that contains the characters of the\n     *          specified subarray of the character array.\n     * @exception IndexOutOfBoundsException if {@code offset} is\n     *          negative, or {@code count} is negative, or\n     *          {@code offset+count} is larger than\n     *          {@code data.length}.\n     */\n    public static String valueOf(char data[], int offset, int count) {\n        return new String(data, offset, count);\n    }\n\n    /**\n     * Equivalent to {@link #valueOf(char[], int, int)}.\n     *\n     * @param   data     the character array.\n     * @param   offset   initial offset of the subarray.\n     * @param   count    length of the subarray.\n     * @return  a {@code String} that contains the characters of the\n     *          specified subarray of the character array.\n     * @exception IndexOutOfBoundsException if {@code offset} is\n     *          negative, or {@code count} is negative, or\n     *          {@code offset+count} is larger than\n     *          {@code data.length}.\n     */\n    public static String copyValueOf(char data[], int offset, int count) {\n        return new String(data, offset, count);\n    }\n\n    /**\n     * Equivalent to {@link #valueOf(char[])}.\n     *\n     * @param   data   the character array.\n     * @return  a {@code String} that contains the characters of the\n     *          character array.\n     */\n    public static String copyValueOf(char data[]) {\n        return new String(data);\n    }\n\n    /**\n     * Returns the string representation of the {@code boolean} argument.\n     *\n     * @param   b   a {@code boolean}.\n     * @return  if the argument is {@code true}, a string equal to\n     *          {@code \"true\"} is returned; otherwise, a string equal to\n     *          {@code \"false\"} is returned.\n     */\n    public static String valueOf(boolean b) {\n        return b ? \"true\" : \"false\";\n    }\n\n    /**\n     * Returns the string representation of the {@code char}\n     * argument.\n     *\n     * @param   c   a {@code char}.\n     * @return  a string of length {@code 1} containing\n     *          as its single character the argument {@code c}.\n     */\n    public static String valueOf(char c) {\n        if (COMPACT_STRINGS \u0026\u0026 StringLatin1.canEncode(c)) {\n            return new String(StringLatin1.toBytes(c), LATIN1);\n        }\n        return new String(StringUTF16.toBytes(c), UTF16);\n    }\n\n    /**\n     * Returns the string representation of the {@code int} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Integer.toString} method of one argument.\n     *\n     * @param   i   an {@code int}.\n     * @return  a string representation of the {@code int} argument.\n     * @see     java.lang.Integer#toString(int, int)\n     */\n    public static String valueOf(int i) {\n        return Integer.toString(i);\n    }\n\n    /**\n     * Returns the string representation of the {@code long} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Long.toString} method of one argument.\n     *\n     * @param   l   a {@code long}.\n     * @return  a string representation of the {@code long} argument.\n     * @see     java.lang.Long#toString(long)\n     */\n    public static String valueOf(long l) {\n        return Long.toString(l);\n    }\n\n    /**\n     * Returns the string representation of the {@code float} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Float.toString} method of one argument.\n     *\n     * @param   f   a {@code float}.\n     * @return  a string representation of the {@code float} argument.\n     * @see     java.lang.Float#toString(float)\n     */\n    public static String valueOf(float f) {\n        return Float.toString(f);\n    }\n\n    /**\n     * Returns the string representation of the {@code double} argument.\n     * \u003cp\u003e\n     * The representation is exactly the one returned by the\n     * {@code Double.toString} method of one argument.\n     *\n     * @param   d   a {@code double}.\n     * @return  a  string representation of the {@code double} argument.\n     * @see     java.lang.Double#toString(double)\n     */\n    public static String valueOf(double d) {\n        return Double.toString(d);\n    }\n\n    /**\n     * Returns a canonical representation for the string object.\n     * \u003cp\u003e\n     * A pool of strings, initially empty, is maintained privately by the\n     * class {@code String}.\n     * \u003cp\u003e\n     * When the intern method is invoked, if the pool already contains a\n     * string equal to this {@code String} object as determined by\n     * the {@link #equals(Object)} method, then the string from the pool is\n     * returned. Otherwise, this {@code String} object is added to the\n     * pool and a reference to this {@code String} object is returned.\n     * \u003cp\u003e\n     * It follows that for any two strings {@code s} and {@code t},\n     * {@code s.intern() \u003d\u003d t.intern()} is {@code true}\n     * if and only if {@code s.equals(t)} is {@code true}.\n     * \u003cp\u003e\n     * All literal strings and string-valued constant expressions are\n     * interned. String literals are defined in section 3.10.5 of the\n     * \u003ccite\u003eThe Java\u0026trade; Language Specification\u003c/cite\u003e.\n     *\n     * @return  a string that has the same contents as this string, but is\n     *          guaranteed to be from a pool of unique strings.\n     * @jls 3.10.5 String Literals\n     */\n    public native String intern();\n\n    /**\n     * Returns a string whose value is the concatenation of this\n     * string repeated {@code count} times.\n     * \u003cp\u003e\n     * If this string is empty or count is zero then the empty\n     * string is returned.\n     *\n     * @param   count number of times to repeat\n     *\n     * @return  A string composed of this string repeated\n     *          {@code count} times or the empty string if this\n     *          string is empty or count is zero\n     *\n     * @throws  IllegalArgumentException if the {@code count} is\n     *          negative.\n     *\n     * @since 11\n     */\n    public String repeat(int count) {\n        if (count \u003c 0) {\n            throw new IllegalArgumentException(\"count is negative: \" + count);\n        }\n        if (count \u003d\u003d 1) {\n            return this;\n        }\n        final int len \u003d value.length;\n        if (len \u003d\u003d 0 || count \u003d\u003d 0) {\n            return \"\";\n        }\n        if (len \u003d\u003d 1) {\n            final byte[] single \u003d new byte[count];\n            Arrays.fill(single, value[0]);\n            return new String(single, coder);\n        }\n        if (Integer.MAX_VALUE / count \u003c len) {\n            throw new OutOfMemoryError(\"Repeating \" + len + \" bytes String \" + count +\n                    \" times will produce a String exceeding maximum size.\");\n        }\n        final int limit \u003d len * count;\n        final byte[] multiple \u003d new byte[limit];\n        System.arraycopy(value, 0, multiple, 0, len);\n        int copied \u003d len;\n        for (; copied \u003c limit - copied; copied \u003c\u003c\u003d 1) {\n            System.arraycopy(multiple, 0, multiple, copied, copied);\n        }\n        System.arraycopy(multiple, 0, multiple, copied, limit - copied);\n        return new String(multiple, coder);\n    }\n\n    ////////////////////////////////////////////////////////////////\n\n    /**\n     * Copy character bytes from this string into dst starting at dstBegin.\n     * This method doesn\u0027t perform any range checking.\n     *\n     * Invoker guarantees: dst is in UTF16 (inflate itself for asb), if two\n     * coders are different, and dst is big enough (range check)\n     *\n     * @param dstBegin  the char index, not offset of byte[]\n     * @param coder     the coder of dst[]\n     */\n    void getBytes(byte dst[], int dstBegin, byte coder) {\n        if (coder() \u003d\u003d coder) {\n            System.arraycopy(value, 0, dst, dstBegin \u003c\u003c coder, value.length);\n        } else {    // this.coder \u003d\u003d LATIN \u0026\u0026 coder \u003d\u003d UTF16\n            StringLatin1.inflate(value, 0, dst, dstBegin, value.length);\n        }\n    }\n\n    /*\n     * Package private constructor. Trailing Void argument is there for\n     * disambiguating it against other (public) constructors.\n     *\n     * Stores the char[] value into a byte[] that each byte represents\n     * the8 low-order bits of the corresponding character, if the char[]\n     * contains only latin1 character. Or a byte[] that stores all\n     * characters in their byte sequences defined by the {@code StringUTF16}.\n     */\n    String(char[] value, int off, int len, Void sig) {\n        if (len \u003d\u003d 0) {\n            this.value \u003d \"\".value;\n            this.coder \u003d \"\".coder;\n            return;\n        }\n        if (COMPACT_STRINGS) {\n            byte[] val \u003d StringUTF16.compress(value, off, len);\n            if (val !\u003d null) {\n                this.value \u003d val;\n                this.coder \u003d LATIN1;\n                return;\n            }\n        }\n        this.coder \u003d UTF16;\n        this.value \u003d StringUTF16.toBytes(value, off, len);\n    }\n\n    /*\n     * Package private constructor. Trailing Void argument is there for\n     * disambiguating it against other (public) constructors.\n     */\n    String(AbstractStringBuilder asb, Void sig) {\n        byte[] val \u003d asb.getValue();\n        int length \u003d asb.length();\n        if (asb.isLatin1()) {\n            this.coder \u003d LATIN1;\n            this.value \u003d Arrays.copyOfRange(val, 0, length);\n        } else {\n            if (COMPACT_STRINGS) {\n                byte[] buf \u003d StringUTF16.compress(val, 0, length);\n                if (buf !\u003d null) {\n                    this.coder \u003d LATIN1;\n                    this.value \u003d buf;\n                    return;\n                }\n            }\n            this.coder \u003d UTF16;\n            this.value \u003d Arrays.copyOfRange(val, 0, length \u003c\u003c 1);\n        }\n    }\n\n   /*\n    * Package private constructor which shares value array for speed.\n    */\n    String(byte[] value, byte coder) {\n        this.value \u003d value;\n        this.coder \u003d coder;\n    }\n\n    byte coder() {\n        return COMPACT_STRINGS ? coder : UTF16;\n    }\n\n    byte[] value() {\n        return value;\n    }\n\n    private boolean isLatin1() {\n        return COMPACT_STRINGS \u0026\u0026 coder \u003d\u003d LATIN1;\n    }\n\n    @Native static final byte LATIN1 \u003d 0;\n    @Native static final byte UTF16  \u003d 1;\n\n    /*\n     * StringIndexOutOfBoundsException  if {@code index} is\n     * negative or greater than or equal to {@code length}.\n     */\n    static void checkIndex(int index, int length) {\n        if (index \u003c 0 || index \u003e\u003d length) {\n            throw new StringIndexOutOfBoundsException(\"index \" + index +\n                                                      \",length \" + length);\n        }\n    }\n\n    /*\n     * StringIndexOutOfBoundsException  if {@code offset}\n     * is negative or greater than {@code length}.\n     */\n    static void checkOffset(int offset, int length) {\n        if (offset \u003c 0 || offset \u003e length) {\n            throw new StringIndexOutOfBoundsException(\"offset \" + offset +\n                                                      \",length \" + length);\n        }\n    }\n\n    /*\n     * Check {@code offset}, {@code count} against {@code 0} and {@code length}\n     * bounds.\n     *\n     * @throws  StringIndexOutOfBoundsException\n     *          If {@code offset} is negative, {@code count} is negative,\n     *          or {@code offset} is greater than {@code length - count}\n     */\n    static void checkBoundsOffCount(int offset, int count, int length) {\n        if (offset \u003c 0 || count \u003c 0 || offset \u003e length - count) {\n            throw new StringIndexOutOfBoundsException(\n                \"offset \" + offset + \", count \" + count + \", length \" + length);\n        }\n    }\n\n    /*\n     * Check {@code begin}, {@code end} against {@code 0} and {@code length}\n     * bounds.\n     *\n     * @throws  StringIndexOutOfBoundsException\n     *          If {@code begin} is negative, {@code begin} is greater than\n     *          {@code end}, or {@code end} is greater than {@code length}.\n     */\n    static void checkBoundsBeginEnd(int begin, int end, int length) {\n        if (begin \u003c 0 || begin \u003e end || end \u003e length) {\n            throw new StringIndexOutOfBoundsException(\n                \"begin \" + begin + \", end \" + end + \", length \" + length);\n        }\n    }\n\n    /**\n     * Returns the string representation of the {@code codePoint}\n     * argument.\n     *\n     * @param   codePoint a {@code codePoint}.\n     * @return  a string of length {@code 1} or {@code 2} containing\n     *          as its single character the argument {@code codePoint}.\n     * @throws IllegalArgumentException if the specified\n     *          {@code codePoint} is not a {@linkplain Character#isValidCodePoint\n     *          valid Unicode code point}.\n     */\n    static String valueOfCodePoint(int codePoint) {\n        if (COMPACT_STRINGS \u0026\u0026 StringLatin1.canEncode(codePoint)) {\n            return new String(StringLatin1.toBytes((char)codePoint), LATIN1);\n        } else if (Character.isBmpCodePoint(codePoint)) {\n            return new String(StringUTF16.toBytes((char)codePoint), UTF16);\n        } else if (Character.isSupplementaryCodePoint(codePoint)) {\n            return new String(StringUTF16.toBytesSupplementary(codePoint), UTF16);\n        }\n\n        throw new IllegalArgumentException(\n            format(\"Not a valid Unicode code point: 0x%X\", codePoint));\n    }\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor20.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:339)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

Jan. 16, 2024 11:47:03 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.base/java/lang/String.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor22.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:358)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/String.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

Jan. 16, 2024 11:53:00 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 24399
Jan. 16, 2024 11:57:12 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 25025
2024.01.22 12:18:40 INFO  Started: Metals version 1.2.0 in folders 'C:\Users\yashb\Documents\vscode-laminar-vite-extension' for client Visual Studio Code 1.85.2.
Jan. 22, 2024 12:18:44 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2
Jan. 22, 2024 12:18:44 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1
2024.01.22 12:18:44 INFO  Attempting to connect to the build server...
2024.01.22 12:18:44 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.22 12:18:48 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.22 12:18:48 INFO  no build target found for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\utilities\searching.scala. Using presentation compiler with project's scala-library version: 3.3.1
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\scala-lang\scala3-library_3\3.3.1\scala3-library_3-3.3.1.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\scala-lang\scala3-library_3\3.3.1\scala3-library_3-3.3.1.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\scala-lang\scala-library\2.13.10\scala-library-2.13.10.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\scala-lang\scala-library\2.13.10\scala-library-2.13.10.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\scala-lang\scala3-compiler_3\3.3.1\scala3-compiler_3-3.3.1.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\scala-lang\scala3-compiler_3\3.3.1\scala3-compiler_3-3.3.1.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\scala-lang\scala3-interfaces\3.3.1\scala3-interfaces-3.3.1.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\scala-lang\scala3-interfaces\3.3.1\scala3-interfaces-3.3.1.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\scala-lang\tasty-core_3\3.3.1\tasty-core_3-3.3.1.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\scala-lang\tasty-core_3\3.3.1\tasty-core_3-3.3.1.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\scala-lang\modules\scala-asm\9.5.0-scala-1\scala-asm-9.5.0-scala-1.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\scala-lang\modules\scala-asm\9.5.0-scala-1\scala-asm-9.5.0-scala-1.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\scala-sbt\compiler-interface\1.3.5\compiler-interface-1.3.5.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\scala-sbt\compiler-interface\1.3.5\compiler-interface-1.3.5.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\jline\jline-reader\3.19.0\jline-reader-3.19.0.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\jline\jline-reader\3.19.0\jline-reader-3.19.0.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\jline\jline-terminal\3.19.0\jline-terminal-3.19.0.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\jline\jline-terminal\3.19.0\jline-terminal-3.19.0.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\jline\jline-terminal-jna\3.19.0\jline-terminal-jna-3.19.0.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\jline\jline-terminal-jna\3.19.0\jline-terminal-jna-3.19.0.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\google\protobuf\protobuf-java\3.7.0\protobuf-java-3.7.0.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\google\protobuf\protobuf-java\3.7.0\protobuf-java-3.7.0.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\scala-sbt\util-interface\1.3.0\util-interface-1.3.0.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\scala-sbt\util-interface\1.3.0\util-interface-1.3.0.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\net\java\dev\jna\jna\5.3.1\jna-5.3.1.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\net\java\dev\jna\jna\5.3.1\jna-5.3.1.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\scala-lang\scaladoc_3\3.3.1\scaladoc_3-3.3.1.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\scala-lang\scaladoc_3\3.3.1\scaladoc_3-3.3.1.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\scala-lang\scala3-tasty-inspector_3\3.3.1\scala3-tasty-inspector_3-3.3.1.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\scala-lang\scala3-tasty-inspector_3\3.3.1\scala3-tasty-inspector_3-3.3.1.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark\0.62.2\flexmark-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark\0.62.2\flexmark-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-util-ast\0.62.2\flexmark-util-ast-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-util-ast\0.62.2\flexmark-util-ast-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-util-data\0.62.2\flexmark-util-data-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-util-data\0.62.2\flexmark-util-data-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-util-html\0.62.2\flexmark-util-html-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-util-html\0.62.2\flexmark-util-html-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-ext-anchorlink\0.62.2\flexmark-ext-anchorlink-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-ext-anchorlink\0.62.2\flexmark-ext-anchorlink-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-ext-autolink\0.62.2\flexmark-ext-autolink-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-ext-autolink\0.62.2\flexmark-ext-autolink-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-ext-emoji\0.62.2\flexmark-ext-emoji-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-ext-emoji\0.62.2\flexmark-ext-emoji-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-ext-gfm-strikethrough\0.62.2\flexmark-ext-gfm-strikethrough-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-ext-gfm-strikethrough\0.62.2\flexmark-ext-gfm-strikethrough-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-ext-gfm-tasklist\0.62.2\flexmark-ext-gfm-tasklist-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-ext-gfm-tasklist\0.62.2\flexmark-ext-gfm-tasklist-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-ext-wikilink\0.62.2\flexmark-ext-wikilink-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-ext-wikilink\0.62.2\flexmark-ext-wikilink-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-ext-tables\0.62.2\flexmark-ext-tables-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-ext-tables\0.62.2\flexmark-ext-tables-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-ext-yaml-front-matter\0.62.2\flexmark-ext-yaml-front-matter-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-ext-yaml-front-matter\0.62.2\flexmark-ext-yaml-front-matter-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\nl\big-o\liqp\0.8.2\liqp-0.8.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\nl\big-o\liqp\0.8.2\liqp-0.8.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\jsoup\jsoup\1.14.3\jsoup-1.14.3.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\jsoup\jsoup\1.14.3\jsoup-1.14.3.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\fasterxml\jackson\dataformat\jackson-dataformat-yaml\2.15.1\jackson-dataformat-yaml-2.15.1.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\fasterxml\jackson\dataformat\jackson-dataformat-yaml\2.15.1\jackson-dataformat-yaml-2.15.1.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-util-builder\0.62.2\flexmark-util-builder-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-util-builder\0.62.2\flexmark-util-builder-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-util-collection\0.62.2\flexmark-util-collection-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-util-collection\0.62.2\flexmark-util-collection-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-util-dependency\0.62.2\flexmark-util-dependency-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-util-dependency\0.62.2\flexmark-util-dependency-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-util-format\0.62.2\flexmark-util-format-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-util-format\0.62.2\flexmark-util-format-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-util-misc\0.62.2\flexmark-util-misc-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-util-misc\0.62.2\flexmark-util-misc-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-util-sequence\0.62.2\flexmark-util-sequence-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-util-sequence\0.62.2\flexmark-util-sequence-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-util-visitor\0.62.2\flexmark-util-visitor-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-util-visitor\0.62.2\flexmark-util-visitor-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\jetbrains\annotations\15.0\annotations-15.0.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\jetbrains\annotations\15.0\annotations-15.0.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-util\0.62.2\flexmark-util-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-util\0.62.2\flexmark-util-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\nibor\autolink\autolink\0.6.0\autolink-0.6.0.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\nibor\autolink\autolink\0.6.0\autolink-0.6.0.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-jira-converter\0.62.2\flexmark-jira-converter-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-jira-converter\0.62.2\flexmark-jira-converter-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\antlr\antlr4-runtime\4.7.2\antlr4-runtime-4.7.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\antlr\antlr4-runtime\4.7.2\antlr4-runtime-4.7.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\fasterxml\jackson\core\jackson-annotations\2.15.1\jackson-annotations-2.15.1.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\fasterxml\jackson\core\jackson-annotations\2.15.1\jackson-annotations-2.15.1.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\fasterxml\jackson\core\jackson-core\2.15.1\jackson-core-2.15.1.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\fasterxml\jackson\core\jackson-core\2.15.1\jackson-core-2.15.1.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\fasterxml\jackson\core\jackson-databind\2.15.1\jackson-databind-2.15.1.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\fasterxml\jackson\core\jackson-databind\2.15.1\jackson-databind-2.15.1.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.12.1\jackson-datatype-jsr310-2.12.1.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.12.1\jackson-datatype-jsr310-2.12.1.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\ua\co\k\strftime4j\1.0.5\strftime4j-1.0.5.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\ua\co\k\strftime4j\1.0.5\strftime4j-1.0.5.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\yaml\snakeyaml\2.0\snakeyaml-2.0.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\yaml\snakeyaml\2.0\snakeyaml-2.0.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-util-options\0.62.2\flexmark-util-options-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-util-options\0.62.2\flexmark-util-options-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-ext-ins\0.62.2\flexmark-ext-ins-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-ext-ins\0.62.2\flexmark-ext-ins-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-ext-superscript\0.62.2\flexmark-ext-superscript-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 WARN  Scala instance jar C:\Users\Darien\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\com\vladsch\flexmark\flexmark-ext-superscript\0.62.2\flexmark-ext-superscript-0.62.2.jar doesn't exist!
2024.01.22 12:18:48 ERROR Failed to connect with build server, no functionality will work.
java.util.concurrent.ExecutionException: org.eclipse.lsp4j.jsonrpc.MessageIssueException: Message could not be parsed.
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:395)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2022)
	at scala.meta.internal.metals.BuildServerConnection$.initialize(BuildServerConnection.scala:638)
	at scala.meta.internal.metals.BuildServerConnection$.$anonfun$fromSockets$1(BuildServerConnection.scala:533)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
Caused by: org.eclipse.lsp4j.jsonrpc.MessageIssueException: Message could not be parsed.
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleResponseIssues(RemoteEndpoint.java:358)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handle(RemoteEndpoint.java:317)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:198)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:18:48 WARN  no build target for: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\utilities\searching.scala
2024.01.22 12:18:50 INFO  time: code lens generation in 1.69s
2024.01.22 12:19:56 WARN  no build target for: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 12:19:57 WARN  no build target for: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Toolbar.scala
2024.01.22 12:19:58 WARN  no build target for: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table.scala
2024.01.22 12:20:28 WARN  no build target for: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\utilities\searching.scala
2024.01.22 12:20:41 WARN  no build target for: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\utilities\searching.scala
Jan. 22, 2024 12:23:09 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 116
2024.01.22 12:23:40 WARN  no build target for: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table.scala
2024.01.22 12:23:40 WARN  no build target for: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table.scala
2024.01.22 12:23:40 WARN  no build target for: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table.scala
2024.01.22 12:24:02 INFO  running 'C:\Program Files\Java\jdk-11\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\yashb\AppData\Local\Temp\metals17915590862764018252\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'
2024.01.22 12:24:03 INFO  [info] welcome to sbt 1.8.2 (Oracle Corporation Java 11.0.18)
2024.01.22 12:24:03 INFO  [info] loading settings for project webview-ui-build-build-build from metals.sbt ...
2024.01.22 12:24:04 INFO  [info] loading project definition from C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\project\project\project
2024.01.22 12:24:05 INFO  [info] loading settings for project webview-ui-build-build from metals.sbt ...
2024.01.22 12:24:05 INFO  [info] loading project definition from C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\project\project
2024.01.22 12:24:07 INFO  [success] Generated .bloop\webview-ui-build-build.json
2024.01.22 12:24:07 INFO  [success] Total time: 2 s, completed Jan. 22, 2024, 12:24:07 p.m.
2024.01.22 12:24:09 INFO  [info] loading settings for project webview-ui-build from metals.sbt,plugins.sbt ...
2024.01.22 12:24:09 INFO  [info] loading project definition from C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\project
2024.01.22 12:24:10 INFO  [success] Generated .bloop\webview-ui-build.json
2024.01.22 12:24:10 INFO  [info] compiling 1 Scala source to C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\project\target\scala-2.12\sbt-1.0\classes ...
2024.01.22 12:24:13 INFO  [info] done compiling
2024.01.22 12:24:13 INFO  [success] Total time: 4 s, completed Jan. 22, 2024, 12:24:13 p.m.
2024.01.22 12:24:14 INFO  [info] loading settings for project livechart from build.sbt ...
2024.01.22 12:24:14 INFO  [info] set current project to livechart (in build file:/C:/Users/yashb/Documents/vscode-laminar-vite-extension/webview-ui/)
2024.01.22 12:24:14 INFO  [success] Generated .bloop\livechart.json
2024.01.22 12:24:14 INFO  [success] Generated .bloop\livechart-test.json
2024.01.22 12:24:14 INFO  [success] Total time: 1 s, completed Jan. 22, 2024, 12:24:15 p.m.
2024.01.22 12:24:15 INFO  time: ran 'sbt bloopInstall' in 13s
2024.01.22 12:24:15 INFO  Attempting to connect to the build server...
2024.01.22 12:24:15 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.22 12:24:15 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.22 12:24:15 INFO  time: Connected to build server in 0.83s
2024.01.22 12:24:15 INFO  Connected to Build server: Bloop v1.5.13
2024.01.22 12:24:18 INFO  time: indexed workspace in 1.66s
2024.01.22 12:24:19 INFO  compiling livechart (7 scala sources)
2024.01.22 12:24:21 INFO  Generated JavaScript file 'C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\.bloop\livechart\livechart-test.js'
2024.01.22 12:24:25 INFO  time: compiled livechart in 6.21s
Jan. 22, 2024 12:25:30 P.M. scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\.reports\metals-full\2024-01-22\r_compiler-error_(livechart)_12-25-30-387.md
2024.01.22 12:25:31 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table.scala
scala.meta.tokenizers.TokenizeException: <input>:21: error: malformed xml literal, expected:
Expected (Name | "/>" | ">"):21:1, found "}\r\n\r\ndef o"
}
^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getXml(LegacyScanner.scala:937)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchLT$1(LegacyScanner.scala:295)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:303)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:25:31 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table.scala
scala.meta.tokenizers.TokenizeException: <input>:21: error: malformed xml literal, expected:
Expected (Name | "/>" | ">"):21:1, found "}\r\n\r\ndef o"
}
^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getXml(LegacyScanner.scala:937)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchLT$1(LegacyScanner.scala:295)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:303)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:25:32 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table.scala
scala.meta.tokenizers.TokenizeException: <input>:21: error: malformed xml literal, expected:
Expected ("{{" | "}}" | "&" | "&#" | "&#x" | "{" | "<xml:unparsed" | "<![CDATA[" | "<?" | "<!--" | "<" | "</"):21:1, found "}\r\n\r\ndef o"
}
^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getXml(LegacyScanner.scala:937)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchLT$1(LegacyScanner.scala:295)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:303)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:25:32 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table.scala
scala.meta.tokenizers.TokenizeException: <input>:20: error: malformed xml literal, expected:
Expected ("{{" | "}}" | "&" | "&#" | "&#x" | "{" | "<xml:unparsed" | "<![CDATA[" | "<?" | "<!--" | "</"):20:34, found "<\r\n}\r\n\r\nde"
  clickedCell.innerHTML = <input><
                                 ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getXml(LegacyScanner.scala:937)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchLT$1(LegacyScanner.scala:295)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:303)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:25:34 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table.scala
scala.meta.tokenizers.TokenizeException: <input>:20: error: malformed xml literal, expected:
Expected Name:20:36, found "\r\n}\r\n\r\ndef"
  clickedCell.innerHTML = <input></
                                   ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getXml(LegacyScanner.scala:937)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchLT$1(LegacyScanner.scala:295)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:303)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

Jan. 22, 2024 12:25:34 P.M. scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\.reports\metals-full\2024-01-22\r_compiler-error_(livechart)_12-25-34-669.md
2024.01.22 12:25:35 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table.scala
scala.meta.tokenizers.TokenizeException: <input>:20: error: malformed xml literal, expected:
Expected Name:20:36, found "\r\n}\r\n\r\ndef"
  clickedCell.innerHTML = <input></
                                   ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getXml(LegacyScanner.scala:937)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchLT$1(LegacyScanner.scala:295)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:303)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

Jan. 22, 2024 12:25:35 P.M. scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\.reports\metals-full\2024-01-22\r_compiler-error_(livechart)_12-25-35-500.md
2024.01.22 12:25:35 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table.scala
scala.meta.tokenizers.TokenizeException: <input>:20: error: malformed xml literal, expected:
Expected ([\t\n\r ] | ">"):20:38, found "[]\r\n}\r\n\r\nd"
  clickedCell.innerHTML = <input></in[]
                                     ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getXml(LegacyScanner.scala:937)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchLT$1(LegacyScanner.scala:295)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:303)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:25:36 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table.scala
scala.meta.tokenizers.TokenizeException: <input>:21: error: malformed xml literal, expected:
Expected ">":21:1, found "}\r\n\r\ndef o"
}
^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getXml(LegacyScanner.scala:937)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchLT$1(LegacyScanner.scala:295)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:303)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

Jan. 22, 2024 12:25:37 P.M. scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\.reports\metals-full\2024-01-22\r_compiler-error_(livechart)_12-25-37-177.md
2024.01.22 12:25:37 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table.scala
scala.meta.tokenizers.TokenizeException: <input>:21: error: malformed xml literal, expected:
Expected ">":21:1, found "}\r\n\r\ndef o"
}
^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getXml(LegacyScanner.scala:937)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchLT$1(LegacyScanner.scala:295)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:303)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:25:42 INFO  compiling livechart (1 scala source)
2024.01.22 12:25:44 INFO  time: compiled livechart in 2.86s
Jan. 22, 2024 12:25:48 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 426
Jan. 22, 2024 12:41:19 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1037
2024.01.22 12:41:36 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
scala.meta.tokenizers.TokenizeException: <input>:42: error: unclosed character literal
      clickedCell.style.display = 'fl'
                                     ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:41:36 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
scala.meta.tokenizers.TokenizeException: <input>:42: error: unclosed character literal
      clickedCell.style.display = 'flex'
                                       ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:47:01 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
scala.meta.tokenizers.TokenizeException: <input>:1: error: unclosed character literal
{width: '1rem'}}>"
             ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.ScalaExprPositionParser.rec$1(XmlParser.scala:155)
	at scala.meta.internal.tokenizers.ScalaExprPositionParser.$anonfun$blockRun$1(XmlParser.scala:164)
	at scala.meta.internal.tokenizers.XmlParser$Xml$.ScalaExpr(XmlParser.scala:45)
	at scala.meta.internal.tokenizers.XmlParser$Xml$.AttValue(XmlParser.scala:39)
	at scala.meta.internal.tokenizers.XmlParser$Xml$.Attribute(XmlParser.scala:34)
	at scala.meta.internal.tokenizers.XmlParser$Xml$.$anonfun$TagHeader$2(XmlParser.scala:31)
	at scala.meta.internal.tokenizers.XmlParser$Xml$.rec$macro$37$1(XmlParser.scala:31)
	at scala.meta.internal.tokenizers.XmlParser$Xml$.TagHeader(XmlParser.scala:31)
	at scala.meta.internal.tokenizers.XmlParser$Xml$.Element(XmlParser.scala:29)
	at scala.meta.internal.tokenizers.XmlParser$Xml$.XmlContent(XmlParser.scala:43)
	at scala.meta.internal.tokenizers.XmlParser.$anonfun$XmlExpr$1(XmlParser.scala:24)
	at scala.meta.shaded.internal.fastparse.internal.RepImpls$.rec$4(RepImpls.scala:226)
	at scala.meta.shaded.internal.fastparse.internal.RepImpls$.rep$extension(RepImpls.scala:266)
	at scala.meta.shaded.internal.fastparse.package$ByNameOps$.rep$extension(package.scala:202)
	at scala.meta.internal.tokenizers.XmlParser.XmlExpr(XmlParser.scala:24)
	at scala.meta.internal.tokenizers.LegacyScanner.$anonfun$getXml$2(LegacyScanner.scala:932)
	at scala.meta.shaded.internal.fastparse.SharedPackageDefs.parseInputRaw(SharedPackageDefs.scala:69)
	at scala.meta.shaded.internal.fastparse.SharedPackageDefs.parseInputRaw$(SharedPackageDefs.scala:45)
	at scala.meta.shaded.internal.fastparse.package$.parseInputRaw(package.scala:6)
	at scala.meta.shaded.internal.fastparse.SharedPackageDefs.$anonfun$parse$1(SharedPackageDefs.scala:35)
	at scala.meta.shaded.internal.fastparse.ParserInputSource$fromParserInput.parseThrough(ParserInput.scala:25)
	at scala.meta.shaded.internal.fastparse.SharedPackageDefs.parse(SharedPackageDefs.scala:35)
	at scala.meta.shaded.internal.fastparse.SharedPackageDefs.parse$(SharedPackageDefs.scala:30)
	at scala.meta.shaded.internal.fastparse.package$.parse(package.scala:6)
	at scala.meta.internal.tokenizers.LegacyScanner.getXml(LegacyScanner.scala:932)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchLT$1(LegacyScanner.scala:295)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:303)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:47:01 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
scala.meta.tokenizers.TokenizeException: <input>:43: error: empty quoted identifier
      clickedCell.innerHTML = ```<input style={{width: '1rem'}}>"
                              ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getBackquotedIdent(LegacyScanner.scala:485)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:337)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:47:04 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
scala.meta.tokenizers.TokenizeException: <input>:43: error: empty quoted identifier
      clickedCell.innerHTML = ```<input style={{width: '1rem'}}>
                              ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getBackquotedIdent(LegacyScanner.scala:485)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:337)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:47:04 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
scala.meta.tokenizers.TokenizeException: <input>:43: error: empty quoted identifier
      clickedCell.innerHTML = ```<input style={{width: '1rem'}}>```
                              ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getBackquotedIdent(LegacyScanner.scala:485)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:337)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:47:07 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
scala.meta.tokenizers.TokenizeException: <input>:43: error: empty quoted identifier
      clickedCell.innerHTML = `<input style={{width: '1rem'}}>```
                                                               ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getBackquotedIdent(LegacyScanner.scala:485)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:337)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:47:20 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
scala.meta.tokenizers.TokenizeException: <input>:43: error: empty quoted identifier
      clickedCell.innerHTML = ```<input style={{width: '1rem'}}>`
                              ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getBackquotedIdent(LegacyScanner.scala:485)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:337)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:47:20 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
scala.meta.tokenizers.TokenizeException: <input>:43: error: empty quoted identifier
      clickedCell.innerHTML = ```<input style={{width: '1rem'}}>```
                              ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getBackquotedIdent(LegacyScanner.scala:485)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:337)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:47:29 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
scala.meta.tokenizers.TokenizeException: <input>:1: error: unclosed character literal
{width: '1rem'}}>```
             ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.ScalaExprPositionParser.rec$1(XmlParser.scala:155)
	at scala.meta.internal.tokenizers.ScalaExprPositionParser.$anonfun$blockRun$1(XmlParser.scala:164)
	at scala.meta.internal.tokenizers.XmlParser$Xml$.ScalaExpr(XmlParser.scala:45)
	at scala.meta.internal.tokenizers.XmlParser$Xml$.AttValue(XmlParser.scala:39)
	at scala.meta.internal.tokenizers.XmlParser$Xml$.Attribute(XmlParser.scala:34)
	at scala.meta.internal.tokenizers.XmlParser$Xml$.$anonfun$TagHeader$2(XmlParser.scala:31)
	at scala.meta.internal.tokenizers.XmlParser$Xml$.rec$macro$37$1(XmlParser.scala:31)
	at scala.meta.internal.tokenizers.XmlParser$Xml$.TagHeader(XmlParser.scala:31)
	at scala.meta.internal.tokenizers.XmlParser$Xml$.Element(XmlParser.scala:29)
	at scala.meta.internal.tokenizers.XmlParser$Xml$.XmlContent(XmlParser.scala:43)
	at scala.meta.internal.tokenizers.XmlParser.$anonfun$XmlExpr$1(XmlParser.scala:24)
	at scala.meta.shaded.internal.fastparse.internal.RepImpls$.rec$4(RepImpls.scala:226)
	at scala.meta.shaded.internal.fastparse.internal.RepImpls$.rep$extension(RepImpls.scala:266)
	at scala.meta.shaded.internal.fastparse.package$ByNameOps$.rep$extension(package.scala:202)
	at scala.meta.internal.tokenizers.XmlParser.XmlExpr(XmlParser.scala:24)
	at scala.meta.internal.tokenizers.LegacyScanner.$anonfun$getXml$2(LegacyScanner.scala:932)
	at scala.meta.shaded.internal.fastparse.SharedPackageDefs.parseInputRaw(SharedPackageDefs.scala:69)
	at scala.meta.shaded.internal.fastparse.SharedPackageDefs.parseInputRaw$(SharedPackageDefs.scala:45)
	at scala.meta.shaded.internal.fastparse.package$.parseInputRaw(package.scala:6)
	at scala.meta.shaded.internal.fastparse.SharedPackageDefs.$anonfun$parse$1(SharedPackageDefs.scala:35)
	at scala.meta.shaded.internal.fastparse.ParserInputSource$fromParserInput.parseThrough(ParserInput.scala:25)
	at scala.meta.shaded.internal.fastparse.SharedPackageDefs.parse(SharedPackageDefs.scala:35)
	at scala.meta.shaded.internal.fastparse.SharedPackageDefs.parse$(SharedPackageDefs.scala:30)
	at scala.meta.shaded.internal.fastparse.package$.parse(package.scala:6)
	at scala.meta.internal.tokenizers.LegacyScanner.getXml(LegacyScanner.scala:932)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchLT$1(LegacyScanner.scala:295)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:303)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:47:30 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
scala.meta.tokenizers.TokenizeException: <input>:43: error: unclosed character literal
      clickedCell.innerHTML = '<input style={{width: '1rem'}}>```
                                                          ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:47:36 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
scala.meta.tokenizers.TokenizeException: <input>:43: error: unclosed character literal
      clickedCell.innerHTML = '<input style={{width: '1rem'}}>
                                                          ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:47:36 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
scala.meta.tokenizers.TokenizeException: <input>:43: error: unclosed character literal
      clickedCell.innerHTML = '<input style={{width: '1rem'}}>''
                                                          ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:47:38 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
scala.meta.tokenizers.TokenizeException: <input>:43: error: unclosed character literal
      clickedCell.innerHTML = '<input style={{width: '1rem'}}>
                                                          ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:47:39 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
scala.meta.tokenizers.TokenizeException: <input>:43: error: unclosed character literal
      clickedCell.innerHTML = '<input style={{width: '1rem'}}>""
                                                          ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:47:40 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
scala.meta.tokenizers.TokenizeException: <input>:43: error: unclosed character literal
      clickedCell.innerHTML = '<input style={{width: '1rem'}}>"
                                                          ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:48:50 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
scala.meta.tokenizers.TokenizeException: <input>:43: error: unclosed character literal
      clickedCell.children =innerHTML = div('')
                                            ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

Jan. 22, 2024 12:52:11 P.M. scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\.reports\metals-full\2024-01-22\r_compiler-error_(livechart)_12-52-11-572.md
2024.01.22 12:52:12 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
scala.meta.tokenizers.TokenizeException: <input>:43: error: malformed xml literal, expected:
Expected ([\t\n\r ] | "/>" | ">"):43:39, found ") \r\n      "
      clickedCell.replaceChildren(<inp) 
                                      ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getXml(LegacyScanner.scala:937)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchLT$1(LegacyScanner.scala:295)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:303)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:52:12 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
scala.meta.tokenizers.TokenizeException: <input>:43: error: malformed xml literal, expected:
Expected ([\t\n\r ] | "/>" | ">"):43:41, found ") \r\n      "
      clickedCell.replaceChildren(<input) 
                                        ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getXml(LegacyScanner.scala:937)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchLT$1(LegacyScanner.scala:295)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:303)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:52:14 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
scala.meta.tokenizers.TokenizeException: <input>:45: error: malformed xml literal, expected:
Expected ("{{" | "}}" | "&" | "&#" | "&#x" | "{" | "<xml:unparsed" | "<![CDATA[" | "<?" | "<!--" | "<" | "</"):45:1, found "}"
}
^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getXml(LegacyScanner.scala:937)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchLT$1(LegacyScanner.scala:295)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:303)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:52:24 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
scala.meta.tokenizers.TokenizeException: <input>:43: error: malformed xml literal, expected:
Expected ([\t\n\r ] | "/>" | ">"):43:41, found "/\">\") \r\n  "
      clickedCell.replaceChildren(<input/">") 
                                        ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getXml(LegacyScanner.scala:937)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchLT$1(LegacyScanner.scala:295)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:303)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:52:25 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
scala.meta.tokenizers.TokenizeException: <input>:43: error: malformed xml literal, expected:
Expected ([\t\n\r ] | "/>" | ">"):43:41, found "/\"\") \r\n   "
      clickedCell.replaceChildren(<input/"") 
                                        ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getXml(LegacyScanner.scala:937)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchLT$1(LegacyScanner.scala:295)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:303)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:52:27 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
scala.meta.tokenizers.TokenizeException: <input>:43: error: malformed xml literal, expected:
Expected ([\t\n\r ] | "/>" | ">"):43:41, found "/\") \r\n    "
      clickedCell.replaceChildren(<input/") 
                                        ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getXml(LegacyScanner.scala:937)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchLT$1(LegacyScanner.scala:295)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:303)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:52:27 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
scala.meta.tokenizers.TokenizeException: <input>:43: error: malformed xml literal, expected:
Expected ([\t\n\r ] | "/>" | ">"):43:41, found "/) \r\n     "
      clickedCell.replaceChildren(<input/) 
                                        ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getXml(LegacyScanner.scala:937)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchLT$1(LegacyScanner.scala:295)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:303)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:52:31 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
scala.meta.tokenizers.TokenizeException: <input>:43: error: unclosed string literal
      clickedCell.replaceChildren(<input/>") 
                                          ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getStringLit(LegacyScanner.scala:553)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchDoubleQuote$1(LegacyScanner.scala:372)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:376)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:55:55 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
scala.meta.tokenizers.TokenizeException: <input>:44: error: unclosed character literal
      clickedCell.children.map(child => child.asInstanceOf[dom.html.Input].style.width = '')
                                                                                         ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:55:56 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
scala.meta.tokenizers.TokenizeException: <input>:44: error: unclosed character literal
      clickedCell.children.map(child => child.asInstanceOf[dom.html.Input].style.width = '1re')
                                                                                             ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:55:56 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
scala.meta.tokenizers.TokenizeException: <input>:44: error: unclosed character literal
      clickedCell.children.map(child => child.asInstanceOf[dom.html.Input].style.width = '1rem')
                                                                                              ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.22 12:55:58 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
scala.meta.tokenizers.TokenizeException: <input>:44: error: unclosed character literal
      clickedCell.children.map(child => child.asInstanceOf[dom.html.Input].style.width = '')
                                                                                         ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

Jan. 22, 2024 12:56:51 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2560
Exception in thread "pool-5-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-5-thread-2" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-5-thread-3" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-5-thread-4" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-5-thread-5" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-5-thread-6" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-5-thread-7" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-5-thread-8" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-5-thread-9" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-5-thread-10" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-5-thread-11" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.22 13:25:28 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
scala.meta.tokenizers.TokenizeException: <input>:45: error: unclosed string literal
      clickedCell.innerText = "<input type='text">"
                                                  ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getStringLit(LegacyScanner.scala:553)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchDoubleQuote$1(LegacyScanner.scala:372)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:376)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

Jan. 22, 2024 1:32:36 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4714
2024.01.22 13:36:22 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/event/FocusEvent.java

Uri: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/event/FocusEvent.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:703)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	jdk.internal.reflect.GeneratedMethodAccessor20.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 22, 2024 1:36:23 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.desktop/java/awt/event/FocusEvent.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 1996, 2016, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.awt.event;\n\nimport java.awt.Component;\nimport java.io.ObjectStreamException;\n\nimport sun.awt.AWTAccessor;\nimport sun.awt.AppContext;\nimport sun.awt.SunToolkit;\n\n/**\n * A low-level event which indicates that a Component has gained or lost the\n * input focus. This low-level event is generated by a Component (such as a\n * TextField). The event is passed to every {@code FocusListener} or\n * {@code FocusAdapter} object which registered to receive such events\n * using the Component\u0027s {@code addFocusListener} method.\n * ({@code FocusAdapter} objects implement the {@code FocusListener}\n * interface.) Each such listener object gets this {@code FocusEvent} when\n * the event occurs.\n * \u003cp\u003e\n * There are two levels of focus events: permanent and temporary. Permanent\n * focus change events occur when focus is directly moved from one Component to\n * another, such as through a call to requestFocus() or as the user uses the\n * TAB key to traverse Components. Temporary focus change events occur when\n * focus is temporarily lost for a Component as the indirect result of another\n * operation, such as Window deactivation or a Scrollbar drag. In this case,\n * the original focus state will automatically be restored once that operation\n * is finished, or, for the case of Window deactivation, when the Window is\n * reactivated. Both permanent and temporary focus events are delivered using\n * the FOCUS_GAINED and FOCUS_LOST event ids; the level may be distinguished in\n * the event using the isTemporary() method.\n * \u003cp\u003e\n * Every {@code FocusEvent} records its cause - the reason why this event was\n * generated. The cause is assigned during the focus event creation and may be\n * retrieved by calling {@link #getCause}.\n * \u003cp\u003e\n * An unspecified behavior will be caused if the {@code id} parameter\n * of any particular {@code FocusEvent} instance is not\n * in the range from {@code FOCUS_FIRST} to {@code FOCUS_LAST}.\n *\n * @see FocusAdapter\n * @see FocusListener\n * @see \u003ca href\u003d\"http://docs.oracle.com/javase/tutorial/uiswing/events/focuslistener.html\"\u003eTutorial: Writing a Focus Listener\u003c/a\u003e\n *\n * @author Carl Quinn\n * @author Amy Fowler\n * @since 1.1\n */\npublic class FocusEvent extends ComponentEvent {\n\n    /**\n     * This enum represents the cause of a {@code FocusEvent}- the reason why it\n     * occurred. Possible reasons include mouse events, keyboard focus\n     * traversal, window activation.\n     * If no cause is provided then the reason is {@code UNKNOWN}.\n     *\n     * @since 9\n     */\n    public enum Cause {\n        /**\n         * The default value.\n         */\n        UNKNOWN,\n        /**\n         * An activating mouse event.\n         */\n        MOUSE_EVENT,\n        /**\n         * A focus traversal action with unspecified direction.\n         */\n        TRAVERSAL,\n        /**\n         * An up-cycle focus traversal action.\n         */\n        TRAVERSAL_UP,\n        /**\n         * A down-cycle focus traversal action.\n         */\n        TRAVERSAL_DOWN,\n        /**\n         * A forward focus traversal action.\n         */\n        TRAVERSAL_FORWARD,\n        /**\n         * A backward focus traversal action.\n         */\n        TRAVERSAL_BACKWARD,\n        /**\n         * Restoring focus after a focus request has been rejected.\n         */\n        ROLLBACK,\n        /**\n         * A system action causing an unexpected focus change.\n         */\n        UNEXPECTED,\n        /**\n         * An activation of a toplevel window.\n         */\n        ACTIVATION,\n        /**\n         * Clearing global focus owner.\n         */\n        CLEAR_GLOBAL_FOCUS_OWNER\n    }\n\n    /**\n     * The first number in the range of ids used for focus events.\n     */\n    public static final int FOCUS_FIRST         \u003d 1004;\n\n    /**\n     * The last number in the range of ids used for focus events.\n     */\n    public static final int FOCUS_LAST          \u003d 1005;\n\n    /**\n     * This event indicates that the Component is now the focus owner.\n     */\n    public static final int FOCUS_GAINED \u003d FOCUS_FIRST; //Event.GOT_FOCUS\n\n    /**\n     * This event indicates that the Component is no longer the focus owner.\n     */\n    public static final int FOCUS_LOST \u003d 1 + FOCUS_FIRST; //Event.LOST_FOCUS\n\n    /**\n     * A focus event has the reason why this event was generated.\n     * The cause is set during the focus event creation.\n     *\n     * @serial\n     * @see #getCause()\n     * @since 9\n     */\n    private final Cause cause;\n\n    /**\n     * A focus event can have two different levels, permanent and temporary.\n     * It will be set to true if some operation takes away the focus\n     * temporarily and intends on getting it back once the event is completed.\n     * Otherwise it will be set to false.\n     *\n     * @serial\n     * @see #isTemporary\n     */\n    boolean temporary;\n\n    /**\n     * The other Component involved in this focus change. For a FOCUS_GAINED\n     * event, this is the Component that lost focus. For a FOCUS_LOST event,\n     * this is the Component that gained focus. If this focus change occurs\n     * with a native application, a Java application in a different VM, or with\n     * no other Component, then the opposite Component is null.\n     *\n     * @see #getOppositeComponent\n     * @since 1.4\n     */\n    transient Component opposite;\n\n    /*\n     * JDK 1.1 serialVersionUID\n     */\n    private static final long serialVersionUID \u003d 523753786457416396L;\n\n    /**\n     * Constructs a {@code FocusEvent} object with the\n     * specified temporary state, opposite {@code Component} and the\n     * {@code Cause.UNKNOWN} cause.\n     * The opposite {@code Component} is the other\n     * {@code Component} involved in this focus change.\n     * For a {@code FOCUS_GAINED} event, this is the\n     * {@code Component} that lost focus. For a\n     * {@code FOCUS_LOST} event, this is the {@code Component}\n     * that gained focus. If this focus change occurs with a native\n     * application, with a Java application in a different VM,\n     * or with no other {@code Component}, then the opposite\n     * {@code Component} is {@code null}.\n     * \u003cp\u003e This method throws an\n     * {@code IllegalArgumentException} if {@code source}\n     * is {@code null}.\n     *\n     * @param source     The {@code Component} that originated the event\n     * @param id         An integer indicating the type of event.\n     *                     For information on allowable values, see\n     *                     the class description for {@link FocusEvent}\n     * @param temporary  Equals {@code true} if the focus change is temporary;\n     *                   {@code false} otherwise\n     * @param opposite   The other Component involved in the focus change,\n     *                   or {@code null}\n     * @throws IllegalArgumentException if {@code source} equals {@code null}\n     * @see #getSource()\n     * @see #getID()\n     * @see #isTemporary()\n     * @see #getOppositeComponent()\n     * @see Cause#UNKNOWN\n     * @since 1.4\n     */\n    public FocusEvent(Component source, int id, boolean temporary,\n                      Component opposite) {\n        this(source, id, temporary, opposite, Cause.UNKNOWN);\n    }\n\n    /**\n     * Constructs a {@code FocusEvent} object with the\n     * specified temporary state, opposite {@code Component} and the cause.\n     * The opposite {@code Component} is the other\n     * {@code Component} involved in this focus change.\n     * For a {@code FOCUS_GAINED} event, this is the\n     * {@code Component} that lost focus. For a\n     * {@code FOCUS_LOST} event, this is the {@code Component}\n     * that gained focus. If this focus change occurs with a native\n     * application, with a Java application in a different VM,\n     * or with no other {@code Component}, then the opposite\n     * {@code Component} is {@code null}.\n     * \u003cp\u003e This method throws an\n     * {@code IllegalArgumentException} if {@code source} or {@code cause}\n     * is {@code null}.\n     *\n     * @param source    The {@code Component} that originated the event\n     * @param id        An integer indicating the type of event.\n     *                  For information on allowable values, see\n     *                  the class description for {@link FocusEvent}\n     * @param temporary Equals {@code true} if the focus change is temporary;\n     *                  {@code false} otherwise\n     * @param opposite  The other Component involved in the focus change,\n     *                  or {@code null}\n     * @param cause     The focus event cause.\n     * @throws IllegalArgumentException if {@code source} equals {@code null}\n     *                                  or if {@code cause} equals {@code null}\n     * @see #getSource()\n     * @see #getID()\n     * @see #isTemporary()\n     * @see #getOppositeComponent()\n     * @see Cause\n     * @since 9\n     */\n    public FocusEvent(Component source, int id, boolean temporary,\n                      Component opposite, Cause cause) {\n        super(source, id);\n        if (cause \u003d\u003d null) {\n            throw new IllegalArgumentException(\"null cause\");\n        }\n        this.temporary \u003d temporary;\n        this.opposite \u003d opposite;\n        this.cause \u003d cause;\n    }\n\n    /**\n     * Constructs a {@code FocusEvent} object and identifies\n     * whether or not the change is temporary.\n     * \u003cp\u003e This method throws an\n     * {@code IllegalArgumentException} if {@code source}\n     * is {@code null}.\n     *\n     * @param source    The {@code Component} that originated the event\n     * @param id        An integer indicating the type of event.\n     *                     For information on allowable values, see\n     *                     the class description for {@link FocusEvent}\n     * @param temporary Equals {@code true} if the focus change is temporary;\n     *                  {@code false} otherwise\n     * @throws IllegalArgumentException if {@code source} equals {@code null}\n     * @see #getSource()\n     * @see #getID()\n     * @see #isTemporary()\n     */\n    public FocusEvent(Component source, int id, boolean temporary) {\n        this(source, id, temporary, null);\n    }\n\n    /**\n     * Constructs a {@code FocusEvent} object and identifies it\n     * as a permanent change in focus.\n     * \u003cp\u003e This method throws an\n     * {@code IllegalArgumentException} if {@code source}\n     * is {@code null}.\n     *\n     * @param source    The {@code Component} that originated the event\n     * @param id        An integer indicating the type of event.\n     *                     For information on allowable values, see\n     *                     the class description for {@link FocusEvent}\n     * @throws IllegalArgumentException if {@code source} equals {@code null}\n     * @see #getSource()\n     * @see #getID()\n     */\n    public FocusEvent(Component source, int id) {\n        this(source, id, false);\n    }\n\n    /**\n     * Identifies the focus change event as temporary or permanent.\n     *\n     * @return {@code true} if the focus change is temporary;\n     *         {@code false} otherwise\n     */\n    public boolean isTemporary() {\n        return temporary;\n    }\n\n    /**\n     * Returns the other Component involved in this focus change. For a\n     * FOCUS_GAINED event, this is the Component that lost focus. For a\n     * FOCUS_LOST event, this is the Component that gained focus. If this\n     * focus change occurs with a native application, with a Java application\n     * in a different VM or context, or with no other Component, then null is\n     * returned.\n     *\n     * @return the other Component involved in the focus change, or null\n     * @since 1.4\n     */\n    public Component getOppositeComponent() {\n        if (opposite \u003d\u003d null) {\n            return null;\n        }\n\n        return (SunToolkit.targetToAppContext(opposite) \u003d\u003d\n                AppContext.getAppContext())\n                ? opposite\n                : null;\n    }\n\n    /**\n     * Returns a parameter string identifying this event.\n     * This method is useful for event-logging and for debugging.\n     *\n     * @return a string identifying the event and its attributes\n     */\n    public String paramString() {\n        String typeStr;\n        switch(id) {\n            case FOCUS_GAINED:\n                typeStr \u003d \"FOCUS_GAINED\";\n                break;\n            case FOCUS_LOST:\n                typeStr \u003d \"FOCUS_LOST\";\n                break;\n            default:\n                typeStr \u003d \"unknown type\";\n        }\n        return typeStr + (temporary ? \",temporary\" : \",permanent\") +\n                \",opposite\u003d\" + getOppositeComponent() + \",cause\u003d\" + getCause();\n    }\n\n    /**\n     * Returns the event cause.\n     *\n     * @return one of {@link Cause} values\n     * @since 9\n     */\n    public final Cause getCause() {\n        return cause;\n    }\n\n    /**\n     * Checks if this deserialized {@code FocusEvent} instance is compatible\n     * with the current specification which implies that focus event has\n     * non-null {@code cause} value. If the check fails a new {@code FocusEvent}\n     * instance is returned which {@code cause} field equals to\n     * {@link Cause#UNKNOWN} and its other fields have the same values as in\n     * this {@code FocusEvent} instance.\n     *\n     * @serial\n     * @see #cause\n     * @since 9\n     */\n    @SuppressWarnings(\"serial\")\n    Object readResolve() throws ObjectStreamException {\n        if (cause !\u003d null) {\n            return this;\n        }\n        FocusEvent focusEvent \u003d new FocusEvent(new Component(){}, getID(),\n                isTemporary(), getOppositeComponent());\n        focusEvent.setSource(null);\n        focusEvent.consumed \u003d consumed;\n\n        AWTAccessor.AWTEventAccessor accessor \u003d\n                AWTAccessor.getAWTEventAccessor();\n        accessor.setBData(focusEvent, accessor.getBData(this));\n        return focusEvent;\n    }\n\n\n}"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor18.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/event/FocusEvent.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:339)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/event/FocusEvent.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

Jan. 22, 2024 1:36:23 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.desktop/java/awt/event/FocusEvent.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor25.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/event/FocusEvent.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:358)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/event/FocusEvent.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

Jan. 22, 2024 1:36:24 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5175
2024.01.22 13:36:24 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/event/FocusEvent.java

Uri: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/event/FocusEvent.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:703)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	jdk.internal.reflect.GeneratedMethodAccessor20.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 22, 2024 1:36:24 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.desktop/java/awt/event/FocusEvent.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 1996, 2016, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.awt.event;\n\nimport java.awt.Component;\nimport java.io.ObjectStreamException;\n\nimport sun.awt.AWTAccessor;\nimport sun.awt.AppContext;\nimport sun.awt.SunToolkit;\n\n/**\n * A low-level event which indicates that a Component has gained or lost the\n * input focus. This low-level event is generated by a Component (such as a\n * TextField). The event is passed to every {@code FocusListener} or\n * {@code FocusAdapter} object which registered to receive such events\n * using the Component\u0027s {@code addFocusListener} method.\n * ({@code FocusAdapter} objects implement the {@code FocusListener}\n * interface.) Each such listener object gets this {@code FocusEvent} when\n * the event occurs.\n * \u003cp\u003e\n * There are two levels of focus events: permanent and temporary. Permanent\n * focus change events occur when focus is directly moved from one Component to\n * another, such as through a call to requestFocus() or as the user uses the\n * TAB key to traverse Components. Temporary focus change events occur when\n * focus is temporarily lost for a Component as the indirect result of another\n * operation, such as Window deactivation or a Scrollbar drag. In this case,\n * the original focus state will automatically be restored once that operation\n * is finished, or, for the case of Window deactivation, when the Window is\n * reactivated. Both permanent and temporary focus events are delivered using\n * the FOCUS_GAINED and FOCUS_LOST event ids; the level may be distinguished in\n * the event using the isTemporary() method.\n * \u003cp\u003e\n * Every {@code FocusEvent} records its cause - the reason why this event was\n * generated. The cause is assigned during the focus event creation and may be\n * retrieved by calling {@link #getCause}.\n * \u003cp\u003e\n * An unspecified behavior will be caused if the {@code id} parameter\n * of any particular {@code FocusEvent} instance is not\n * in the range from {@code FOCUS_FIRST} to {@code FOCUS_LAST}.\n *\n * @see FocusAdapter\n * @see FocusListener\n * @see \u003ca href\u003d\"http://docs.oracle.com/javase/tutorial/uiswing/events/focuslistener.html\"\u003eTutorial: Writing a Focus Listener\u003c/a\u003e\n *\n * @author Carl Quinn\n * @author Amy Fowler\n * @since 1.1\n */\npublic class FocusEvent extends ComponentEvent {\n\n    /**\n     * This enum represents the cause of a {@code FocusEvent}- the reason why it\n     * occurred. Possible reasons include mouse events, keyboard focus\n     * traversal, window activation.\n     * If no cause is provided then the reason is {@code UNKNOWN}.\n     *\n     * @since 9\n     */\n    public enum Cause {\n        /**\n         * The default value.\n         */\n        UNKNOWN,\n        /**\n         * An activating mouse event.\n         */\n        MOUSE_EVENT,\n        /**\n         * A focus traversal action with unspecified direction.\n         */\n        TRAVERSAL,\n        /**\n         * An up-cycle focus traversal action.\n         */\n        TRAVERSAL_UP,\n        /**\n         * A down-cycle focus traversal action.\n         */\n        TRAVERSAL_DOWN,\n        /**\n         * A forward focus traversal action.\n         */\n        TRAVERSAL_FORWARD,\n        /**\n         * A backward focus traversal action.\n         */\n        TRAVERSAL_BACKWARD,\n        /**\n         * Restoring focus after a focus request has been rejected.\n         */\n        ROLLBACK,\n        /**\n         * A system action causing an unexpected focus change.\n         */\n        UNEXPECTED,\n        /**\n         * An activation of a toplevel window.\n         */\n        ACTIVATION,\n        /**\n         * Clearing global focus owner.\n         */\n        CLEAR_GLOBAL_FOCUS_OWNER\n    }\n\n    /**\n     * The first number in the range of ids used for focus events.\n     */\n    public static final int FOCUS_FIRST         \u003d 1004;\n\n    /**\n     * The last number in the range of ids used for focus events.\n     */\n    public static final int FOCUS_LAST          \u003d 1005;\n\n    /**\n     * This event indicates that the Component is now the focus owner.\n     */\n    public static final int FOCUS_GAINED \u003d FOCUS_FIRST; //Event.GOT_FOCUS\n\n    /**\n     * This event indicates that the Component is no longer the focus owner.\n     */\n    public static final int FOCUS_LOST \u003d 1 + FOCUS_FIRST; //Event.LOST_FOCUS\n\n    /**\n     * A focus event has the reason why this event was generated.\n     * The cause is set during the focus event creation.\n     *\n     * @serial\n     * @see #getCause()\n     * @since 9\n     */\n    private final Cause cause;\n\n    /**\n     * A focus event can have two different levels, permanent and temporary.\n     * It will be set to true if some operation takes away the focus\n     * temporarily and intends on getting it back once the event is completed.\n     * Otherwise it will be set to false.\n     *\n     * @serial\n     * @see #isTemporary\n     */\n    boolean temporary;\n\n    /**\n     * The other Component involved in this focus change. For a FOCUS_GAINED\n     * event, this is the Component that lost focus. For a FOCUS_LOST event,\n     * this is the Component that gained focus. If this focus change occurs\n     * with a native application, a Java application in a different VM, or with\n     * no other Component, then the opposite Component is null.\n     *\n     * @see #getOppositeComponent\n     * @since 1.4\n     */\n    transient Component opposite;\n\n    /*\n     * JDK 1.1 serialVersionUID\n     */\n    private static final long serialVersionUID \u003d 523753786457416396L;\n\n    /**\n     * Constructs a {@code FocusEvent} object with the\n     * specified temporary state, opposite {@code Component} and the\n     * {@code Cause.UNKNOWN} cause.\n     * The opposite {@code Component} is the other\n     * {@code Component} involved in this focus change.\n     * For a {@code FOCUS_GAINED} event, this is the\n     * {@code Component} that lost focus. For a\n     * {@code FOCUS_LOST} event, this is the {@code Component}\n     * that gained focus. If this focus change occurs with a native\n     * application, with a Java application in a different VM,\n     * or with no other {@code Component}, then the opposite\n     * {@code Component} is {@code null}.\n     * \u003cp\u003e This method throws an\n     * {@code IllegalArgumentException} if {@code source}\n     * is {@code null}.\n     *\n     * @param source     The {@code Component} that originated the event\n     * @param id         An integer indicating the type of event.\n     *                     For information on allowable values, see\n     *                     the class description for {@link FocusEvent}\n     * @param temporary  Equals {@code true} if the focus change is temporary;\n     *                   {@code false} otherwise\n     * @param opposite   The other Component involved in the focus change,\n     *                   or {@code null}\n     * @throws IllegalArgumentException if {@code source} equals {@code null}\n     * @see #getSource()\n     * @see #getID()\n     * @see #isTemporary()\n     * @see #getOppositeComponent()\n     * @see Cause#UNKNOWN\n     * @since 1.4\n     */\n    public FocusEvent(Component source, int id, boolean temporary,\n                      Component opposite) {\n        this(source, id, temporary, opposite, Cause.UNKNOWN);\n    }\n\n    /**\n     * Constructs a {@code FocusEvent} object with the\n     * specified temporary state, opposite {@code Component} and the cause.\n     * The opposite {@code Component} is the other\n     * {@code Component} involved in this focus change.\n     * For a {@code FOCUS_GAINED} event, this is the\n     * {@code Component} that lost focus. For a\n     * {@code FOCUS_LOST} event, this is the {@code Component}\n     * that gained focus. If this focus change occurs with a native\n     * application, with a Java application in a different VM,\n     * or with no other {@code Component}, then the opposite\n     * {@code Component} is {@code null}.\n     * \u003cp\u003e This method throws an\n     * {@code IllegalArgumentException} if {@code source} or {@code cause}\n     * is {@code null}.\n     *\n     * @param source    The {@code Component} that originated the event\n     * @param id        An integer indicating the type of event.\n     *                  For information on allowable values, see\n     *                  the class description for {@link FocusEvent}\n     * @param temporary Equals {@code true} if the focus change is temporary;\n     *                  {@code false} otherwise\n     * @param opposite  The other Component involved in the focus change,\n     *                  or {@code null}\n     * @param cause     The focus event cause.\n     * @throws IllegalArgumentException if {@code source} equals {@code null}\n     *                                  or if {@code cause} equals {@code null}\n     * @see #getSource()\n     * @see #getID()\n     * @see #isTemporary()\n     * @see #getOppositeComponent()\n     * @see Cause\n     * @since 9\n     */\n    public FocusEvent(Component source, int id, boolean temporary,\n                      Component opposite, Cause cause) {\n        super(source, id);\n        if (cause \u003d\u003d null) {\n            throw new IllegalArgumentException(\"null cause\");\n        }\n        this.temporary \u003d temporary;\n        this.opposite \u003d opposite;\n        this.cause \u003d cause;\n    }\n\n    /**\n     * Constructs a {@code FocusEvent} object and identifies\n     * whether or not the change is temporary.\n     * \u003cp\u003e This method throws an\n     * {@code IllegalArgumentException} if {@code source}\n     * is {@code null}.\n     *\n     * @param source    The {@code Component} that originated the event\n     * @param id        An integer indicating the type of event.\n     *                     For information on allowable values, see\n     *                     the class description for {@link FocusEvent}\n     * @param temporary Equals {@code true} if the focus change is temporary;\n     *                  {@code false} otherwise\n     * @throws IllegalArgumentException if {@code source} equals {@code null}\n     * @see #getSource()\n     * @see #getID()\n     * @see #isTemporary()\n     */\n    public FocusEvent(Component source, int id, boolean temporary) {\n        this(source, id, temporary, null);\n    }\n\n    /**\n     * Constructs a {@code FocusEvent} object and identifies it\n     * as a permanent change in focus.\n     * \u003cp\u003e This method throws an\n     * {@code IllegalArgumentException} if {@code source}\n     * is {@code null}.\n     *\n     * @param source    The {@code Component} that originated the event\n     * @param id        An integer indicating the type of event.\n     *                     For information on allowable values, see\n     *                     the class description for {@link FocusEvent}\n     * @throws IllegalArgumentException if {@code source} equals {@code null}\n     * @see #getSource()\n     * @see #getID()\n     */\n    public FocusEvent(Component source, int id) {\n        this(source, id, false);\n    }\n\n    /**\n     * Identifies the focus change event as temporary or permanent.\n     *\n     * @return {@code true} if the focus change is temporary;\n     *         {@code false} otherwise\n     */\n    public boolean isTemporary() {\n        return temporary;\n    }\n\n    /**\n     * Returns the other Component involved in this focus change. For a\n     * FOCUS_GAINED event, this is the Component that lost focus. For a\n     * FOCUS_LOST event, this is the Component that gained focus. If this\n     * focus change occurs with a native application, with a Java application\n     * in a different VM or context, or with no other Component, then null is\n     * returned.\n     *\n     * @return the other Component involved in the focus change, or null\n     * @since 1.4\n     */\n    public Component getOppositeComponent() {\n        if (opposite \u003d\u003d null) {\n            return null;\n        }\n\n        return (SunToolkit.targetToAppContext(opposite) \u003d\u003d\n                AppContext.getAppContext())\n                ? opposite\n                : null;\n    }\n\n    /**\n     * Returns a parameter string identifying this event.\n     * This method is useful for event-logging and for debugging.\n     *\n     * @return a string identifying the event and its attributes\n     */\n    public String paramString() {\n        String typeStr;\n        switch(id) {\n            case FOCUS_GAINED:\n                typeStr \u003d \"FOCUS_GAINED\";\n                break;\n            case FOCUS_LOST:\n                typeStr \u003d \"FOCUS_LOST\";\n                break;\n            default:\n                typeStr \u003d \"unknown type\";\n        }\n        return typeStr + (temporary ? \",temporary\" : \",permanent\") +\n                \",opposite\u003d\" + getOppositeComponent() + \",cause\u003d\" + getCause();\n    }\n\n    /**\n     * Returns the event cause.\n     *\n     * @return one of {@link Cause} values\n     * @since 9\n     */\n    public final Cause getCause() {\n        return cause;\n    }\n\n    /**\n     * Checks if this deserialized {@code FocusEvent} instance is compatible\n     * with the current specification which implies that focus event has\n     * non-null {@code cause} value. If the check fails a new {@code FocusEvent}\n     * instance is returned which {@code cause} field equals to\n     * {@link Cause#UNKNOWN} and its other fields have the same values as in\n     * this {@code FocusEvent} instance.\n     *\n     * @serial\n     * @see #cause\n     * @since 9\n     */\n    @SuppressWarnings(\"serial\")\n    Object readResolve() throws ObjectStreamException {\n        if (cause !\u003d null) {\n            return this;\n        }\n        FocusEvent focusEvent \u003d new FocusEvent(new Component(){}, getID(),\n                isTemporary(), getOppositeComponent());\n        focusEvent.setSource(null);\n        focusEvent.consumed \u003d consumed;\n\n        AWTAccessor.AWTEventAccessor accessor \u003d\n                AWTAccessor.getAWTEventAccessor();\n        accessor.setBData(focusEvent, accessor.getBData(this));\n        return focusEvent;\n    }\n\n\n}"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor18.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/event/FocusEvent.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:339)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/event/FocusEvent.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

Jan. 22, 2024 1:36:24 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.desktop/java/awt/event/FocusEvent.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor25.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/event/FocusEvent.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:358)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/event/FocusEvent.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

Jan. 22, 2024 1:36:33 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5210
Jan. 22, 2024 1:36:34 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5215
Jan. 22, 2024 1:36:34 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5216
Jan. 22, 2024 1:36:34 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5217
Jan. 22, 2024 1:36:35 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5223
Exception in thread "pool-5-thread-12" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-5-thread-13" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-5-thread-14" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Jan. 22, 2024 1:47:01 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 5814
Exception in thread "pool-5-thread-15" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-5-thread-16" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.22 13:47:18 WARN  Using indexes to guess the definition of KeyboardEvent
2024.01.22 13:52:54 WARN  Using indexes to guess the definition of HTMLInputElement
2024.01.22 13:58:05 INFO  Disconnecting from Bloop session...
2024.01.22 13:58:07 ERROR timeout: build server 'bloop' during shutdown
2024.01.22 13:58:07 INFO  Attempting to connect to the build server...
2024.01.22 13:58:07 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.22 13:58:07 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.22 13:58:07 INFO  time: Connected to build server in 0.12s
2024.01.22 13:58:07 INFO  Connected to Build server: Bloop v1.5.13
2024.01.22 13:58:09 INFO  time: indexed workspace in 0.93s
2024.01.22 13:58:09 INFO  Generated JavaScript file 'C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\.bloop\livechart\livechart-test.js'
2024.01.22 13:59:06 INFO  compiling livechart (3 scala sources)
2024.01.22 13:59:07 INFO  time: compiled livechart in 1.45s
Jan. 22, 2024 2:04:31 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 6821
2024.01.22 14:04:46 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:04:50 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:04:51 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:04:51 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:04:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:04:54 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:04:55 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:04:59 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:05:00 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:05:10 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:05:26 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:05:27 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:05:32 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:05:33 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:05:35 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:05:37 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:05:41 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:06:00 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:06:07 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:06:45 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:08:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:14:49 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:14:51 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:14:52 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:14:52 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:14:52 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:14:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:16:14 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:16:19 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:16:20 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:16:24 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:16:26 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:16:28 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:16:29 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:16:31 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:16:40 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:16:46 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:16:47 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:16:47 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:16:49 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:16:49 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:16:52 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:16:52 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:16:52 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:16:52 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:16:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:16:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:16:54 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:16:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:16:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:16:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:16:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:16:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:16:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:17:43 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:17:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:17:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:17:54 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:17:54 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:17:55 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:17:58 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:17:58 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:17:58 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:17:58 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:17:59 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:01 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:02 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:11 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:12 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:12 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:12 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:12 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:12 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:12 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:19 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:24 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:24 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:25 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:28 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:31 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:31 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:31 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:31 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:31 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:31 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:33 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:33 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:34 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:34 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:36 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:39 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:43 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:18:47 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:18:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:18:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:18:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:18:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:18:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:18:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
Exception in thread "pool-9-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.22 14:18:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:18:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:18:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:18:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
Exception in thread "pool-9-thread-2" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.22 14:18:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:18:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:18:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:18:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:18:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:18:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
Exception in thread "pool-9-thread-3" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.22 14:18:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:18:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:18:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:18:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:18:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:18:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:18:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:18:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.22 14:18:58 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:19:02 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:19:02 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:19:03 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:19:05 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:19:06 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:19:06 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:19:06 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:19:15 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:19:21 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:19:23 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:23:50 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:23:54 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:25:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:26:02 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:27:10 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:43:03 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:45:12 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:45:22 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:45:32 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:46:11 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.22 14:46:58 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 09:25:58 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 09:38:26 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 09:38:29 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 09:38:38 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.23 11:29:17 WARN  Could not find semantic tokens for: file:///C:/Users/yashb/Documents/vscode-laminar-vite-extension/webview-ui/src/main/scala/components/TableBody.scala
Jan. 23, 2024 11:31:21 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 7934
Exception in thread "pool-9-thread-4" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.23 11:31:31 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table.scala
2024.01.23 11:31:46 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table.scala
2024.01.23 11:32:22 WARN  Could not find semantic tokens for: file:///C:/Users/yashb/Documents/vscode-laminar-vite-extension/webview-ui/src/main/scala/components/utils/AuroraElement.scala
2024.01.23 11:32:56 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table.scala
2024.01.23 11:33:01 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table.scala
2024.01.23 11:33:49 WARN  Using indexes to guess the definition of AuroraElement
2024.01.23 11:33:49 WARN  Using indexes to guess the definition of AuroraElement
Exception in thread "pool-9-thread-5" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.23 11:35:02 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
Jan. 23, 2024 11:35:17 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 8510
2024.01.23 11:35:18 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:20 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:23 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:24 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:25 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:25 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:26 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:30 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:31 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:34 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:34 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:34 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:34 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:34 WARN  Using indexes to guess the definition of TableBody
2024.01.23 11:35:34 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:34 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:34 WARN  Using indexes to guess the definition of TableBody
2024.01.23 11:35:34 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:34 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:35 WARN  Using indexes to guess the definition of TableBody
2024.01.23 11:35:38 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:41 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:41 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:41 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:41 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:41 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:41 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
Exception in thread "pool-9-thread-6" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.23 11:35:41 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:41 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:42 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:43 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:44 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:45 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:45 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:45 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:45 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:54 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:55 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:55 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:55 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:35:55 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:36:58 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
Jan. 23, 2024 11:36:58 A.M. scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\.reports\metals-full\2024-01-23\r_compiler-error_(livechart)_11-36-58-481.md
2024.01.23 11:36:58 WARN  Could not find semantic tokens for: file:///C:/Users/yashb/Documents/vscode-laminar-vite-extension/webview-ui/src/main/scala/livechart/LiveChart.scala
2024.01.23 11:37:00 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:37:03 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:37:54 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:37:54 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:37:54 WARN  Using indexes to guess the definition of Table
2024.01.23 11:37:54 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:37:54 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 11:37:55 WARN  Using indexes to guess the definition of Table
Jan. 23, 2024 11:38:08 A.M. scala.meta.internal.mtags.SymbolIndexBucket addMtagsSourceFile
WARNING: Error indexing C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table copy.scala
java.nio.file.NoSuchFileException: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table copy.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:371)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:422)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:415)
	at scala.meta.internal.mtags.Mtags.index(Mtags.scala:67)
	at scala.meta.internal.mtags.Mtags.allSymbols(Mtags.scala:21)
	at scala.meta.internal.mtags.SymbolIndexBucket.allSymbols(SymbolIndexBucket.scala:242)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:253)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1(SymbolIndexBucket.scala:168)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1$adapted(SymbolIndexBucket.scala:168)
	at scala.collection.immutable.Set$Set3.foreach(Set.scala:261)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:168)
	at scala.meta.internal.mtags.SymbolIndexBucket.query(SymbolIndexBucket.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.$anonfun$findSymbolDefinition$1(OnDemandSymbolIndex.scala:141)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.findSymbolDefinition(OnDemandSymbolIndex.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.definition(OnDemandSymbolIndex.scala:48)
	at scala.meta.internal.metals.Docstrings.indexSymbol(Docstrings.scala:118)
	at scala.meta.internal.metals.Docstrings.documentation(Docstrings.scala:44)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:43)
	at scala.meta.internal.mtags.MtagsEnrichments$.symbolDocumentation(MtagsEnrichments.scala:253)
	at scala.meta.internal.pc.printer.MetalsPrinter.paramsDocs$lzyINIT1$1(MetalsPrinter.scala:184)
	at scala.meta.internal.pc.printer.MetalsPrinter.paramsDocs$1(MetalsPrinter.scala:188)
	at scala.meta.internal.pc.printer.MetalsPrinter.$anonfun$6(MetalsPrinter.scala:205)
	at scala.meta.internal.pc.printer.MetalsPrinter.paramLabel(MetalsPrinter.scala:354)
	at scala.meta.internal.pc.printer.MetalsPrinter.$anonfun$5(MetalsPrinter.scala:206)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.pc.printer.MetalsPrinter.label$1$$anonfun$1(MetalsPrinter.scala:209)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.pc.printer.MetalsPrinter.label$1(MetalsPrinter.scala:214)
	at scala.meta.internal.pc.printer.MetalsPrinter.defaultMethodSignature(MetalsPrinter.scala:217)
	at scala.meta.internal.pc.printer.MetalsPrinter.hoverSymbol(MetalsPrinter.scala:115)
	at scala.meta.internal.pc.HoverProvider$.hover(HoverProvider.scala:132)
	at scala.meta.internal.pc.ScalaPresentationCompiler.hover$$anonfun$1(ScalaPresentationCompiler.scala:342)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:146)
	at scala.meta.internal.pc.CompilerAccess.withNonInterruptableCompiler$$anonfun$1(CompilerAccess.scala:132)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:232)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)

Jan. 23, 2024 11:38:08 A.M. scala.meta.internal.mtags.SymbolIndexBucket addMtagsSourceFile
WARNING: Error indexing C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table copy.scala
java.nio.file.NoSuchFileException: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table copy.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:371)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:422)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:415)
	at scala.meta.internal.mtags.Mtags.index(Mtags.scala:67)
	at scala.meta.internal.mtags.Mtags.allSymbols(Mtags.scala:21)
	at scala.meta.internal.mtags.SymbolIndexBucket.allSymbols(SymbolIndexBucket.scala:242)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:253)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:264)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1(SymbolIndexBucket.scala:168)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1$adapted(SymbolIndexBucket.scala:168)
	at scala.collection.immutable.Set$Set3.foreach(Set.scala:261)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:168)
	at scala.meta.internal.mtags.SymbolIndexBucket.query(SymbolIndexBucket.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.$anonfun$findSymbolDefinition$1(OnDemandSymbolIndex.scala:141)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.findSymbolDefinition(OnDemandSymbolIndex.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.definition(OnDemandSymbolIndex.scala:48)
	at scala.meta.internal.metals.Docstrings.indexSymbol(Docstrings.scala:118)
	at scala.meta.internal.metals.Docstrings.documentation(Docstrings.scala:44)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:43)
	at scala.meta.internal.mtags.MtagsEnrichments$.symbolDocumentation(MtagsEnrichments.scala:253)
	at scala.meta.internal.pc.printer.MetalsPrinter.paramsDocs$lzyINIT1$1(MetalsPrinter.scala:184)
	at scala.meta.internal.pc.printer.MetalsPrinter.paramsDocs$1(MetalsPrinter.scala:188)
	at scala.meta.internal.pc.printer.MetalsPrinter.$anonfun$6(MetalsPrinter.scala:205)
	at scala.meta.internal.pc.printer.MetalsPrinter.paramLabel(MetalsPrinter.scala:354)
	at scala.meta.internal.pc.printer.MetalsPrinter.$anonfun$5(MetalsPrinter.scala:206)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.pc.printer.MetalsPrinter.label$1$$anonfun$1(MetalsPrinter.scala:209)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.pc.printer.MetalsPrinter.label$1(MetalsPrinter.scala:214)
	at scala.meta.internal.pc.printer.MetalsPrinter.defaultMethodSignature(MetalsPrinter.scala:217)
	at scala.meta.internal.pc.printer.MetalsPrinter.hoverSymbol(MetalsPrinter.scala:115)
	at scala.meta.internal.pc.HoverProvider$.hover(HoverProvider.scala:132)
	at scala.meta.internal.pc.ScalaPresentationCompiler.hover$$anonfun$1(ScalaPresentationCompiler.scala:342)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:146)
	at scala.meta.internal.pc.CompilerAccess.withNonInterruptableCompiler$$anonfun$1(CompilerAccess.scala:132)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:232)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)

Jan. 23, 2024 11:38:57 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9078
Jan. 23, 2024 1:01:32 P.M. scala.meta.internal.mtags.SymbolIndexBucket addMtagsSourceFile
WARNING: Error indexing C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\TableBody copy.scala
java.nio.file.NoSuchFileException: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\TableBody copy.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:371)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:422)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:415)
	at scala.meta.internal.mtags.Mtags.index(Mtags.scala:67)
	at scala.meta.internal.mtags.Mtags.allSymbols(Mtags.scala:21)
	at scala.meta.internal.mtags.SymbolIndexBucket.allSymbols(SymbolIndexBucket.scala:242)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:253)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$7(SymbolIndexBucket.scala:184)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$7$adapted(SymbolIndexBucket.scala:179)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:576)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:574)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:933)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:903)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:179)
	at scala.meta.internal.mtags.SymbolIndexBucket.query(SymbolIndexBucket.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.$anonfun$findSymbolDefinition$1(OnDemandSymbolIndex.scala:141)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.findSymbolDefinition(OnDemandSymbolIndex.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.definition(OnDemandSymbolIndex.scala:48)
	at scala.meta.internal.metals.Docstrings.indexSymbol(Docstrings.scala:118)
	at scala.meta.internal.metals.Docstrings.documentation(Docstrings.scala:44)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:43)
	at scala.meta.internal.mtags.MtagsEnrichments$.symbolDocumentation(MtagsEnrichments.scala:253)
	at scala.meta.internal.pc.HoverProvider$.$anonfun$3(HoverProvider.scala:137)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.pc.HoverProvider$.hover(HoverProvider.scala:137)
	at scala.meta.internal.pc.ScalaPresentationCompiler.hover$$anonfun$1(ScalaPresentationCompiler.scala:342)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:146)
	at scala.meta.internal.pc.CompilerAccess.withNonInterruptableCompiler$$anonfun$1(CompilerAccess.scala:132)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:232)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)

Jan. 23, 2024 1:01:32 P.M. scala.meta.internal.mtags.SymbolIndexBucket addMtagsSourceFile
WARNING: Error indexing C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\TableBody copy.scala
java.nio.file.NoSuchFileException: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\TableBody copy.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:371)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:422)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:415)
	at scala.meta.internal.mtags.Mtags.index(Mtags.scala:67)
	at scala.meta.internal.mtags.Mtags.allSymbols(Mtags.scala:21)
	at scala.meta.internal.mtags.SymbolIndexBucket.allSymbols(SymbolIndexBucket.scala:242)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:253)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:264)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$7(SymbolIndexBucket.scala:184)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$7$adapted(SymbolIndexBucket.scala:179)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:576)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:574)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:933)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:903)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:179)
	at scala.meta.internal.mtags.SymbolIndexBucket.query(SymbolIndexBucket.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.$anonfun$findSymbolDefinition$1(OnDemandSymbolIndex.scala:141)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.findSymbolDefinition(OnDemandSymbolIndex.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.definition(OnDemandSymbolIndex.scala:48)
	at scala.meta.internal.metals.Docstrings.indexSymbol(Docstrings.scala:118)
	at scala.meta.internal.metals.Docstrings.documentation(Docstrings.scala:44)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:43)
	at scala.meta.internal.mtags.MtagsEnrichments$.symbolDocumentation(MtagsEnrichments.scala:253)
	at scala.meta.internal.pc.HoverProvider$.$anonfun$3(HoverProvider.scala:137)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.pc.HoverProvider$.hover(HoverProvider.scala:137)
	at scala.meta.internal.pc.ScalaPresentationCompiler.hover$$anonfun$1(ScalaPresentationCompiler.scala:342)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:146)
	at scala.meta.internal.pc.CompilerAccess.withNonInterruptableCompiler$$anonfun$1(CompilerAccess.scala:132)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:232)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)

Jan. 23, 2024 1:01:32 P.M. scala.meta.internal.mtags.SymbolIndexBucket addMtagsSourceFile
WARNING: Error indexing C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\TableBody copy.scala
java.nio.file.NoSuchFileException: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\TableBody copy.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:371)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:422)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:415)
	at scala.meta.internal.mtags.Mtags.index(Mtags.scala:67)
	at scala.meta.internal.mtags.Mtags.allSymbols(Mtags.scala:21)
	at scala.meta.internal.mtags.SymbolIndexBucket.allSymbols(SymbolIndexBucket.scala:242)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:253)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$7(SymbolIndexBucket.scala:184)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$7$adapted(SymbolIndexBucket.scala:179)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:576)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:574)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:933)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:903)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:179)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$8(SymbolIndexBucket.scala:191)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:191)
	at scala.meta.internal.mtags.SymbolIndexBucket.query(SymbolIndexBucket.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.$anonfun$findSymbolDefinition$1(OnDemandSymbolIndex.scala:141)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.findSymbolDefinition(OnDemandSymbolIndex.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.definition(OnDemandSymbolIndex.scala:48)
	at scala.meta.internal.metals.Docstrings.indexSymbol(Docstrings.scala:118)
	at scala.meta.internal.metals.Docstrings.documentation(Docstrings.scala:44)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:43)
	at scala.meta.internal.mtags.MtagsEnrichments$.symbolDocumentation(MtagsEnrichments.scala:253)
	at scala.meta.internal.pc.HoverProvider$.$anonfun$3(HoverProvider.scala:137)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.pc.HoverProvider$.hover(HoverProvider.scala:137)
	at scala.meta.internal.pc.ScalaPresentationCompiler.hover$$anonfun$1(ScalaPresentationCompiler.scala:342)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:146)
	at scala.meta.internal.pc.CompilerAccess.withNonInterruptableCompiler$$anonfun$1(CompilerAccess.scala:132)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:232)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)

Jan. 23, 2024 1:01:32 P.M. scala.meta.internal.mtags.SymbolIndexBucket addMtagsSourceFile
WARNING: Error indexing C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\TableBody copy.scala
java.nio.file.NoSuchFileException: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\TableBody copy.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:371)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:422)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:415)
	at scala.meta.internal.mtags.Mtags.index(Mtags.scala:67)
	at scala.meta.internal.mtags.Mtags.allSymbols(Mtags.scala:21)
	at scala.meta.internal.mtags.SymbolIndexBucket.allSymbols(SymbolIndexBucket.scala:242)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:253)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:264)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$7(SymbolIndexBucket.scala:184)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$7$adapted(SymbolIndexBucket.scala:179)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:576)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:574)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:933)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:903)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:179)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$8(SymbolIndexBucket.scala:191)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:191)
	at scala.meta.internal.mtags.SymbolIndexBucket.query(SymbolIndexBucket.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.$anonfun$findSymbolDefinition$1(OnDemandSymbolIndex.scala:141)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.findSymbolDefinition(OnDemandSymbolIndex.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.definition(OnDemandSymbolIndex.scala:48)
	at scala.meta.internal.metals.Docstrings.indexSymbol(Docstrings.scala:118)
	at scala.meta.internal.metals.Docstrings.documentation(Docstrings.scala:44)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:43)
	at scala.meta.internal.mtags.MtagsEnrichments$.symbolDocumentation(MtagsEnrichments.scala:253)
	at scala.meta.internal.pc.HoverProvider$.$anonfun$3(HoverProvider.scala:137)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.pc.HoverProvider$.hover(HoverProvider.scala:137)
	at scala.meta.internal.pc.ScalaPresentationCompiler.hover$$anonfun$1(ScalaPresentationCompiler.scala:342)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:146)
	at scala.meta.internal.pc.CompilerAccess.withNonInterruptableCompiler$$anonfun$1(CompilerAccess.scala:132)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:232)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)

Jan. 23, 2024 1:01:32 P.M. scala.meta.internal.mtags.SymbolIndexBucket addMtagsSourceFile
WARNING: Error indexing C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\TableBody copy.scala
java.nio.file.NoSuchFileException: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\TableBody copy.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:371)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:422)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:415)
	at scala.meta.internal.mtags.Mtags.index(Mtags.scala:67)
	at scala.meta.internal.mtags.Mtags.allSymbols(Mtags.scala:21)
	at scala.meta.internal.mtags.SymbolIndexBucket.allSymbols(SymbolIndexBucket.scala:242)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:253)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$7(SymbolIndexBucket.scala:184)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$7$adapted(SymbolIndexBucket.scala:179)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:576)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:574)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:933)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:903)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:179)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$8(SymbolIndexBucket.scala:191)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:191)
	at scala.meta.internal.mtags.SymbolIndexBucket.query(SymbolIndexBucket.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.$anonfun$findSymbolDefinition$1(OnDemandSymbolIndex.scala:141)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.findSymbolDefinition(OnDemandSymbolIndex.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.definition(OnDemandSymbolIndex.scala:48)
	at scala.meta.internal.metals.Docstrings.indexSymbol(Docstrings.scala:118)
	at scala.meta.internal.metals.Docstrings.documentation(Docstrings.scala:44)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:43)
	at scala.meta.internal.mtags.MtagsEnrichments$.symbolDocumentation(MtagsEnrichments.scala:253)
	at scala.meta.internal.pc.HoverProvider$.$anonfun$3(HoverProvider.scala:137)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.pc.HoverProvider$.hover(HoverProvider.scala:137)
	at scala.meta.internal.pc.ScalaPresentationCompiler.hover$$anonfun$1(ScalaPresentationCompiler.scala:342)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:146)
	at scala.meta.internal.pc.CompilerAccess.withNonInterruptableCompiler$$anonfun$1(CompilerAccess.scala:132)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:232)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)

Jan. 23, 2024 1:01:32 P.M. scala.meta.internal.mtags.SymbolIndexBucket addMtagsSourceFile
WARNING: Error indexing C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\TableBody copy.scala
java.nio.file.NoSuchFileException: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\TableBody copy.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:371)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:422)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:415)
	at scala.meta.internal.mtags.Mtags.index(Mtags.scala:67)
	at scala.meta.internal.mtags.Mtags.allSymbols(Mtags.scala:21)
	at scala.meta.internal.mtags.SymbolIndexBucket.allSymbols(SymbolIndexBucket.scala:242)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:253)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:264)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$7(SymbolIndexBucket.scala:184)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$7$adapted(SymbolIndexBucket.scala:179)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:576)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:574)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:933)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:903)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:179)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$8(SymbolIndexBucket.scala:191)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:191)
	at scala.meta.internal.mtags.SymbolIndexBucket.query(SymbolIndexBucket.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.$anonfun$findSymbolDefinition$1(OnDemandSymbolIndex.scala:141)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.findSymbolDefinition(OnDemandSymbolIndex.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.definition(OnDemandSymbolIndex.scala:48)
	at scala.meta.internal.metals.Docstrings.indexSymbol(Docstrings.scala:118)
	at scala.meta.internal.metals.Docstrings.documentation(Docstrings.scala:44)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:43)
	at scala.meta.internal.mtags.MtagsEnrichments$.symbolDocumentation(MtagsEnrichments.scala:253)
	at scala.meta.internal.pc.HoverProvider$.$anonfun$3(HoverProvider.scala:137)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.pc.HoverProvider$.hover(HoverProvider.scala:137)
	at scala.meta.internal.pc.ScalaPresentationCompiler.hover$$anonfun$1(ScalaPresentationCompiler.scala:342)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:146)
	at scala.meta.internal.pc.CompilerAccess.withNonInterruptableCompiler$$anonfun$1(CompilerAccess.scala:132)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:232)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)

Jan. 23, 2024 1:01:40 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9137
Jan. 23, 2024 1:01:46 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9161
2024.01.23 13:03:09 WARN  Using indexes to guess the definition of TableHeader
2024.01.23 13:04:48 WARN  Using indexes to guess the definition of RowData
2024.01.23 13:06:35 WARN  Using indexes to guess the definition of SortOrder
2024.01.23 13:06:45 WARN  Using indexes to guess the definition of dom
2024.01.23 13:07:14 WARN  Using indexes to guess the definition of Ascending
2024.01.23 13:07:14 WARN  Using indexes to guess the definition of Ascending
2024.01.23 13:07:27 WARN  Using indexes to guess the definition of onHeaderClick
2024.01.23 13:07:28 WARN  Using indexes to guess the definition of onHeaderClick
2024.01.23 13:07:52 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 13:07:54 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 13:08:11 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 13:08:12 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 13:08:13 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 13:08:13 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 13:08:13 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 13:08:13 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
Jan. 23, 2024 1:41:23 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10407
2024.01.23 13:43:05 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
Jan. 23, 2024 1:43:11 P.M. scala.meta.internal.mtags.SymbolIndexBucket addMtagsSourceFile
WARNING: Error indexing C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Toolbar.scala
java.nio.file.NoSuchFileException: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Toolbar.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:371)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:422)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:415)
	at scala.meta.internal.mtags.Mtags.index(Mtags.scala:67)
	at scala.meta.internal.mtags.Mtags.allSymbols(Mtags.scala:21)
	at scala.meta.internal.mtags.SymbolIndexBucket.allSymbols(SymbolIndexBucket.scala:242)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:253)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1(SymbolIndexBucket.scala:168)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1$adapted(SymbolIndexBucket.scala:168)
	at scala.collection.immutable.Set$Set2.foreach(Set.scala:210)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:168)
	at scala.meta.internal.mtags.SymbolIndexBucket.query(SymbolIndexBucket.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.$anonfun$findSymbolDefinition$1(OnDemandSymbolIndex.scala:141)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.findSymbolDefinition(OnDemandSymbolIndex.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.definition(OnDemandSymbolIndex.scala:48)
	at scala.meta.internal.metals.Docstrings.indexSymbol(Docstrings.scala:118)
	at scala.meta.internal.metals.Docstrings.documentation(Docstrings.scala:44)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:43)
	at scala.meta.internal.mtags.MtagsEnrichments$.symbolDocumentation(MtagsEnrichments.scala:253)
	at scala.meta.internal.pc.printer.MetalsPrinter.paramsDocs$lzyINIT1$1(MetalsPrinter.scala:184)
	at scala.meta.internal.pc.printer.MetalsPrinter.paramsDocs$1(MetalsPrinter.scala:188)
	at scala.meta.internal.pc.printer.MetalsPrinter.$anonfun$6(MetalsPrinter.scala:205)
	at scala.meta.internal.pc.printer.MetalsPrinter.paramLabel(MetalsPrinter.scala:354)
	at scala.meta.internal.pc.printer.MetalsPrinter.$anonfun$5(MetalsPrinter.scala:206)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.pc.printer.MetalsPrinter.label$1$$anonfun$1(MetalsPrinter.scala:209)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.pc.printer.MetalsPrinter.label$1(MetalsPrinter.scala:214)
	at scala.meta.internal.pc.printer.MetalsPrinter.defaultMethodSignature(MetalsPrinter.scala:217)
	at scala.meta.internal.pc.printer.MetalsPrinter.hoverSymbol(MetalsPrinter.scala:115)
	at scala.meta.internal.pc.HoverProvider$.hover(HoverProvider.scala:132)
	at scala.meta.internal.pc.ScalaPresentationCompiler.hover$$anonfun$1(ScalaPresentationCompiler.scala:342)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:146)
	at scala.meta.internal.pc.CompilerAccess.withNonInterruptableCompiler$$anonfun$1(CompilerAccess.scala:132)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:232)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)

Jan. 23, 2024 1:43:11 P.M. scala.meta.internal.mtags.SymbolIndexBucket addMtagsSourceFile
WARNING: Error indexing C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Toolbar.scala
java.nio.file.NoSuchFileException: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Toolbar.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:371)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:422)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:415)
	at scala.meta.internal.mtags.Mtags.index(Mtags.scala:67)
	at scala.meta.internal.mtags.Mtags.allSymbols(Mtags.scala:21)
	at scala.meta.internal.mtags.SymbolIndexBucket.allSymbols(SymbolIndexBucket.scala:242)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:253)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:264)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1(SymbolIndexBucket.scala:168)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1$adapted(SymbolIndexBucket.scala:168)
	at scala.collection.immutable.Set$Set2.foreach(Set.scala:210)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:168)
	at scala.meta.internal.mtags.SymbolIndexBucket.query(SymbolIndexBucket.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.$anonfun$findSymbolDefinition$1(OnDemandSymbolIndex.scala:141)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.findSymbolDefinition(OnDemandSymbolIndex.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.definition(OnDemandSymbolIndex.scala:48)
	at scala.meta.internal.metals.Docstrings.indexSymbol(Docstrings.scala:118)
	at scala.meta.internal.metals.Docstrings.documentation(Docstrings.scala:44)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:43)
	at scala.meta.internal.mtags.MtagsEnrichments$.symbolDocumentation(MtagsEnrichments.scala:253)
	at scala.meta.internal.pc.printer.MetalsPrinter.paramsDocs$lzyINIT1$1(MetalsPrinter.scala:184)
	at scala.meta.internal.pc.printer.MetalsPrinter.paramsDocs$1(MetalsPrinter.scala:188)
	at scala.meta.internal.pc.printer.MetalsPrinter.$anonfun$6(MetalsPrinter.scala:205)
	at scala.meta.internal.pc.printer.MetalsPrinter.paramLabel(MetalsPrinter.scala:354)
	at scala.meta.internal.pc.printer.MetalsPrinter.$anonfun$5(MetalsPrinter.scala:206)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.pc.printer.MetalsPrinter.label$1$$anonfun$1(MetalsPrinter.scala:209)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.pc.printer.MetalsPrinter.label$1(MetalsPrinter.scala:214)
	at scala.meta.internal.pc.printer.MetalsPrinter.defaultMethodSignature(MetalsPrinter.scala:217)
	at scala.meta.internal.pc.printer.MetalsPrinter.hoverSymbol(MetalsPrinter.scala:115)
	at scala.meta.internal.pc.HoverProvider$.hover(HoverProvider.scala:132)
	at scala.meta.internal.pc.ScalaPresentationCompiler.hover$$anonfun$1(ScalaPresentationCompiler.scala:342)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:146)
	at scala.meta.internal.pc.CompilerAccess.withNonInterruptableCompiler$$anonfun$1(CompilerAccess.scala:132)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:232)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)

2024.01.23 13:43:13 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 13:46:46 WARN  Could not find semantic tokens for: file:///C:/Users/yashb/Documents/vscode-laminar-vite-extension/webview-ui/src/main/scala/components/toolbar/SearchField.scala
2024.01.23 13:47:29 WARN  Using indexes to guess the definition of SearchInput
2024.01.23 13:47:43 WARN  Using indexes to guess the definition of searchGrid
2024.01.23 13:47:43 WARN  Using indexes to guess the definition of searchGrid
2024.01.23 13:48:38 WARN  Using indexes to guess the definition of SearchInput
2024.01.23 13:50:04 WARN  Using indexes to guess the definition of string
2024.01.23 13:50:04 WARN  Using indexes to guess the definition of string
2024.01.23 13:50:11 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 13:50:31 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 13:50:31 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 13:50:31 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 13:50:33 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 13:50:34 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 13:50:34 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 13:50:34 WARN  Using indexes to guess the definition of renderToolbar
2024.01.23 13:50:37 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 13:50:37 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 13:50:37 WARN  Using indexes to guess the definition of renderToolbar
2024.01.23 13:50:37 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 13:50:37 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 13:50:37 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 13:50:37 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 13:50:37 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 13:50:37 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 13:50:37 WARN  Using indexes to guess the definition of renderToolbar
2024.01.23 13:50:37 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 13:50:37 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 13:50:38 WARN  Using indexes to guess the definition of renderToolbar
2024.01.23 13:50:40 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 13:50:44 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 13:50:45 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 13:53:38 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\toolbar\Toolbar.scala
scala.meta.tokenizers.TokenizeException: <input>:30: error: unclosed character literal
        Text("Show", as = '').render(),
                          ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.23 13:53:39 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\toolbar\Toolbar.scala
scala.meta.tokenizers.TokenizeException: <input>:30: error: unclosed character literal
        Text("Show", as = '').render(),
                          ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchSingleQuote$1(LegacyScanner.scala:407)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:412)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.23 13:59:48 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\toolbar\Select.scala
scala.meta.tokenizers.TokenizeException: <input>:9: error: unclosed string literal
case class Select(") extends AuroraElement {
                  ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getStringLit(LegacyScanner.scala:553)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchDoubleQuote$1(LegacyScanner.scala:372)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:376)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.23 14:00:22 WARN  Using indexes to guess the definition of searchByOption
Jan. 23, 2024 2:00:47 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 12463
2024.01.23 14:01:13 WARN  Using indexes to guess the definition of searchByOption
Jan. 23, 2024 2:01:30 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 12643
2024.01.23 14:02:40 WARN  Could not find semantic tokens for: file:///C:/Users/yashb/Documents/vscode-laminar-vite-extension/webview-ui/src/main/scala/components/button/Button.scala
2024.01.23 14:03:39 WARN  Using indexes to guess the definition of AuroraElement
2024.01.23 14:04:33 WARN  Using indexes to guess the definition of Button
2024.01.23 14:04:34 WARN  Using indexes to guess the definition of Button
2024.01.23 14:04:36 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java

Uri: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:703)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	jdk.internal.reflect.GeneratedMethodAccessor20.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 23, 2024 2:04:36 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.desktop/java/awt/Button.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 1995, 2015, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.awt;\n\nimport java.awt.peer.ButtonPeer;\nimport java.beans.BeanProperty;\nimport java.util.EventListener;\nimport java.awt.event.*;\nimport java.io.ObjectOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.IOException;\nimport javax.accessibility.*;\n\n/**\n * This class creates a labeled button. The application can cause\n * some action to happen when the button is pushed. This image\n * depicts three views of a \"{@code Quit}\" button as it appears\n * under the Solaris operating system:\n * \u003cp\u003e\n * \u003cimg src\u003d\"doc-files/Button-1.gif\" alt\u003d\"The following context describes the graphic\"\n * style\u003d\"float:center; margin: 7px 10px;\"\u003e\n * \u003cp\u003e\n * The first view shows the button as it appears normally.\n * The second view shows the button\n * when it has input focus. Its outline is darkened to let the\n * user know that it is an active object. The third view shows the\n * button when the user clicks the mouse over the button, and thus\n * requests that an action be performed.\n * \u003cp\u003e\n * The gesture of clicking on a button with the mouse\n * is associated with one instance of {@code ActionEvent},\n * which is sent out when the mouse is both pressed and released\n * over the button. If an application is interested in knowing\n * when the button has been pressed but not released, as a separate\n * gesture, it can specialize {@code processMouseEvent},\n * or it can register itself as a listener for mouse events by\n * calling {@code addMouseListener}. Both of these methods are\n * defined by {@code Component}, the abstract superclass of\n * all components.\n * \u003cp\u003e\n * When a button is pressed and released, AWT sends an instance\n * of {@code ActionEvent} to the button, by calling\n * {@code processEvent} on the button. The button\u0027s\n * {@code processEvent} method receives all events\n * for the button; it passes an action event along by\n * calling its own {@code processActionEvent} method.\n * The latter method passes the action event on to any action\n * listeners that have registered an interest in action\n * events generated by this button.\n * \u003cp\u003e\n * If an application wants to perform some action based on\n * a button being pressed and released, it should implement\n * {@code ActionListener} and register the new listener\n * to receive events from this button, by calling the button\u0027s\n * {@code addActionListener} method. The application can\n * make use of the button\u0027s action command as a messaging protocol.\n *\n * @author      Sami Shaio\n * @see         java.awt.event.ActionEvent\n * @see         java.awt.event.ActionListener\n * @see         java.awt.Component#processMouseEvent\n * @see         java.awt.Component#addMouseListener\n * @since       1.0\n */\npublic class Button extends Component implements Accessible {\n\n    /**\n     * The button\u0027s label.  This value may be null.\n     * @serial\n     * @see #getLabel()\n     * @see #setLabel(String)\n     */\n    String label;\n\n    /**\n     * The action to be performed once a button has been\n     * pressed.  This value may be null.\n     * @serial\n     * @see #getActionCommand()\n     * @see #setActionCommand(String)\n     */\n    String actionCommand;\n\n    transient ActionListener actionListener;\n\n    private static final String base \u003d \"button\";\n    private static int nameCounter \u003d 0;\n\n    /*\n     * JDK 1.1 serialVersionUID\n     */\n    private static final long serialVersionUID \u003d -8774683716313001058L;\n\n\n    static {\n        /* ensure that the necessary native libraries are loaded */\n        Toolkit.loadLibraries();\n        if (!GraphicsEnvironment.isHeadless()) {\n            initIDs();\n        }\n    }\n\n    /**\n     * Initialize JNI field and method IDs for fields that may be\n     * accessed from C.\n     */\n    private static native void initIDs();\n\n    /**\n     * Constructs a button with an empty string for its label.\n     *\n     * @exception HeadlessException if GraphicsEnvironment.isHeadless()\n     * returns true\n     * @see java.awt.GraphicsEnvironment#isHeadless\n     */\n    public Button() throws HeadlessException {\n        this(\"\");\n    }\n\n    /**\n     * Constructs a button with the specified label.\n     *\n     * @param label  a string label for the button, or\n     *               {@code null} for no label\n     * @exception HeadlessException if GraphicsEnvironment.isHeadless()\n     * returns true\n     * @see java.awt.GraphicsEnvironment#isHeadless\n     */\n    public Button(String label) throws HeadlessException {\n        GraphicsEnvironment.checkHeadless();\n        this.label \u003d label;\n    }\n\n    /**\n     * Construct a name for this component.  Called by getName() when the\n     * name is null.\n     */\n    String constructComponentName() {\n        synchronized (Button.class) {\n            return base + nameCounter++;\n        }\n    }\n\n    /**\n     * Creates the peer of the button.  The button\u0027s peer allows the\n     * application to change the look of the button without changing\n     * its functionality.\n     *\n     * @see     java.awt.Component#getToolkit()\n     */\n    public void addNotify() {\n        synchronized(getTreeLock()) {\n            if (peer \u003d\u003d null)\n                peer \u003d getComponentFactory().createButton(this);\n            super.addNotify();\n        }\n    }\n\n    /**\n     * Gets the label of this button.\n     *\n     * @return    the button\u0027s label, or {@code null}\n     *                if the button has no label.\n     * @see       java.awt.Button#setLabel\n     */\n    public String getLabel() {\n        return label;\n    }\n\n    /**\n     * Sets the button\u0027s label to be the specified string.\n     *\n     * @param     label   the new label, or {@code null}\n     *                if the button has no label.\n     * @see       java.awt.Button#getLabel\n     */\n    public void setLabel(String label) {\n        boolean testvalid \u003d false;\n\n        synchronized (this) {\n            if (label !\u003d this.label \u0026\u0026 (this.label \u003d\u003d null ||\n                                        !this.label.equals(label))) {\n                this.label \u003d label;\n                ButtonPeer peer \u003d (ButtonPeer)this.peer;\n                if (peer !\u003d null) {\n                    peer.setLabel(label);\n                }\n                testvalid \u003d true;\n            }\n        }\n\n        // This could change the preferred size of the Component.\n        if (testvalid) {\n            invalidateIfValid();\n        }\n    }\n\n    /**\n     * Sets the command name for the action event fired\n     * by this button. By default this action command is\n     * set to match the label of the button.\n     *\n     * @param     command  a string used to set the button\u0027s\n     *                  action command.\n     *            If the string is {@code null} then the action command\n     *            is set to match the label of the button.\n     * @see       java.awt.event.ActionEvent\n     * @since     1.1\n     */\n    public void setActionCommand(String command) {\n        actionCommand \u003d command;\n    }\n\n    /**\n     * Returns the command name of the action event fired by this button.\n     * If the command name is {@code null} (default) then this method\n     * returns the label of the button.\n     *\n     * @return the action command name (or label) for this button\n     */\n    public String getActionCommand() {\n        return (actionCommand \u003d\u003d null? label : actionCommand);\n    }\n\n    /**\n     * Adds the specified action listener to receive action events from\n     * this button. Action events occur when a user presses or releases\n     * the mouse over this button.\n     * If l is null, no exception is thrown and no action is performed.\n     * \u003cp\u003eRefer to \u003ca href\u003d\"doc-files/AWTThreadIssues.html#ListenersThreads\"\n     * \u003eAWT Threading Issues\u003c/a\u003e for details on AWT\u0027s threading model.\n     *\n     * @param         l the action listener\n     * @see           #removeActionListener\n     * @see           #getActionListeners\n     * @see           java.awt.event.ActionListener\n     * @since         1.1\n     */\n    public synchronized void addActionListener(ActionListener l) {\n        if (l \u003d\u003d null) {\n            return;\n        }\n        actionListener \u003d AWTEventMulticaster.add(actionListener, l);\n        newEventsOnly \u003d true;\n    }\n\n    /**\n     * Removes the specified action listener so that it no longer\n     * receives action events from this button. Action events occur\n     * when a user presses or releases the mouse over this button.\n     * If l is null, no exception is thrown and no action is performed.\n     * \u003cp\u003eRefer to \u003ca href\u003d\"doc-files/AWTThreadIssues.html#ListenersThreads\"\n     * \u003eAWT Threading Issues\u003c/a\u003e for details on AWT\u0027s threading model.\n     *\n     * @param           l     the action listener\n     * @see             #addActionListener\n     * @see             #getActionListeners\n     * @see             java.awt.event.ActionListener\n     * @since           1.1\n     */\n    public synchronized void removeActionListener(ActionListener l) {\n        if (l \u003d\u003d null) {\n            return;\n        }\n        actionListener \u003d AWTEventMulticaster.remove(actionListener, l);\n    }\n\n    /**\n     * Returns an array of all the action listeners\n     * registered on this button.\n     *\n     * @return all of this button\u0027s {@code ActionListener}s\n     *         or an empty array if no action\n     *         listeners are currently registered\n     *\n     * @see             #addActionListener\n     * @see             #removeActionListener\n     * @see             java.awt.event.ActionListener\n     * @since 1.4\n     */\n    public synchronized ActionListener[] getActionListeners() {\n        return getListeners(ActionListener.class);\n    }\n\n    /**\n     * Returns an array of all the objects currently registered\n     * as \u003ccode\u003e\u003cem\u003eFoo\u003c/em\u003eListener\u003c/code\u003es\n     * upon this {@code Button}.\n     * \u003ccode\u003e\u003cem\u003eFoo\u003c/em\u003eListener\u003c/code\u003es are registered using the\n     * \u003ccode\u003eadd\u003cem\u003eFoo\u003c/em\u003eListener\u003c/code\u003e method.\n     *\n     * \u003cp\u003e\n     * You can specify the {@code listenerType} argument\n     * with a class literal, such as\n     * \u003ccode\u003e\u003cem\u003eFoo\u003c/em\u003eListener.class\u003c/code\u003e.\n     * For example, you can query a\n     * {@code Button b}\n     * for its action listeners with the following code:\n     *\n     * \u003cpre\u003eActionListener[] als \u003d (ActionListener[])(b.getListeners(ActionListener.class));\u003c/pre\u003e\n     *\n     * If no such listeners exist, this method returns an empty array.\n     *\n     * @param listenerType the type of listeners requested; this parameter\n     *          should specify an interface that descends from\n     *          {@code java.util.EventListener}\n     * @return an array of all objects registered as\n     *          \u003ccode\u003e\u003cem\u003eFoo\u003c/em\u003eListener\u003c/code\u003es on this button,\n     *          or an empty array if no such\n     *          listeners have been added\n     * @exception ClassCastException if {@code listenerType}\n     *          doesn\u0027t specify a class or interface that implements\n     *          {@code java.util.EventListener}\n     *\n     * @see #getActionListeners\n     * @since 1.3\n     */\n    public \u003cT extends EventListener\u003e T[] getListeners(Class\u003cT\u003e listenerType) {\n        EventListener l \u003d null;\n        if  (listenerType \u003d\u003d ActionListener.class) {\n            l \u003d actionListener;\n        } else {\n            return super.getListeners(listenerType);\n        }\n        return AWTEventMulticaster.getListeners(l, listenerType);\n    }\n\n    // REMIND: remove when filtering is done at lower level\n    boolean eventEnabled(AWTEvent e) {\n        if (e.id \u003d\u003d ActionEvent.ACTION_PERFORMED) {\n            if ((eventMask \u0026 AWTEvent.ACTION_EVENT_MASK) !\u003d 0 ||\n                actionListener !\u003d null) {\n                return true;\n            }\n            return false;\n        }\n        return super.eventEnabled(e);\n    }\n\n    /**\n     * Processes events on this button. If an event is\n     * an instance of {@code ActionEvent}, this method invokes\n     * the {@code processActionEvent} method. Otherwise,\n     * it invokes {@code processEvent} on the superclass.\n     * \u003cp\u003eNote that if the event parameter is {@code null}\n     * the behavior is unspecified and may result in an\n     * exception.\n     *\n     * @param        e the event\n     * @see          java.awt.event.ActionEvent\n     * @see          java.awt.Button#processActionEvent\n     * @since        1.1\n     */\n    protected void processEvent(AWTEvent e) {\n        if (e instanceof ActionEvent) {\n            processActionEvent((ActionEvent)e);\n            return;\n        }\n        super.processEvent(e);\n    }\n\n    /**\n     * Processes action events occurring on this button\n     * by dispatching them to any registered\n     * {@code ActionListener} objects.\n     * \u003cp\u003e\n     * This method is not called unless action events are\n     * enabled for this button. Action events are enabled\n     * when one of the following occurs:\n     * \u003cul\u003e\n     * \u003cli\u003eAn {@code ActionListener} object is registered\n     * via {@code addActionListener}.\n     * \u003cli\u003eAction events are enabled via {@code enableEvents}.\n     * \u003c/ul\u003e\n     * \u003cp\u003eNote that if the event parameter is {@code null}\n     * the behavior is unspecified and may result in an\n     * exception.\n     *\n     * @param       e the action event\n     * @see         java.awt.event.ActionListener\n     * @see         java.awt.Button#addActionListener\n     * @see         java.awt.Component#enableEvents\n     * @since       1.1\n     */\n    protected void processActionEvent(ActionEvent e) {\n        ActionListener listener \u003d actionListener;\n        if (listener !\u003d null) {\n            listener.actionPerformed(e);\n        }\n    }\n\n    /**\n     * Returns a string representing the state of this {@code Button}.\n     * This method is intended to be used only for debugging purposes, and the\n     * content and format of the returned string may vary between\n     * implementations. The returned string may be empty but may not be\n     * {@code null}.\n     *\n     * @return     the parameter string of this button\n     */\n    protected String paramString() {\n        return super.paramString() + \",label\u003d\" + label;\n    }\n\n\n    /* Serialization support.\n     */\n\n    /*\n     * Button Serial Data Version.\n     * @serial\n     */\n    private int buttonSerializedDataVersion \u003d 1;\n\n    /**\n     * Writes default serializable fields to stream.  Writes\n     * a list of serializable {@code ActionListeners}\n     * as optional data.  The non-serializable\n     * {@code ActionListeners} are detected and\n     * no attempt is made to serialize them.\n     *\n     * @serialData {@code null} terminated sequence of 0 or\n     *   more pairs: the pair consists of a {@code String}\n     *   and an {@code Object}; the {@code String}\n     *   indicates the type of object and is one of the following:\n     *   {@code actionListenerK} indicating an\n     *     {@code ActionListener} object\n     *\n     * @param s the {@code ObjectOutputStream} to write\n     * @see AWTEventMulticaster#save(ObjectOutputStream, String, EventListener)\n     * @see java.awt.Component#actionListenerK\n     * @see #readObject(ObjectInputStream)\n     */\n    private void writeObject(ObjectOutputStream s)\n      throws IOException\n    {\n      s.defaultWriteObject();\n\n      AWTEventMulticaster.save(s, actionListenerK, actionListener);\n      s.writeObject(null);\n    }\n\n    /**\n     * Reads the {@code ObjectInputStream} and if\n     * it isn\u0027t {@code null} adds a listener to\n     * receive action events fired by the button.\n     * Unrecognized keys or values will be ignored.\n     *\n     * @param s the {@code ObjectInputStream} to read\n     * @exception HeadlessException if\n     *   {@code GraphicsEnvironment.isHeadless} returns\n     *   {@code true}\n     * @serial\n     * @see #removeActionListener(ActionListener)\n     * @see #addActionListener(ActionListener)\n     * @see java.awt.GraphicsEnvironment#isHeadless\n     * @see #writeObject(ObjectOutputStream)\n     */\n    private void readObject(ObjectInputStream s)\n      throws ClassNotFoundException, IOException, HeadlessException\n    {\n      GraphicsEnvironment.checkHeadless();\n      s.defaultReadObject();\n\n      Object keyOrNull;\n      while(null !\u003d (keyOrNull \u003d s.readObject())) {\n        String key \u003d ((String)keyOrNull).intern();\n\n        if (actionListenerK \u003d\u003d key)\n          addActionListener((ActionListener)(s.readObject()));\n\n        else // skip value for unrecognized key\n          s.readObject();\n      }\n    }\n\n\n/////////////////\n// Accessibility support\n////////////////\n\n    /**\n     * Gets the {@code AccessibleContext} associated with\n     * this {@code Button}. For buttons, the\n     * {@code AccessibleContext} takes the form of an\n     * {@code AccessibleAWTButton}.\n     * A new {@code AccessibleAWTButton} instance is\n     * created if necessary.\n     *\n     * @return an {@code AccessibleAWTButton} that serves as the\n     *         {@code AccessibleContext} of this {@code Button}\n     * @since 1.3\n     */\n    @BeanProperty(expert \u003d true, description\n            \u003d \"The AccessibleContext associated with this Button.\")\n    public AccessibleContext getAccessibleContext() {\n        if (accessibleContext \u003d\u003d null) {\n            accessibleContext \u003d new AccessibleAWTButton();\n        }\n        return accessibleContext;\n    }\n\n    /**\n     * This class implements accessibility support for the\n     * {@code Button} class.  It provides an implementation of the\n     * Java Accessibility API appropriate to button user-interface elements.\n     * @since 1.3\n     */\n    protected class AccessibleAWTButton extends AccessibleAWTComponent\n        implements AccessibleAction, AccessibleValue\n    {\n        /*\n         * JDK 1.3 serialVersionUID\n         */\n        private static final long serialVersionUID \u003d -5932203980244017102L;\n\n        /**\n         * Get the accessible name of this object.\n         *\n         * @return the localized name of the object -- can be null if this\n         * object does not have a name\n         */\n        public String getAccessibleName() {\n            if (accessibleName !\u003d null) {\n                return accessibleName;\n            } else {\n                if (getLabel() \u003d\u003d null) {\n                    return super.getAccessibleName();\n                } else {\n                    return getLabel();\n                }\n            }\n        }\n\n        /**\n         * Get the AccessibleAction associated with this object.  In the\n         * implementation of the Java Accessibility API for this class,\n         * return this object, which is responsible for implementing the\n         * AccessibleAction interface on behalf of itself.\n         *\n         * @return this object\n         */\n        public AccessibleAction getAccessibleAction() {\n            return this;\n        }\n\n        /**\n         * Get the AccessibleValue associated with this object.  In the\n         * implementation of the Java Accessibility API for this class,\n         * return this object, which is responsible for implementing the\n         * AccessibleValue interface on behalf of itself.\n         *\n         * @return this object\n         */\n        public AccessibleValue getAccessibleValue() {\n            return this;\n        }\n\n        /**\n         * Returns the number of Actions available in this object.  The\n         * default behavior of a button is to have one action - toggle\n         * the button.\n         *\n         * @return 1, the number of Actions in this object\n         */\n        public int getAccessibleActionCount() {\n            return 1;\n        }\n\n        /**\n         * Return a description of the specified action of the object.\n         *\n         * @param i zero-based index of the actions\n         */\n        public String getAccessibleActionDescription(int i) {\n            if (i \u003d\u003d 0) {\n                // [[[PENDING:  WDW -- need to provide a localized string]]]\n                return \"click\";\n            } else {\n                return null;\n            }\n        }\n\n        /**\n         * Perform the specified Action on the object\n         *\n         * @param i zero-based index of actions\n         * @return true if the action was performed; else false.\n         */\n        public boolean doAccessibleAction(int i) {\n            if (i \u003d\u003d 0) {\n                // Simulate a button click\n                Toolkit.getEventQueue().postEvent(\n                        new ActionEvent(Button.this,\n                                        ActionEvent.ACTION_PERFORMED,\n                                        Button.this.getActionCommand()));\n                return true;\n            } else {\n                return false;\n            }\n        }\n\n        /**\n         * Get the value of this object as a Number.\n         *\n         * @return An Integer of 0 if this isn\u0027t selected or an Integer of 1 if\n         * this is selected.\n         * @see javax.swing.AbstractButton#isSelected()\n         */\n        public Number getCurrentAccessibleValue() {\n            return Integer.valueOf(0);\n        }\n\n        /**\n         * Set the value of this object as a Number.\n         *\n         * @return True if the value was set.\n         */\n        public boolean setCurrentAccessibleValue(Number n) {\n            return false;\n        }\n\n        /**\n         * Get the minimum value of this object as a Number.\n         *\n         * @return An Integer of 0.\n         */\n        public Number getMinimumAccessibleValue() {\n            return Integer.valueOf(0);\n        }\n\n        /**\n         * Get the maximum value of this object as a Number.\n         *\n         * @return An Integer of 0.\n         */\n        public Number getMaximumAccessibleValue() {\n            return Integer.valueOf(0);\n        }\n\n        /**\n         * Get the role of this object.\n         *\n         * @return an instance of AccessibleRole describing the role of the\n         * object\n         * @see AccessibleRole\n         */\n        public AccessibleRole getAccessibleRole() {\n            return AccessibleRole.PUSH_BUTTON;\n        }\n    } // inner class AccessibleAWTButton\n\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor18.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:339)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

Jan. 23, 2024 2:04:37 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.desktop/java/awt/Button.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor25.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:358)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

2024.01.23 14:05:16 WARN  Using indexes to guess the definition of Button
2024.01.23 14:05:47 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
Jan. 23, 2024 2:05:48 P.M. scala.meta.internal.mtags.SymbolIndexBucket addMtagsSourceFile
WARNING: Error indexing C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table.scala
java.nio.file.NoSuchFileException: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:371)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:422)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:415)
	at scala.meta.internal.mtags.Mtags.index(Mtags.scala:67)
	at scala.meta.internal.mtags.Mtags.allSymbols(Mtags.scala:21)
	at scala.meta.internal.mtags.SymbolIndexBucket.allSymbols(SymbolIndexBucket.scala:242)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:253)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$7(SymbolIndexBucket.scala:184)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$7$adapted(SymbolIndexBucket.scala:179)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:576)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:574)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:933)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:903)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:179)
	at scala.meta.internal.mtags.SymbolIndexBucket.query(SymbolIndexBucket.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.$anonfun$findSymbolDefinition$1(OnDemandSymbolIndex.scala:141)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.findSymbolDefinition(OnDemandSymbolIndex.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.definition(OnDemandSymbolIndex.scala:48)
	at scala.meta.internal.metals.Docstrings.indexSymbol(Docstrings.scala:118)
	at scala.meta.internal.metals.Docstrings.documentation(Docstrings.scala:44)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:43)
	at scala.meta.internal.mtags.MtagsEnrichments$.symbolDocumentation(MtagsEnrichments.scala:253)
	at scala.meta.internal.pc.printer.MetalsPrinter.paramsDocs$lzyINIT1$1(MetalsPrinter.scala:184)
	at scala.meta.internal.pc.printer.MetalsPrinter.paramsDocs$1(MetalsPrinter.scala:188)
	at scala.meta.internal.pc.printer.MetalsPrinter.$anonfun$6(MetalsPrinter.scala:205)
	at scala.meta.internal.pc.printer.MetalsPrinter.paramLabel(MetalsPrinter.scala:354)
	at scala.meta.internal.pc.printer.MetalsPrinter.$anonfun$5(MetalsPrinter.scala:206)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.pc.printer.MetalsPrinter.label$1$$anonfun$1(MetalsPrinter.scala:209)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.pc.printer.MetalsPrinter.label$1(MetalsPrinter.scala:214)
	at scala.meta.internal.pc.printer.MetalsPrinter.defaultMethodSignature(MetalsPrinter.scala:217)
	at scala.meta.internal.pc.printer.MetalsPrinter.hoverSymbol(MetalsPrinter.scala:115)
	at scala.meta.internal.pc.HoverProvider$.hover(HoverProvider.scala:132)
	at scala.meta.internal.pc.ScalaPresentationCompiler.hover$$anonfun$1(ScalaPresentationCompiler.scala:342)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:146)
	at scala.meta.internal.pc.CompilerAccess.withNonInterruptableCompiler$$anonfun$1(CompilerAccess.scala:132)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:232)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)

Jan. 23, 2024 2:05:48 P.M. scala.meta.internal.mtags.SymbolIndexBucket addMtagsSourceFile
WARNING: Error indexing C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table.scala
java.nio.file.NoSuchFileException: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:371)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:422)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:415)
	at scala.meta.internal.mtags.Mtags.index(Mtags.scala:67)
	at scala.meta.internal.mtags.Mtags.allSymbols(Mtags.scala:21)
	at scala.meta.internal.mtags.SymbolIndexBucket.allSymbols(SymbolIndexBucket.scala:242)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:253)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:264)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$7(SymbolIndexBucket.scala:184)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$7$adapted(SymbolIndexBucket.scala:179)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:576)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:574)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:933)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:903)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:179)
	at scala.meta.internal.mtags.SymbolIndexBucket.query(SymbolIndexBucket.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.$anonfun$findSymbolDefinition$1(OnDemandSymbolIndex.scala:141)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.findSymbolDefinition(OnDemandSymbolIndex.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.definition(OnDemandSymbolIndex.scala:48)
	at scala.meta.internal.metals.Docstrings.indexSymbol(Docstrings.scala:118)
	at scala.meta.internal.metals.Docstrings.documentation(Docstrings.scala:44)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:43)
	at scala.meta.internal.mtags.MtagsEnrichments$.symbolDocumentation(MtagsEnrichments.scala:253)
	at scala.meta.internal.pc.printer.MetalsPrinter.paramsDocs$lzyINIT1$1(MetalsPrinter.scala:184)
	at scala.meta.internal.pc.printer.MetalsPrinter.paramsDocs$1(MetalsPrinter.scala:188)
	at scala.meta.internal.pc.printer.MetalsPrinter.$anonfun$6(MetalsPrinter.scala:205)
	at scala.meta.internal.pc.printer.MetalsPrinter.paramLabel(MetalsPrinter.scala:354)
	at scala.meta.internal.pc.printer.MetalsPrinter.$anonfun$5(MetalsPrinter.scala:206)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.pc.printer.MetalsPrinter.label$1$$anonfun$1(MetalsPrinter.scala:209)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.pc.printer.MetalsPrinter.label$1(MetalsPrinter.scala:214)
	at scala.meta.internal.pc.printer.MetalsPrinter.defaultMethodSignature(MetalsPrinter.scala:217)
	at scala.meta.internal.pc.printer.MetalsPrinter.hoverSymbol(MetalsPrinter.scala:115)
	at scala.meta.internal.pc.HoverProvider$.hover(HoverProvider.scala:132)
	at scala.meta.internal.pc.ScalaPresentationCompiler.hover$$anonfun$1(ScalaPresentationCompiler.scala:342)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:146)
	at scala.meta.internal.pc.CompilerAccess.withNonInterruptableCompiler$$anonfun$1(CompilerAccess.scala:132)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:232)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)

Jan. 23, 2024 2:05:48 P.M. scala.meta.internal.mtags.SymbolIndexBucket addMtagsSourceFile
WARNING: Error indexing C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\TableBody.scala
java.nio.file.NoSuchFileException: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\TableBody.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:371)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:422)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:415)
	at scala.meta.internal.mtags.Mtags.index(Mtags.scala:67)
	at scala.meta.internal.mtags.Mtags.allSymbols(Mtags.scala:21)
	at scala.meta.internal.mtags.SymbolIndexBucket.allSymbols(SymbolIndexBucket.scala:242)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:253)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$7(SymbolIndexBucket.scala:184)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$7$adapted(SymbolIndexBucket.scala:179)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:576)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:574)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:933)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:903)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:179)
	at scala.meta.internal.mtags.SymbolIndexBucket.query(SymbolIndexBucket.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.$anonfun$findSymbolDefinition$1(OnDemandSymbolIndex.scala:141)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.findSymbolDefinition(OnDemandSymbolIndex.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.definition(OnDemandSymbolIndex.scala:48)
	at scala.meta.internal.metals.Docstrings.indexSymbol(Docstrings.scala:118)
	at scala.meta.internal.metals.Docstrings.documentation(Docstrings.scala:44)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:43)
	at scala.meta.internal.mtags.MtagsEnrichments$.symbolDocumentation(MtagsEnrichments.scala:253)
	at scala.meta.internal.pc.printer.MetalsPrinter.paramsDocs$lzyINIT1$1(MetalsPrinter.scala:184)
	at scala.meta.internal.pc.printer.MetalsPrinter.paramsDocs$1(MetalsPrinter.scala:188)
	at scala.meta.internal.pc.printer.MetalsPrinter.$anonfun$6(MetalsPrinter.scala:205)
	at scala.meta.internal.pc.printer.MetalsPrinter.paramLabel(MetalsPrinter.scala:354)
	at scala.meta.internal.pc.printer.MetalsPrinter.$anonfun$5(MetalsPrinter.scala:206)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.pc.printer.MetalsPrinter.label$1$$anonfun$1(MetalsPrinter.scala:209)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.pc.printer.MetalsPrinter.label$1(MetalsPrinter.scala:214)
	at scala.meta.internal.pc.printer.MetalsPrinter.defaultMethodSignature(MetalsPrinter.scala:217)
	at scala.meta.internal.pc.printer.MetalsPrinter.hoverSymbol(MetalsPrinter.scala:115)
	at scala.meta.internal.pc.HoverProvider$.hover(HoverProvider.scala:132)
	at scala.meta.internal.pc.ScalaPresentationCompiler.hover$$anonfun$1(ScalaPresentationCompiler.scala:342)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:146)
	at scala.meta.internal.pc.CompilerAccess.withNonInterruptableCompiler$$anonfun$1(CompilerAccess.scala:132)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:232)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)

Jan. 23, 2024 2:05:48 P.M. scala.meta.internal.mtags.SymbolIndexBucket addMtagsSourceFile
WARNING: Error indexing C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\TableBody.scala
java.nio.file.NoSuchFileException: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\TableBody.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:371)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:422)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:415)
	at scala.meta.internal.mtags.Mtags.index(Mtags.scala:67)
	at scala.meta.internal.mtags.Mtags.allSymbols(Mtags.scala:21)
	at scala.meta.internal.mtags.SymbolIndexBucket.allSymbols(SymbolIndexBucket.scala:242)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:253)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:264)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$7(SymbolIndexBucket.scala:184)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$7$adapted(SymbolIndexBucket.scala:179)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:576)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:574)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:933)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:903)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:179)
	at scala.meta.internal.mtags.SymbolIndexBucket.query(SymbolIndexBucket.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.$anonfun$findSymbolDefinition$1(OnDemandSymbolIndex.scala:141)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.findSymbolDefinition(OnDemandSymbolIndex.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.definition(OnDemandSymbolIndex.scala:48)
	at scala.meta.internal.metals.Docstrings.indexSymbol(Docstrings.scala:118)
	at scala.meta.internal.metals.Docstrings.documentation(Docstrings.scala:44)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:43)
	at scala.meta.internal.mtags.MtagsEnrichments$.symbolDocumentation(MtagsEnrichments.scala:253)
	at scala.meta.internal.pc.printer.MetalsPrinter.paramsDocs$lzyINIT1$1(MetalsPrinter.scala:184)
	at scala.meta.internal.pc.printer.MetalsPrinter.paramsDocs$1(MetalsPrinter.scala:188)
	at scala.meta.internal.pc.printer.MetalsPrinter.$anonfun$6(MetalsPrinter.scala:205)
	at scala.meta.internal.pc.printer.MetalsPrinter.paramLabel(MetalsPrinter.scala:354)
	at scala.meta.internal.pc.printer.MetalsPrinter.$anonfun$5(MetalsPrinter.scala:206)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.pc.printer.MetalsPrinter.label$1$$anonfun$1(MetalsPrinter.scala:209)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.pc.printer.MetalsPrinter.label$1(MetalsPrinter.scala:214)
	at scala.meta.internal.pc.printer.MetalsPrinter.defaultMethodSignature(MetalsPrinter.scala:217)
	at scala.meta.internal.pc.printer.MetalsPrinter.hoverSymbol(MetalsPrinter.scala:115)
	at scala.meta.internal.pc.HoverProvider$.hover(HoverProvider.scala:132)
	at scala.meta.internal.pc.ScalaPresentationCompiler.hover$$anonfun$1(ScalaPresentationCompiler.scala:342)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:146)
	at scala.meta.internal.pc.CompilerAccess.withNonInterruptableCompiler$$anonfun$1(CompilerAccess.scala:132)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:232)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)

2024.01.23 14:05:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:05:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:05:48 WARN  Using indexes to guess the definition of Table
2024.01.23 14:05:50 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:05:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:05:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:05:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:05:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:05:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:05:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
Exception in thread "pool-9-thread-7" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.23 14:05:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:05:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
Exception in thread "pool-9-thread-8" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.23 14:05:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:05:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
Exception in thread "pool-9-thread-9" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.23 14:05:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:05:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:06:00 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:06:02 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:06:03 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:06:05 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:06:05 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:06:35 WARN  Using indexes to guess the definition of Button
2024.01.23 14:06:35 WARN  Using indexes to guess the definition of Button
2024.01.23 14:06:41 WARN  Using indexes to guess the definition of Button
2024.01.23 14:06:41 WARN  Using indexes to guess the definition of Button
2024.01.23 14:06:44 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java

Uri: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:703)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	jdk.internal.reflect.GeneratedMethodAccessor20.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 23, 2024 2:06:44 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.desktop/java/awt/Button.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 1995, 2015, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.awt;\n\nimport java.awt.peer.ButtonPeer;\nimport java.beans.BeanProperty;\nimport java.util.EventListener;\nimport java.awt.event.*;\nimport java.io.ObjectOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.IOException;\nimport javax.accessibility.*;\n\n/**\n * This class creates a labeled button. The application can cause\n * some action to happen when the button is pushed. This image\n * depicts three views of a \"{@code Quit}\" button as it appears\n * under the Solaris operating system:\n * \u003cp\u003e\n * \u003cimg src\u003d\"doc-files/Button-1.gif\" alt\u003d\"The following context describes the graphic\"\n * style\u003d\"float:center; margin: 7px 10px;\"\u003e\n * \u003cp\u003e\n * The first view shows the button as it appears normally.\n * The second view shows the button\n * when it has input focus. Its outline is darkened to let the\n * user know that it is an active object. The third view shows the\n * button when the user clicks the mouse over the button, and thus\n * requests that an action be performed.\n * \u003cp\u003e\n * The gesture of clicking on a button with the mouse\n * is associated with one instance of {@code ActionEvent},\n * which is sent out when the mouse is both pressed and released\n * over the button. If an application is interested in knowing\n * when the button has been pressed but not released, as a separate\n * gesture, it can specialize {@code processMouseEvent},\n * or it can register itself as a listener for mouse events by\n * calling {@code addMouseListener}. Both of these methods are\n * defined by {@code Component}, the abstract superclass of\n * all components.\n * \u003cp\u003e\n * When a button is pressed and released, AWT sends an instance\n * of {@code ActionEvent} to the button, by calling\n * {@code processEvent} on the button. The button\u0027s\n * {@code processEvent} method receives all events\n * for the button; it passes an action event along by\n * calling its own {@code processActionEvent} method.\n * The latter method passes the action event on to any action\n * listeners that have registered an interest in action\n * events generated by this button.\n * \u003cp\u003e\n * If an application wants to perform some action based on\n * a button being pressed and released, it should implement\n * {@code ActionListener} and register the new listener\n * to receive events from this button, by calling the button\u0027s\n * {@code addActionListener} method. The application can\n * make use of the button\u0027s action command as a messaging protocol.\n *\n * @author      Sami Shaio\n * @see         java.awt.event.ActionEvent\n * @see         java.awt.event.ActionListener\n * @see         java.awt.Component#processMouseEvent\n * @see         java.awt.Component#addMouseListener\n * @since       1.0\n */\npublic class Button extends Component implements Accessible {\n\n    /**\n     * The button\u0027s label.  This value may be null.\n     * @serial\n     * @see #getLabel()\n     * @see #setLabel(String)\n     */\n    String label;\n\n    /**\n     * The action to be performed once a button has been\n     * pressed.  This value may be null.\n     * @serial\n     * @see #getActionCommand()\n     * @see #setActionCommand(String)\n     */\n    String actionCommand;\n\n    transient ActionListener actionListener;\n\n    private static final String base \u003d \"button\";\n    private static int nameCounter \u003d 0;\n\n    /*\n     * JDK 1.1 serialVersionUID\n     */\n    private static final long serialVersionUID \u003d -8774683716313001058L;\n\n\n    static {\n        /* ensure that the necessary native libraries are loaded */\n        Toolkit.loadLibraries();\n        if (!GraphicsEnvironment.isHeadless()) {\n            initIDs();\n        }\n    }\n\n    /**\n     * Initialize JNI field and method IDs for fields that may be\n     * accessed from C.\n     */\n    private static native void initIDs();\n\n    /**\n     * Constructs a button with an empty string for its label.\n     *\n     * @exception HeadlessException if GraphicsEnvironment.isHeadless()\n     * returns true\n     * @see java.awt.GraphicsEnvironment#isHeadless\n     */\n    public Button() throws HeadlessException {\n        this(\"\");\n    }\n\n    /**\n     * Constructs a button with the specified label.\n     *\n     * @param label  a string label for the button, or\n     *               {@code null} for no label\n     * @exception HeadlessException if GraphicsEnvironment.isHeadless()\n     * returns true\n     * @see java.awt.GraphicsEnvironment#isHeadless\n     */\n    public Button(String label) throws HeadlessException {\n        GraphicsEnvironment.checkHeadless();\n        this.label \u003d label;\n    }\n\n    /**\n     * Construct a name for this component.  Called by getName() when the\n     * name is null.\n     */\n    String constructComponentName() {\n        synchronized (Button.class) {\n            return base + nameCounter++;\n        }\n    }\n\n    /**\n     * Creates the peer of the button.  The button\u0027s peer allows the\n     * application to change the look of the button without changing\n     * its functionality.\n     *\n     * @see     java.awt.Component#getToolkit()\n     */\n    public void addNotify() {\n        synchronized(getTreeLock()) {\n            if (peer \u003d\u003d null)\n                peer \u003d getComponentFactory().createButton(this);\n            super.addNotify();\n        }\n    }\n\n    /**\n     * Gets the label of this button.\n     *\n     * @return    the button\u0027s label, or {@code null}\n     *                if the button has no label.\n     * @see       java.awt.Button#setLabel\n     */\n    public String getLabel() {\n        return label;\n    }\n\n    /**\n     * Sets the button\u0027s label to be the specified string.\n     *\n     * @param     label   the new label, or {@code null}\n     *                if the button has no label.\n     * @see       java.awt.Button#getLabel\n     */\n    public void setLabel(String label) {\n        boolean testvalid \u003d false;\n\n        synchronized (this) {\n            if (label !\u003d this.label \u0026\u0026 (this.label \u003d\u003d null ||\n                                        !this.label.equals(label))) {\n                this.label \u003d label;\n                ButtonPeer peer \u003d (ButtonPeer)this.peer;\n                if (peer !\u003d null) {\n                    peer.setLabel(label);\n                }\n                testvalid \u003d true;\n            }\n        }\n\n        // This could change the preferred size of the Component.\n        if (testvalid) {\n            invalidateIfValid();\n        }\n    }\n\n    /**\n     * Sets the command name for the action event fired\n     * by this button. By default this action command is\n     * set to match the label of the button.\n     *\n     * @param     command  a string used to set the button\u0027s\n     *                  action command.\n     *            If the string is {@code null} then the action command\n     *            is set to match the label of the button.\n     * @see       java.awt.event.ActionEvent\n     * @since     1.1\n     */\n    public void setActionCommand(String command) {\n        actionCommand \u003d command;\n    }\n\n    /**\n     * Returns the command name of the action event fired by this button.\n     * If the command name is {@code null} (default) then this method\n     * returns the label of the button.\n     *\n     * @return the action command name (or label) for this button\n     */\n    public String getActionCommand() {\n        return (actionCommand \u003d\u003d null? label : actionCommand);\n    }\n\n    /**\n     * Adds the specified action listener to receive action events from\n     * this button. Action events occur when a user presses or releases\n     * the mouse over this button.\n     * If l is null, no exception is thrown and no action is performed.\n     * \u003cp\u003eRefer to \u003ca href\u003d\"doc-files/AWTThreadIssues.html#ListenersThreads\"\n     * \u003eAWT Threading Issues\u003c/a\u003e for details on AWT\u0027s threading model.\n     *\n     * @param         l the action listener\n     * @see           #removeActionListener\n     * @see           #getActionListeners\n     * @see           java.awt.event.ActionListener\n     * @since         1.1\n     */\n    public synchronized void addActionListener(ActionListener l) {\n        if (l \u003d\u003d null) {\n            return;\n        }\n        actionListener \u003d AWTEventMulticaster.add(actionListener, l);\n        newEventsOnly \u003d true;\n    }\n\n    /**\n     * Removes the specified action listener so that it no longer\n     * receives action events from this button. Action events occur\n     * when a user presses or releases the mouse over this button.\n     * If l is null, no exception is thrown and no action is performed.\n     * \u003cp\u003eRefer to \u003ca href\u003d\"doc-files/AWTThreadIssues.html#ListenersThreads\"\n     * \u003eAWT Threading Issues\u003c/a\u003e for details on AWT\u0027s threading model.\n     *\n     * @param           l     the action listener\n     * @see             #addActionListener\n     * @see             #getActionListeners\n     * @see             java.awt.event.ActionListener\n     * @since           1.1\n     */\n    public synchronized void removeActionListener(ActionListener l) {\n        if (l \u003d\u003d null) {\n            return;\n        }\n        actionListener \u003d AWTEventMulticaster.remove(actionListener, l);\n    }\n\n    /**\n     * Returns an array of all the action listeners\n     * registered on this button.\n     *\n     * @return all of this button\u0027s {@code ActionListener}s\n     *         or an empty array if no action\n     *         listeners are currently registered\n     *\n     * @see             #addActionListener\n     * @see             #removeActionListener\n     * @see             java.awt.event.ActionListener\n     * @since 1.4\n     */\n    public synchronized ActionListener[] getActionListeners() {\n        return getListeners(ActionListener.class);\n    }\n\n    /**\n     * Returns an array of all the objects currently registered\n     * as \u003ccode\u003e\u003cem\u003eFoo\u003c/em\u003eListener\u003c/code\u003es\n     * upon this {@code Button}.\n     * \u003ccode\u003e\u003cem\u003eFoo\u003c/em\u003eListener\u003c/code\u003es are registered using the\n     * \u003ccode\u003eadd\u003cem\u003eFoo\u003c/em\u003eListener\u003c/code\u003e method.\n     *\n     * \u003cp\u003e\n     * You can specify the {@code listenerType} argument\n     * with a class literal, such as\n     * \u003ccode\u003e\u003cem\u003eFoo\u003c/em\u003eListener.class\u003c/code\u003e.\n     * For example, you can query a\n     * {@code Button b}\n     * for its action listeners with the following code:\n     *\n     * \u003cpre\u003eActionListener[] als \u003d (ActionListener[])(b.getListeners(ActionListener.class));\u003c/pre\u003e\n     *\n     * If no such listeners exist, this method returns an empty array.\n     *\n     * @param listenerType the type of listeners requested; this parameter\n     *          should specify an interface that descends from\n     *          {@code java.util.EventListener}\n     * @return an array of all objects registered as\n     *          \u003ccode\u003e\u003cem\u003eFoo\u003c/em\u003eListener\u003c/code\u003es on this button,\n     *          or an empty array if no such\n     *          listeners have been added\n     * @exception ClassCastException if {@code listenerType}\n     *          doesn\u0027t specify a class or interface that implements\n     *          {@code java.util.EventListener}\n     *\n     * @see #getActionListeners\n     * @since 1.3\n     */\n    public \u003cT extends EventListener\u003e T[] getListeners(Class\u003cT\u003e listenerType) {\n        EventListener l \u003d null;\n        if  (listenerType \u003d\u003d ActionListener.class) {\n            l \u003d actionListener;\n        } else {\n            return super.getListeners(listenerType);\n        }\n        return AWTEventMulticaster.getListeners(l, listenerType);\n    }\n\n    // REMIND: remove when filtering is done at lower level\n    boolean eventEnabled(AWTEvent e) {\n        if (e.id \u003d\u003d ActionEvent.ACTION_PERFORMED) {\n            if ((eventMask \u0026 AWTEvent.ACTION_EVENT_MASK) !\u003d 0 ||\n                actionListener !\u003d null) {\n                return true;\n            }\n            return false;\n        }\n        return super.eventEnabled(e);\n    }\n\n    /**\n     * Processes events on this button. If an event is\n     * an instance of {@code ActionEvent}, this method invokes\n     * the {@code processActionEvent} method. Otherwise,\n     * it invokes {@code processEvent} on the superclass.\n     * \u003cp\u003eNote that if the event parameter is {@code null}\n     * the behavior is unspecified and may result in an\n     * exception.\n     *\n     * @param        e the event\n     * @see          java.awt.event.ActionEvent\n     * @see          java.awt.Button#processActionEvent\n     * @since        1.1\n     */\n    protected void processEvent(AWTEvent e) {\n        if (e instanceof ActionEvent) {\n            processActionEvent((ActionEvent)e);\n            return;\n        }\n        super.processEvent(e);\n    }\n\n    /**\n     * Processes action events occurring on this button\n     * by dispatching them to any registered\n     * {@code ActionListener} objects.\n     * \u003cp\u003e\n     * This method is not called unless action events are\n     * enabled for this button. Action events are enabled\n     * when one of the following occurs:\n     * \u003cul\u003e\n     * \u003cli\u003eAn {@code ActionListener} object is registered\n     * via {@code addActionListener}.\n     * \u003cli\u003eAction events are enabled via {@code enableEvents}.\n     * \u003c/ul\u003e\n     * \u003cp\u003eNote that if the event parameter is {@code null}\n     * the behavior is unspecified and may result in an\n     * exception.\n     *\n     * @param       e the action event\n     * @see         java.awt.event.ActionListener\n     * @see         java.awt.Button#addActionListener\n     * @see         java.awt.Component#enableEvents\n     * @since       1.1\n     */\n    protected void processActionEvent(ActionEvent e) {\n        ActionListener listener \u003d actionListener;\n        if (listener !\u003d null) {\n            listener.actionPerformed(e);\n        }\n    }\n\n    /**\n     * Returns a string representing the state of this {@code Button}.\n     * This method is intended to be used only for debugging purposes, and the\n     * content and format of the returned string may vary between\n     * implementations. The returned string may be empty but may not be\n     * {@code null}.\n     *\n     * @return     the parameter string of this button\n     */\n    protected String paramString() {\n        return super.paramString() + \",label\u003d\" + label;\n    }\n\n\n    /* Serialization support.\n     */\n\n    /*\n     * Button Serial Data Version.\n     * @serial\n     */\n    private int buttonSerializedDataVersion \u003d 1;\n\n    /**\n     * Writes default serializable fields to stream.  Writes\n     * a list of serializable {@code ActionListeners}\n     * as optional data.  The non-serializable\n     * {@code ActionListeners} are detected and\n     * no attempt is made to serialize them.\n     *\n     * @serialData {@code null} terminated sequence of 0 or\n     *   more pairs: the pair consists of a {@code String}\n     *   and an {@code Object}; the {@code String}\n     *   indicates the type of object and is one of the following:\n     *   {@code actionListenerK} indicating an\n     *     {@code ActionListener} object\n     *\n     * @param s the {@code ObjectOutputStream} to write\n     * @see AWTEventMulticaster#save(ObjectOutputStream, String, EventListener)\n     * @see java.awt.Component#actionListenerK\n     * @see #readObject(ObjectInputStream)\n     */\n    private void writeObject(ObjectOutputStream s)\n      throws IOException\n    {\n      s.defaultWriteObject();\n\n      AWTEventMulticaster.save(s, actionListenerK, actionListener);\n      s.writeObject(null);\n    }\n\n    /**\n     * Reads the {@code ObjectInputStream} and if\n     * it isn\u0027t {@code null} adds a listener to\n     * receive action events fired by the button.\n     * Unrecognized keys or values will be ignored.\n     *\n     * @param s the {@code ObjectInputStream} to read\n     * @exception HeadlessException if\n     *   {@code GraphicsEnvironment.isHeadless} returns\n     *   {@code true}\n     * @serial\n     * @see #removeActionListener(ActionListener)\n     * @see #addActionListener(ActionListener)\n     * @see java.awt.GraphicsEnvironment#isHeadless\n     * @see #writeObject(ObjectOutputStream)\n     */\n    private void readObject(ObjectInputStream s)\n      throws ClassNotFoundException, IOException, HeadlessException\n    {\n      GraphicsEnvironment.checkHeadless();\n      s.defaultReadObject();\n\n      Object keyOrNull;\n      while(null !\u003d (keyOrNull \u003d s.readObject())) {\n        String key \u003d ((String)keyOrNull).intern();\n\n        if (actionListenerK \u003d\u003d key)\n          addActionListener((ActionListener)(s.readObject()));\n\n        else // skip value for unrecognized key\n          s.readObject();\n      }\n    }\n\n\n/////////////////\n// Accessibility support\n////////////////\n\n    /**\n     * Gets the {@code AccessibleContext} associated with\n     * this {@code Button}. For buttons, the\n     * {@code AccessibleContext} takes the form of an\n     * {@code AccessibleAWTButton}.\n     * A new {@code AccessibleAWTButton} instance is\n     * created if necessary.\n     *\n     * @return an {@code AccessibleAWTButton} that serves as the\n     *         {@code AccessibleContext} of this {@code Button}\n     * @since 1.3\n     */\n    @BeanProperty(expert \u003d true, description\n            \u003d \"The AccessibleContext associated with this Button.\")\n    public AccessibleContext getAccessibleContext() {\n        if (accessibleContext \u003d\u003d null) {\n            accessibleContext \u003d new AccessibleAWTButton();\n        }\n        return accessibleContext;\n    }\n\n    /**\n     * This class implements accessibility support for the\n     * {@code Button} class.  It provides an implementation of the\n     * Java Accessibility API appropriate to button user-interface elements.\n     * @since 1.3\n     */\n    protected class AccessibleAWTButton extends AccessibleAWTComponent\n        implements AccessibleAction, AccessibleValue\n    {\n        /*\n         * JDK 1.3 serialVersionUID\n         */\n        private static final long serialVersionUID \u003d -5932203980244017102L;\n\n        /**\n         * Get the accessible name of this object.\n         *\n         * @return the localized name of the object -- can be null if this\n         * object does not have a name\n         */\n        public String getAccessibleName() {\n            if (accessibleName !\u003d null) {\n                return accessibleName;\n            } else {\n                if (getLabel() \u003d\u003d null) {\n                    return super.getAccessibleName();\n                } else {\n                    return getLabel();\n                }\n            }\n        }\n\n        /**\n         * Get the AccessibleAction associated with this object.  In the\n         * implementation of the Java Accessibility API for this class,\n         * return this object, which is responsible for implementing the\n         * AccessibleAction interface on behalf of itself.\n         *\n         * @return this object\n         */\n        public AccessibleAction getAccessibleAction() {\n            return this;\n        }\n\n        /**\n         * Get the AccessibleValue associated with this object.  In the\n         * implementation of the Java Accessibility API for this class,\n         * return this object, which is responsible for implementing the\n         * AccessibleValue interface on behalf of itself.\n         *\n         * @return this object\n         */\n        public AccessibleValue getAccessibleValue() {\n            return this;\n        }\n\n        /**\n         * Returns the number of Actions available in this object.  The\n         * default behavior of a button is to have one action - toggle\n         * the button.\n         *\n         * @return 1, the number of Actions in this object\n         */\n        public int getAccessibleActionCount() {\n            return 1;\n        }\n\n        /**\n         * Return a description of the specified action of the object.\n         *\n         * @param i zero-based index of the actions\n         */\n        public String getAccessibleActionDescription(int i) {\n            if (i \u003d\u003d 0) {\n                // [[[PENDING:  WDW -- need to provide a localized string]]]\n                return \"click\";\n            } else {\n                return null;\n            }\n        }\n\n        /**\n         * Perform the specified Action on the object\n         *\n         * @param i zero-based index of actions\n         * @return true if the action was performed; else false.\n         */\n        public boolean doAccessibleAction(int i) {\n            if (i \u003d\u003d 0) {\n                // Simulate a button click\n                Toolkit.getEventQueue().postEvent(\n                        new ActionEvent(Button.this,\n                                        ActionEvent.ACTION_PERFORMED,\n                                        Button.this.getActionCommand()));\n                return true;\n            } else {\n                return false;\n            }\n        }\n\n        /**\n         * Get the value of this object as a Number.\n         *\n         * @return An Integer of 0 if this isn\u0027t selected or an Integer of 1 if\n         * this is selected.\n         * @see javax.swing.AbstractButton#isSelected()\n         */\n        public Number getCurrentAccessibleValue() {\n            return Integer.valueOf(0);\n        }\n\n        /**\n         * Set the value of this object as a Number.\n         *\n         * @return True if the value was set.\n         */\n        public boolean setCurrentAccessibleValue(Number n) {\n            return false;\n        }\n\n        /**\n         * Get the minimum value of this object as a Number.\n         *\n         * @return An Integer of 0.\n         */\n        public Number getMinimumAccessibleValue() {\n            return Integer.valueOf(0);\n        }\n\n        /**\n         * Get the maximum value of this object as a Number.\n         *\n         * @return An Integer of 0.\n         */\n        public Number getMaximumAccessibleValue() {\n            return Integer.valueOf(0);\n        }\n\n        /**\n         * Get the role of this object.\n         *\n         * @return an instance of AccessibleRole describing the role of the\n         * object\n         * @see AccessibleRole\n         */\n        public AccessibleRole getAccessibleRole() {\n            return AccessibleRole.PUSH_BUTTON;\n        }\n    } // inner class AccessibleAWTButton\n\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor18.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:339)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

2024.01.23 14:06:44 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java

Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.desktop/java/awt/Button.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.documentHighlights(WorkspaceLspService.scala:391)
	scala.meta.metals.lsp.DelegatingScalaService.documentHighlights(DelegatingScalaService.scala:87)
	jdk.internal.reflect.GeneratedMethodAccessor12.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 23, 2024 2:06:45 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor12.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.MetalsLspService.documentHighlights(MetalsLspService.scala:1451)
	at scala.meta.internal.metals.WorkspaceLspService.documentHighlights(WorkspaceLspService.scala:391)
	at scala.meta.metals.lsp.DelegatingScalaService.documentHighlights(DelegatingScalaService.scala:87)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 24 more

2024.01.23 14:06:44 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java

Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.desktop/java/awt/Button.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.codeAction(WorkspaceLspService.scala:461)
	scala.meta.metals.lsp.DelegatingScalaService.codeAction(DelegatingScalaService.scala:146)
	jdk.internal.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 23, 2024 2:06:45 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.codeactions.ImportMissingSymbol.contribute(ImportMissingSymbol.scala:27)
	at scala.meta.internal.metals.codeactions.CodeActionProvider$$anonfun$1.applyOrElse(CodeActionProvider.scala:79)
	at scala.meta.internal.metals.codeactions.CodeActionProvider$$anonfun$1.applyOrElse(CodeActionProvider.scala:77)
	at scala.collection.immutable.List.collect(List.scala:275)
	at scala.meta.internal.metals.codeactions.CodeActionProvider.codeActions(CodeActionProvider.scala:77)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$codeAction$1(MetalsLspService.scala:1661)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.codeAction(MetalsLspService.scala:1660)
	at scala.meta.internal.metals.WorkspaceLspService.codeAction(WorkspaceLspService.scala:461)
	at scala.meta.metals.lsp.DelegatingScalaService.codeAction(DelegatingScalaService.scala:146)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 31 more

2024.01.23 14:06:44 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java

Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.desktop/java/awt/Button.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.codeAction(WorkspaceLspService.scala:461)
	scala.meta.metals.lsp.DelegatingScalaService.codeAction(DelegatingScalaService.scala:146)
	jdk.internal.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 23, 2024 2:06:45 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.codeactions.ImportMissingSymbol.contribute(ImportMissingSymbol.scala:27)
	at scala.meta.internal.metals.codeactions.CodeActionProvider$$anonfun$1.applyOrElse(CodeActionProvider.scala:79)
	at scala.meta.internal.metals.codeactions.CodeActionProvider$$anonfun$1.applyOrElse(CodeActionProvider.scala:77)
	at scala.collection.immutable.List.collect(List.scala:275)
	at scala.meta.internal.metals.codeactions.CodeActionProvider.codeActions(CodeActionProvider.scala:77)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$codeAction$1(MetalsLspService.scala:1661)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.codeAction(MetalsLspService.scala:1660)
	at scala.meta.internal.metals.WorkspaceLspService.codeAction(WorkspaceLspService.scala:461)
	at scala.meta.metals.lsp.DelegatingScalaService.codeAction(DelegatingScalaService.scala:146)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 31 more

2024.01.23 14:06:44 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java

Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.desktop/java/awt/Button.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.foldingRange(WorkspaceLspService.scala:471)
	scala.meta.metals.lsp.DelegatingScalaService.foldingRange(DelegatingScalaService.scala:155)
	jdk.internal.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 23, 2024 2:06:45 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$foldingRange$1(MetalsLspService.scala:1683)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.foldingRange(MetalsLspService.scala:1682)
	at scala.meta.internal.metals.WorkspaceLspService.foldingRange(WorkspaceLspService.scala:471)
	at scala.meta.metals.lsp.DelegatingScalaService.foldingRange(DelegatingScalaService.scala:155)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 26 more

2024.01.23 14:06:44 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java

Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.desktop/java/awt/Button.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.codeLens(WorkspaceLspService.scala:466)
	scala.meta.metals.lsp.DelegatingScalaService.codeLens(DelegatingScalaService.scala:150)
	jdk.internal.reflect.GeneratedMethodAccessor6.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 23, 2024 2:06:45 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
java.util.concurrent.CompletionException: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:331)
	at java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:346)
	at java.base/java.util.concurrent.CompletableFuture$UniAccept.tryFire(CompletableFuture.java:704)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:506)
	at java.base/java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:2088)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1(CancelTokens.scala:40)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1$adapted(CancelTokens.scala:38)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:484)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$codeLens$3(MetalsLspService.scala:1673)
	at scala.meta.internal.metals.TimerProvider.timedThunk(TimerProvider.scala:25)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$codeLens$2(MetalsLspService.scala:1672)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	... 3 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 13 more

2024.01.23 14:06:44 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java

Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.desktop/java/awt/Button.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.semanticTokensFull(WorkspaceLspService.scala:481)
	scala.meta.metals.lsp.DelegatingScalaService.semanticTokensFull(DelegatingScalaService.scala:208)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 23, 2024 2:06:45 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
java.util.concurrent.CompletionException: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:331)
	at java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:346)
	at java.base/java.util.concurrent.CompletableFuture$UniAccept.tryFire(CompletableFuture.java:704)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:506)
	at java.base/java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:2088)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1(CancelTokens.scala:40)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1$adapted(CancelTokens.scala:38)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:484)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.Compilers.semanticTokens(Compilers.scala:426)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$semanticTokensFull$2(MetalsLspService.scala:1605)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:470)
	... 3 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 12 more

2024.01.23 14:06:47 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java

Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.desktop/java/awt/Button.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:386)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 23, 2024 2:06:47 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:1079)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:737)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1429)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1427)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:386)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 28 more

Jan. 23, 2024 2:06:57 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.desktop/java/awt/Button.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor25.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:358)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.desktop/java/awt/Button.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

2024.01.23 14:07:49 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:07:49 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:07:49 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:07:49 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:07:49 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:07:52 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:07:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:07:55 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:07:59 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:00 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:01 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:01 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:01 WARN  Using indexes to guess the definition of Toolbar
2024.01.23 14:08:01 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:01 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:02 WARN  Using indexes to guess the definition of Toolbar
2024.01.23 14:08:06 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:06 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:06 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:06 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:06 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:06 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:06 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:06 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:10 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:10 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:13 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:13 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:14 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:15 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:15 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:15 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:15 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:32 WARN  Using indexes to guess the definition of Toolbar
2024.01.23 14:08:33 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:52 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:54 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:08:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:10:49 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:10:51 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:11:35 WARN  Could not find semantic tokens for: file:///C:/Users/yashb/Documents/vscode-laminar-vite-extension/webview-ui/src/main/scala/livechart/EventListeners.scala
2024.01.23 14:11:51 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:11:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:11:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:11:58 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:12:10 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:12:16 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:12:18 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:12:19 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:12:19 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:12:41 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:12:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:12:49 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:12:49 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:12:49 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:12:49 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:12:49 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:12:49 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
Exception in thread "pool-9-thread-10" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.23 14:12:49 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:12:49 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
Jan. 23, 2024 2:12:49 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 14080
2024.01.23 14:12:49 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:12:49 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:12:49 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:12:49 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:12:55 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:13:04 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:13:08 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:13:09 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:13:28 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:13:28 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:13:28 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:13:30 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:13:31 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:13:31 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:13:31 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:13:31 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
Jan. 23, 2024 2:14:25 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
2024.01.23 14:15:02 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:15:04 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:15:05 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:15:05 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:15:09 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:15:11 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:15:12 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
Jan. 23, 2024 2:15:24 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
Jan. 23, 2024 2:16:53 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
2024.01.23 14:16:55 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:16:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:16:59 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
Jan. 23, 2024 2:17:08 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
2024.01.23 14:17:08 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:17:11 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:17:13 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:17:14 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:17:15 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:17:16 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:17:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:17:27 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:17:32 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:17:32 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:17:34 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:17:43 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:17:51 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:17:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:17:56 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:18:33 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:18:36 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:18:37 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:18:43 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:18:43 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:18:51 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:18:51 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:18:54 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:19:00 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:19:01 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:19:04 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:19:59 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:20:01 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:20:08 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:20:10 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:21:42 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:21:46 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
Jan. 23, 2024 2:32:32 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
Jan. 23, 2024 2:32:40 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
Jan. 23, 2024 2:32:45 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
Jan. 23, 2024 2:32:49 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
2024.01.23 14:32:58 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:33:00 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:33:02 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:33:04 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:33:04 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:33:09 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:33:11 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:33:11 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:33:11 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:33:11 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:33:11 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:33:12 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:34:22 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:34:46 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:34:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:34:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:34:55 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:34:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:34:59 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
Jan. 23, 2024 2:36:07 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
2024.01.23 14:36:08 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:36:10 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
Jan. 23, 2024 2:36:31 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
Jan. 23, 2024 2:37:09 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
Jan. 23, 2024 2:37:13 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
2024.01.23 14:38:02 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:38:04 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
Jan. 23, 2024 2:39:28 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
2024.01.23 14:40:27 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 14:40:28 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
Jan. 23, 2024 2:40:49 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
2024.01.23 14:40:56 INFO  Shutting down server
2024.01.23 14:40:56 INFO  shutting down Metals
Jan. 23, 2024 2:40:56 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint notify
INFO: Failed to send notification message.
org.eclipse.lsp4j.jsonrpc.JsonRpcException: java.nio.channels.AsynchronousCloseException
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:72)
	at scala.meta.internal.metals.RequestMonitorImpl$$anon$1.consume(ServerLivenessMonitor.scala:39)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.notify(RemoteEndpoint.java:126)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.sendCancelNotification(RemoteEndpoint.java:180)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint$1.cancel(RemoteEndpoint.java:150)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$register$2(BuildServerConnection.scala:425)
	at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.scala:17)
	at scala.util.Try$.apply(Try.scala:210)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$register$1(BuildServerConnection.scala:425)
	at scala.meta.internal.metals.Cancelable$$anon$1.cancel(Cancelable.scala:18)
	at scala.meta.internal.metals.Cancelable$.$anonfun$cancelAll$1(Cancelable.scala:29)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.metals.Cancelable$.cancelAll(Cancelable.scala:28)
	at scala.meta.internal.metals.MutableCancelable.cancel(MutableCancelable.scala:25)
	at scala.meta.internal.metals.BuildServerConnection.cancel(BuildServerConnection.scala:365)
	at scala.meta.internal.bsp.BspSession.$anonfun$cancel$1(BspSession.scala:34)
	at scala.meta.internal.bsp.BspSession.$anonfun$cancel$1$adapted(BspSession.scala:34)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.bsp.BspSession.cancel(BspSession.scala:34)
	at scala.meta.internal.metals.Cancelable$.$anonfun$cancelAll$1(Cancelable.scala:29)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.metals.Cancelable$.cancelAll(Cancelable.scala:28)
	at scala.meta.internal.metals.MutableCancelable.cancel(MutableCancelable.scala:25)
	at scala.meta.internal.metals.MetalsLspService.cancel(MetalsLspService.scala:160)
	at scala.meta.internal.metals.MetalsLspService.onShutdown(MetalsLspService.scala:933)
	at scala.meta.internal.metals.WorkspaceLspService.$anonfun$shutdown$2(WorkspaceLspService.scala:1198)
	at scala.meta.internal.metals.WorkspaceLspService.$anonfun$shutdown$2$adapted(WorkspaceLspService.scala:1198)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.metals.WorkspaceLspService.shutdown(WorkspaceLspService.scala:1198)
	at scala.meta.metals.MetalsLanguageServer.shutdown(MetalsLanguageServer.scala:260)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.nio.channels.AsynchronousCloseException
	at java.base/java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:202)
	at java.base/sun.nio.ch.SocketChannelImpl.endWrite(SocketChannelImpl.java:447)
	at java.base/sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:469)
	at java.base/sun.nio.ch.SinkChannelImpl.write(SinkChannelImpl.java:114)
	at java.base/java.nio.channels.Channels.writeFullyImpl(Channels.java:74)
	at java.base/java.nio.channels.Channels.writeFully(Channels.java:94)
	at java.base/java.nio.channels.Channels$1.write(Channels.java:172)
	at java.base/java.io.OutputStream.write(OutputStream.java:122)
	at java.base/java.nio.channels.Channels$1.write(Channels.java:152)
	at scala.meta.internal.metals.ClosableOutputStream.write(ClosableOutputStream.scala:26)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:137)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:108)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:67)
	... 45 more

2024.01.23 14:40:56 INFO  Scala test classes not supported by server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Scala test classes not supported by server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
2024.01.23 14:40:56 INFO  Cancelling compilation on Bloop server
java.nio.file.NoSuchFileException: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:371)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:422)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:415)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionAbsolutePathBuffers.toInputFromBuffers(MetalsEnrichments.scala:546)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$compileAndLookForNewReferences$1(MetalsLspService.scala:1535)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$compileAndLookForNewReferences$1$adapted(MetalsLspService.scala:1534)
	at scala.util.Success.foreach(Try.scala:260)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:481)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
java.nio.file.NoSuchFileException: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:371)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:422)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:415)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionAbsolutePathBuffers.toInputFromBuffers(MetalsEnrichments.scala:546)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$compileAndLookForNewReferences$1(MetalsLspService.scala:1535)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$compileAndLookForNewReferences$1$adapted(MetalsLspService.scala:1534)
	at scala.util.Success.foreach(Try.scala:260)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:481)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
java.nio.file.NoSuchFileException: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:371)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:422)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:415)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionAbsolutePathBuffers.toInputFromBuffers(MetalsEnrichments.scala:546)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$compileAndLookForNewReferences$1(MetalsLspService.scala:1535)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$compileAndLookForNewReferences$1$adapted(MetalsLspService.scala:1534)
	at scala.util.Success.foreach(Try.scala:260)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:481)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
java.nio.file.NoSuchFileException: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\Table.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:371)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:422)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:415)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionAbsolutePathBuffers.toInputFromBuffers(MetalsEnrichments.scala:546)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$compileAndLookForNewReferences$1(MetalsLspService.scala:1535)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$compileAndLookForNewReferences$1$adapted(MetalsLspService.scala:1534)
	at scala.util.Success.foreach(Try.scala:260)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:481)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.23 14:40:56 INFO  Exiting server
2024.01.23 14:41:07 INFO  Started: Metals version 1.2.0 in folders 'C:\Users\yashb\Documents\vscode-laminar-vite-extension' for client Visual Studio Code 1.85.2.
2024.01.23 14:41:08 INFO  Attempting to connect to the build server...
2024.01.23 14:41:08 INFO  skipping build import with status 'Installed'
2024.01.23 14:41:08 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.23 14:41:08 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.23 14:41:08 INFO  time: Connected to build server in 0.24s
2024.01.23 14:41:08 INFO  Connected to Build server: Bloop v1.5.13
2024.01.23 14:41:11 INFO  no build target found for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\utils\AuroraElement.scala. Using presentation compiler with project's scala-library version: 3.3.1
2024.01.23 14:41:12 INFO  time: indexed workspace in 1.25s
2024.01.23 14:41:13 INFO  compiling livechart (16 scala sources)
2024.01.23 14:41:13 INFO  Generated JavaScript file 'C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\.bloop\livechart\livechart-test.js'
2024.01.23 14:41:16 INFO  time: compiled livechart in 3.67s
Jan. 23, 2024 2:42:02 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
Jan. 23, 2024 2:42:51 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 92
Jan. 23, 2024 2:43:40 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
Jan. 23, 2024 2:43:50 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
Jan. 23, 2024 2:46:05 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
Jan. 23, 2024 2:46:07 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
Jan. 23, 2024 2:46:17 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
Jan. 23, 2024 2:46:52 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
Jan. 23, 2024 2:47:22 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
Jan. 23, 2024 2:47:32 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
Jan. 23, 2024 2:47:34 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
Jan. 23, 2024 2:47:38 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
Jan. 23, 2024 2:47:41 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 302
Jan. 23, 2024 2:47:43 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 307
Jan. 23, 2024 2:48:01 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
Jan. 23, 2024 2:48:16 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
Jan. 23, 2024 2:48:24 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
Jan. 23, 2024 2:48:53 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
Jan. 23, 2024 2:49:17 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
Jan. 23, 2024 2:49:25 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
Jan. 23, 2024 2:49:38 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
Jan. 23, 2024 2:49:53 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
2024.01.23 14:53:16 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\.scalafmt.conf: Invalid config: 2 errors
[E0] C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\.scalafmt.conf:5:0 error: found option 'indent_style' which wasn't expected, or isn't valid in this context.
indent_style=tab
^

[E1] C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\.scalafmt.conf:4:0 error: found option 'indent_size' which wasn't expected, or isn't valid in this context.
indent_size=4
^


2024.01.23 14:53:44 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\.scalafmt.conf: Invalid config: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\.scalafmt.conf:4:0 error: found option 'indent_size' which wasn't expected, or isn't valid in this context.
indent_size = 
^

2024.01.23 14:53:45 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\.scalafmt.conf: Invalid config: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\.scalafmt.conf:4:0 error: found option 'indent_size' which wasn't expected, or isn't valid in this context.
indent_size = 
^

2024.01.23 14:53:47 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\.scalafmt.conf: Invalid config: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\.scalafmt.conf:4:0 error: found option 'indent_size' which wasn't expected, or isn't valid in this context.
indent_size = 
^

Jan. 23, 2024 2:58:40 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
Jan. 23, 2024 2:58:53 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
Jan. 23, 2024 2:58:55 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
Jan. 23, 2024 2:58:59 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
Jan. 23, 2024 3:01:11 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
Jan. 23, 2024 3:01:19 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
2024.01.23 15:01:25 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\EventListeners.scala:20: error: [dialect scala3] ) expected but => found
      (event: dom.KeyboardEvent) => {
                                 ^
2024.01.23 15:01:35 INFO  Disconnecting from Bloop session...
2024.01.23 15:01:35 INFO  Cancelling compilation on Bloop server
2024.01.23 15:01:37 ERROR timeout: build server 'bloop' during shutdown
2024.01.23 15:01:37 INFO  Attempting to connect to the build server...
2024.01.23 15:01:37 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.23 15:01:37 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.23 15:01:37 INFO  time: Connected to build server in 36ms
2024.01.23 15:01:37 INFO  Connected to Build server: Bloop v1.5.13
2024.01.23 15:01:38 INFO  time: indexed workspace in 0.81s
2024.01.23 15:01:38 INFO  compiling livechart (2 scala sources)
2024.01.23 15:01:39 INFO  time: compiled livechart in 1.44s
Jan. 23, 2024 3:02:22 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
2024.01.23 15:03:30 INFO  compiling livechart (1 scala source)
2024.01.23 15:03:30 INFO  time: compiled livechart in 0.58s
2024.01.23 15:04:46 INFO  compiling livechart (1 scala source)
2024.01.23 15:04:46 INFO  time: compiled livechart in 0.4s
2024.01.23 15:04:48 INFO  compiling livechart (1 scala source)
2024.01.23 15:04:49 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.23 15:04:48 INFO  time: compiled livechart in 0.38s
Jan. 23, 2024 3:17:56 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1083
2024.01.23 15:17:59 INFO  running 'C:\Program Files\Java\jdk-11\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\yashb\AppData\Local\Temp\metals16111173764734564475\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'
2024.01.23 15:18:01 INFO  [info] welcome to sbt 1.8.2 (Oracle Corporation Java 11.0.18)
2024.01.23 15:18:01 INFO  [info] loading settings for project webview-ui-build-build-build from metals.sbt ...
2024.01.23 15:18:02 INFO  [info] loading project definition from C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\project\project\project
2024.01.23 15:18:02 INFO  [info] loading settings for project webview-ui-build-build from metals.sbt ...
2024.01.23 15:18:02 INFO  [info] loading project definition from C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\project\project
2024.01.23 15:18:05 INFO  [success] Generated .bloop\webview-ui-build-build.json
2024.01.23 15:18:05 INFO  [success] Total time: 2 s, completed Jan. 23, 2024, 3:18:05 p.m.
2024.01.23 15:18:05 INFO  [info] loading settings for project webview-ui-build from metals.sbt,plugins.sbt ...
2024.01.23 15:18:05 INFO  [info] loading project definition from C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\project
2024.01.23 15:18:06 INFO  [success] Generated .bloop\webview-ui-build.json
2024.01.23 15:18:06 INFO  [success] Total time: 1 s, completed Jan. 23, 2024, 3:18:06 p.m.
2024.01.23 15:18:06 INFO  [info] loading settings for project livechart from build.sbt ...
2024.01.23 15:18:06 INFO  [info] set current project to livechart (in build file:/C:/Users/yashb/Documents/vscode-laminar-vite-extension/webview-ui/)
2024.01.23 15:18:06 INFO  [success] Generated .bloop\livechart.json
2024.01.23 15:18:06 INFO  [success] Generated .bloop\livechart-test.json
2024.01.23 15:18:06 INFO  [success] Total time: 0 s, completed Jan. 23, 2024, 3:18:06 p.m.
2024.01.23 15:18:07 INFO  time: ran 'sbt bloopInstall' in 7.08s
2024.01.23 15:18:07 INFO  Disconnecting from Bloop session...
2024.01.23 15:18:07 INFO  Shut down connection with build server.
2024.01.23 15:18:07 INFO  Attempting to connect to the build server...
2024.01.23 15:18:07 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.23 15:18:07 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.23 15:18:07 INFO  time: Connected to build server in 39ms
2024.01.23 15:18:07 INFO  Connected to Build server: Bloop v1.5.13
2024.01.23 15:18:08 INFO  time: indexed workspace in 1.14s
2024.01.23 15:18:09 INFO  Generated JavaScript file 'C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\.bloop\livechart\livechart-test.js'
Jan. 23, 2024 3:26:11 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1402
2024.01.23 15:28:02 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\utilities\fakeData.scala:28: error: [dialect scala3] ) expected but ; found
            .map(println("Got response"); "Response: " + _.responseText)
                                        ^
Exception in thread "pool-12-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-12-thread-2" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.23 15:29:20 WARN  Using indexes to guess the definition of Var
Exception in thread "pool-12-thread-3" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-12-thread-4" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.24 10:26:11 INFO  Started: Metals version 1.2.0 in folders 'C:\Users\yashb\Documents\vscode-laminar-vite-extension' for client Visual Studio Code 1.85.2.
2024.01.24 10:26:15 INFO  Attempting to connect to the build server...
2024.01.24 10:26:15 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.24 10:26:16 INFO  skipping build import with status 'Installed'
2024.01.24 10:26:15 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.24 10:26:15 INFO  time: Connected to build server in 0.32s
2024.01.24 10:26:15 INFO  Connected to Build server: Bloop v1.5.13
2024.01.24 10:26:16 INFO  time: Imported build in 0.12s
2024.01.24 10:26:19 INFO  time: indexed workspace in 2.96s
2024.01.24 10:26:19 INFO  compiling livechart (2 scala sources)
2024.01.24 10:26:19 INFO  Generated JavaScript file 'C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\.bloop\livechart\livechart-test.js'
2024.01.24 10:26:23 INFO  time: compiled livechart in 4.47s
2024.01.24 11:26:34 WARN  Could not find semantic tokens for: file:///C:/Users/yashb/Documents/vscode-laminar-vite-extension/webview-ui/src/main/scala/types/Patient.scala
2024.01.24 11:27:43 INFO  running 'C:\Program Files\Java\jdk-11\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\yashb\AppData\Local\Temp\metals2709968123565538803\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'
2024.01.24 11:27:44 INFO  [info] welcome to sbt 1.8.2 (Oracle Corporation Java 11.0.18)
2024.01.24 11:27:44 INFO  [info] loading settings for project webview-ui-build-build-build from metals.sbt ...
2024.01.24 11:27:45 INFO  [info] loading project definition from C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\project\project\project
2024.01.24 11:27:45 INFO  [info] loading settings for project webview-ui-build-build from metals.sbt ...
2024.01.24 11:27:45 INFO  [info] loading project definition from C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\project\project
2024.01.24 11:27:48 INFO  [success] Generated .bloop\webview-ui-build-build.json
2024.01.24 11:27:48 INFO  [success] Total time: 2 s, completed Jan. 24, 2024, 11:27:48 a.m.
2024.01.24 11:27:48 INFO  [info] loading settings for project webview-ui-build from metals.sbt,plugins.sbt ...
2024.01.24 11:27:48 INFO  [info] loading project definition from C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\project
2024.01.24 11:27:49 INFO  [success] Generated .bloop\webview-ui-build.json
2024.01.24 11:27:49 INFO  [success] Total time: 1 s, completed Jan. 24, 2024, 11:27:50 a.m.
2024.01.24 11:27:51 ERROR C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt:34: error: value enablePlugins is not a member of sbt.ModuleID
2024.01.24 11:27:51 ERROR possible cause: maybe a semicolon is missing before `value enablePlugins'?
2024.01.24 11:27:51 ERROR           enablePlugins (JavaAppPackaging)
2024.01.24 11:27:51 ERROR           ^
2024.01.24 11:27:51 ERROR C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt:34: error: not found: value JavaAppPackaging
2024.01.24 11:27:51 ERROR           enablePlugins (JavaAppPackaging)
2024.01.24 11:27:51 ERROR                          ^
2024.01.24 11:27:51 ERROR C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt:35: error: not found: value ++=
2024.01.24 11:27:51 ERROR           libraryDependencies ++= Seq (
2024.01.24 11:27:51 ERROR                               ^
2024.01.24 11:27:51 ERROR C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt:39: error: value map is not a member of (sbt.librarymanagement.DependencyBuilders.OrganizationArtifactName, sbt.librarymanagement.DependencyBuilders.OrganizationArtifactName, sbt.librarymanagement.DependencyBuilders.OrganizationArtifactName)
2024.01.24 11:27:51 ERROR possible cause: maybe a semicolon is missing before `value map'?
2024.01.24 11:27:51 ERROR           ).map(_ % circeVersion)
2024.01.24 11:27:51 ERROR             ^
2024.01.24 11:27:51 ERROR sbt.compiler.EvalException: Type error in expression
2024.01.24 11:27:51 INFO  [error] sbt.compiler.EvalException: Type error in expression
2024.01.24 11:27:51 INFO  [error] Use 'last' for the full log.
2024.01.24 11:27:51 INFO  [warn] Project loading failed: (r)etry, (q)uit, (l)ast, or (i)gnore? (default: r)
2024.01.24 11:27:51 INFO  time: ran 'sbt bloopInstall' in 8.35s
2024.01.24 11:27:51 ERROR sbt command failed: C:\Program Files\Java\jdk-11\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\yashb\AppData\Local\Temp\metals2709968123565538803\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall
2024.01.24 11:27:51 INFO  Disconnecting from Bloop session...
2024.01.24 11:27:51 INFO  Cancelling compilation on Bloop server
2024.01.24 11:27:53 ERROR timeout: build server 'bloop' during shutdown
2024.01.24 11:27:53 INFO  Attempting to connect to the build server...
2024.01.24 11:27:53 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.24 11:27:53 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.24 11:27:53 INFO  time: Connected to build server in 62ms
2024.01.24 11:27:53 INFO  Connected to Build server: Bloop v1.5.13
2024.01.24 11:27:54 INFO  time: indexed workspace in 0.99s
2024.01.24 11:27:54 WARN  no build target for: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt
2024.01.24 11:27:54 INFO  compiling livechart (1 scala source)
2024.01.24 11:27:56 INFO  time: compiled livechart in 1.75s
2024.01.24 11:27:56 WARN  no build target for: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt
2024.01.24 11:27:57 INFO  running 'C:\Program Files\Java\jdk-11\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\yashb\AppData\Local\Temp\metals16756427057793027026\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'
2024.01.24 11:27:59 INFO  [info] welcome to sbt 1.8.2 (Oracle Corporation Java 11.0.18)
2024.01.24 11:27:59 INFO  [info] loading settings for project webview-ui-build-build-build from metals.sbt ...
2024.01.24 11:28:00 INFO  [info] loading project definition from C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\project\project\project
2024.01.24 11:28:00 INFO  [info] loading settings for project webview-ui-build-build from metals.sbt ...
2024.01.24 11:28:00 INFO  [info] loading project definition from C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\project\project
2024.01.24 11:28:02 INFO  [success] Generated .bloop\webview-ui-build-build.json
2024.01.24 11:28:02 INFO  [success] Total time: 2 s, completed Jan. 24, 2024, 11:28:02 a.m.
2024.01.24 11:28:02 INFO  [info] loading settings for project webview-ui-build from metals.sbt,plugins.sbt ...
2024.01.24 11:28:02 INFO  [info] loading project definition from C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\project
2024.01.24 11:28:03 INFO  [success] Generated .bloop\webview-ui-build.json
2024.01.24 11:28:03 INFO  [success] Total time: 1 s, completed Jan. 24, 2024, 11:28:04 a.m.
2024.01.24 11:28:05 ERROR C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt:34: error: value libraryDependencies is not a member of sbt.ModuleID
2024.01.24 11:28:05 ERROR possible cause: maybe a semicolon is missing before `value libraryDependencies'?
2024.01.24 11:28:05 ERROR           libraryDependencies ++= Seq (
2024.01.24 11:28:05 ERROR           ^
2024.01.24 11:28:05 ERROR C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt:34: error: not found: value ++=
2024.01.24 11:28:05 ERROR           libraryDependencies ++= Seq (
2024.01.24 11:28:05 ERROR                               ^
2024.01.24 11:28:05 ERROR C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt:38: error: value map is not a member of (sbt.librarymanagement.DependencyBuilders.OrganizationArtifactName, sbt.librarymanagement.DependencyBuilders.OrganizationArtifactName, sbt.librarymanagement.DependencyBuilders.OrganizationArtifactName)
2024.01.24 11:28:05 ERROR possible cause: maybe a semicolon is missing before `value map'?
2024.01.24 11:28:05 ERROR           ).map(_ % circeVersion)
2024.01.24 11:28:05 ERROR             ^
2024.01.24 11:28:05 ERROR sbt.compiler.EvalException: Type error in expression
2024.01.24 11:28:05 INFO  [error] sbt.compiler.EvalException: Type error in expression
2024.01.24 11:28:05 INFO  [error] Use 'last' for the full log.
2024.01.24 11:28:05 INFO  [warn] Project loading failed: (r)etry, (q)uit, (l)ast, or (i)gnore? (default: r)
2024.01.24 11:28:05 INFO  time: ran 'sbt bloopInstall' in 7.7s
2024.01.24 11:28:05 ERROR sbt command failed: C:\Program Files\Java\jdk-11\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\yashb\AppData\Local\Temp\metals16756427057793027026\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall
2024.01.24 11:28:05 INFO  Disconnecting from Bloop session...
2024.01.24 11:28:05 INFO  Shut down connection with build server.
2024.01.24 11:28:05 INFO  Attempting to connect to the build server...
2024.01.24 11:28:05 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.24 11:28:05 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.24 11:28:05 INFO  time: Connected to build server in 49ms
2024.01.24 11:28:05 INFO  Connected to Build server: Bloop v1.5.13
2024.01.24 11:28:06 INFO  time: indexed workspace in 1.04s
2024.01.24 11:28:06 WARN  no build target for: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt
2024.01.24 11:28:07 INFO  no build target found for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt. Using presentation compiler with project's scala-library version: 3.3.1
2024.01.24 11:28:07 INFO  time: code lens generation in 1.97s
2024.01.24 11:28:08 INFO  Generated JavaScript file 'C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\.bloop\livechart\livechart-test.js'
2024.01.24 11:28:11 WARN  no build target for: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt
2024.01.24 11:28:11 INFO  skipping build import with status 'Failed'
2024.01.24 11:28:14 INFO  skipping build import with status 'Failed'
2024.01.24 11:28:14 INFO  skipping build import with status 'Failed'
2024.01.24 11:31:10 WARN  Using indexes to guess the definition of Seq
2024.01.24 11:31:24 INFO  running 'C:\Program Files\Java\jdk-11\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\yashb\AppData\Local\Temp\metals81785370535630624\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'
2024.01.24 11:31:25 INFO  sbt thinks that server is already booting because of this exception:
2024.01.24 11:31:25 ERROR sbt.internal.ServerAlreadyBootingException: java.io.IOException: Could not create lock for \\.\pipe\sbt-load-8489069467059247952_lock, error 5
2024.01.24 11:31:25 ERROR 	at sbt.internal.BootServerSocket.newSocket(BootServerSocket.java:356)
2024.01.24 11:31:25 ERROR 	at sbt.internal.BootServerSocket.<init>(BootServerSocket.java:295)
2024.01.24 11:31:25 ERROR 	at sbt.xMain$.getSocketOrExit(Main.scala:150)
2024.01.24 11:31:25 ERROR 	at sbt.xMain$.bootServerSocket$lzycompute$1(Main.scala:77)
2024.01.24 11:31:25 ERROR 	at sbt.xMain$.bootServerSocket$1(Main.scala:77)
2024.01.24 11:31:25 ERROR 	at sbt.xMain$.withStreams$1(Main.scala:85)
2024.01.24 11:31:25 ERROR 	at sbt.xMain$.run(Main.scala:121)
2024.01.24 11:31:25 ERROR 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
2024.01.24 11:31:25 ERROR 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
2024.01.24 11:31:25 ERROR 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
2024.01.24 11:31:25 ERROR 	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
2024.01.24 11:31:25 ERROR 	at sbt.internal.XMainConfiguration.run(XMainConfiguration.java:57)
2024.01.24 11:31:25 ERROR 	at sbt.xMain.run(Main.scala:46)
2024.01.24 11:31:25 ERROR 	at xsbt.boot.Launch$.$anonfun$run$1(Launch.scala:149)
2024.01.24 11:31:25 ERROR 	at xsbt.boot.Launch$.withContextLoader(Launch.scala:176)
2024.01.24 11:31:25 ERROR 	at xsbt.boot.Launch$.run(Launch.scala:149)
2024.01.24 11:31:25 ERROR 	at xsbt.boot.Launch$.$anonfun$apply$1(Launch.scala:44)
2024.01.24 11:31:25 ERROR 	at xsbt.boot.Launch$.launch(Launch.scala:159)
2024.01.24 11:31:25 ERROR 	at xsbt.boot.Launch$.apply(Launch.scala:44)
2024.01.24 11:31:25 ERROR 	at xsbt.boot.Launch$.apply(Launch.scala:21)
2024.01.24 11:31:25 ERROR 	at xsbt.boot.Boot$.runImpl(Boot.scala:78)
2024.01.24 11:31:25 ERROR 	at xsbt.boot.Boot$.run(Boot.scala:73)
2024.01.24 11:31:25 ERROR 	at xsbt.boot.Boot$.main(Boot.scala:21)
2024.01.24 11:31:25 ERROR 	at xsbt.boot.Boot.main(Boot.scala)
2024.01.24 11:31:25 ERROR Caused by: java.io.IOException: Could not create lock for \\.\pipe\sbt-load-8489069467059247952_lock, error 5
2024.01.24 11:31:25 ERROR 	at org.scalasbt.ipcsocket.Win32NamedPipeServerSocket.<init>(Win32NamedPipeServerSocket.java:129)
2024.01.24 11:31:25 ERROR 	at org.scalasbt.ipcsocket.Win32NamedPipeServerSocket.<init>(Win32NamedPipeServerSocket.java:48)
2024.01.24 11:31:25 ERROR 	at sbt.internal.BootServerSocket.newSocket(BootServerSocket.java:350)
2024.01.24 11:31:25 ERROR 	... 23 more
2024.01.24 11:31:25 INFO  time: ran 'sbt bloopInstall' in 1.17s
2024.01.24 11:31:25 ERROR sbt command failed: C:\Program Files\Java\jdk-11\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\yashb\AppData\Local\Temp\metals81785370535630624\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall
2024.01.24 11:31:25 INFO  Disconnecting from Bloop session...
2024.01.24 11:31:27 ERROR timeout: build server 'bloop' during shutdown
2024.01.24 11:31:27 INFO  Attempting to connect to the build server...
2024.01.24 11:31:27 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.24 11:31:27 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.24 11:31:27 INFO  time: Connected to build server in 38ms
2024.01.24 11:31:27 INFO  Connected to Build server: Bloop v1.5.13
2024.01.24 11:31:28 INFO  time: indexed workspace in 1.01s
2024.01.24 11:31:28 WARN  no build target for: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt
2024.01.24 11:31:29 INFO  no build target found for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt. Using presentation compiler with project's scala-library version: 3.3.1
2024.01.24 11:31:29 INFO  Generated JavaScript file 'C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\.bloop\livechart\livechart-test.js'
Jan. 24, 2024 11:31:29 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 332
Jan. 24, 2024 11:31:29 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 331
Exception in thread "pool-15-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.24 11:31:41 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt
scala.meta.tokenizers.TokenizeException: <input>:34: error: unclosed string literal
      libraryDependencies += "io.circe" %% "circe-core" % 0.14.3"
                                                                ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getStringLit(LegacyScanner.scala:553)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchDoubleQuote$1(LegacyScanner.scala:372)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:376)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.24 11:31:48 WARN  Using indexes to guess the definition of Seq
2024.01.24 11:31:53 WARN  no build target for: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt
2024.01.24 11:31:55 INFO  running 'C:\Program Files\Java\jdk-11\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\yashb\AppData\Local\Temp\metals8007007019188185928\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'
2024.01.24 11:31:56 ERROR sbt.internal.ServerAlreadyBootingException: java.io.IOException: Could not create lock for \\.\pipe\sbt-load-8489069467059247952_lock, error 5
2024.01.24 11:31:56 INFO  sbt thinks that server is already booting because of this exception:
2024.01.24 11:31:56 ERROR 	at sbt.internal.BootServerSocket.newSocket(BootServerSocket.java:356)
2024.01.24 11:31:56 ERROR 	at sbt.internal.BootServerSocket.<init>(BootServerSocket.java:295)
2024.01.24 11:31:56 ERROR 	at sbt.xMain$.getSocketOrExit(Main.scala:150)
2024.01.24 11:31:56 ERROR 	at sbt.xMain$.bootServerSocket$lzycompute$1(Main.scala:77)
2024.01.24 11:31:56 ERROR 	at sbt.xMain$.bootServerSocket$1(Main.scala:77)
2024.01.24 11:31:56 ERROR 	at sbt.xMain$.withStreams$1(Main.scala:85)
2024.01.24 11:31:56 ERROR 	at sbt.xMain$.run(Main.scala:121)
2024.01.24 11:31:56 ERROR 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
2024.01.24 11:31:56 ERROR 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
2024.01.24 11:31:56 ERROR 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
2024.01.24 11:31:56 ERROR 	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
2024.01.24 11:31:56 ERROR 	at sbt.internal.XMainConfiguration.run(XMainConfiguration.java:57)
2024.01.24 11:31:56 ERROR 	at sbt.xMain.run(Main.scala:46)
2024.01.24 11:31:56 ERROR 	at xsbt.boot.Launch$.$anonfun$run$1(Launch.scala:149)
2024.01.24 11:31:56 ERROR 	at xsbt.boot.Launch$.withContextLoader(Launch.scala:176)
2024.01.24 11:31:56 ERROR 	at xsbt.boot.Launch$.run(Launch.scala:149)
2024.01.24 11:31:56 ERROR 	at xsbt.boot.Launch$.$anonfun$apply$1(Launch.scala:44)
2024.01.24 11:31:56 ERROR 	at xsbt.boot.Launch$.launch(Launch.scala:159)
2024.01.24 11:31:56 ERROR 	at xsbt.boot.Launch$.apply(Launch.scala:44)
2024.01.24 11:31:56 ERROR 	at xsbt.boot.Launch$.apply(Launch.scala:21)
2024.01.24 11:31:56 ERROR 	at xsbt.boot.Boot$.runImpl(Boot.scala:78)
2024.01.24 11:31:56 ERROR 	at xsbt.boot.Boot$.run(Boot.scala:73)
2024.01.24 11:31:56 ERROR 	at xsbt.boot.Boot$.main(Boot.scala:21)
2024.01.24 11:31:56 ERROR 	at xsbt.boot.Boot.main(Boot.scala)
2024.01.24 11:31:56 ERROR Caused by: java.io.IOException: Could not create lock for \\.\pipe\sbt-load-8489069467059247952_lock, error 5
2024.01.24 11:31:56 ERROR 	at org.scalasbt.ipcsocket.Win32NamedPipeServerSocket.<init>(Win32NamedPipeServerSocket.java:129)
2024.01.24 11:31:56 ERROR 	at org.scalasbt.ipcsocket.Win32NamedPipeServerSocket.<init>(Win32NamedPipeServerSocket.java:48)
2024.01.24 11:31:56 ERROR 	at sbt.internal.BootServerSocket.newSocket(BootServerSocket.java:350)
2024.01.24 11:31:56 ERROR 	... 23 more
2024.01.24 11:31:56 INFO  time: ran 'sbt bloopInstall' in 1.05s
2024.01.24 11:31:56 ERROR sbt command failed: C:\Program Files\Java\jdk-11\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\yashb\AppData\Local\Temp\metals8007007019188185928\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall
2024.01.24 11:31:56 INFO  Disconnecting from Bloop session...
2024.01.24 11:31:56 INFO  Shut down connection with build server.
Jan. 24, 2024 11:31:56 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint notify
INFO: Failed to send notification message.
org.eclipse.lsp4j.jsonrpc.JsonRpcException: java.nio.channels.AsynchronousCloseException
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:72)
	at scala.meta.internal.metals.RequestMonitorImpl$$anon$1.consume(ServerLivenessMonitor.scala:39)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.notify(RemoteEndpoint.java:126)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.sendCancelNotification(RemoteEndpoint.java:180)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint$1.cancel(RemoteEndpoint.java:150)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$register$2(BuildServerConnection.scala:425)
	at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.scala:17)
	at scala.util.Try$.apply(Try.scala:210)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$register$1(BuildServerConnection.scala:425)
	at scala.meta.internal.metals.Cancelable$$anon$1.cancel(Cancelable.scala:18)
	at scala.meta.internal.metals.Cancelable$.$anonfun$cancelAll$1(Cancelable.scala:29)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.metals.Cancelable$.cancelAll(Cancelable.scala:28)
	at scala.meta.internal.metals.MutableCancelable.cancel(MutableCancelable.scala:25)
	at scala.meta.internal.metals.BuildServerConnection.cancel(BuildServerConnection.scala:365)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1(BuildServerConnection.scala:157)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1$adapted(BuildServerConnection.scala:149)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.nio.channels.AsynchronousCloseException
	at java.base/java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:202)
	at java.base/sun.nio.ch.SocketChannelImpl.endWrite(SocketChannelImpl.java:447)
	at java.base/sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:469)
	at java.base/sun.nio.ch.SinkChannelImpl.write(SinkChannelImpl.java:114)
	at java.base/java.nio.channels.Channels.writeFullyImpl(Channels.java:74)
	at java.base/java.nio.channels.Channels.writeFully(Channels.java:94)
	at java.base/java.nio.channels.Channels$1.write(Channels.java:172)
	at java.base/java.io.OutputStream.write(OutputStream.java:122)
	at java.base/java.nio.channels.Channels$1.write(Channels.java:152)
	at scala.meta.internal.metals.ClosableOutputStream.write(ClosableOutputStream.scala:26)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:137)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:108)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:67)
	... 20 more

2024.01.24 11:31:56 INFO  Scala test classes not supported by server
2024.01.24 11:31:56 INFO  Attempting to connect to the build server...
2024.01.24 11:31:56 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.24 11:31:56 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.24 11:31:56 INFO  time: Connected to build server in 48ms
2024.01.24 11:31:56 INFO  Connected to Build server: Bloop v1.5.13
2024.01.24 11:31:57 INFO  time: indexed workspace in 0.97s
2024.01.24 11:31:57 WARN  no build target for: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt
2024.01.24 11:31:58 INFO  no build target found for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt. Using presentation compiler with project's scala-library version: 3.3.1
2024.01.24 11:31:58 INFO  Generated JavaScript file 'C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\.bloop\livechart\livechart-test.js'
2024.01.24 11:31:58 INFO  time: code lens generation in 1.55s
2024.01.24 11:31:59 INFO  running 'C:\Program Files\Java\jdk-11\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\yashb\AppData\Local\Temp\metals6035014492930728806\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'
2024.01.24 11:32:00 INFO  sbt thinks that server is already booting because of this exception:
2024.01.24 11:32:00 ERROR sbt.internal.ServerAlreadyBootingException: java.io.IOException: Could not create lock for \\.\pipe\sbt-load-8489069467059247952_lock, error 5
2024.01.24 11:32:00 ERROR 	at sbt.internal.BootServerSocket.newSocket(BootServerSocket.java:356)
2024.01.24 11:32:00 ERROR 	at sbt.internal.BootServerSocket.<init>(BootServerSocket.java:295)
2024.01.24 11:32:00 ERROR 	at sbt.xMain$.getSocketOrExit(Main.scala:150)
2024.01.24 11:32:00 ERROR 	at sbt.xMain$.bootServerSocket$lzycompute$1(Main.scala:77)
2024.01.24 11:32:00 ERROR 	at sbt.xMain$.bootServerSocket$1(Main.scala:77)
2024.01.24 11:32:00 ERROR 	at sbt.xMain$.withStreams$1(Main.scala:85)
2024.01.24 11:32:00 ERROR 	at sbt.xMain$.run(Main.scala:121)
2024.01.24 11:32:00 ERROR 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
2024.01.24 11:32:00 ERROR 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
2024.01.24 11:32:00 ERROR 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
2024.01.24 11:32:00 ERROR 	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
2024.01.24 11:32:00 ERROR 	at sbt.internal.XMainConfiguration.run(XMainConfiguration.java:57)
2024.01.24 11:32:00 ERROR 	at sbt.xMain.run(Main.scala:46)
2024.01.24 11:32:00 ERROR 	at xsbt.boot.Launch$.$anonfun$run$1(Launch.scala:149)
2024.01.24 11:32:00 ERROR 	at xsbt.boot.Launch$.withContextLoader(Launch.scala:176)
2024.01.24 11:32:00 ERROR 	at xsbt.boot.Launch$.run(Launch.scala:149)
2024.01.24 11:32:00 ERROR 	at xsbt.boot.Launch$.$anonfun$apply$1(Launch.scala:44)
2024.01.24 11:32:00 ERROR 	at xsbt.boot.Launch$.launch(Launch.scala:159)
2024.01.24 11:32:00 ERROR 	at xsbt.boot.Launch$.apply(Launch.scala:44)
2024.01.24 11:32:00 ERROR 	at xsbt.boot.Launch$.apply(Launch.scala:21)
2024.01.24 11:32:00 ERROR 	at xsbt.boot.Boot$.runImpl(Boot.scala:78)
2024.01.24 11:32:00 ERROR 	at xsbt.boot.Boot$.run(Boot.scala:73)
2024.01.24 11:32:00 ERROR 	at xsbt.boot.Boot$.main(Boot.scala:21)
2024.01.24 11:32:00 ERROR 	at xsbt.boot.Boot.main(Boot.scala)
2024.01.24 11:32:00 ERROR Caused by: java.io.IOException: Could not create lock for \\.\pipe\sbt-load-8489069467059247952_lock, error 5
2024.01.24 11:32:00 ERROR 	at org.scalasbt.ipcsocket.Win32NamedPipeServerSocket.<init>(Win32NamedPipeServerSocket.java:129)
2024.01.24 11:32:00 ERROR 	at org.scalasbt.ipcsocket.Win32NamedPipeServerSocket.<init>(Win32NamedPipeServerSocket.java:48)
2024.01.24 11:32:00 ERROR 	at sbt.internal.BootServerSocket.newSocket(BootServerSocket.java:350)
2024.01.24 11:32:00 ERROR 	... 23 more
2024.01.24 11:32:00 INFO  time: ran 'sbt bloopInstall' in 1.02s
2024.01.24 11:32:00 ERROR sbt command failed: C:\Program Files\Java\jdk-11\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\yashb\AppData\Local\Temp\metals6035014492930728806\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall
2024.01.24 11:32:00 INFO  Disconnecting from Bloop session...
2024.01.24 11:32:00 INFO  Shut down connection with build server.
Jan. 24, 2024 11:32:00 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint notify
INFO: Failed to send notification message.
org.eclipse.lsp4j.jsonrpc.JsonRpcException: java.nio.channels.AsynchronousCloseException
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:72)
	at scala.meta.internal.metals.RequestMonitorImpl$$anon$1.consume(ServerLivenessMonitor.scala:39)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.notify(RemoteEndpoint.java:126)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.sendCancelNotification(RemoteEndpoint.java:180)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint$1.cancel(RemoteEndpoint.java:150)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$register$2(BuildServerConnection.scala:425)
	at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.scala:17)
	at scala.util.Try$.apply(Try.scala:210)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$register$1(BuildServerConnection.scala:425)
	at scala.meta.internal.metals.Cancelable$$anon$1.cancel(Cancelable.scala:18)
	at scala.meta.internal.metals.Cancelable$.$anonfun$cancelAll$1(Cancelable.scala:29)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.metals.Cancelable$.cancelAll(Cancelable.scala:28)
	at scala.meta.internal.metals.MutableCancelable.cancel(MutableCancelable.scala:25)
	at scala.meta.internal.metals.BuildServerConnection.cancel(BuildServerConnection.scala:365)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1(BuildServerConnection.scala:157)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$shutdown$1$adapted(BuildServerConnection.scala:149)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.nio.channels.AsynchronousCloseException
	at java.base/java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:202)
	at java.base/sun.nio.ch.SocketChannelImpl.endWrite(SocketChannelImpl.java:447)
	at java.base/sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:469)
	at java.base/sun.nio.ch.SinkChannelImpl.write(SinkChannelImpl.java:114)
	at java.base/java.nio.channels.Channels.writeFullyImpl(Channels.java:74)
	at java.base/java.nio.channels.Channels.writeFully(Channels.java:94)
	at java.base/java.nio.channels.Channels$1.write(Channels.java:172)
	at java.base/java.io.OutputStream.write(OutputStream.java:122)
	at java.base/java.nio.channels.Channels$1.write(Channels.java:152)
	at scala.meta.internal.metals.ClosableOutputStream.write(ClosableOutputStream.scala:26)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:137)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:108)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:67)
	... 20 more

2024.01.24 11:32:00 INFO  Scala test classes not supported by server
2024.01.24 11:32:00 INFO  Attempting to connect to the build server...
2024.01.24 11:32:00 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.24 11:32:00 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.24 11:32:00 INFO  time: Connected to build server in 49ms
2024.01.24 11:32:00 INFO  Connected to Build server: Bloop v1.5.13
2024.01.24 11:32:01 INFO  time: indexed workspace in 1.02s
2024.01.24 11:32:02 WARN  no build target for: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt
2024.01.24 11:32:02 INFO  Generated JavaScript file 'C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\.bloop\livechart\livechart-test.js'
2024.01.24 11:32:02 INFO  no build target found for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt. Using presentation compiler with project's scala-library version: 3.3.1
2024.01.24 11:32:02 INFO  time: code lens generation in 1.36s
2024.01.24 11:32:09 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt
scala.meta.tokenizers.TokenizeException: <input>:33: error: unclosed string literal
      libraryDependencies += "io.circe" %%%circe-core" % "0.14.3",
                                                                ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getStringLit(LegacyScanner.scala:553)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchDoubleQuote$1(LegacyScanner.scala:372)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:376)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.24 11:32:10 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt
scala.meta.tokenizers.TokenizeException: <input>:33: error: unclosed string literal
      libraryDependencies += "io.circe" %%% circe-core" % "0.14.3",
                                                                 ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getStringLit(LegacyScanner.scala:553)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchDoubleQuote$1(LegacyScanner.scala:372)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:376)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.24 11:32:13 INFO  running 'C:\Program Files\Java\jdk-11\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\yashb\AppData\Local\Temp\metals9858963448666898328\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'
2024.01.24 11:32:14 INFO  sbt thinks that server is already booting because of this exception:
2024.01.24 11:32:14 ERROR sbt.internal.ServerAlreadyBootingException: java.io.IOException: Could not create lock for \\.\pipe\sbt-load-8489069467059247952_lock, error 5
2024.01.24 11:32:14 ERROR 	at sbt.internal.BootServerSocket.newSocket(BootServerSocket.java:356)
2024.01.24 11:32:14 ERROR 	at sbt.internal.BootServerSocket.<init>(BootServerSocket.java:295)
2024.01.24 11:32:14 ERROR 	at sbt.xMain$.getSocketOrExit(Main.scala:150)
2024.01.24 11:32:14 ERROR 	at sbt.xMain$.bootServerSocket$lzycompute$1(Main.scala:77)
2024.01.24 11:32:14 ERROR 	at sbt.xMain$.bootServerSocket$1(Main.scala:77)
2024.01.24 11:32:14 ERROR 	at sbt.xMain$.withStreams$1(Main.scala:85)
2024.01.24 11:32:14 ERROR 	at sbt.xMain$.run(Main.scala:121)
2024.01.24 11:32:14 ERROR 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
2024.01.24 11:32:14 ERROR 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
2024.01.24 11:32:14 ERROR 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
2024.01.24 11:32:14 ERROR 	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
2024.01.24 11:32:14 ERROR 	at sbt.internal.XMainConfiguration.run(XMainConfiguration.java:57)
2024.01.24 11:32:14 ERROR 	at sbt.xMain.run(Main.scala:46)
2024.01.24 11:32:14 ERROR 	at xsbt.boot.Launch$.$anonfun$run$1(Launch.scala:149)
2024.01.24 11:32:14 ERROR 	at xsbt.boot.Launch$.withContextLoader(Launch.scala:176)
2024.01.24 11:32:14 ERROR 	at xsbt.boot.Launch$.run(Launch.scala:149)
2024.01.24 11:32:14 ERROR 	at xsbt.boot.Launch$.$anonfun$apply$1(Launch.scala:44)
2024.01.24 11:32:14 ERROR 	at xsbt.boot.Launch$.launch(Launch.scala:159)
2024.01.24 11:32:14 ERROR 	at xsbt.boot.Launch$.apply(Launch.scala:44)
2024.01.24 11:32:14 ERROR 	at xsbt.boot.Launch$.apply(Launch.scala:21)
2024.01.24 11:32:14 ERROR 	at xsbt.boot.Boot$.runImpl(Boot.scala:78)
2024.01.24 11:32:14 ERROR 	at xsbt.boot.Boot$.run(Boot.scala:73)
2024.01.24 11:32:14 ERROR 	at xsbt.boot.Boot$.main(Boot.scala:21)
2024.01.24 11:32:14 ERROR 	at xsbt.boot.Boot.main(Boot.scala)
2024.01.24 11:32:14 ERROR Caused by: java.io.IOException: Could not create lock for \\.\pipe\sbt-load-8489069467059247952_lock, error 5
2024.01.24 11:32:14 ERROR 	at org.scalasbt.ipcsocket.Win32NamedPipeServerSocket.<init>(Win32NamedPipeServerSocket.java:129)
2024.01.24 11:32:14 ERROR 	at org.scalasbt.ipcsocket.Win32NamedPipeServerSocket.<init>(Win32NamedPipeServerSocket.java:48)
2024.01.24 11:32:14 ERROR 	at sbt.internal.BootServerSocket.newSocket(BootServerSocket.java:350)
2024.01.24 11:32:14 ERROR 	... 23 more
2024.01.24 11:32:14 INFO  time: ran 'sbt bloopInstall' in 1.1s
2024.01.24 11:32:14 ERROR sbt command failed: C:\Program Files\Java\jdk-11\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\yashb\AppData\Local\Temp\metals9858963448666898328\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall
2024.01.24 11:32:14 INFO  Disconnecting from Bloop session...
2024.01.24 11:32:14 INFO  Cancelling compilation on Bloop server
2024.01.24 11:32:16 ERROR timeout: build server 'bloop' during shutdown
2024.01.24 11:32:16 INFO  Attempting to connect to the build server...
2024.01.24 11:32:16 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.24 11:32:16 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.24 11:32:16 INFO  time: Connected to build server in 39ms
2024.01.24 11:32:16 INFO  Connected to Build server: Bloop v1.5.13
2024.01.24 11:32:16 INFO  time: indexed workspace in 0.91s
2024.01.24 11:32:17 WARN  no build target for: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt
2024.01.24 11:32:34 WARN  no build target for: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt
2024.01.24 11:32:36 INFO  running 'C:\Program Files\Java\jdk-11\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\yashb\AppData\Local\Temp\metals4460898924912377207\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'
2024.01.24 11:32:37 ERROR sbt.internal.ServerAlreadyBootingException: java.io.IOException: Could not create lock for \\.\pipe\sbt-load-8489069467059247952_lock, error 5
2024.01.24 11:32:37 INFO  sbt thinks that server is already booting because of this exception:
2024.01.24 11:32:37 ERROR 	at sbt.internal.BootServerSocket.newSocket(BootServerSocket.java:356)
2024.01.24 11:32:37 ERROR 	at sbt.internal.BootServerSocket.<init>(BootServerSocket.java:295)
2024.01.24 11:32:37 ERROR 	at sbt.xMain$.getSocketOrExit(Main.scala:150)
2024.01.24 11:32:37 ERROR 	at sbt.xMain$.bootServerSocket$lzycompute$1(Main.scala:77)
2024.01.24 11:32:37 ERROR 	at sbt.xMain$.bootServerSocket$1(Main.scala:77)
2024.01.24 11:32:37 ERROR 	at sbt.xMain$.withStreams$1(Main.scala:85)
2024.01.24 11:32:37 ERROR 	at sbt.xMain$.run(Main.scala:121)
2024.01.24 11:32:37 ERROR 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
2024.01.24 11:32:37 ERROR 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
2024.01.24 11:32:37 ERROR 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
2024.01.24 11:32:37 ERROR 	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
2024.01.24 11:32:37 ERROR 	at sbt.internal.XMainConfiguration.run(XMainConfiguration.java:57)
2024.01.24 11:32:37 ERROR 	at sbt.xMain.run(Main.scala:46)
2024.01.24 11:32:37 ERROR 	at xsbt.boot.Launch$.$anonfun$run$1(Launch.scala:149)
2024.01.24 11:32:37 ERROR 	at xsbt.boot.Launch$.withContextLoader(Launch.scala:176)
2024.01.24 11:32:37 ERROR 	at xsbt.boot.Launch$.run(Launch.scala:149)
2024.01.24 11:32:37 ERROR 	at xsbt.boot.Launch$.$anonfun$apply$1(Launch.scala:44)
2024.01.24 11:32:37 ERROR 	at xsbt.boot.Launch$.launch(Launch.scala:159)
2024.01.24 11:32:37 ERROR 	at xsbt.boot.Launch$.apply(Launch.scala:44)
2024.01.24 11:32:37 ERROR 	at xsbt.boot.Launch$.apply(Launch.scala:21)
2024.01.24 11:32:37 ERROR 	at xsbt.boot.Boot$.runImpl(Boot.scala:78)
2024.01.24 11:32:37 ERROR 	at xsbt.boot.Boot$.run(Boot.scala:73)
2024.01.24 11:32:37 ERROR 	at xsbt.boot.Boot$.main(Boot.scala:21)
2024.01.24 11:32:37 ERROR 	at xsbt.boot.Boot.main(Boot.scala)
2024.01.24 11:32:37 ERROR Caused by: java.io.IOException: Could not create lock for \\.\pipe\sbt-load-8489069467059247952_lock, error 5
2024.01.24 11:32:37 ERROR 	at org.scalasbt.ipcsocket.Win32NamedPipeServerSocket.<init>(Win32NamedPipeServerSocket.java:129)
2024.01.24 11:32:37 ERROR 	at org.scalasbt.ipcsocket.Win32NamedPipeServerSocket.<init>(Win32NamedPipeServerSocket.java:48)
2024.01.24 11:32:37 ERROR 	at sbt.internal.BootServerSocket.newSocket(BootServerSocket.java:350)
2024.01.24 11:32:37 ERROR 	... 23 more
2024.01.24 11:32:37 INFO  time: ran 'sbt bloopInstall' in 1.21s
2024.01.24 11:32:37 ERROR sbt command failed: C:\Program Files\Java\jdk-11\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\yashb\AppData\Local\Temp\metals4460898924912377207\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall
2024.01.24 11:32:37 INFO  Disconnecting from Bloop session...
2024.01.24 11:32:37 INFO  Shut down connection with build server.
2024.01.24 11:32:37 INFO  Attempting to connect to the build server...
2024.01.24 11:32:37 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.24 11:32:37 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.24 11:32:37 INFO  time: Connected to build server in 53ms
2024.01.24 11:32:37 INFO  Connected to Build server: Bloop v1.5.13
2024.01.24 11:32:38 INFO  time: indexed workspace in 0.98s
2024.01.24 11:32:38 WARN  no build target for: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt
2024.01.24 11:32:39 INFO  no build target found for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt. Using presentation compiler with project's scala-library version: 3.3.1
2024.01.24 11:32:39 INFO  Generated JavaScript file 'C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\.bloop\livechart\livechart-test.js'
2024.01.24 11:32:39 INFO  time: code lens generation in 1.41s
2024.01.24 11:32:56 WARN  no build target for: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt
2024.01.24 11:32:56 INFO  skipping build import with status 'Failed'
2024.01.24 11:35:37 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala:85: error: [dialect scala3] illegal start of simple expression
                  .map(resp => match {
                               ^
Exception in thread "pool-28-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.24 11:35:52 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala:91: error: [dialect scala3] ) expected but string constant found
					}"Response: " + )
      ^
2024.01.24 11:35:52 WARN  Using indexes to guess the definition of Patient
2024.01.24 11:38:09 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
scala.meta.tokenizers.TokenizeException: <input>:93: error: unclosed string literal
                                      printlnfail.toString()}");
                                                             ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getStringLit(LegacyScanner.scala:553)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchDoubleQuote$1(LegacyScanner.scala:372)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:376)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.24 11:38:10 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
scala.meta.tokenizers.TokenizeException: <input>:93: error: unclosed string literal
                                      println(fail.toString()}");
                                                              ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getStringLit(LegacyScanner.scala:553)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchDoubleQuote$1(LegacyScanner.scala:372)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:376)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.24 11:38:17 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
scala.meta.tokenizers.TokenizeException: <input>:89: error: unclosed string interpolation
                          }
                           ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getStringPart(LegacyScanner.scala:659)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:249)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.24 11:38:24 WARN  Using indexes to guess the definition of Patient
2024.01.24 11:38:25 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala:92: error: [dialect scala3] ] expected but ( found
                              decode[List[Patient()]](value.toString) match {
                                                 ^
2024.01.24 11:38:28 WARN  Using indexes to guess the definition of value
2024.01.24 11:38:28 WARN  Using indexes to guess the definition of Patient
Jan. 24, 2024 11:38:28 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1266
2024.01.24 11:38:28 WARN  Using indexes to guess the definition of Patient
Exception in thread "pool-28-thread-2" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-28-thread-3" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Jan. 24, 2024 11:39:10 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1329
Exception in thread "pool-28-thread-4" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-28-thread-5" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-28-thread-6" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.24 11:39:26 INFO  Disconnecting from Bloop session...
2024.01.24 11:39:26 INFO  Cancelling compilation on Bloop server
2024.01.24 11:39:28 ERROR timeout: build server 'bloop' during shutdown
2024.01.24 11:39:28 ERROR Error while deleting directories inside .bloop
java.io.UncheckedIOException: java.nio.file.NoSuchFileException: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\.bloop\livechart\bloop-bsp-clients-classes\classes-Metals-T6S_pubeQyS5mrqvb0MgzQ==
	at java.nio.file.FileTreeIterator.fetchNextIfNeeded(FileTreeIterator.java:87)
	at java.nio.file.FileTreeIterator.hasNext(FileTreeIterator.java:103)
	at java.util.Spliterators$IteratorSpliterator.tryAdvance(Spliterators.java:1811)
	at java.util.stream.StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0(StreamSpliterators.java:294)
	at java.util.stream.StreamSpliterators$AbstractWrappingSpliterator.fillBuffer(StreamSpliterators.java:206)
	at java.util.stream.StreamSpliterators$AbstractWrappingSpliterator.doAdvance(StreamSpliterators.java:169)
	at java.util.stream.StreamSpliterators$WrappingSpliterator.tryAdvance(StreamSpliterators.java:300)
	at java.util.Spliterators$1Adapter.hasNext(Spliterators.java:681)
	at scala.collection.convert.JavaCollectionWrappers$JIteratorWrapper.hasNext(JavaCollectionWrappers.scala:46)
	at geny.Generator$SelfClosing.generate(Generator.scala:228)
	at geny.Generator$Mapped.generate(Generator.scala:283)
	at geny.Generator$Filtered.generate(Generator.scala:276)
	at geny.Generator.foreach(Generator.scala:49)
	at geny.Generator.foreach$(Generator.scala:49)
	at geny.Generator$Filtered.foreach(Generator.scala:274)
	at geny.Generator.toBuffer(Generator.scala:127)
	at geny.Generator.toBuffer$(Generator.scala:125)
	at geny.Generator$Filtered.toBuffer(Generator.scala:274)
	at geny.Generator.toList(Generator.scala:133)
	at geny.Generator.toList$(Generator.scala:133)
	at geny.Generator$Filtered.toList(Generator.scala:274)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionAbsolutePathBuffers.deleteRecursively(MetalsEnrichments.scala:585)
	at scala.meta.internal.metals.BloopDir$.$anonfun$clear$1(BloopDir.scala:10)
	at scala.meta.internal.metals.BloopDir$.$anonfun$clear$1$adapted(BloopDir.scala:9)
	at geny.Generator.$anonfun$foreach$1(Generator.scala:50)
	at geny.Generator$Mapped.$anonfun$generate$4(Generator.scala:283)
	at geny.Generator$SelfClosing.generate(Generator.scala:229)
	at geny.Generator$Mapped.generate(Generator.scala:283)
	at geny.Generator.foreach(Generator.scala:49)
	at geny.Generator.foreach$(Generator.scala:49)
	at geny.Generator$Mapped.foreach(Generator.scala:281)
	at scala.meta.internal.metals.BloopDir$.clear(BloopDir.scala:9)
	at scala.meta.internal.metals.MetalsLspService.clearBloopDir(MetalsLspService.scala:2751)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$resetWorkspace$2(MetalsLspService.scala:2766)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)
Caused by: java.nio.file.NoSuchFileException: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\.bloop\livechart\bloop-bsp-clients-classes\classes-Metals-T6S_pubeQyS5mrqvb0MgzQ==
	at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at sun.nio.fs.WindowsDirectoryStream.<init>(WindowsDirectoryStream.java:86)
	at sun.nio.fs.WindowsFileSystemProvider.newDirectoryStream(WindowsFileSystemProvider.java:523)
	at java.nio.file.Files.newDirectoryStream(Files.java:472)
	at java.nio.file.FileTreeWalker.visit(FileTreeWalker.java:300)
	at java.nio.file.FileTreeWalker.next(FileTreeWalker.java:373)
	at java.nio.file.FileTreeIterator.fetchNextIfNeeded(FileTreeIterator.java:94)
	at java.nio.file.FileTreeIterator.hasNext(FileTreeIterator.java:103)
	at java.util.Spliterators$IteratorSpliterator.tryAdvance(Spliterators.java:1811)
	at java.util.stream.StreamSpliterators$WrappingSpliterator.lambda$initPartialTraversalState$0(StreamSpliterators.java:294)
	at java.util.stream.StreamSpliterators$AbstractWrappingSpliterator.fillBuffer(StreamSpliterators.java:206)
	at java.util.stream.StreamSpliterators$AbstractWrappingSpliterator.doAdvance(StreamSpliterators.java:169)
	at java.util.stream.StreamSpliterators$WrappingSpliterator.tryAdvance(StreamSpliterators.java:300)
	at java.util.Spliterators$1Adapter.hasNext(Spliterators.java:681)
	at scala.collection.convert.JavaCollectionWrappers$JIteratorWrapper.hasNext(JavaCollectionWrappers.scala:46)
	at geny.Generator$SelfClosing.generate(Generator.scala:228)
	at geny.Generator$Mapped.generate(Generator.scala:283)
	at geny.Generator$Filtered.generate(Generator.scala:276)
	at geny.Generator.foreach(Generator.scala:49)
	at geny.Generator.foreach$(Generator.scala:49)
	at geny.Generator$Filtered.foreach(Generator.scala:274)
	at geny.Generator.toBuffer(Generator.scala:127)
	at geny.Generator.toBuffer$(Generator.scala:125)
	at geny.Generator$Filtered.toBuffer(Generator.scala:274)
	at geny.Generator.toList(Generator.scala:133)
	at geny.Generator.toList$(Generator.scala:133)
	at geny.Generator$Filtered.toList(Generator.scala:274)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionAbsolutePathBuffers.deleteRecursively(MetalsEnrichments.scala:585)
	at scala.meta.internal.metals.BloopDir$.$anonfun$clear$1(BloopDir.scala:10)
	at scala.meta.internal.metals.BloopDir$.$anonfun$clear$1$adapted(BloopDir.scala:9)
	at geny.Generator.$anonfun$foreach$1(Generator.scala:50)
	at geny.Generator$Mapped.$anonfun$generate$4(Generator.scala:283)
	at geny.Generator$SelfClosing.generate(Generator.scala:229)
	at geny.Generator$Mapped.generate(Generator.scala:283)
	at geny.Generator.foreach(Generator.scala:49)
	at geny.Generator.foreach$(Generator.scala:49)
	at geny.Generator$Mapped.foreach(Generator.scala:281)
	at scala.meta.internal.metals.BloopDir$.clear(BloopDir.scala:9)
	at scala.meta.internal.metals.MetalsLspService.clearBloopDir(MetalsLspService.scala:2751)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$resetWorkspace$2(MetalsLspService.scala:2766)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.24 11:39:28 INFO  Attempting to connect to the build server...
2024.01.24 11:39:28 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.24 11:39:31 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.24 11:39:32 INFO  time: Connected to build server in 3.79s
2024.01.24 11:39:32 INFO  Connected to Build server: Bloop v1.5.13
2024.01.24 11:39:32 INFO  time: Imported build in 0.1s
2024.01.24 11:39:32 INFO  time: indexed workspace in 0.9s
2024.01.24 11:39:33 WARN  no build target for: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt
2024.01.24 11:39:36 INFO  Generated JavaScript file 'C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\.bloop\livechart\livechart-test.js'
2024.01.24 11:39:47 INFO  Disconnecting from Bloop session...
2024.01.24 11:39:47 INFO  Cancelling compilation on Bloop server
2024.01.24 11:39:49 ERROR timeout: build server 'bloop' during shutdown
2024.01.24 11:39:49 INFO  Attempting to connect to the build server...
2024.01.24 11:39:49 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.24 11:39:50 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.24 11:39:51 INFO  time: Connected to build server in 2.7s
2024.01.24 11:39:51 INFO  Connected to Build server: Bloop v1.5.13
2024.01.24 11:39:52 INFO  time: indexed workspace in 0.83s
2024.01.24 11:39:52 WARN  no build target for: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt
2024.01.24 11:39:54 INFO  Shutting down server
2024.01.24 11:39:54 INFO  shutting down Metals
2024.01.24 11:39:55 INFO  Generated JavaScript file 'C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\.bloop\livechart\livechart-test.js'
2024.01.24 11:40:03 INFO  Started: Metals version 1.2.0 in folders 'C:\Users\yashb\Documents\vscode-laminar-vite-extension' for client Visual Studio Code 1.85.2.
2024.01.24 11:40:08 INFO  Attempting to connect to the build server...
2024.01.24 11:40:08 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.24 11:40:08 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.24 11:40:08 INFO  time: Connected to build server in 0.27s
2024.01.24 11:40:08 INFO  Connected to Build server: Bloop v1.5.13
2024.01.24 11:40:08 INFO  time: Imported build in 0.12s
2024.01.24 11:40:10 INFO  running 'C:\Program Files\Java\jdk-11\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\yashb\AppData\Local\Temp\metals11551307968268579492\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'
2024.01.24 11:40:10 INFO  no build target found for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala. Using presentation compiler with project's scala-library version: 3.3.1
2024.01.24 11:40:12 INFO  [info] welcome to sbt 1.8.2 (Oracle Corporation Java 11.0.18)
2024.01.24 11:40:12 INFO  [info] loading settings for project webview-ui-build-build-build from metals.sbt ...
2024.01.24 11:40:14 INFO  [info] loading project definition from C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\project\project\project
2024.01.24 11:40:14 INFO  time: indexed workspace in 3.27s
2024.01.24 11:40:15 INFO  Generated JavaScript file 'C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\.bloop\livechart\livechart-test.js'
2024.01.24 11:40:15 INFO  compiling livechart (1 scala source)
2024.01.24 11:40:15 INFO  [info] loading settings for project webview-ui-build-build from metals.sbt ...
2024.01.24 11:40:15 INFO  [info] loading project definition from C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\project\project
2024.01.24 11:40:19 INFO  [success] Generated .bloop\webview-ui-build-build.json
2024.01.24 11:40:19 INFO  [success] Total time: 3 s, completed Jan. 24, 2024, 11:40:19 a.m.
2024.01.24 11:40:19 INFO  [info] loading settings for project webview-ui-build from metals.sbt,plugins.sbt ...
2024.01.24 11:40:19 INFO  [info] loading project definition from C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\project
2024.01.24 11:40:21 INFO  [success] Generated .bloop\webview-ui-build.json
2024.01.24 11:40:21 INFO  [success] Total time: 2 s, completed Jan. 24, 2024, 11:40:21 a.m.
2024.01.24 11:40:22 INFO  [info] loading settings for project livechart from build.sbt ...
2024.01.24 11:40:22 INFO  [info] set current project to livechart (in build file:/C:/Users/yashb/Documents/vscode-laminar-vite-extension/webview-ui/)
2024.01.24 11:40:22 INFO  time: compiled livechart in 7.28s
2024.01.24 11:40:22 INFO  compiling livechart (1 scala source)
2024.01.24 11:40:24 INFO  [success] Generated .bloop\livechart-test.json
2024.01.24 11:40:24 INFO  [success] Generated .bloop\livechart.json
2024.01.24 11:40:24 INFO  [success] Total time: 2 s, completed Jan. 24, 2024, 11:40:24 a.m.
2024.01.24 11:40:24 INFO  time: ran 'sbt bloopInstall' in 14s
2024.01.24 11:40:25 INFO  Disconnecting from Bloop session...
2024.01.24 11:40:25 INFO  Cancelling compilation on Bloop server
2024.01.24 11:40:25 INFO  time: compiled livechart in 2.12s
2024.01.24 11:40:27 ERROR timeout: build server 'bloop' during shutdown
2024.01.24 11:40:27 INFO  Attempting to connect to the build server...
2024.01.24 11:40:27 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.24 11:40:27 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.24 11:40:27 INFO  time: Connected to build server in 49ms
2024.01.24 11:40:27 INFO  Connected to Build server: Bloop v1.5.13
2024.01.24 11:40:28 INFO  time: indexed workspace in 1.39s
2024.01.24 11:40:28 INFO  compiling livechart (17 scala sources)
Jan. 24, 2024 11:40:31 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 35
Jan. 24, 2024 11:40:31 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 34
Jan. 24, 2024 11:40:31 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 39
2024.01.24 11:40:33 INFO  time: compiled livechart in 5.02s
2024.01.24 11:41:19 INFO  compiling livechart (18 scala sources)
2024.01.24 11:41:23 INFO  time: compiled livechart in 4.25s
2024.01.24 11:41:23 INFO  compiling livechart (18 scala sources)
2024.01.24 11:41:26 INFO  time: compiled livechart in 2.63s
Jan. 24, 2024 11:41:27 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 109
Jan. 24, 2024 11:41:41 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 146
2024.01.24 11:41:49 WARN  Using indexes to guess the definition of Patient
2024.01.24 11:41:49 INFO  compiling livechart (18 scala sources)
2024.01.24 11:41:51 INFO  time: compiled livechart in 2.26s
2024.01.24 11:41:53 INFO  compiling livechart (18 scala sources)
2024.01.24 11:41:56 INFO  time: compiled livechart in 3.36s
2024.01.24 11:42:02 INFO  compiling livechart (18 scala sources)
2024.01.24 11:42:03 INFO  time: compiled livechart in 1.5s
2024.01.24 11:42:27 INFO  compiling livechart (18 scala sources)
2024.01.24 11:42:28 INFO  time: compiled livechart in 1.44s
2024.01.24 11:42:33 INFO  compiling livechart (18 scala sources)
2024.01.24 11:42:35 INFO  time: compiled livechart in 1.76s
2024.01.24 11:42:35 INFO  compiling livechart (18 scala sources)
2024.01.24 11:42:37 INFO  time: compiled livechart in 1.54s
2024.01.24 11:42:54 INFO  compiling livechart (18 scala sources)
2024.01.24 11:42:54 INFO  time: compiled livechart in 0.61s
2024.01.24 11:43:17 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala:102: error: [dialect scala3] identifier expected but } found
                  })
                  ^
2024.01.24 11:43:17 INFO  compiling livechart (18 scala sources)
2024.01.24 11:43:17 INFO  time: compiled livechart in 0.59s
Jan. 24, 2024 11:43:23 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 361
2024.01.24 11:43:31 INFO  compiling livechart (18 scala sources)
2024.01.24 11:43:32 INFO  time: compiled livechart in 1.39s
2024.01.24 11:43:36 INFO  compiling livechart (18 scala sources)
2024.01.24 11:43:36 INFO  time: compiled livechart in 0.58s
Jan. 24, 2024 11:43:55 A.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTrace
2024.01.24 11:45:09 INFO  compiling livechart (18 scala sources)
2024.01.24 11:45:15 INFO  time: compiled livechart in 5.77s
2024.01.24 11:45:35 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.sql/java/sql/Date.java

Uri: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.sql/java/sql/Date.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:703)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 24, 2024 11:45:35 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.sql/java/sql/Date.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 1996, 2016, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.sql;\n\nimport java.time.Instant;\nimport java.time.LocalDate;\n\n/**\n * \u003cP\u003eA thin wrapper around a millisecond value that allows\n * JDBC to identify this as an SQL \u003ccode\u003eDATE\u003c/code\u003e value.  A\n * milliseconds value represents the number of milliseconds that\n * have passed since January 1, 1970 00:00:00.000 GMT.\n * \u003cp\u003e\n * To conform with the definition of SQL \u003ccode\u003eDATE\u003c/code\u003e, the\n * millisecond values wrapped by a \u003ccode\u003ejava.sql.Date\u003c/code\u003e instance\n * must be \u0027normalized\u0027 by setting the\n * hours, minutes, seconds, and milliseconds to zero in the particular\n * time zone with which the instance is associated.\n *\n * @since 1.1\n */\npublic class Date extends java.util.Date {\n\n    /**\n     * Constructs a \u003ccode\u003eDate\u003c/code\u003e object initialized with the given\n     * year, month, and day.\n     * \u003cP\u003e\n     * The result is undefined if a given argument is out of bounds.\n     *\n     * @param year the year minus 1900; must be 0 to 8099. (Note that\n     *        8099 is 9999 minus 1900.)\n     * @param month 0 to 11\n     * @param day 1 to 31\n     * @deprecated instead use the constructor \u003ccode\u003eDate(long date)\u003c/code\u003e\n     */\n    @Deprecated(since\u003d\"1.2\")\n    public Date(int year, int month, int day) {\n        super(year, month, day);\n    }\n\n    /**\n     * Constructs a \u003ccode\u003eDate\u003c/code\u003e object using the given milliseconds\n     * time value.  If the given milliseconds value contains time\n     * information, the driver will set the time components to the\n     * time in the default time zone (the time zone of the Java virtual\n     * machine running the application) that corresponds to zero GMT.\n     *\n     * @param date milliseconds since January 1, 1970, 00:00:00 GMT not\n     *        to exceed the milliseconds representation for the year 8099.\n     *        A negative number indicates the number of milliseconds\n     *        before January 1, 1970, 00:00:00 GMT.\n     */\n    public Date(long date) {\n        // If the millisecond date value contains time info, mask it out.\n        super(date);\n\n    }\n\n    /**\n     * Sets an existing \u003ccode\u003eDate\u003c/code\u003e object\n     * using the given milliseconds time value.\n     * If the given milliseconds value contains time information,\n     * the driver will set the time components to the\n     * time in the default time zone (the time zone of the Java virtual\n     * machine running the application) that corresponds to zero GMT.\n     *\n     * @param date milliseconds since January 1, 1970, 00:00:00 GMT not\n     *        to exceed the milliseconds representation for the year 8099.\n     *        A negative number indicates the number of milliseconds\n     *        before January 1, 1970, 00:00:00 GMT.\n     */\n    public void setTime(long date) {\n        // If the millisecond date value contains time info, mask it out.\n        super.setTime(date);\n    }\n\n    /**\n     * Converts a string in JDBC date escape format to\n     * a \u003ccode\u003eDate\u003c/code\u003e value.\n     *\n     * @param s a \u003ccode\u003eString\u003c/code\u003e object representing a date in\n     *        in the format \"yyyy-[m]m-[d]d\". The leading zero for \u003ccode\u003emm\u003c/code\u003e\n     * and \u003ccode\u003edd\u003c/code\u003e may also be omitted.\n     * @return a \u003ccode\u003ejava.sql.Date\u003c/code\u003e object representing the\n     *         given date\n     * @throws IllegalArgumentException if the date given is not in the\n     *         JDBC date escape format (yyyy-[m]m-[d]d)\n     */\n    public static Date valueOf(String s) {\n        if (s \u003d\u003d null) {\n            throw new java.lang.IllegalArgumentException();\n        }\n        final int YEAR_LENGTH \u003d 4;\n        final int MONTH_LENGTH \u003d 2;\n        final int DAY_LENGTH \u003d 2;\n        final int MAX_MONTH \u003d 12;\n        final int MAX_DAY \u003d 31;\n        Date d \u003d null;\n\n        int firstDash \u003d s.indexOf(\u0027-\u0027);\n        int secondDash \u003d s.indexOf(\u0027-\u0027, firstDash + 1);\n        int len \u003d s.length();\n\n        if ((firstDash \u003e 0) \u0026\u0026 (secondDash \u003e 0) \u0026\u0026 (secondDash \u003c len - 1)) {\n            if (firstDash \u003d\u003d YEAR_LENGTH \u0026\u0026\n                    (secondDash - firstDash \u003e 1 \u0026\u0026 secondDash - firstDash \u003c\u003d MONTH_LENGTH + 1) \u0026\u0026\n                    (len - secondDash \u003e 1 \u0026\u0026 len - secondDash \u003c\u003d DAY_LENGTH + 1)) {\n                int year \u003d Integer.parseInt(s, 0, firstDash, 10);\n                int month \u003d Integer.parseInt(s, firstDash + 1, secondDash, 10);\n                int day \u003d Integer.parseInt(s, secondDash + 1, len, 10);\n\n                if ((month \u003e\u003d 1 \u0026\u0026 month \u003c\u003d MAX_MONTH) \u0026\u0026 (day \u003e\u003d 1 \u0026\u0026 day \u003c\u003d MAX_DAY)) {\n                    d \u003d new Date(year - 1900, month - 1, day);\n                }\n            }\n        }\n        if (d \u003d\u003d null) {\n            throw new java.lang.IllegalArgumentException();\n        }\n\n        return d;\n\n    }\n\n\n    /**\n     * Formats a date in the date escape format yyyy-mm-dd.\n     *\n     * @return a String in yyyy-mm-dd format\n     */\n    @SuppressWarnings(\"deprecation\")\n    public String toString () {\n        int year \u003d super.getYear() + 1900;\n        int month \u003d super.getMonth() + 1;\n        int day \u003d super.getDate();\n\n        char buf[] \u003d new char[10];\n        formatDecimalInt(year, buf, 0, 4);\n        buf[4] \u003d \u0027-\u0027;\n        Date.formatDecimalInt(month, buf, 5, 2);\n        buf[7] \u003d \u0027-\u0027;\n        Date.formatDecimalInt(day, buf, 8, 2);\n\n        return new String(buf);\n    }\n\n    /**\n     * Formats an unsigned integer into a char array in decimal output format.\n     * Numbers will be zero-padded or truncated if the string representation\n     * of the integer is smaller than or exceeds len, respectively.\n     *\n     * Should consider moving this to Integer and expose it through\n     * JavaLangAccess similar to Integer::formatUnsignedInt\n     * @param val  Value to convert\n     * @param buf  Array containing converted value\n     * @param offset Starting pos in buf\n     * @param len  length of output value\n     */\n    static void formatDecimalInt(int val, char[] buf, int offset, int len) {\n        int charPos \u003d offset + len;\n        do {\n            buf[--charPos] \u003d (char)(\u00270\u0027 + (val % 10));\n            val /\u003d 10;\n        } while (charPos \u003e offset);\n    }\n\n    // Override all the time operations inherited from java.util.Date;\n\n   /**\n    * This method is deprecated and should not be used because SQL Date\n    * values do not have a time component.\n    *\n    * @deprecated\n    * @exception java.lang.IllegalArgumentException if this method is invoked\n    * @see #setHours\n    */\n    @Deprecated(since\u003d\"1.2\")\n    public int getHours() {\n        throw new java.lang.IllegalArgumentException();\n    }\n\n   /**\n    * This method is deprecated and should not be used because SQL Date\n    * values do not have a time component.\n    *\n    * @deprecated\n    * @exception java.lang.IllegalArgumentException if this method is invoked\n    * @see #setMinutes\n    */\n    @Deprecated(since\u003d\"1.2\")\n    public int getMinutes() {\n        throw new java.lang.IllegalArgumentException();\n    }\n\n   /**\n    * This method is deprecated and should not be used because SQL Date\n    * values do not have a time component.\n    *\n    * @deprecated\n    * @exception java.lang.IllegalArgumentException if this method is invoked\n    * @see #setSeconds\n    */\n    @Deprecated(since\u003d\"1.2\")\n    public int getSeconds() {\n        throw new java.lang.IllegalArgumentException();\n    }\n\n   /**\n    * This method is deprecated and should not be used because SQL Date\n    * values do not have a time component.\n    *\n    * @deprecated\n    * @exception java.lang.IllegalArgumentException if this method is invoked\n    * @see #getHours\n    */\n    @Deprecated(since\u003d\"1.2\")\n    public void setHours(int i) {\n        throw new java.lang.IllegalArgumentException();\n    }\n\n   /**\n    * This method is deprecated and should not be used because SQL Date\n    * values do not have a time component.\n    *\n    * @deprecated\n    * @exception java.lang.IllegalArgumentException if this method is invoked\n    * @see #getMinutes\n    */\n    @Deprecated(since\u003d\"1.2\")\n    public void setMinutes(int i) {\n        throw new java.lang.IllegalArgumentException();\n    }\n\n   /**\n    * This method is deprecated and should not be used because SQL Date\n    * values do not have a time component.\n    *\n    * @deprecated\n    * @exception java.lang.IllegalArgumentException if this method is invoked\n    * @see #getSeconds\n    */\n    @Deprecated(since\u003d\"1.2\")\n    public void setSeconds(int i) {\n        throw new java.lang.IllegalArgumentException();\n    }\n\n   /**\n    * Private serial version unique ID to ensure serialization\n    * compatibility.\n    */\n    static final long serialVersionUID \u003d 1511598038487230103L;\n\n    /**\n     * Obtains an instance of {@code Date} from a {@link LocalDate} object\n     * with the same year, month and day of month value as the given\n     * {@code LocalDate}.\n     * \u003cp\u003e\n     * The provided {@code LocalDate} is interpreted as the local date\n     * in the local time zone.\n     *\n     * @param date a {@code LocalDate} to convert\n     * @return a {@code Date} object\n     * @exception NullPointerException if {@code date} is null\n     * @since 1.8\n     */\n    @SuppressWarnings(\"deprecation\")\n    public static Date valueOf(LocalDate date) {\n        return new Date(date.getYear() - 1900, date.getMonthValue() -1,\n                        date.getDayOfMonth());\n    }\n\n    /**\n     * Creates a {@code LocalDate} instance using the year, month and day\n     * from this {@code Date} object.\n     * @return a {@code LocalDate} object representing the same date value\n     *\n     * @since 1.8\n     */\n    @SuppressWarnings(\"deprecation\")\n    public LocalDate toLocalDate() {\n        return LocalDate.of(getYear() + 1900, getMonth() + 1, getDate());\n    }\n\n   /**\n    * This method always throws an UnsupportedOperationException and should\n    * not be used because SQL {@code Date} values do not have a time\n    * component.\n    *\n    * @exception java.lang.UnsupportedOperationException if this method is invoked\n    */\n    @Override\n    public Instant toInstant() {\n        throw new java.lang.UnsupportedOperationException();\n    }\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.sql/java/sql/Date.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:339)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 16 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.sql/java/sql/Date.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 24 more

Jan. 24, 2024 11:45:35 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.sql/java/sql/Date.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.sql/java/sql/Date.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:358)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 16 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.sql/java/sql/Date.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 24 more

Jan. 24, 2024 11:45:35 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 504
Jan. 24, 2024 11:45:40 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 519
2024.01.24 11:45:43 INFO  compiling livechart (1 scala source)
2024.01.24 11:45:43 INFO  time: compiled livechart in 0.31s
2024.01.24 11:45:49 INFO  compiling livechart (1 scala source)
2024.01.24 11:45:49 INFO  time: compiled livechart in 0.62s
2024.01.24 11:46:03 INFO  compiling livechart (1 scala source)
2024.01.24 11:46:03 INFO  time: compiled livechart in 0.15s
2024.01.24 11:46:11 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.sql/java/sql/Timestamp.java

Uri: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.sql/java/sql/Timestamp.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:703)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 24, 2024 11:46:11 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.sql/java/sql/Timestamp.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 1996, 2017, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.sql;\n\nimport java.time.Instant;\nimport java.time.LocalDateTime;\n\n/**\n * \u003cP\u003eA thin wrapper around {@code java.util.Date} that allows\n * the JDBC API to identify this as an SQL {@code TIMESTAMP} value.\n * It adds the ability\n * to hold the SQL {@code TIMESTAMP} fractional seconds value, by allowing\n * the specification of fractional seconds to a precision of nanoseconds.\n * A Timestamp also provides formatting and\n * parsing operations to support the JDBC escape syntax for timestamp values.\n *\n * \u003cp\u003eThe precision of a Timestamp object is calculated to be either:\n * \u003cul\u003e\n * \u003cli\u003e{@code 19 }, which is the number of characters in yyyy-mm-dd hh:mm:ss\n * \u003cli\u003e {@code  20 + s }, which is the number\n * of characters in the yyyy-mm-dd hh:mm:ss.[fff...] and {@code s} represents  the scale of the given Timestamp,\n * its fractional seconds precision.\n *\u003c/ul\u003e\n *\n * \u003cP\u003e\u003cB\u003eNote:\u003c/B\u003e This type is a composite of a {@code java.util.Date} and a\n * separate nanoseconds value. Only integral seconds are stored in the\n * {@code java.util.Date} component. The fractional seconds - the nanos - are\n * separate.  The {@code Timestamp.equals(Object)} method never returns\n * {@code true} when passed an object\n * that isn\u0027t an instance of {@code java.sql.Timestamp},\n * because the nanos component of a date is unknown.\n * As a result, the {@code Timestamp.equals(Object)}\n * method is not symmetric with respect to the\n * {@code java.util.Date.equals(Object)}\n * method.  Also, the {@code hashCode} method uses the underlying\n * {@code java.util.Date}\n * implementation and therefore does not include nanos in its computation.\n * \u003cP\u003e\n * Due to the differences between the {@code Timestamp} class\n * and the {@code java.util.Date}\n * class mentioned above, it is recommended that code not view\n * {@code Timestamp} values generically as an instance of\n * {@code java.util.Date}.  The\n * inheritance relationship between {@code Timestamp}\n * and {@code java.util.Date} really\n * denotes implementation inheritance, and not type inheritance.\n *\n * @since 1.1\n */\npublic class Timestamp extends java.util.Date {\n\n    /**\n     * Constructs a {@code Timestamp} object initialized\n     * with the given values.\n     *\n     * @param year the year minus 1900\n     * @param month 0 to 11\n     * @param date 1 to 31\n     * @param hour 0 to 23\n     * @param minute 0 to 59\n     * @param second 0 to 59\n     * @param nano 0 to 999,999,999\n     * @deprecated instead use the constructor {@code Timestamp(long millis)}\n     * @exception IllegalArgumentException if the nano argument is out of bounds\n     */\n    @Deprecated(since\u003d\"1.2\")\n    public Timestamp(int year, int month, int date,\n                     int hour, int minute, int second, int nano) {\n        super(year, month, date, hour, minute, second);\n        if (nano \u003e 999999999 || nano \u003c 0) {\n            throw new IllegalArgumentException(\"nanos \u003e 999999999 or \u003c 0\");\n        }\n        nanos \u003d nano;\n    }\n\n    /**\n     * Constructs a {@code Timestamp} object\n     * using a milliseconds time value. The\n     * integral seconds are stored in the underlying date value; the\n     * fractional seconds are stored in the {@code nanos} field of\n     * the {@code Timestamp} object.\n     *\n     * @param time milliseconds since January 1, 1970, 00:00:00 GMT.\n     *        A negative number is the number of milliseconds before\n     *         January 1, 1970, 00:00:00 GMT.\n     * @see java.util.Calendar\n     */\n    public Timestamp(long time) {\n        super((time/1000)*1000);\n        nanos \u003d (int)((time%1000) * 1000000);\n        if (nanos \u003c 0) {\n            nanos \u003d 1000000000 + nanos;\n            super.setTime(((time/1000)-1)*1000);\n        }\n    }\n\n    /**\n     * Sets this {@code Timestamp} object to represent a point in time that is\n     * {@code time} milliseconds after January 1, 1970 00:00:00 GMT.\n     *\n     * @param time   the number of milliseconds.\n     * @see #getTime\n     * @see #Timestamp(long time)\n     * @see java.util.Calendar\n     */\n    public void setTime(long time) {\n        super.setTime((time/1000)*1000);\n        nanos \u003d (int)((time%1000) * 1000000);\n        if (nanos \u003c 0) {\n            nanos \u003d 1000000000 + nanos;\n            super.setTime(((time/1000)-1)*1000);\n        }\n    }\n\n    /**\n     * Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT\n     * represented by this {@code Timestamp} object.\n     *\n     * @return  the number of milliseconds since January 1, 1970, 00:00:00 GMT\n     *          represented by this date.\n     * @see #setTime\n     */\n    public long getTime() {\n        long time \u003d super.getTime();\n        return (time + (nanos / 1000000));\n    }\n\n\n    /**\n     * @serial\n     */\n    private int nanos;\n\n    /**\n     * Converts a {@code String} object in JDBC timestamp escape format to a\n     * {@code Timestamp} value.\n     *\n     * @param s timestamp in format {@code yyyy-[m]m-[d]d hh:mm:ss[.f...]}.  The\n     * fractional seconds may be omitted. The leading zero for {@code mm}\n     * and {@code dd} may also be omitted.\n     *\n     * @return corresponding {@code Timestamp} value\n     * @exception java.lang.IllegalArgumentException if the given argument\n     * does not have the format {@code yyyy-[m]m-[d]d hh:mm:ss[.f...]}\n     */\n    public static Timestamp valueOf(String s) {\n        final int YEAR_LENGTH \u003d 4;\n        final int MONTH_LENGTH \u003d 2;\n        final int DAY_LENGTH \u003d 2;\n        final int MAX_MONTH \u003d 12;\n        final int MAX_DAY \u003d 31;\n        int year \u003d 0;\n        int month \u003d 0;\n        int day \u003d 0;\n        int hour;\n        int minute;\n        int second;\n        int a_nanos \u003d 0;\n        int firstDash;\n        int secondDash;\n        int dividingSpace;\n        int firstColon;\n        int secondColon;\n        int period;\n        String formatError \u003d \"Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]\";\n\n        if (s \u003d\u003d null) throw new java.lang.IllegalArgumentException(\"null string\");\n\n        // Split the string into date and time components\n        s \u003d s.trim();\n        dividingSpace \u003d s.indexOf(\u0027 \u0027);\n        if (dividingSpace \u003c 0) {\n            throw new java.lang.IllegalArgumentException(formatError);\n        }\n\n        // Parse the date\n        firstDash \u003d s.indexOf(\u0027-\u0027);\n        secondDash \u003d s.indexOf(\u0027-\u0027, firstDash+1);\n\n        // Parse the time\n        firstColon \u003d s.indexOf(\u0027:\u0027, dividingSpace + 1);\n        secondColon \u003d s.indexOf(\u0027:\u0027, firstColon + 1);\n        period \u003d s.indexOf(\u0027.\u0027, secondColon + 1);\n\n        // Convert the date\n        boolean parsedDate \u003d false;\n        if (firstDash \u003e 0 \u0026\u0026 secondDash \u003e 0 \u0026\u0026 secondDash \u003c dividingSpace - 1) {\n            if (firstDash \u003d\u003d YEAR_LENGTH \u0026\u0026\n                    (secondDash - firstDash \u003e 1 \u0026\u0026 secondDash - firstDash \u003c\u003d MONTH_LENGTH + 1) \u0026\u0026\n                    (dividingSpace - secondDash \u003e 1 \u0026\u0026 dividingSpace - secondDash \u003c\u003d DAY_LENGTH + 1)) {\n                 year \u003d Integer.parseInt(s, 0, firstDash, 10);\n                 month \u003d Integer.parseInt(s, firstDash + 1, secondDash, 10);\n                 day \u003d Integer.parseInt(s, secondDash + 1, dividingSpace, 10);\n\n                if ((month \u003e\u003d 1 \u0026\u0026 month \u003c\u003d MAX_MONTH) \u0026\u0026 (day \u003e\u003d 1 \u0026\u0026 day \u003c\u003d MAX_DAY)) {\n                    parsedDate \u003d true;\n                }\n            }\n        }\n        if (! parsedDate) {\n            throw new java.lang.IllegalArgumentException(formatError);\n        }\n\n        // Convert the time; default missing nanos\n        int len \u003d s.length();\n        if (firstColon \u003e 0 \u0026\u0026 secondColon \u003e 0 \u0026\u0026 secondColon \u003c len - 1) {\n            hour \u003d Integer.parseInt(s, dividingSpace + 1, firstColon, 10);\n            minute \u003d Integer.parseInt(s, firstColon + 1, secondColon, 10);\n            if (period \u003e 0 \u0026\u0026 period \u003c len - 1) {\n                second \u003d Integer.parseInt(s, secondColon + 1, period, 10);\n                int nanoPrecision \u003d len - (period + 1);\n                if (nanoPrecision \u003e 9)\n                    throw new java.lang.IllegalArgumentException(formatError);\n                if (!Character.isDigit(s.charAt(period + 1)))\n                    throw new java.lang.IllegalArgumentException(formatError);\n                int tmpNanos \u003d Integer.parseInt(s, period + 1, len, 10);\n                while (nanoPrecision \u003c 9) {\n                    tmpNanos *\u003d 10;\n                    nanoPrecision++;\n                }\n                a_nanos \u003d tmpNanos;\n            } else if (period \u003e 0) {\n                throw new java.lang.IllegalArgumentException(formatError);\n            } else {\n                second \u003d Integer.parseInt(s, secondColon + 1, len, 10);\n            }\n        } else {\n            throw new java.lang.IllegalArgumentException(formatError);\n        }\n\n        return new Timestamp(year - 1900, month - 1, day, hour, minute, second, a_nanos);\n    }\n\n    /**\n     * Formats a timestamp in JDBC timestamp escape format.\n     *         {@code yyyy-mm-dd hh:mm:ss.fffffffff},\n     * where {@code fffffffff} indicates nanoseconds.\n     *\n     * @return a {@code String} object in\n     *           {@code yyyy-mm-dd hh:mm:ss.fffffffff} format\n     */\n    @SuppressWarnings(\"deprecation\")\n    public String toString() {\n        int year \u003d super.getYear() + 1900;\n        int month \u003d super.getMonth() + 1;\n        int day \u003d super.getDate();\n        int hour \u003d super.getHours();\n        int minute \u003d super.getMinutes();\n        int second \u003d super.getSeconds();\n\n        int trailingZeros \u003d 0;\n        int tmpNanos \u003d nanos;\n        if (tmpNanos \u003d\u003d 0) {\n            trailingZeros \u003d 8;\n        } else {\n            while (tmpNanos % 10 \u003d\u003d 0) {\n                tmpNanos /\u003d 10;\n                trailingZeros++;\n            }\n        }\n\n        // 8058429: To comply with current JCK tests, we need to deal with year\n        // being any number between 0 and 292278995\n        int count \u003d 10000;\n        int yearSize \u003d 4;\n        do {\n            if (year \u003c count) {\n                break;\n            }\n            yearSize++;\n            count *\u003d 10;\n        } while (count \u003c 1000000000);\n\n        char[] buf \u003d new char[25 + yearSize - trailingZeros];\n        Date.formatDecimalInt(year, buf, 0, yearSize);\n        buf[yearSize] \u003d \u0027-\u0027;\n        Date.formatDecimalInt(month, buf, yearSize + 1, 2);\n        buf[yearSize + 3] \u003d \u0027-\u0027;\n        Date.formatDecimalInt(day, buf, yearSize + 4, 2);\n        buf[yearSize + 6] \u003d \u0027 \u0027;\n        Date.formatDecimalInt(hour, buf, yearSize + 7, 2);\n        buf[yearSize + 9] \u003d \u0027:\u0027;\n        Date.formatDecimalInt(minute, buf, yearSize + 10, 2);\n        buf[yearSize + 12] \u003d \u0027:\u0027;\n        Date.formatDecimalInt(second, buf, yearSize + 13, 2);\n        buf[yearSize + 15] \u003d \u0027.\u0027;\n        Date.formatDecimalInt(tmpNanos, buf, yearSize + 16, 9 - trailingZeros);\n\n        return new String(buf);\n    }\n\n    /**\n     * Gets this {@code Timestamp} object\u0027s {@code nanos} value.\n     *\n     * @return this {@code Timestamp} object\u0027s fractional seconds component\n     * @see #setNanos\n     */\n    public int getNanos() {\n        return nanos;\n    }\n\n    /**\n     * Sets this {@code Timestamp} object\u0027s {@code nanos} field\n     * to the given value.\n     *\n     * @param n the new fractional seconds component\n     * @exception java.lang.IllegalArgumentException if the given argument\n     *            is greater than 999999999 or less than 0\n     * @see #getNanos\n     */\n    public void setNanos(int n) {\n        if (n \u003e 999999999 || n \u003c 0) {\n            throw new IllegalArgumentException(\"nanos \u003e 999999999 or \u003c 0\");\n        }\n        nanos \u003d n;\n    }\n\n    /**\n     * Tests to see if this {@code Timestamp} object is\n     * equal to the given {@code Timestamp} object.\n     *\n     * @param ts the {@code Timestamp} value to compare with\n     * @return {@code true} if the given {@code Timestamp}\n     *         object is equal to this {@code Timestamp} object;\n     *         {@code false} otherwise\n     */\n    public boolean equals(Timestamp ts) {\n        if (super.equals(ts)) {\n            if  (nanos \u003d\u003d ts.nanos) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Tests to see if this {@code Timestamp} object is\n     * equal to the given object.\n     *\n     * This version of the method {@code equals} has been added\n     * to fix the incorrect\n     * signature of {@code Timestamp.equals(Timestamp)} and to preserve backward\n     * compatibility with existing class files.\n     *\n     * Note: This method is not symmetric with respect to the\n     * {@code equals(Object)} method in the base class.\n     *\n     * @param ts the {@code Object} value to compare with\n     * @return {@code true} if the given {@code Object} is an instance\n     *         of a {@code Timestamp} that\n     *         is equal to this {@code Timestamp} object;\n     *         {@code false} otherwise\n     */\n    public boolean equals(java.lang.Object ts) {\n      if (ts instanceof Timestamp) {\n        return this.equals((Timestamp)ts);\n      } else {\n        return false;\n      }\n    }\n\n    /**\n     * Indicates whether this {@code Timestamp} object is\n     * earlier than the given {@code Timestamp} object.\n     *\n     * @param ts the {@code Timestamp} value to compare with\n     * @return {@code true} if this {@code Timestamp} object is earlier;\n     *        {@code false} otherwise\n     */\n    public boolean before(Timestamp ts) {\n        return compareTo(ts) \u003c 0;\n    }\n\n    /**\n     * Indicates whether this {@code Timestamp} object is\n     * later than the given {@code Timestamp} object.\n     *\n     * @param ts the {@code Timestamp} value to compare with\n     * @return {@code true} if this {@code Timestamp} object is later;\n     *        {@code false} otherwise\n     */\n    public boolean after(Timestamp ts) {\n        return compareTo(ts) \u003e 0;\n    }\n\n    /**\n     * Compares this {@code Timestamp} object to the given\n     * {@code Timestamp} object.\n     *\n     * @param   ts   the {@code Timestamp} object to be compared to\n     *                this {@code Timestamp} object\n     * @return  the value {@code 0} if the two {@code Timestamp}\n     *          objects are equal; a value less than {@code 0} if this\n     *          {@code Timestamp} object is before the given argument;\n     *          and a value greater than {@code 0} if this\n     *          {@code Timestamp} object is after the given argument.\n     * @since   1.4\n     */\n    public int compareTo(Timestamp ts) {\n        long thisTime \u003d this.getTime();\n        long anotherTime \u003d ts.getTime();\n        int i \u003d (thisTime\u003canotherTime ? -1 :(thisTime\u003d\u003danotherTime?0 :1));\n        if (i \u003d\u003d 0) {\n            if (nanos \u003e ts.nanos) {\n                    return 1;\n            } else if (nanos \u003c ts.nanos) {\n                return -1;\n            }\n        }\n        return i;\n    }\n\n    /**\n     * Compares this {@code Timestamp} object to the given\n     * {@code Date} object.\n     *\n     * @param o the {@code Date} to be compared to\n     *          this {@code Timestamp} object\n     * @return  the value {@code 0} if this {@code Timestamp} object\n     *          and the given object are equal; a value less than {@code 0}\n     *          if this  {@code Timestamp} object is before the given argument;\n     *          and a value greater than {@code 0} if this\n     *          {@code Timestamp} object is after the given argument.\n     *\n     * @since   1.5\n     */\n    public int compareTo(java.util.Date o) {\n       if(o instanceof Timestamp) {\n            // When Timestamp instance compare it with a Timestamp\n            // Hence it is basically calling this.compareTo((Timestamp))o);\n            // Note typecasting is safe because o is instance of Timestamp\n           return compareTo((Timestamp)o);\n      } else {\n            // When Date doing a o.compareTo(this)\n            // will give wrong results.\n          Timestamp ts \u003d new Timestamp(o.getTime());\n          return this.compareTo(ts);\n      }\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * The {@code hashCode} method uses the underlying {@code java.util.Date}\n     * implementation and therefore does not include nanos in its computation.\n     *\n     */\n    @Override\n    public int hashCode() {\n        return super.hashCode();\n    }\n\n    static final long serialVersionUID \u003d 2745179027874758501L;\n\n    private static final int MILLIS_PER_SECOND \u003d 1000;\n\n    /**\n     * Obtains an instance of {@code Timestamp} from a {@code LocalDateTime}\n     * object, with the same year, month, day of month, hours, minutes,\n     * seconds and nanos date-time value as the provided {@code LocalDateTime}.\n     * \u003cp\u003e\n     * The provided {@code LocalDateTime} is interpreted as the local\n     * date-time in the local time zone.\n     *\n     * @param dateTime a {@code LocalDateTime} to convert\n     * @return a {@code Timestamp} object\n     * @exception NullPointerException if {@code dateTime} is null.\n     * @since 1.8\n     */\n    @SuppressWarnings(\"deprecation\")\n    public static Timestamp valueOf(LocalDateTime dateTime) {\n        return new Timestamp(dateTime.getYear() - 1900,\n                             dateTime.getMonthValue() - 1,\n                             dateTime.getDayOfMonth(),\n                             dateTime.getHour(),\n                             dateTime.getMinute(),\n                             dateTime.getSecond(),\n                             dateTime.getNano());\n    }\n\n    /**\n     * Converts this {@code Timestamp} object to a {@code LocalDateTime}.\n     * \u003cp\u003e\n     * The conversion creates a {@code LocalDateTime} that represents the\n     * same year, month, day of month, hours, minutes, seconds and nanos\n     * date-time value as this {@code Timestamp} in the local time zone.\n     *\n     * @return a {@code LocalDateTime} object representing the same date-time value\n     * @since 1.8\n     */\n    @SuppressWarnings(\"deprecation\")\n    public LocalDateTime toLocalDateTime() {\n        return LocalDateTime.of(getYear() + 1900,\n                                getMonth() + 1,\n                                getDate(),\n                                getHours(),\n                                getMinutes(),\n                                getSeconds(),\n                                getNanos());\n    }\n\n    /**\n     * Obtains an instance of {@code Timestamp} from an {@link Instant} object.\n     * \u003cp\u003e\n     * {@code Instant} can store points on the time-line further in the future\n     * and further in the past than {@code Date}. In this scenario, this method\n     * will throw an exception.\n     *\n     * @param instant  the instant to convert\n     * @return an {@code Timestamp} representing the same point on the time-line as\n     *  the provided instant\n     * @exception NullPointerException if {@code instant} is null.\n     * @exception IllegalArgumentException if the instant is too large to\n     *  represent as a {@code Timestamp}\n     * @since 1.8\n     */\n    public static Timestamp from(Instant instant) {\n        try {\n            Timestamp stamp \u003d new Timestamp(instant.getEpochSecond() * MILLIS_PER_SECOND);\n            stamp.nanos \u003d instant.getNano();\n            return stamp;\n        } catch (ArithmeticException ex) {\n            throw new IllegalArgumentException(ex);\n        }\n    }\n\n    /**\n     * Converts this {@code Timestamp} object to an {@code Instant}.\n     * \u003cp\u003e\n     * The conversion creates an {@code Instant} that represents the same\n     * point on the time-line as this {@code Timestamp}.\n     *\n     * @return an instant representing the same point on the time-line\n     * @since 1.8\n     */\n    @Override\n    public Instant toInstant() {\n        return Instant.ofEpochSecond(super.getTime() / MILLIS_PER_SECOND, nanos);\n    }\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.sql/java/sql/Timestamp.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:339)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 16 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.sql/java/sql/Timestamp.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 24 more

Jan. 24, 2024 11:46:11 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.sql/java/sql/Timestamp.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.sql/java/sql/Timestamp.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:358)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 16 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.sql/java/sql/Timestamp.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 24 more

2024.01.24 11:46:11 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.sql/java/sql/Timestamp.java

Uri: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.sql/java/sql/Timestamp.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:703)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 24, 2024 11:46:11 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.sql/java/sql/Timestamp.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 1996, 2017, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.sql;\n\nimport java.time.Instant;\nimport java.time.LocalDateTime;\n\n/**\n * \u003cP\u003eA thin wrapper around {@code java.util.Date} that allows\n * the JDBC API to identify this as an SQL {@code TIMESTAMP} value.\n * It adds the ability\n * to hold the SQL {@code TIMESTAMP} fractional seconds value, by allowing\n * the specification of fractional seconds to a precision of nanoseconds.\n * A Timestamp also provides formatting and\n * parsing operations to support the JDBC escape syntax for timestamp values.\n *\n * \u003cp\u003eThe precision of a Timestamp object is calculated to be either:\n * \u003cul\u003e\n * \u003cli\u003e{@code 19 }, which is the number of characters in yyyy-mm-dd hh:mm:ss\n * \u003cli\u003e {@code  20 + s }, which is the number\n * of characters in the yyyy-mm-dd hh:mm:ss.[fff...] and {@code s} represents  the scale of the given Timestamp,\n * its fractional seconds precision.\n *\u003c/ul\u003e\n *\n * \u003cP\u003e\u003cB\u003eNote:\u003c/B\u003e This type is a composite of a {@code java.util.Date} and a\n * separate nanoseconds value. Only integral seconds are stored in the\n * {@code java.util.Date} component. The fractional seconds - the nanos - are\n * separate.  The {@code Timestamp.equals(Object)} method never returns\n * {@code true} when passed an object\n * that isn\u0027t an instance of {@code java.sql.Timestamp},\n * because the nanos component of a date is unknown.\n * As a result, the {@code Timestamp.equals(Object)}\n * method is not symmetric with respect to the\n * {@code java.util.Date.equals(Object)}\n * method.  Also, the {@code hashCode} method uses the underlying\n * {@code java.util.Date}\n * implementation and therefore does not include nanos in its computation.\n * \u003cP\u003e\n * Due to the differences between the {@code Timestamp} class\n * and the {@code java.util.Date}\n * class mentioned above, it is recommended that code not view\n * {@code Timestamp} values generically as an instance of\n * {@code java.util.Date}.  The\n * inheritance relationship between {@code Timestamp}\n * and {@code java.util.Date} really\n * denotes implementation inheritance, and not type inheritance.\n *\n * @since 1.1\n */\npublic class Timestamp extends java.util.Date {\n\n    /**\n     * Constructs a {@code Timestamp} object initialized\n     * with the given values.\n     *\n     * @param year the year minus 1900\n     * @param month 0 to 11\n     * @param date 1 to 31\n     * @param hour 0 to 23\n     * @param minute 0 to 59\n     * @param second 0 to 59\n     * @param nano 0 to 999,999,999\n     * @deprecated instead use the constructor {@code Timestamp(long millis)}\n     * @exception IllegalArgumentException if the nano argument is out of bounds\n     */\n    @Deprecated(since\u003d\"1.2\")\n    public Timestamp(int year, int month, int date,\n                     int hour, int minute, int second, int nano) {\n        super(year, month, date, hour, minute, second);\n        if (nano \u003e 999999999 || nano \u003c 0) {\n            throw new IllegalArgumentException(\"nanos \u003e 999999999 or \u003c 0\");\n        }\n        nanos \u003d nano;\n    }\n\n    /**\n     * Constructs a {@code Timestamp} object\n     * using a milliseconds time value. The\n     * integral seconds are stored in the underlying date value; the\n     * fractional seconds are stored in the {@code nanos} field of\n     * the {@code Timestamp} object.\n     *\n     * @param time milliseconds since January 1, 1970, 00:00:00 GMT.\n     *        A negative number is the number of milliseconds before\n     *         January 1, 1970, 00:00:00 GMT.\n     * @see java.util.Calendar\n     */\n    public Timestamp(long time) {\n        super((time/1000)*1000);\n        nanos \u003d (int)((time%1000) * 1000000);\n        if (nanos \u003c 0) {\n            nanos \u003d 1000000000 + nanos;\n            super.setTime(((time/1000)-1)*1000);\n        }\n    }\n\n    /**\n     * Sets this {@code Timestamp} object to represent a point in time that is\n     * {@code time} milliseconds after January 1, 1970 00:00:00 GMT.\n     *\n     * @param time   the number of milliseconds.\n     * @see #getTime\n     * @see #Timestamp(long time)\n     * @see java.util.Calendar\n     */\n    public void setTime(long time) {\n        super.setTime((time/1000)*1000);\n        nanos \u003d (int)((time%1000) * 1000000);\n        if (nanos \u003c 0) {\n            nanos \u003d 1000000000 + nanos;\n            super.setTime(((time/1000)-1)*1000);\n        }\n    }\n\n    /**\n     * Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT\n     * represented by this {@code Timestamp} object.\n     *\n     * @return  the number of milliseconds since January 1, 1970, 00:00:00 GMT\n     *          represented by this date.\n     * @see #setTime\n     */\n    public long getTime() {\n        long time \u003d super.getTime();\n        return (time + (nanos / 1000000));\n    }\n\n\n    /**\n     * @serial\n     */\n    private int nanos;\n\n    /**\n     * Converts a {@code String} object in JDBC timestamp escape format to a\n     * {@code Timestamp} value.\n     *\n     * @param s timestamp in format {@code yyyy-[m]m-[d]d hh:mm:ss[.f...]}.  The\n     * fractional seconds may be omitted. The leading zero for {@code mm}\n     * and {@code dd} may also be omitted.\n     *\n     * @return corresponding {@code Timestamp} value\n     * @exception java.lang.IllegalArgumentException if the given argument\n     * does not have the format {@code yyyy-[m]m-[d]d hh:mm:ss[.f...]}\n     */\n    public static Timestamp valueOf(String s) {\n        final int YEAR_LENGTH \u003d 4;\n        final int MONTH_LENGTH \u003d 2;\n        final int DAY_LENGTH \u003d 2;\n        final int MAX_MONTH \u003d 12;\n        final int MAX_DAY \u003d 31;\n        int year \u003d 0;\n        int month \u003d 0;\n        int day \u003d 0;\n        int hour;\n        int minute;\n        int second;\n        int a_nanos \u003d 0;\n        int firstDash;\n        int secondDash;\n        int dividingSpace;\n        int firstColon;\n        int secondColon;\n        int period;\n        String formatError \u003d \"Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]\";\n\n        if (s \u003d\u003d null) throw new java.lang.IllegalArgumentException(\"null string\");\n\n        // Split the string into date and time components\n        s \u003d s.trim();\n        dividingSpace \u003d s.indexOf(\u0027 \u0027);\n        if (dividingSpace \u003c 0) {\n            throw new java.lang.IllegalArgumentException(formatError);\n        }\n\n        // Parse the date\n        firstDash \u003d s.indexOf(\u0027-\u0027);\n        secondDash \u003d s.indexOf(\u0027-\u0027, firstDash+1);\n\n        // Parse the time\n        firstColon \u003d s.indexOf(\u0027:\u0027, dividingSpace + 1);\n        secondColon \u003d s.indexOf(\u0027:\u0027, firstColon + 1);\n        period \u003d s.indexOf(\u0027.\u0027, secondColon + 1);\n\n        // Convert the date\n        boolean parsedDate \u003d false;\n        if (firstDash \u003e 0 \u0026\u0026 secondDash \u003e 0 \u0026\u0026 secondDash \u003c dividingSpace - 1) {\n            if (firstDash \u003d\u003d YEAR_LENGTH \u0026\u0026\n                    (secondDash - firstDash \u003e 1 \u0026\u0026 secondDash - firstDash \u003c\u003d MONTH_LENGTH + 1) \u0026\u0026\n                    (dividingSpace - secondDash \u003e 1 \u0026\u0026 dividingSpace - secondDash \u003c\u003d DAY_LENGTH + 1)) {\n                 year \u003d Integer.parseInt(s, 0, firstDash, 10);\n                 month \u003d Integer.parseInt(s, firstDash + 1, secondDash, 10);\n                 day \u003d Integer.parseInt(s, secondDash + 1, dividingSpace, 10);\n\n                if ((month \u003e\u003d 1 \u0026\u0026 month \u003c\u003d MAX_MONTH) \u0026\u0026 (day \u003e\u003d 1 \u0026\u0026 day \u003c\u003d MAX_DAY)) {\n                    parsedDate \u003d true;\n                }\n            }\n        }\n        if (! parsedDate) {\n            throw new java.lang.IllegalArgumentException(formatError);\n        }\n\n        // Convert the time; default missing nanos\n        int len \u003d s.length();\n        if (firstColon \u003e 0 \u0026\u0026 secondColon \u003e 0 \u0026\u0026 secondColon \u003c len - 1) {\n            hour \u003d Integer.parseInt(s, dividingSpace + 1, firstColon, 10);\n            minute \u003d Integer.parseInt(s, firstColon + 1, secondColon, 10);\n            if (period \u003e 0 \u0026\u0026 period \u003c len - 1) {\n                second \u003d Integer.parseInt(s, secondColon + 1, period, 10);\n                int nanoPrecision \u003d len - (period + 1);\n                if (nanoPrecision \u003e 9)\n                    throw new java.lang.IllegalArgumentException(formatError);\n                if (!Character.isDigit(s.charAt(period + 1)))\n                    throw new java.lang.IllegalArgumentException(formatError);\n                int tmpNanos \u003d Integer.parseInt(s, period + 1, len, 10);\n                while (nanoPrecision \u003c 9) {\n                    tmpNanos *\u003d 10;\n                    nanoPrecision++;\n                }\n                a_nanos \u003d tmpNanos;\n            } else if (period \u003e 0) {\n                throw new java.lang.IllegalArgumentException(formatError);\n            } else {\n                second \u003d Integer.parseInt(s, secondColon + 1, len, 10);\n            }\n        } else {\n            throw new java.lang.IllegalArgumentException(formatError);\n        }\n\n        return new Timestamp(year - 1900, month - 1, day, hour, minute, second, a_nanos);\n    }\n\n    /**\n     * Formats a timestamp in JDBC timestamp escape format.\n     *         {@code yyyy-mm-dd hh:mm:ss.fffffffff},\n     * where {@code fffffffff} indicates nanoseconds.\n     *\n     * @return a {@code String} object in\n     *           {@code yyyy-mm-dd hh:mm:ss.fffffffff} format\n     */\n    @SuppressWarnings(\"deprecation\")\n    public String toString() {\n        int year \u003d super.getYear() + 1900;\n        int month \u003d super.getMonth() + 1;\n        int day \u003d super.getDate();\n        int hour \u003d super.getHours();\n        int minute \u003d super.getMinutes();\n        int second \u003d super.getSeconds();\n\n        int trailingZeros \u003d 0;\n        int tmpNanos \u003d nanos;\n        if (tmpNanos \u003d\u003d 0) {\n            trailingZeros \u003d 8;\n        } else {\n            while (tmpNanos % 10 \u003d\u003d 0) {\n                tmpNanos /\u003d 10;\n                trailingZeros++;\n            }\n        }\n\n        // 8058429: To comply with current JCK tests, we need to deal with year\n        // being any number between 0 and 292278995\n        int count \u003d 10000;\n        int yearSize \u003d 4;\n        do {\n            if (year \u003c count) {\n                break;\n            }\n            yearSize++;\n            count *\u003d 10;\n        } while (count \u003c 1000000000);\n\n        char[] buf \u003d new char[25 + yearSize - trailingZeros];\n        Date.formatDecimalInt(year, buf, 0, yearSize);\n        buf[yearSize] \u003d \u0027-\u0027;\n        Date.formatDecimalInt(month, buf, yearSize + 1, 2);\n        buf[yearSize + 3] \u003d \u0027-\u0027;\n        Date.formatDecimalInt(day, buf, yearSize + 4, 2);\n        buf[yearSize + 6] \u003d \u0027 \u0027;\n        Date.formatDecimalInt(hour, buf, yearSize + 7, 2);\n        buf[yearSize + 9] \u003d \u0027:\u0027;\n        Date.formatDecimalInt(minute, buf, yearSize + 10, 2);\n        buf[yearSize + 12] \u003d \u0027:\u0027;\n        Date.formatDecimalInt(second, buf, yearSize + 13, 2);\n        buf[yearSize + 15] \u003d \u0027.\u0027;\n        Date.formatDecimalInt(tmpNanos, buf, yearSize + 16, 9 - trailingZeros);\n\n        return new String(buf);\n    }\n\n    /**\n     * Gets this {@code Timestamp} object\u0027s {@code nanos} value.\n     *\n     * @return this {@code Timestamp} object\u0027s fractional seconds component\n     * @see #setNanos\n     */\n    public int getNanos() {\n        return nanos;\n    }\n\n    /**\n     * Sets this {@code Timestamp} object\u0027s {@code nanos} field\n     * to the given value.\n     *\n     * @param n the new fractional seconds component\n     * @exception java.lang.IllegalArgumentException if the given argument\n     *            is greater than 999999999 or less than 0\n     * @see #getNanos\n     */\n    public void setNanos(int n) {\n        if (n \u003e 999999999 || n \u003c 0) {\n            throw new IllegalArgumentException(\"nanos \u003e 999999999 or \u003c 0\");\n        }\n        nanos \u003d n;\n    }\n\n    /**\n     * Tests to see if this {@code Timestamp} object is\n     * equal to the given {@code Timestamp} object.\n     *\n     * @param ts the {@code Timestamp} value to compare with\n     * @return {@code true} if the given {@code Timestamp}\n     *         object is equal to this {@code Timestamp} object;\n     *         {@code false} otherwise\n     */\n    public boolean equals(Timestamp ts) {\n        if (super.equals(ts)) {\n            if  (nanos \u003d\u003d ts.nanos) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Tests to see if this {@code Timestamp} object is\n     * equal to the given object.\n     *\n     * This version of the method {@code equals} has been added\n     * to fix the incorrect\n     * signature of {@code Timestamp.equals(Timestamp)} and to preserve backward\n     * compatibility with existing class files.\n     *\n     * Note: This method is not symmetric with respect to the\n     * {@code equals(Object)} method in the base class.\n     *\n     * @param ts the {@code Object} value to compare with\n     * @return {@code true} if the given {@code Object} is an instance\n     *         of a {@code Timestamp} that\n     *         is equal to this {@code Timestamp} object;\n     *         {@code false} otherwise\n     */\n    public boolean equals(java.lang.Object ts) {\n      if (ts instanceof Timestamp) {\n        return this.equals((Timestamp)ts);\n      } else {\n        return false;\n      }\n    }\n\n    /**\n     * Indicates whether this {@code Timestamp} object is\n     * earlier than the given {@code Timestamp} object.\n     *\n     * @param ts the {@code Timestamp} value to compare with\n     * @return {@code true} if this {@code Timestamp} object is earlier;\n     *        {@code false} otherwise\n     */\n    public boolean before(Timestamp ts) {\n        return compareTo(ts) \u003c 0;\n    }\n\n    /**\n     * Indicates whether this {@code Timestamp} object is\n     * later than the given {@code Timestamp} object.\n     *\n     * @param ts the {@code Timestamp} value to compare with\n     * @return {@code true} if this {@code Timestamp} object is later;\n     *        {@code false} otherwise\n     */\n    public boolean after(Timestamp ts) {\n        return compareTo(ts) \u003e 0;\n    }\n\n    /**\n     * Compares this {@code Timestamp} object to the given\n     * {@code Timestamp} object.\n     *\n     * @param   ts   the {@code Timestamp} object to be compared to\n     *                this {@code Timestamp} object\n     * @return  the value {@code 0} if the two {@code Timestamp}\n     *          objects are equal; a value less than {@code 0} if this\n     *          {@code Timestamp} object is before the given argument;\n     *          and a value greater than {@code 0} if this\n     *          {@code Timestamp} object is after the given argument.\n     * @since   1.4\n     */\n    public int compareTo(Timestamp ts) {\n        long thisTime \u003d this.getTime();\n        long anotherTime \u003d ts.getTime();\n        int i \u003d (thisTime\u003canotherTime ? -1 :(thisTime\u003d\u003danotherTime?0 :1));\n        if (i \u003d\u003d 0) {\n            if (nanos \u003e ts.nanos) {\n                    return 1;\n            } else if (nanos \u003c ts.nanos) {\n                return -1;\n            }\n        }\n        return i;\n    }\n\n    /**\n     * Compares this {@code Timestamp} object to the given\n     * {@code Date} object.\n     *\n     * @param o the {@code Date} to be compared to\n     *          this {@code Timestamp} object\n     * @return  the value {@code 0} if this {@code Timestamp} object\n     *          and the given object are equal; a value less than {@code 0}\n     *          if this  {@code Timestamp} object is before the given argument;\n     *          and a value greater than {@code 0} if this\n     *          {@code Timestamp} object is after the given argument.\n     *\n     * @since   1.5\n     */\n    public int compareTo(java.util.Date o) {\n       if(o instanceof Timestamp) {\n            // When Timestamp instance compare it with a Timestamp\n            // Hence it is basically calling this.compareTo((Timestamp))o);\n            // Note typecasting is safe because o is instance of Timestamp\n           return compareTo((Timestamp)o);\n      } else {\n            // When Date doing a o.compareTo(this)\n            // will give wrong results.\n          Timestamp ts \u003d new Timestamp(o.getTime());\n          return this.compareTo(ts);\n      }\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * The {@code hashCode} method uses the underlying {@code java.util.Date}\n     * implementation and therefore does not include nanos in its computation.\n     *\n     */\n    @Override\n    public int hashCode() {\n        return super.hashCode();\n    }\n\n    static final long serialVersionUID \u003d 2745179027874758501L;\n\n    private static final int MILLIS_PER_SECOND \u003d 1000;\n\n    /**\n     * Obtains an instance of {@code Timestamp} from a {@code LocalDateTime}\n     * object, with the same year, month, day of month, hours, minutes,\n     * seconds and nanos date-time value as the provided {@code LocalDateTime}.\n     * \u003cp\u003e\n     * The provided {@code LocalDateTime} is interpreted as the local\n     * date-time in the local time zone.\n     *\n     * @param dateTime a {@code LocalDateTime} to convert\n     * @return a {@code Timestamp} object\n     * @exception NullPointerException if {@code dateTime} is null.\n     * @since 1.8\n     */\n    @SuppressWarnings(\"deprecation\")\n    public static Timestamp valueOf(LocalDateTime dateTime) {\n        return new Timestamp(dateTime.getYear() - 1900,\n                             dateTime.getMonthValue() - 1,\n                             dateTime.getDayOfMonth(),\n                             dateTime.getHour(),\n                             dateTime.getMinute(),\n                             dateTime.getSecond(),\n                             dateTime.getNano());\n    }\n\n    /**\n     * Converts this {@code Timestamp} object to a {@code LocalDateTime}.\n     * \u003cp\u003e\n     * The conversion creates a {@code LocalDateTime} that represents the\n     * same year, month, day of month, hours, minutes, seconds and nanos\n     * date-time value as this {@code Timestamp} in the local time zone.\n     *\n     * @return a {@code LocalDateTime} object representing the same date-time value\n     * @since 1.8\n     */\n    @SuppressWarnings(\"deprecation\")\n    public LocalDateTime toLocalDateTime() {\n        return LocalDateTime.of(getYear() + 1900,\n                                getMonth() + 1,\n                                getDate(),\n                                getHours(),\n                                getMinutes(),\n                                getSeconds(),\n                                getNanos());\n    }\n\n    /**\n     * Obtains an instance of {@code Timestamp} from an {@link Instant} object.\n     * \u003cp\u003e\n     * {@code Instant} can store points on the time-line further in the future\n     * and further in the past than {@code Date}. In this scenario, this method\n     * will throw an exception.\n     *\n     * @param instant  the instant to convert\n     * @return an {@code Timestamp} representing the same point on the time-line as\n     *  the provided instant\n     * @exception NullPointerException if {@code instant} is null.\n     * @exception IllegalArgumentException if the instant is too large to\n     *  represent as a {@code Timestamp}\n     * @since 1.8\n     */\n    public static Timestamp from(Instant instant) {\n        try {\n            Timestamp stamp \u003d new Timestamp(instant.getEpochSecond() * MILLIS_PER_SECOND);\n            stamp.nanos \u003d instant.getNano();\n            return stamp;\n        } catch (ArithmeticException ex) {\n            throw new IllegalArgumentException(ex);\n        }\n    }\n\n    /**\n     * Converts this {@code Timestamp} object to an {@code Instant}.\n     * \u003cp\u003e\n     * The conversion creates an {@code Instant} that represents the same\n     * point on the time-line as this {@code Timestamp}.\n     *\n     * @return an instant representing the same point on the time-line\n     * @since 1.8\n     */\n    @Override\n    public Instant toInstant() {\n        return Instant.ofEpochSecond(super.getTime() / MILLIS_PER_SECOND, nanos);\n    }\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.sql/java/sql/Timestamp.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:339)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 16 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.sql/java/sql/Timestamp.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 24 more

Jan. 24, 2024 11:46:11 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.sql/java/sql/Timestamp.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.sql/java/sql/Timestamp.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:358)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 16 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.sql/java/sql/Timestamp.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 24 more

2024.01.24 11:46:36 INFO  compiling livechart (1 scala source)
2024.01.24 11:46:36 INFO  time: compiled livechart in 0.81s
2024.01.24 11:51:37 INFO  compiling livechart (1 scala source)
2024.01.24 11:51:37 INFO  time: compiled livechart in 58ms
2024.01.24 11:51:41 INFO  compiling livechart (1 scala source)
2024.01.24 11:51:41 INFO  time: compiled livechart in 69ms
2024.01.24 11:52:28 INFO  compiling livechart (1 scala source)
2024.01.24 11:52:28 INFO  time: compiled livechart in 0.23s
2024.01.24 11:53:11 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala:9: error: [dialect scala3] illegal start of simple expression
      var unitNumber: String = _,
      ^
2024.01.24 11:53:11 INFO  compiling livechart (1 scala source)
2024.01.24 11:53:11 INFO  time: compiled livechart in 0.22s
2024.01.24 11:53:23 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala:9: error: [dialect scala3] ; expected but , found
      var unitNumber: String = _,
                                ^
2024.01.24 11:53:24 INFO  compiling livechart (1 scala source)
2024.01.24 11:53:24 INFO  time: compiled livechart in 72ms
2024.01.24 11:53:31 INFO  compiling livechart (1 scala source)
2024.01.24 11:53:31 INFO  time: compiled livechart in 43ms
2024.01.24 11:53:37 INFO  compiling livechart (1 scala source)
2024.01.24 11:53:37 INFO  time: compiled livechart in 37ms
2024.01.24 11:53:38 INFO  compiling livechart (1 scala source)
2024.01.24 11:53:38 INFO  time: compiled livechart in 37ms
2024.01.24 11:53:42 INFO  compiling livechart (1 scala source)
2024.01.24 11:53:42 INFO  time: compiled livechart in 35ms
2024.01.24 11:53:48 INFO  compiling livechart (1 scala source)
2024.01.24 11:53:48 INFO  time: compiled livechart in 41ms
2024.01.24 11:54:23 INFO  compiling livechart (1 scala source)
2024.01.24 11:54:23 INFO  time: compiled livechart in 47ms
2024.01.24 11:54:25 INFO  compiling livechart (1 scala source)
2024.01.24 11:54:25 INFO  time: compiled livechart in 0.41s
2024.01.24 11:54:25 INFO  compiling livechart (2 scala sources)
2024.01.24 11:54:27 INFO  time: compiled livechart in 1.96s
2024.01.24 11:55:08 INFO  compiling livechart (1 scala source)
2024.01.24 11:55:08 INFO  time: compiled livechart in 0.17s
2024.01.24 11:55:08 INFO  compiling livechart (2 scala sources)
2024.01.24 11:55:09 INFO  time: compiled livechart in 1.32s
2024.01.24 11:55:12 INFO  compiling livechart (2 scala sources)
2024.01.24 11:55:12 WARN  Could not find semantic tokens for: file:///C:/Users/yashb/Documents/vscode-laminar-vite-extension/webview-ui/src/main/scala/utilities/JsonImplicits.scala
2024.01.24 11:55:12 INFO  time: compiled livechart in 0.21s
2024.01.24 11:55:12 INFO  compiling livechart (1 scala source)
2024.01.24 11:55:13 INFO  time: compiled livechart in 1.31s
2024.01.24 11:55:14 WARN  Could not find semantic tokens for: file:///C:/Users/yashb/Documents/vscode-laminar-vite-extension/webview-ui/src/main/scala/utilities/JsonImplicits.scala
2024.01.24 11:55:18 INFO  compiling livechart (3 scala sources)
2024.01.24 11:55:20 INFO  time: compiled livechart in 1.46s
2024.01.24 11:56:14 INFO  compiling livechart (3 scala sources)
2024.01.24 11:56:14 INFO  time: compiled livechart in 0.34s
2024.01.24 11:56:16 INFO  compiling livechart (3 scala sources)
2024.01.24 11:56:16 INFO  time: compiled livechart in 0.34s
Exception in thread "pool-7-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.24 11:56:20 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Throwable.java

Uri: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Throwable.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:703)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 24, 2024 11:56:20 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.base/java/lang/Throwable.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 1994, 2019, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.lang;\n\nimport java.io.*;\nimport java.util.*;\n\n/**\n * The {@code Throwable} class is the superclass of all errors and\n * exceptions in the Java language. Only objects that are instances of this\n * class (or one of its subclasses) are thrown by the Java Virtual Machine or\n * can be thrown by the Java {@code throw} statement. Similarly, only\n * this class or one of its subclasses can be the argument type in a\n * {@code catch} clause.\n *\n * For the purposes of compile-time checking of exceptions, {@code\n * Throwable} and any subclass of {@code Throwable} that is not also a\n * subclass of either {@link RuntimeException} or {@link Error} are\n * regarded as checked exceptions.\n *\n * \u003cp\u003eInstances of two subclasses, {@link java.lang.Error} and\n * {@link java.lang.Exception}, are conventionally used to indicate\n * that exceptional situations have occurred. Typically, these instances\n * are freshly created in the context of the exceptional situation so\n * as to include relevant information (such as stack trace data).\n *\n * \u003cp\u003eA throwable contains a snapshot of the execution stack of its\n * thread at the time it was created. It can also contain a message\n * string that gives more information about the error. Over time, a\n * throwable can {@linkplain Throwable#addSuppressed suppress} other\n * throwables from being propagated.  Finally, the throwable can also\n * contain a \u003ci\u003ecause\u003c/i\u003e: another throwable that caused this\n * throwable to be constructed.  The recording of this causal information\n * is referred to as the \u003ci\u003echained exception\u003c/i\u003e facility, as the\n * cause can, itself, have a cause, and so on, leading to a \"chain\" of\n * exceptions, each caused by another.\n *\n * \u003cp\u003eOne reason that a throwable may have a cause is that the class that\n * throws it is built atop a lower layered abstraction, and an operation on\n * the upper layer fails due to a failure in the lower layer.  It would be bad\n * design to let the throwable thrown by the lower layer propagate outward, as\n * it is generally unrelated to the abstraction provided by the upper layer.\n * Further, doing so would tie the API of the upper layer to the details of\n * its implementation, assuming the lower layer\u0027s exception was a checked\n * exception.  Throwing a \"wrapped exception\" (i.e., an exception containing a\n * cause) allows the upper layer to communicate the details of the failure to\n * its caller without incurring either of these shortcomings.  It preserves\n * the flexibility to change the implementation of the upper layer without\n * changing its API (in particular, the set of exceptions thrown by its\n * methods).\n *\n * \u003cp\u003eA second reason that a throwable may have a cause is that the method\n * that throws it must conform to a general-purpose interface that does not\n * permit the method to throw the cause directly.  For example, suppose\n * a persistent collection conforms to the {@link java.util.Collection\n * Collection} interface, and that its persistence is implemented atop\n * {@code java.io}.  Suppose the internals of the {@code add} method\n * can throw an {@link java.io.IOException IOException}.  The implementation\n * can communicate the details of the {@code IOException} to its caller\n * while conforming to the {@code Collection} interface by wrapping the\n * {@code IOException} in an appropriate unchecked exception.  (The\n * specification for the persistent collection should indicate that it is\n * capable of throwing such exceptions.)\n *\n * \u003cp\u003eA cause can be associated with a throwable in two ways: via a\n * constructor that takes the cause as an argument, or via the\n * {@link #initCause(Throwable)} method.  New throwable classes that\n * wish to allow causes to be associated with them should provide constructors\n * that take a cause and delegate (perhaps indirectly) to one of the\n * {@code Throwable} constructors that takes a cause.\n *\n * Because the {@code initCause} method is public, it allows a cause to be\n * associated with any throwable, even a \"legacy throwable\" whose\n * implementation predates the addition of the exception chaining mechanism to\n * {@code Throwable}.\n *\n * \u003cp\u003eBy convention, class {@code Throwable} and its subclasses have two\n * constructors, one that takes no arguments and one that takes a\n * {@code String} argument that can be used to produce a detail message.\n * Further, those subclasses that might likely have a cause associated with\n * them should have two more constructors, one that takes a\n * {@code Throwable} (the cause), and one that takes a\n * {@code String} (the detail message) and a {@code Throwable} (the\n * cause).\n *\n * @author  unascribed\n * @author  Josh Bloch (Added exception chaining and programmatic access to\n *          stack trace in 1.4.)\n * @jls 11.2 Compile-Time Checking of Exceptions\n * @since 1.0\n */\npublic class Throwable implements Serializable {\n    /** use serialVersionUID from JDK 1.0.2 for interoperability */\n    private static final long serialVersionUID \u003d -3042686055658047285L;\n\n    /**\n     * The JVM saves some indication of the stack backtrace in this slot.\n     */\n    private transient Object backtrace;\n\n    /**\n     * Specific details about the Throwable.  For example, for\n     * {@code FileNotFoundException}, this contains the name of\n     * the file that could not be found.\n     *\n     * @serial\n     */\n    private String detailMessage;\n\n\n    /**\n     * Holder class to defer initializing sentinel objects only used\n     * for serialization.\n     */\n    private static class SentinelHolder {\n        /**\n         * {@linkplain #setStackTrace(StackTraceElement[]) Setting the\n         * stack trace} to a one-element array containing this sentinel\n         * value indicates future attempts to set the stack trace will be\n         * ignored.  The sentinel is equal to the result of calling:\u003cbr\u003e\n         * {@code new StackTraceElement(\"\", \"\", null, Integer.MIN_VALUE)}\n         */\n        public static final StackTraceElement STACK_TRACE_ELEMENT_SENTINEL \u003d\n            new StackTraceElement(\"\", \"\", null, Integer.MIN_VALUE);\n\n        /**\n         * Sentinel value used in the serial form to indicate an immutable\n         * stack trace.\n         */\n        public static final StackTraceElement[] STACK_TRACE_SENTINEL \u003d\n            new StackTraceElement[] {STACK_TRACE_ELEMENT_SENTINEL};\n    }\n\n    /**\n     * A shared value for an empty stack.\n     */\n    private static final StackTraceElement[] UNASSIGNED_STACK \u003d new StackTraceElement[0];\n\n    /*\n     * To allow Throwable objects to be made immutable and safely\n     * reused by the JVM, such as OutOfMemoryErrors, fields of\n     * Throwable that are writable in response to user actions, cause,\n     * stackTrace, and suppressedExceptions obey the following\n     * protocol:\n     *\n     * 1) The fields are initialized to a non-null sentinel value\n     * which indicates the value has logically not been set.\n     *\n     * 2) Writing a null to the field indicates further writes\n     * are forbidden\n     *\n     * 3) The sentinel value may be replaced with another non-null\n     * value.\n     *\n     * For example, implementations of the HotSpot JVM have\n     * preallocated OutOfMemoryError objects to provide for better\n     * diagnosability of that situation.  These objects are created\n     * without calling the constructor for that class and the fields\n     * in question are initialized to null.  To support this\n     * capability, any new fields added to Throwable that require\n     * being initialized to a non-null value require a coordinated JVM\n     * change.\n     */\n\n    /**\n     * The throwable that caused this throwable to get thrown, or null if this\n     * throwable was not caused by another throwable, or if the causative\n     * throwable is unknown.  If this field is equal to this throwable itself,\n     * it indicates that the cause of this throwable has not yet been\n     * initialized.\n     *\n     * @serial\n     * @since 1.4\n     */\n    private Throwable cause \u003d this;\n\n    /**\n     * The stack trace, as returned by {@link #getStackTrace()}.\n     *\n     * The field is initialized to a zero-length array.  A {@code\n     * null} value of this field indicates subsequent calls to {@link\n     * #setStackTrace(StackTraceElement[])} and {@link\n     * #fillInStackTrace()} will be no-ops.\n     *\n     * @serial\n     * @since 1.4\n     */\n    private StackTraceElement[] stackTrace \u003d UNASSIGNED_STACK;\n\n    /**\n     * The JVM code sets the depth of the backtrace for later retrieval\n     */\n    private transient int depth;\n\n    // Setting this static field introduces an acceptable\n    // initialization dependency on a few java.util classes.\n    private static final List\u003cThrowable\u003e SUPPRESSED_SENTINEL \u003d Collections.emptyList();\n\n    /**\n     * The list of suppressed exceptions, as returned by {@link\n     * #getSuppressed()}.  The list is initialized to a zero-element\n     * unmodifiable sentinel list.  When a serialized Throwable is\n     * read in, if the {@code suppressedExceptions} field points to a\n     * zero-element list, the field is reset to the sentinel value.\n     *\n     * @serial\n     * @since 1.7\n     */\n    private List\u003cThrowable\u003e suppressedExceptions \u003d SUPPRESSED_SENTINEL;\n\n    /** Message for trying to suppress a null exception. */\n    private static final String NULL_CAUSE_MESSAGE \u003d \"Cannot suppress a null exception.\";\n\n    /** Message for trying to suppress oneself. */\n    private static final String SELF_SUPPRESSION_MESSAGE \u003d \"Self-suppression not permitted\";\n\n    /** Caption  for labeling causative exception stack traces */\n    private static final String CAUSE_CAPTION \u003d \"Caused by: \";\n\n    /** Caption for labeling suppressed exception stack traces */\n    private static final String SUPPRESSED_CAPTION \u003d \"Suppressed: \";\n\n    /**\n     * Constructs a new throwable with {@code null} as its detail message.\n     * The cause is not initialized, and may subsequently be initialized by a\n     * call to {@link #initCause}.\n     *\n     * \u003cp\u003eThe {@link #fillInStackTrace()} method is called to initialize\n     * the stack trace data in the newly created throwable.\n     */\n    public Throwable() {\n        fillInStackTrace();\n    }\n\n    /**\n     * Constructs a new throwable with the specified detail message.  The\n     * cause is not initialized, and may subsequently be initialized by\n     * a call to {@link #initCause}.\n     *\n     * \u003cp\u003eThe {@link #fillInStackTrace()} method is called to initialize\n     * the stack trace data in the newly created throwable.\n     *\n     * @param   message   the detail message. The detail message is saved for\n     *          later retrieval by the {@link #getMessage()} method.\n     */\n    public Throwable(String message) {\n        fillInStackTrace();\n        detailMessage \u003d message;\n    }\n\n    /**\n     * Constructs a new throwable with the specified detail message and\n     * cause.  \u003cp\u003eNote that the detail message associated with\n     * {@code cause} is \u003ci\u003enot\u003c/i\u003e automatically incorporated in\n     * this throwable\u0027s detail message.\n     *\n     * \u003cp\u003eThe {@link #fillInStackTrace()} method is called to initialize\n     * the stack trace data in the newly created throwable.\n     *\n     * @param  message the detail message (which is saved for later retrieval\n     *         by the {@link #getMessage()} method).\n     * @param  cause the cause (which is saved for later retrieval by the\n     *         {@link #getCause()} method).  (A {@code null} value is\n     *         permitted, and indicates that the cause is nonexistent or\n     *         unknown.)\n     * @since  1.4\n     */\n    public Throwable(String message, Throwable cause) {\n        fillInStackTrace();\n        detailMessage \u003d message;\n        this.cause \u003d cause;\n    }\n\n    /**\n     * Constructs a new throwable with the specified cause and a detail\n     * message of {@code (cause\u003d\u003dnull ? null : cause.toString())} (which\n     * typically contains the class and detail message of {@code cause}).\n     * This constructor is useful for throwables that are little more than\n     * wrappers for other throwables (for example, {@link\n     * java.security.PrivilegedActionException}).\n     *\n     * \u003cp\u003eThe {@link #fillInStackTrace()} method is called to initialize\n     * the stack trace data in the newly created throwable.\n     *\n     * @param  cause the cause (which is saved for later retrieval by the\n     *         {@link #getCause()} method).  (A {@code null} value is\n     *         permitted, and indicates that the cause is nonexistent or\n     *         unknown.)\n     * @since  1.4\n     */\n    public Throwable(Throwable cause) {\n        fillInStackTrace();\n        detailMessage \u003d (cause\u003d\u003dnull ? null : cause.toString());\n        this.cause \u003d cause;\n    }\n\n    /**\n     * Constructs a new throwable with the specified detail message,\n     * cause, {@linkplain #addSuppressed suppression} enabled or\n     * disabled, and writable stack trace enabled or disabled.  If\n     * suppression is disabled, {@link #getSuppressed} for this object\n     * will return a zero-length array and calls to {@link\n     * #addSuppressed} that would otherwise append an exception to the\n     * suppressed list will have no effect.  If the writable stack\n     * trace is false, this constructor will not call {@link\n     * #fillInStackTrace()}, a {@code null} will be written to the\n     * {@code stackTrace} field, and subsequent calls to {@code\n     * fillInStackTrace} and {@link\n     * #setStackTrace(StackTraceElement[])} will not set the stack\n     * trace.  If the writable stack trace is false, {@link\n     * #getStackTrace} will return a zero length array.\n     *\n     * \u003cp\u003eNote that the other constructors of {@code Throwable} treat\n     * suppression as being enabled and the stack trace as being\n     * writable.  Subclasses of {@code Throwable} should document any\n     * conditions under which suppression is disabled and document\n     * conditions under which the stack trace is not writable.\n     * Disabling of suppression should only occur in exceptional\n     * circumstances where special requirements exist, such as a\n     * virtual machine reusing exception objects under low-memory\n     * situations.  Circumstances where a given exception object is\n     * repeatedly caught and rethrown, such as to implement control\n     * flow between two sub-systems, is another situation where\n     * immutable throwable objects would be appropriate.\n     *\n     * @param  message the detail message.\n     * @param cause the cause.  (A {@code null} value is permitted,\n     * and indicates that the cause is nonexistent or unknown.)\n     * @param enableSuppression whether or not suppression is enabled or disabled\n     * @param writableStackTrace whether or not the stack trace should be\n     *                           writable\n     *\n     * @see OutOfMemoryError\n     * @see NullPointerException\n     * @see ArithmeticException\n     * @since 1.7\n     */\n    protected Throwable(String message, Throwable cause,\n                        boolean enableSuppression,\n                        boolean writableStackTrace) {\n        if (writableStackTrace) {\n            fillInStackTrace();\n        } else {\n            stackTrace \u003d null;\n        }\n        detailMessage \u003d message;\n        this.cause \u003d cause;\n        if (!enableSuppression)\n            suppressedExceptions \u003d null;\n    }\n\n    /**\n     * Returns the detail message string of this throwable.\n     *\n     * @return  the detail message string of this {@code Throwable} instance\n     *          (which may be {@code null}).\n     */\n    public String getMessage() {\n        return detailMessage;\n    }\n\n    /**\n     * Creates a localized description of this throwable.\n     * Subclasses may override this method in order to produce a\n     * locale-specific message.  For subclasses that do not override this\n     * method, the default implementation returns the same result as\n     * {@code getMessage()}.\n     *\n     * @return  The localized description of this throwable.\n     * @since   1.1\n     */\n    public String getLocalizedMessage() {\n        return getMessage();\n    }\n\n    /**\n     * Returns the cause of this throwable or {@code null} if the\n     * cause is nonexistent or unknown.  (The cause is the throwable that\n     * caused this throwable to get thrown.)\n     *\n     * \u003cp\u003eThis implementation returns the cause that was supplied via one of\n     * the constructors requiring a {@code Throwable}, or that was set after\n     * creation with the {@link #initCause(Throwable)} method.  While it is\n     * typically unnecessary to override this method, a subclass can override\n     * it to return a cause set by some other means.  This is appropriate for\n     * a \"legacy chained throwable\" that predates the addition of chained\n     * exceptions to {@code Throwable}.  Note that it is \u003ci\u003enot\u003c/i\u003e\n     * necessary to override any of the {@code PrintStackTrace} methods,\n     * all of which invoke the {@code getCause} method to determine the\n     * cause of a throwable.\n     *\n     * @return  the cause of this throwable or {@code null} if the\n     *          cause is nonexistent or unknown.\n     * @since 1.4\n     */\n    public synchronized Throwable getCause() {\n        return (cause\u003d\u003dthis ? null : cause);\n    }\n\n    /**\n     * Initializes the \u003ci\u003ecause\u003c/i\u003e of this throwable to the specified value.\n     * (The cause is the throwable that caused this throwable to get thrown.)\n     *\n     * \u003cp\u003eThis method can be called at most once.  It is generally called from\n     * within the constructor, or immediately after creating the\n     * throwable.  If this throwable was created\n     * with {@link #Throwable(Throwable)} or\n     * {@link #Throwable(String,Throwable)}, this method cannot be called\n     * even once.\n     *\n     * \u003cp\u003eAn example of using this method on a legacy throwable type\n     * without other support for setting the cause is:\n     *\n     * \u003cpre\u003e\n     * try {\n     *     lowLevelOp();\n     * } catch (LowLevelException le) {\n     *     throw (HighLevelException)\n     *           new HighLevelException().initCause(le); // Legacy constructor\n     * }\n     * \u003c/pre\u003e\n     *\n     * @param  cause the cause (which is saved for later retrieval by the\n     *         {@link #getCause()} method).  (A {@code null} value is\n     *         permitted, and indicates that the cause is nonexistent or\n     *         unknown.)\n     * @return  a reference to this {@code Throwable} instance.\n     * @throws IllegalArgumentException if {@code cause} is this\n     *         throwable.  (A throwable cannot be its own cause.)\n     * @throws IllegalStateException if this throwable was\n     *         created with {@link #Throwable(Throwable)} or\n     *         {@link #Throwable(String,Throwable)}, or this method has already\n     *         been called on this throwable.\n     * @since  1.4\n     */\n    public synchronized Throwable initCause(Throwable cause) {\n        if (this.cause !\u003d this)\n            throw new IllegalStateException(\"Can\u0027t overwrite cause with \" +\n                                            Objects.toString(cause, \"a null\"), this);\n        if (cause \u003d\u003d this)\n            throw new IllegalArgumentException(\"Self-causation not permitted\", this);\n        this.cause \u003d cause;\n        return this;\n    }\n\n    /**\n     * Returns a short description of this throwable.\n     * The result is the concatenation of:\n     * \u003cul\u003e\n     * \u003cli\u003e the {@linkplain Class#getName() name} of the class of this object\n     * \u003cli\u003e \": \" (a colon and a space)\n     * \u003cli\u003e the result of invoking this object\u0027s {@link #getLocalizedMessage}\n     *      method\n     * \u003c/ul\u003e\n     * If {@code getLocalizedMessage} returns {@code null}, then just\n     * the class name is returned.\n     *\n     * @return a string representation of this throwable.\n     */\n    public String toString() {\n        String s \u003d getClass().getName();\n        String message \u003d getLocalizedMessage();\n        return (message !\u003d null) ? (s + \": \" + message) : s;\n    }\n\n    /**\n     * Prints this throwable and its backtrace to the\n     * standard error stream. This method prints a stack trace for this\n     * {@code Throwable} object on the error output stream that is\n     * the value of the field {@code System.err}. The first line of\n     * output contains the result of the {@link #toString()} method for\n     * this object.  Remaining lines represent data previously recorded by\n     * the method {@link #fillInStackTrace()}. The format of this\n     * information depends on the implementation, but the following\n     * example may be regarded as typical:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * java.lang.NullPointerException\n     *         at MyClass.mash(MyClass.java:9)\n     *         at MyClass.crunch(MyClass.java:6)\n     *         at MyClass.main(MyClass.java:3)\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     * This example was produced by running the program:\n     * \u003cpre\u003e\n     * class MyClass {\n     *     public static void main(String[] args) {\n     *         crunch(null);\n     *     }\n     *     static void crunch(int[] a) {\n     *         mash(a);\n     *     }\n     *     static void mash(int[] b) {\n     *         System.out.println(b[0]);\n     *     }\n     * }\n     * \u003c/pre\u003e\n     * The backtrace for a throwable with an initialized, non-null cause\n     * should generally include the backtrace for the cause.  The format\n     * of this information depends on the implementation, but the following\n     * example may be regarded as typical:\n     * \u003cpre\u003e\n     * HighLevelException: MidLevelException: LowLevelException\n     *         at Junk.a(Junk.java:13)\n     *         at Junk.main(Junk.java:4)\n     * Caused by: MidLevelException: LowLevelException\n     *         at Junk.c(Junk.java:23)\n     *         at Junk.b(Junk.java:17)\n     *         at Junk.a(Junk.java:11)\n     *         ... 1 more\n     * Caused by: LowLevelException\n     *         at Junk.e(Junk.java:30)\n     *         at Junk.d(Junk.java:27)\n     *         at Junk.c(Junk.java:21)\n     *         ... 3 more\n     * \u003c/pre\u003e\n     * Note the presence of lines containing the characters {@code \"...\"}.\n     * These lines indicate that the remainder of the stack trace for this\n     * exception matches the indicated number of frames from the bottom of the\n     * stack trace of the exception that was caused by this exception (the\n     * \"enclosing\" exception).  This shorthand can greatly reduce the length\n     * of the output in the common case where a wrapped exception is thrown\n     * from same method as the \"causative exception\" is caught.  The above\n     * example was produced by running the program:\n     * \u003cpre\u003e\n     * public class Junk {\n     *     public static void main(String args[]) {\n     *         try {\n     *             a();\n     *         } catch(HighLevelException e) {\n     *             e.printStackTrace();\n     *         }\n     *     }\n     *     static void a() throws HighLevelException {\n     *         try {\n     *             b();\n     *         } catch(MidLevelException e) {\n     *             throw new HighLevelException(e);\n     *         }\n     *     }\n     *     static void b() throws MidLevelException {\n     *         c();\n     *     }\n     *     static void c() throws MidLevelException {\n     *         try {\n     *             d();\n     *         } catch(LowLevelException e) {\n     *             throw new MidLevelException(e);\n     *         }\n     *     }\n     *     static void d() throws LowLevelException {\n     *        e();\n     *     }\n     *     static void e() throws LowLevelException {\n     *         throw new LowLevelException();\n     *     }\n     * }\n     *\n     * class HighLevelException extends Exception {\n     *     HighLevelException(Throwable cause) { super(cause); }\n     * }\n     *\n     * class MidLevelException extends Exception {\n     *     MidLevelException(Throwable cause)  { super(cause); }\n     * }\n     *\n     * class LowLevelException extends Exception {\n     * }\n     * \u003c/pre\u003e\n     * As of release 7, the platform supports the notion of\n     * \u003ci\u003esuppressed exceptions\u003c/i\u003e (in conjunction with the {@code\n     * try}-with-resources statement). Any exceptions that were\n     * suppressed in order to deliver an exception are printed out\n     * beneath the stack trace.  The format of this information\n     * depends on the implementation, but the following example may be\n     * regarded as typical:\n     *\n     * \u003cpre\u003e\n     * Exception in thread \"main\" java.lang.Exception: Something happened\n     *  at Foo.bar(Foo.java:10)\n     *  at Foo.main(Foo.java:5)\n     *  Suppressed: Resource$CloseFailException: Resource ID \u003d 0\n     *          at Resource.close(Resource.java:26)\n     *          at Foo.bar(Foo.java:9)\n     *          ... 1 more\n     * \u003c/pre\u003e\n     * Note that the \"... n more\" notation is used on suppressed exceptions\n     * just at it is used on causes. Unlike causes, suppressed exceptions are\n     * indented beyond their \"containing exceptions.\"\n     *\n     * \u003cp\u003eAn exception can have both a cause and one or more suppressed\n     * exceptions:\n     * \u003cpre\u003e\n     * Exception in thread \"main\" java.lang.Exception: Main block\n     *  at Foo3.main(Foo3.java:7)\n     *  Suppressed: Resource$CloseFailException: Resource ID \u003d 2\n     *          at Resource.close(Resource.java:26)\n     *          at Foo3.main(Foo3.java:5)\n     *  Suppressed: Resource$CloseFailException: Resource ID \u003d 1\n     *          at Resource.close(Resource.java:26)\n     *          at Foo3.main(Foo3.java:5)\n     * Caused by: java.lang.Exception: I did it\n     *  at Foo3.main(Foo3.java:8)\n     * \u003c/pre\u003e\n     * Likewise, a suppressed exception can have a cause:\n     * \u003cpre\u003e\n     * Exception in thread \"main\" java.lang.Exception: Main block\n     *  at Foo4.main(Foo4.java:6)\n     *  Suppressed: Resource2$CloseFailException: Resource ID \u003d 1\n     *          at Resource2.close(Resource2.java:20)\n     *          at Foo4.main(Foo4.java:5)\n     *  Caused by: java.lang.Exception: Rats, you caught me\n     *          at Resource2$CloseFailException.\u0026lt;init\u0026gt;(Resource2.java:45)\n     *          ... 2 more\n     * \u003c/pre\u003e\n     */\n    public void printStackTrace() {\n        printStackTrace(System.err);\n    }\n\n    /**\n     * Prints this throwable and its backtrace to the specified print stream.\n     *\n     * @param s {@code PrintStream} to use for output\n     */\n    public void printStackTrace(PrintStream s) {\n        printStackTrace(new WrappedPrintStream(s));\n    }\n\n    private void printStackTrace(PrintStreamOrWriter s) {\n        // Guard against malicious overrides of Throwable.equals by\n        // using a Set with identity equality semantics.\n        Set\u003cThrowable\u003e dejaVu \u003d Collections.newSetFromMap(new IdentityHashMap\u003c\u003e());\n        dejaVu.add(this);\n\n        synchronized (s.lock()) {\n            // Print our stack trace\n            s.println(this);\n            StackTraceElement[] trace \u003d getOurStackTrace();\n            for (StackTraceElement traceElement : trace)\n                s.println(\"\\tat \" + traceElement);\n\n            // Print suppressed exceptions, if any\n            for (Throwable se : getSuppressed())\n                se.printEnclosedStackTrace(s, trace, SUPPRESSED_CAPTION, \"\\t\", dejaVu);\n\n            // Print cause, if any\n            Throwable ourCause \u003d getCause();\n            if (ourCause !\u003d null)\n                ourCause.printEnclosedStackTrace(s, trace, CAUSE_CAPTION, \"\", dejaVu);\n        }\n    }\n\n    /**\n     * Print our stack trace as an enclosed exception for the specified\n     * stack trace.\n     */\n    private void printEnclosedStackTrace(PrintStreamOrWriter s,\n                                         StackTraceElement[] enclosingTrace,\n                                         String caption,\n                                         String prefix,\n                                         Set\u003cThrowable\u003e dejaVu) {\n        assert Thread.holdsLock(s.lock());\n        if (dejaVu.contains(this)) {\n            s.println(\"\\t[CIRCULAR REFERENCE:\" + this + \"]\");\n        } else {\n            dejaVu.add(this);\n            // Compute number of frames in common between this and enclosing trace\n            StackTraceElement[] trace \u003d getOurStackTrace();\n            int m \u003d trace.length - 1;\n            int n \u003d enclosingTrace.length - 1;\n            while (m \u003e\u003d 0 \u0026\u0026 n \u003e\u003d0 \u0026\u0026 trace[m].equals(enclosingTrace[n])) {\n                m--; n--;\n            }\n            int framesInCommon \u003d trace.length - 1 - m;\n\n            // Print our stack trace\n            s.println(prefix + caption + this);\n            for (int i \u003d 0; i \u003c\u003d m; i++)\n                s.println(prefix + \"\\tat \" + trace[i]);\n            if (framesInCommon !\u003d 0)\n                s.println(prefix + \"\\t... \" + framesInCommon + \" more\");\n\n            // Print suppressed exceptions, if any\n            for (Throwable se : getSuppressed())\n                se.printEnclosedStackTrace(s, trace, SUPPRESSED_CAPTION,\n                                           prefix +\"\\t\", dejaVu);\n\n            // Print cause, if any\n            Throwable ourCause \u003d getCause();\n            if (ourCause !\u003d null)\n                ourCause.printEnclosedStackTrace(s, trace, CAUSE_CAPTION, prefix, dejaVu);\n        }\n    }\n\n    /**\n     * Prints this throwable and its backtrace to the specified\n     * print writer.\n     *\n     * @param s {@code PrintWriter} to use for output\n     * @since   1.1\n     */\n    public void printStackTrace(PrintWriter s) {\n        printStackTrace(new WrappedPrintWriter(s));\n    }\n\n    /**\n     * Wrapper class for PrintStream and PrintWriter to enable a single\n     * implementation of printStackTrace.\n     */\n    private abstract static class PrintStreamOrWriter {\n        /** Returns the object to be locked when using this StreamOrWriter */\n        abstract Object lock();\n\n        /** Prints the specified string as a line on this StreamOrWriter */\n        abstract void println(Object o);\n    }\n\n    private static class WrappedPrintStream extends PrintStreamOrWriter {\n        private final PrintStream printStream;\n\n        WrappedPrintStream(PrintStream printStream) {\n            this.printStream \u003d printStream;\n        }\n\n        Object lock() {\n            return printStream;\n        }\n\n        void println(Object o) {\n            printStream.println(o);\n        }\n    }\n\n    private static class WrappedPrintWriter extends PrintStreamOrWriter {\n        private final PrintWriter printWriter;\n\n        WrappedPrintWriter(PrintWriter printWriter) {\n            this.printWriter \u003d printWriter;\n        }\n\n        Object lock() {\n            return printWriter;\n        }\n\n        void println(Object o) {\n            printWriter.println(o);\n        }\n    }\n\n    /**\n     * Fills in the execution stack trace. This method records within this\n     * {@code Throwable} object information about the current state of\n     * the stack frames for the current thread.\n     *\n     * \u003cp\u003eIf the stack trace of this {@code Throwable} {@linkplain\n     * Throwable#Throwable(String, Throwable, boolean, boolean) is not\n     * writable}, calling this method has no effect.\n     *\n     * @return  a reference to this {@code Throwable} instance.\n     * @see     java.lang.Throwable#printStackTrace()\n     */\n    public synchronized Throwable fillInStackTrace() {\n        if (stackTrace !\u003d null ||\n            backtrace !\u003d null /* Out of protocol state */ ) {\n            fillInStackTrace(0);\n            stackTrace \u003d UNASSIGNED_STACK;\n        }\n        return this;\n    }\n\n    private native Throwable fillInStackTrace(int dummy);\n\n    /**\n     * Provides programmatic access to the stack trace information printed by\n     * {@link #printStackTrace()}.  Returns an array of stack trace elements,\n     * each representing one stack frame.  The zeroth element of the array\n     * (assuming the array\u0027s length is non-zero) represents the top of the\n     * stack, which is the last method invocation in the sequence.  Typically,\n     * this is the point at which this throwable was created and thrown.\n     * The last element of the array (assuming the array\u0027s length is non-zero)\n     * represents the bottom of the stack, which is the first method invocation\n     * in the sequence.\n     *\n     * \u003cp\u003eSome virtual machines may, under some circumstances, omit one\n     * or more stack frames from the stack trace.  In the extreme case,\n     * a virtual machine that has no stack trace information concerning\n     * this throwable is permitted to return a zero-length array from this\n     * method.  Generally speaking, the array returned by this method will\n     * contain one element for every frame that would be printed by\n     * {@code printStackTrace}.  Writes to the returned array do not\n     * affect future calls to this method.\n     *\n     * @return an array of stack trace elements representing the stack trace\n     *         pertaining to this throwable.\n     * @since  1.4\n     */\n    public StackTraceElement[] getStackTrace() {\n        return getOurStackTrace().clone();\n    }\n\n    private synchronized StackTraceElement[] getOurStackTrace() {\n        // Initialize stack trace field with information from\n        // backtrace if this is the first call to this method\n        if (stackTrace \u003d\u003d UNASSIGNED_STACK ||\n            (stackTrace \u003d\u003d null \u0026\u0026 backtrace !\u003d null) /* Out of protocol state */) {\n            stackTrace \u003d StackTraceElement.of(this, depth);\n        } else if (stackTrace \u003d\u003d null) {\n            return UNASSIGNED_STACK;\n        }\n        return stackTrace;\n    }\n\n    /**\n     * Sets the stack trace elements that will be returned by\n     * {@link #getStackTrace()} and printed by {@link #printStackTrace()}\n     * and related methods.\n     *\n     * This method, which is designed for use by RPC frameworks and other\n     * advanced systems, allows the client to override the default\n     * stack trace that is either generated by {@link #fillInStackTrace()}\n     * when a throwable is constructed or deserialized when a throwable is\n     * read from a serialization stream.\n     *\n     * \u003cp\u003eIf the stack trace of this {@code Throwable} {@linkplain\n     * Throwable#Throwable(String, Throwable, boolean, boolean) is not\n     * writable}, calling this method has no effect other than\n     * validating its argument.\n     *\n     * @param   stackTrace the stack trace elements to be associated with\n     * this {@code Throwable}.  The specified array is copied by this\n     * call; changes in the specified array after the method invocation\n     * returns will have no affect on this {@code Throwable}\u0027s stack\n     * trace.\n     *\n     * @throws NullPointerException if {@code stackTrace} is\n     *         {@code null} or if any of the elements of\n     *         {@code stackTrace} are {@code null}\n     *\n     * @since  1.4\n     */\n    public void setStackTrace(StackTraceElement[] stackTrace) {\n        // Validate argument\n        StackTraceElement[] defensiveCopy \u003d stackTrace.clone();\n        for (int i \u003d 0; i \u003c defensiveCopy.length; i++) {\n            if (defensiveCopy[i] \u003d\u003d null)\n                throw new NullPointerException(\"stackTrace[\" + i + \"]\");\n        }\n\n        synchronized (this) {\n            if (this.stackTrace \u003d\u003d null \u0026\u0026 // Immutable stack\n                backtrace \u003d\u003d null) // Test for out of protocol state\n                return;\n            this.stackTrace \u003d defensiveCopy;\n        }\n    }\n\n    /**\n     * Reads a {@code Throwable} from a stream, enforcing\n     * well-formedness constraints on fields.  Null entries and\n     * self-pointers are not allowed in the list of {@code\n     * suppressedExceptions}.  Null entries are not allowed for stack\n     * trace elements.  A null stack trace in the serial form results\n     * in a zero-length stack element array. A single-element stack\n     * trace whose entry is equal to {@code new StackTraceElement(\"\",\n     * \"\", null, Integer.MIN_VALUE)} results in a {@code null} {@code\n     * stackTrace} field.\n     *\n     * Note that there are no constraints on the value the {@code\n     * cause} field can hold; both {@code null} and {@code this} are\n     * valid values for the field.\n     */\n    private void readObject(ObjectInputStream s)\n        throws IOException, ClassNotFoundException {\n        s.defaultReadObject();     // read in all fields\n\n        // Set suppressed exceptions and stack trace elements fields\n        // to marker values until the contents from the serial stream\n        // are validated.\n        List\u003cThrowable\u003e candidateSuppressedExceptions \u003d suppressedExceptions;\n        suppressedExceptions \u003d SUPPRESSED_SENTINEL;\n\n        StackTraceElement[] candidateStackTrace \u003d stackTrace;\n        stackTrace \u003d UNASSIGNED_STACK.clone();\n\n        if (candidateSuppressedExceptions !\u003d null) {\n            int suppressedSize \u003d validateSuppressedExceptionsList(candidateSuppressedExceptions);\n            if (suppressedSize \u003e 0) { // Copy valid Throwables to new list\n                var suppList  \u003d new ArrayList\u003cThrowable\u003e(Math.min(100, suppressedSize));\n\n                for (Throwable t : candidateSuppressedExceptions) {\n                    // Enforce constraints on suppressed exceptions in\n                    // case of corrupt or malicious stream.\n                    if (t \u003d\u003d null)\n                        throw new NullPointerException(NULL_CAUSE_MESSAGE);\n                    if (t \u003d\u003d this)\n                        throw new IllegalArgumentException(SELF_SUPPRESSION_MESSAGE);\n                    suppList.add(t);\n                }\n                // If there are any invalid suppressed exceptions,\n                // implicitly use the sentinel value assigned earlier.\n                suppressedExceptions \u003d suppList;\n            }\n        } else {\n            suppressedExceptions \u003d null;\n        }\n\n        /*\n         * For zero-length stack traces, use a clone of\n         * UNASSIGNED_STACK rather than UNASSIGNED_STACK itself to\n         * allow identity comparison against UNASSIGNED_STACK in\n         * getOurStackTrace.  The identity of UNASSIGNED_STACK in\n         * stackTrace indicates to the getOurStackTrace method that\n         * the stackTrace needs to be constructed from the information\n         * in backtrace.\n         */\n        if (candidateStackTrace !\u003d null) {\n            // Work from a clone of the candidateStackTrace to ensure\n            // consistency of checks.\n            candidateStackTrace \u003d candidateStackTrace.clone();\n            if (candidateStackTrace.length \u003e\u003d 1) {\n                if (candidateStackTrace.length \u003d\u003d 1 \u0026\u0026\n                        // Check for the marker of an immutable stack trace\n                        SentinelHolder.STACK_TRACE_ELEMENT_SENTINEL.equals(candidateStackTrace[0])) {\n                    stackTrace \u003d null;\n                } else { // Verify stack trace elements are non-null.\n                    for (StackTraceElement ste : candidateStackTrace) {\n                        if (ste \u003d\u003d null)\n                            throw new NullPointerException(\"null StackTraceElement in serial stream.\");\n                    }\n                    stackTrace \u003d candidateStackTrace;\n                }\n            }\n        }\n        // A null stackTrace field in the serial form can result from\n        // an exception serialized without that field in older JDK\n        // releases; treat such exceptions as having empty stack\n        // traces by leaving stackTrace assigned to a clone of\n        // UNASSIGNED_STACK.\n    }\n\n    private int validateSuppressedExceptionsList(List\u003cThrowable\u003e deserSuppressedExceptions)\n        throws IOException {\n        if (!Object.class.getModule().\n            equals(deserSuppressedExceptions.getClass().getModule())) {\n            throw new StreamCorruptedException(\"List implementation not in base module.\");\n        } else {\n            int size \u003d deserSuppressedExceptions.size();\n            if (size \u003c 0) {\n                throw new StreamCorruptedException(\"Negative list size reported.\");\n            }\n            return size;\n        }\n    }\n\n    /**\n     * Write a {@code Throwable} object to a stream.\n     *\n     * A {@code null} stack trace field is represented in the serial\n     * form as a one-element array whose element is equal to {@code\n     * new StackTraceElement(\"\", \"\", null, Integer.MIN_VALUE)}.\n     */\n    private synchronized void writeObject(ObjectOutputStream s)\n        throws IOException {\n        // Ensure that the stackTrace field is initialized to a\n        // non-null value, if appropriate.  As of JDK 7, a null stack\n        // trace field is a valid value indicating the stack trace\n        // should not be set.\n        getOurStackTrace();\n\n        StackTraceElement[] oldStackTrace \u003d stackTrace;\n        try {\n            if (stackTrace \u003d\u003d null)\n                stackTrace \u003d SentinelHolder.STACK_TRACE_SENTINEL;\n            s.defaultWriteObject();\n        } finally {\n            stackTrace \u003d oldStackTrace;\n        }\n    }\n\n    /**\n     * Appends the specified exception to the exceptions that were\n     * suppressed in order to deliver this exception. This method is\n     * thread-safe and typically called (automatically and implicitly)\n     * by the {@code try}-with-resources statement.\n     *\n     * \u003cp\u003eThe suppression behavior is enabled \u003cem\u003eunless\u003c/em\u003e disabled\n     * {@linkplain #Throwable(String, Throwable, boolean, boolean) via\n     * a constructor}.  When suppression is disabled, this method does\n     * nothing other than to validate its argument.\n     *\n     * \u003cp\u003eNote that when one exception {@linkplain\n     * #initCause(Throwable) causes} another exception, the first\n     * exception is usually caught and then the second exception is\n     * thrown in response.  In other words, there is a causal\n     * connection between the two exceptions.\n     *\n     * In contrast, there are situations where two independent\n     * exceptions can be thrown in sibling code blocks, in particular\n     * in the {@code try} block of a {@code try}-with-resources\n     * statement and the compiler-generated {@code finally} block\n     * which closes the resource.\n     *\n     * In these situations, only one of the thrown exceptions can be\n     * propagated.  In the {@code try}-with-resources statement, when\n     * there are two such exceptions, the exception originating from\n     * the {@code try} block is propagated and the exception from the\n     * {@code finally} block is added to the list of exceptions\n     * suppressed by the exception from the {@code try} block.  As an\n     * exception unwinds the stack, it can accumulate multiple\n     * suppressed exceptions.\n     *\n     * \u003cp\u003eAn exception may have suppressed exceptions while also being\n     * caused by another exception.  Whether or not an exception has a\n     * cause is semantically known at the time of its creation, unlike\n     * whether or not an exception will suppress other exceptions\n     * which is typically only determined after an exception is\n     * thrown.\n     *\n     * \u003cp\u003eNote that programmer written code is also able to take\n     * advantage of calling this method in situations where there are\n     * multiple sibling exceptions and only one can be propagated.\n     *\n     * @param exception the exception to be added to the list of\n     *        suppressed exceptions\n     * @throws IllegalArgumentException if {@code exception} is this\n     *         throwable; a throwable cannot suppress itself.\n     * @throws NullPointerException if {@code exception} is {@code null}\n     * @since 1.7\n     */\n    public final synchronized void addSuppressed(Throwable exception) {\n        if (exception \u003d\u003d this)\n            throw new IllegalArgumentException(SELF_SUPPRESSION_MESSAGE, exception);\n\n        if (exception \u003d\u003d null)\n            throw new NullPointerException(NULL_CAUSE_MESSAGE);\n\n        if (suppressedExceptions \u003d\u003d null) // Suppressed exceptions not recorded\n            return;\n\n        if (suppressedExceptions \u003d\u003d SUPPRESSED_SENTINEL)\n            suppressedExceptions \u003d new ArrayList\u003c\u003e(1);\n\n        suppressedExceptions.add(exception);\n    }\n\n    private static final Throwable[] EMPTY_THROWABLE_ARRAY \u003d new Throwable[0];\n\n    /**\n     * Returns an array containing all of the exceptions that were\n     * suppressed, typically by the {@code try}-with-resources\n     * statement, in order to deliver this exception.\n     *\n     * If no exceptions were suppressed or {@linkplain\n     * #Throwable(String, Throwable, boolean, boolean) suppression is\n     * disabled}, an empty array is returned.  This method is\n     * thread-safe.  Writes to the returned array do not affect future\n     * calls to this method.\n     *\n     * @return an array containing all of the exceptions that were\n     *         suppressed to deliver this exception.\n     * @since 1.7\n     */\n    public final synchronized Throwable[] getSuppressed() {\n        if (suppressedExceptions \u003d\u003d SUPPRESSED_SENTINEL ||\n            suppressedExceptions \u003d\u003d null)\n            return EMPTY_THROWABLE_ARRAY;\n        else\n            return suppressedExceptions.toArray(EMPTY_THROWABLE_ARRAY);\n    }\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor23.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Throwable.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:339)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Throwable.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

Jan. 24, 2024 11:56:20 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.base/java/lang/Throwable.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Throwable.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:358)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 16 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Throwable.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 24 more

2024.01.24 11:56:32 INFO  compiling livechart (3 scala sources)
2024.01.24 11:56:33 INFO  time: compiled livechart in 1s
2024.01.24 11:56:51 INFO  compiling livechart (1 scala source)
2024.01.24 11:56:51 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.24 11:56:52 INFO  time: compiled livechart in 1.1s
2024.01.24 11:56:59 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala:93: error: [dialect scala3] identifier expected but ) found
                      println(patientJson.)
                                          ^
2024.01.24 11:56:59 INFO  compiling livechart (1 scala source)
2024.01.24 11:56:59 INFO  time: compiled livechart in 0.29s
2024.01.24 11:56:59 INFO  compiling livechart (1 scala source)
2024.01.24 11:57:01 INFO  time: compiled livechart in 0.74s
2024.01.24 11:57:28 INFO  compiling livechart (1 scala source)
2024.01.24 11:57:28 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.24 11:57:28 INFO  time: compiled livechart in 0.7s
2024.01.24 11:57:33 INFO  compiling livechart (1 scala source)
2024.01.24 11:57:33 INFO  time: compiled livechart in 0.6s
2024.01.24 11:59:38 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala:93: error: [dialect scala3] identifier expected but ) found
                      println(patientJson.)
                                          ^
2024.01.24 11:59:38 INFO  compiling livechart (1 scala source)
2024.01.24 11:59:38 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.24 11:59:38 INFO  time: compiled livechart in 0.32s
2024.01.24 11:59:41 INFO  compiling livechart (1 scala source)
2024.01.24 11:59:41 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.24 11:59:41 INFO  time: compiled livechart in 0.63s
2024.01.24 11:59:56 INFO  compiling livechart (1 scala source)
2024.01.24 11:59:56 INFO  time: compiled livechart in 0.56s
2024.01.24 12:02:45 INFO  compiling livechart (1 scala source)
2024.01.24 12:02:45 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.24 12:02:45 INFO  time: compiled livechart in 0.55s
2024.01.24 12:07:37 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala:91: error: [dialect scala3] identifier expected but . found
                          .asInstanceOf[js.Array[_]]
                          ^
2024.01.24 12:07:37 INFO  compiling livechart (1 scala source)
2024.01.24 12:07:37 INFO  time: compiled livechart in 0.26s
2024.01.24 12:07:39 INFO  compiling livechart (1 scala source)
2024.01.24 12:07:39 INFO  time: compiled livechart in 0.63s
2024.01.24 12:07:53 INFO  compiling livechart (1 scala source)
2024.01.24 12:07:53 INFO  time: compiled livechart in 0.53s
2024.01.24 12:08:23 INFO  compiling livechart (1 scala source)
2024.01.24 12:08:23 INFO  time: compiled livechart in 0.58s
2024.01.24 12:11:15 INFO  compiling livechart (1 scala source)
2024.01.24 12:11:15 INFO  time: compiled livechart in 0.29s
2024.01.24 12:11:25 INFO  compiling livechart (1 scala source)
2024.01.24 12:11:25 INFO  time: compiled livechart in 0.57s
Jan. 24, 2024 1:49:45 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2382
2024.01.24 14:29:03 INFO  compiling livechart (1 scala source)
2024.01.24 14:29:03 INFO  time: compiled livechart in 0.91s
2024.01.24 14:30:15 INFO  compiling livechart (1 scala source)
2024.01.24 14:30:15 INFO  time: compiled livechart in 0.78s
2024.01.24 14:39:43 INFO  Shutting down server
2024.01.24 14:39:43 INFO  shutting down Metals
2024.01.24 14:39:43 INFO  Shut down connection with build server.
Jan. 24, 2024 2:39:43 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint notify
INFO: Failed to send notification message.
org.eclipse.lsp4j.jsonrpc.JsonRpcException: java.nio.channels.AsynchronousCloseException
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:72)
	at scala.meta.internal.metals.RequestMonitorImpl$$anon$1.consume(ServerLivenessMonitor.scala:39)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.notify(RemoteEndpoint.java:126)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.sendCancelNotification(RemoteEndpoint.java:180)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint$1.cancel(RemoteEndpoint.java:150)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$register$2(BuildServerConnection.scala:425)
	at scala.runtime.java8.JFunction0$mcZ$sp.apply(JFunction0$mcZ$sp.scala:17)
	at scala.util.Try$.apply(Try.scala:210)
	at scala.meta.internal.metals.BuildServerConnection.$anonfun$register$1(BuildServerConnection.scala:425)
	at scala.meta.internal.metals.Cancelable$$anon$1.cancel(Cancelable.scala:18)
	at scala.meta.internal.metals.Cancelable$.$anonfun$cancelAll$1(Cancelable.scala:29)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.metals.Cancelable$.cancelAll(Cancelable.scala:28)
	at scala.meta.internal.metals.MutableCancelable.cancel(MutableCancelable.scala:25)
	at scala.meta.internal.metals.BuildServerConnection.cancel(BuildServerConnection.scala:365)
	at scala.meta.internal.bsp.BspSession.$anonfun$cancel$1(BspSession.scala:34)
	at scala.meta.internal.bsp.BspSession.$anonfun$cancel$1$adapted(BspSession.scala:34)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.bsp.BspSession.cancel(BspSession.scala:34)
	at scala.meta.internal.metals.Cancelable$.$anonfun$cancelAll$1(Cancelable.scala:29)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.metals.Cancelable$.cancelAll(Cancelable.scala:28)
	at scala.meta.internal.metals.MutableCancelable.cancel(MutableCancelable.scala:25)
	at scala.meta.internal.metals.MetalsLspService.cancel(MetalsLspService.scala:160)
	at scala.meta.internal.metals.MetalsLspService.onShutdown(MetalsLspService.scala:933)
	at scala.meta.internal.metals.WorkspaceLspService.$anonfun$shutdown$2(WorkspaceLspService.scala:1198)
	at scala.meta.internal.metals.WorkspaceLspService.$anonfun$shutdown$2$adapted(WorkspaceLspService.scala:1198)
	at scala.collection.immutable.List.foreach(List.scala:333)
	at scala.meta.internal.metals.WorkspaceLspService.shutdown(WorkspaceLspService.scala:1198)
	at scala.meta.metals.MetalsLanguageServer.shutdown(MetalsLanguageServer.scala:260)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.nio.channels.AsynchronousCloseException
	at java.base/java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:202)
	at java.base/sun.nio.ch.SocketChannelImpl.endWrite(SocketChannelImpl.java:447)
	at java.base/sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:469)
	at java.base/sun.nio.ch.SinkChannelImpl.write(SinkChannelImpl.java:114)
	at java.base/java.nio.channels.Channels.writeFullyImpl(Channels.java:74)
	at java.base/java.nio.channels.Channels.writeFully(Channels.java:94)
	at java.base/java.nio.channels.Channels$1.write(Channels.java:172)
	at java.base/java.io.OutputStream.write(OutputStream.java:122)
	at java.base/java.nio.channels.Channels$1.write(Channels.java:152)
	at scala.meta.internal.metals.ClosableOutputStream.write(ClosableOutputStream.scala:26)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:137)
	at java.base/java.io.FilterOutputStream.write(FilterOutputStream.java:108)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageConsumer.consume(StreamMessageConsumer.java:67)
	... 45 more

2024.01.24 14:39:43 INFO  Scala test classes not supported by server
2024.01.24 14:39:43 INFO  Scala test classes not supported by server
2024.01.24 14:39:43 INFO  Scala main classes not supported by server
2024.01.24 14:39:43 INFO  Bloop should support `buildTarget/jvmRunEnvironment`, but it fails.
2024.01.24 14:39:43 INFO  Exiting server
2024.01.29 09:50:47 INFO  Started: Metals version 1.2.0 in folders 'C:\Users\yashb\Documents\vscode-laminar-vite-extension' for client Visual Studio Code 1.85.2.
2024.01.29 09:50:48 INFO  Attempting to connect to the build server...
2024.01.29 09:50:48 INFO  skipping build import with status 'Installed'
2024.01.29 09:50:48 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.29 09:50:48 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.29 09:50:48 INFO  time: Connected to build server in 0.69s
2024.01.29 09:50:48 INFO  Connected to Build server: Bloop v1.5.13
2024.01.29 09:50:48 INFO  time: Imported build in 0.18s
2024.01.29 09:50:52 INFO  no build target found for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala. Using presentation compiler with project's scala-library version: 3.3.1
2024.01.29 09:50:54 INFO  time: indexed workspace in 1.8s
2024.01.29 09:50:56 INFO  Generated JavaScript file 'C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\.bloop\livechart\livechart-test.js'
Exception in thread "pool-4-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.29 10:48:39 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.29 10:48:39 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.29 10:48:39 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.29 10:48:39 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.29 10:48:39 INFO  Connected to Build server: Bloop v1.5.13
2024.01.29 10:48:39 INFO  Connected to Build server: Bloop v1.5.13
2024.01.29 10:48:39 INFO  time: Imported build in 0.2s
2024.01.29 10:48:39 INFO  time: Imported build in 0.24s
2024.01.29 10:48:41 INFO  time: indexed workspace in 1.96s
2024.01.29 10:48:42 INFO  time: indexed workspace in 2.21s
2024.01.29 10:57:29 INFO  compiling livechart (1 scala source)
2024.01.29 10:57:32 INFO  time: compiled livechart in 2.94s
2024.01.29 10:57:48 INFO  compiling livechart (1 scala source)
2024.01.29 10:57:50 INFO  time: compiled livechart in 1.84s
2024.01.29 10:59:25 WARN  Could not find semantic tokens for: file:///C:/Users/yashb/Documents/vscode-laminar-vite-extension/webview-ui/src/main/scala/utilities/JsonImplicits.scala
2024.01.29 10:59:26 WARN  Could not find semantic tokens for: file:///C:/Users/yashb/Documents/vscode-laminar-vite-extension/webview-ui/src/main/scala/utilities/JsonImplicits.scala
Jan. 29, 2024 11:00:57 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 591
2024.01.29 11:02:08 INFO  compiling livechart (1 scala source)
2024.01.29 11:02:09 INFO  time: compiled livechart in 1.41s
Jan. 29, 2024 11:02:59 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 826
2024.01.29 11:03:26 INFO  compiling livechart (1 scala source)
2024.01.29 11:03:26 INFO  time: compiled livechart in 0.78s
2024.01.29 11:03:26 INFO  compiling livechart (2 scala sources)
2024.01.29 11:03:28 INFO  time: compiled livechart in 0.28s
2024.01.29 11:03:31 INFO  compiling livechart (3 scala sources)
2024.01.29 11:03:31 INFO  time: compiled livechart in 0.22s
2024.01.29 11:03:31 INFO  compiling livechart (3 scala sources)
2024.01.29 11:03:31 INFO  time: compiled livechart in 0.19s
2024.01.29 11:03:44 INFO  compiling livechart (3 scala sources)
2024.01.29 11:03:44 INFO  time: compiled livechart in 0.48s
2024.01.29 11:04:04 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 11:04:04 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
Exception in thread "pool-8-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.29 11:04:04 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 11:04:04 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 11:04:04 INFO  compiling livechart (1 scala source)
2024.01.29 11:04:04 INFO  time: compiled livechart in 0.69s
2024.01.29 11:04:27 WARN  Using indexes to guess the definition of handleCellDblClick
2024.01.29 11:04:27 INFO  compiling livechart (1 scala source)
2024.01.29 11:04:27 INFO  time: compiled livechart in 0.76s
2024.01.29 11:04:38 WARN  Using indexes to guess the definition of price
2024.01.29 11:04:39 INFO  compiling livechart (1 scala source)
2024.01.29 11:04:39 INFO  time: compiled livechart in 0.34s
2024.01.29 11:05:09 INFO  compiling livechart (1 scala source)
2024.01.29 11:05:10 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableRow.scala
2024.01.29 11:05:09 INFO  time: compiled livechart in 0.77s
2024.01.29 11:05:25 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableRow.scala
2024.01.29 11:05:28 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableRow.scala
2024.01.29 11:05:34 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableRow.scala
2024.01.29 11:05:37 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableRow.scala
2024.01.29 11:05:44 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableRow.scala
2024.01.29 11:06:29 INFO  compiling livechart (1 scala source)
2024.01.29 11:06:29 INFO  time: compiled livechart in 0.51s
2024.01.29 11:06:41 INFO  compiling livechart (1 scala source)
2024.01.29 11:06:41 INFO  time: compiled livechart in 0.48s
2024.01.29 11:06:46 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableRow.scala
2024.01.29 11:07:00 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableRow.scala
2024.01.29 11:07:12 INFO  compiling livechart (2 scala sources)
2024.01.29 11:07:12 INFO  time: compiled livechart in 0.7s
2024.01.29 11:07:12 INFO  compiling livechart (2 scala sources)
2024.01.29 11:07:13 INFO  time: compiled livechart in 0.51s
2024.01.29 11:07:17 INFO  compiling livechart (2 scala sources)
2024.01.29 11:07:17 INFO  time: compiled livechart in 0.64s
2024.01.29 11:07:17 INFO  compiling livechart (2 scala sources)
2024.01.29 11:07:18 INFO  time: compiled livechart in 0.61s
2024.01.29 11:07:21 INFO  compiling livechart (2 scala sources)
2024.01.29 11:07:21 INFO  time: compiled livechart in 0.67s
2024.01.29 11:07:25 INFO  compiling livechart (2 scala sources)
2024.01.29 11:07:25 INFO  time: compiled livechart in 0.67s
2024.01.29 11:07:27 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableRow.scala
2024.01.29 11:07:29 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableRow.scala
2024.01.29 11:07:30 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableRow.scala
2024.01.29 11:07:30 INFO  compiling livechart (2 scala sources)
2024.01.29 11:07:30 INFO  time: compiled livechart in 0.6s
2024.01.29 11:08:07 WARN  Using indexes to guess the definition of handleCellClick
2024.01.29 11:08:08 INFO  compiling livechart (2 scala sources)
2024.01.29 11:08:08 INFO  time: compiled livechart in 0.76s
2024.01.29 11:08:16 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableRow.scala
2024.01.29 11:08:20 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableRow.scala
2024.01.29 11:08:33 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableRow.scala
2024.01.29 11:08:54 INFO  compiling livechart (2 scala sources)
2024.01.29 11:08:54 INFO  time: compiled livechart in 0.5s
2024.01.29 11:09:10 INFO  compiling livechart (2 scala sources)
2024.01.29 11:09:10 INFO  time: compiled livechart in 0.52s
2024.01.29 11:09:12 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableRow.scala
2024.01.29 11:09:15 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableRow.scala
2024.01.29 11:10:16 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableRow.scala
2024.01.29 11:10:16 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableRow.scala
2024.01.29 11:10:16 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableRow.scala:63: error: [dialect scala3] } expected but ) found
        )
        ^
2024.01.29 11:10:16 INFO  compiling livechart (2 scala sources)
2024.01.29 11:10:16 INFO  time: compiled livechart in 0.15s
2024.01.29 11:10:16 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableRow.scala
2024.01.29 11:10:19 INFO  compiling livechart (2 scala sources)
2024.01.29 11:10:19 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableRow.scala
2024.01.29 11:10:19 INFO  time: compiled livechart in 0.36s
Jan. 29, 2024 11:12:00 A.M. scala.meta.internal.mtags.SymbolIndexBucket addMtagsSourceFile
WARNING: Error indexing C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody copy.scala
java.nio.file.NoSuchFileException: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody copy.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:371)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:422)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:415)
	at scala.meta.internal.mtags.Mtags.index(Mtags.scala:67)
	at scala.meta.internal.mtags.Mtags.allSymbols(Mtags.scala:21)
	at scala.meta.internal.mtags.SymbolIndexBucket.allSymbols(SymbolIndexBucket.scala:242)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:253)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1(SymbolIndexBucket.scala:168)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1$adapted(SymbolIndexBucket.scala:168)
	at scala.collection.immutable.Set$Set3.foreach(Set.scala:261)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:168)
	at scala.meta.internal.mtags.SymbolIndexBucket.query(SymbolIndexBucket.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.$anonfun$findSymbolDefinition$1(OnDemandSymbolIndex.scala:141)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.findSymbolDefinition(OnDemandSymbolIndex.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.definition(OnDemandSymbolIndex.scala:48)
	at scala.meta.internal.metals.Docstrings.indexSymbol(Docstrings.scala:118)
	at scala.meta.internal.metals.Docstrings.documentation(Docstrings.scala:44)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:43)
	at scala.meta.internal.mtags.MtagsEnrichments$.symbolDocumentation(MtagsEnrichments.scala:253)
	at scala.meta.internal.pc.HoverProvider$.$anonfun$3(HoverProvider.scala:137)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.pc.HoverProvider$.hover(HoverProvider.scala:137)
	at scala.meta.internal.pc.ScalaPresentationCompiler.hover$$anonfun$1(ScalaPresentationCompiler.scala:342)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:146)
	at scala.meta.internal.pc.CompilerAccess.withNonInterruptableCompiler$$anonfun$1(CompilerAccess.scala:132)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:232)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)

Jan. 29, 2024 11:12:00 A.M. scala.meta.internal.mtags.SymbolIndexBucket addMtagsSourceFile
WARNING: Error indexing C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody copy.scala
java.nio.file.NoSuchFileException: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody copy.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:371)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:422)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:415)
	at scala.meta.internal.mtags.Mtags.index(Mtags.scala:67)
	at scala.meta.internal.mtags.Mtags.allSymbols(Mtags.scala:21)
	at scala.meta.internal.mtags.SymbolIndexBucket.allSymbols(SymbolIndexBucket.scala:242)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:253)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:264)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1(SymbolIndexBucket.scala:168)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1$adapted(SymbolIndexBucket.scala:168)
	at scala.collection.immutable.Set$Set3.foreach(Set.scala:261)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:168)
	at scala.meta.internal.mtags.SymbolIndexBucket.query(SymbolIndexBucket.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.$anonfun$findSymbolDefinition$1(OnDemandSymbolIndex.scala:141)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.findSymbolDefinition(OnDemandSymbolIndex.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.definition(OnDemandSymbolIndex.scala:48)
	at scala.meta.internal.metals.Docstrings.indexSymbol(Docstrings.scala:118)
	at scala.meta.internal.metals.Docstrings.documentation(Docstrings.scala:44)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:43)
	at scala.meta.internal.mtags.MtagsEnrichments$.symbolDocumentation(MtagsEnrichments.scala:253)
	at scala.meta.internal.pc.HoverProvider$.$anonfun$3(HoverProvider.scala:137)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.pc.HoverProvider$.hover(HoverProvider.scala:137)
	at scala.meta.internal.pc.ScalaPresentationCompiler.hover$$anonfun$1(ScalaPresentationCompiler.scala:342)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:146)
	at scala.meta.internal.pc.CompilerAccess.withNonInterruptableCompiler$$anonfun$1(CompilerAccess.scala:132)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:232)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)

Jan. 29, 2024 11:12:15 A.M. scala.meta.internal.mtags.SymbolIndexBucket addMtagsSourceFile
WARNING: Error indexing C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody copy.scala
java.nio.file.NoSuchFileException: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody copy.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:371)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:422)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:415)
	at scala.meta.internal.mtags.Mtags.index(Mtags.scala:67)
	at scala.meta.internal.mtags.Mtags.allSymbols(Mtags.scala:21)
	at scala.meta.internal.mtags.SymbolIndexBucket.allSymbols(SymbolIndexBucket.scala:242)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:253)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1(SymbolIndexBucket.scala:168)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1$adapted(SymbolIndexBucket.scala:168)
	at scala.collection.immutable.Set$Set3.foreach(Set.scala:261)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:168)
	at scala.meta.internal.mtags.SymbolIndexBucket.query(SymbolIndexBucket.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.$anonfun$findSymbolDefinition$1(OnDemandSymbolIndex.scala:141)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.findSymbolDefinition(OnDemandSymbolIndex.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.definition(OnDemandSymbolIndex.scala:48)
	at scala.meta.internal.metals.Docstrings.indexSymbol(Docstrings.scala:118)
	at scala.meta.internal.metals.Docstrings.documentation(Docstrings.scala:44)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:43)
	at scala.meta.internal.mtags.MtagsEnrichments$.symbolDocumentation(MtagsEnrichments.scala:253)
	at scala.meta.internal.pc.HoverProvider$.$anonfun$3(HoverProvider.scala:137)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.pc.HoverProvider$.hover(HoverProvider.scala:137)
	at scala.meta.internal.pc.ScalaPresentationCompiler.hover$$anonfun$1(ScalaPresentationCompiler.scala:342)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:146)
	at scala.meta.internal.pc.CompilerAccess.withNonInterruptableCompiler$$anonfun$1(CompilerAccess.scala:132)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:232)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)

Jan. 29, 2024 11:12:15 A.M. scala.meta.internal.mtags.SymbolIndexBucket addMtagsSourceFile
WARNING: Error indexing C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody copy.scala
java.nio.file.NoSuchFileException: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody copy.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:371)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:422)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:415)
	at scala.meta.internal.mtags.Mtags.index(Mtags.scala:67)
	at scala.meta.internal.mtags.Mtags.allSymbols(Mtags.scala:21)
	at scala.meta.internal.mtags.SymbolIndexBucket.allSymbols(SymbolIndexBucket.scala:242)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:253)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:264)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1(SymbolIndexBucket.scala:168)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1$adapted(SymbolIndexBucket.scala:168)
	at scala.collection.immutable.Set$Set3.foreach(Set.scala:261)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:168)
	at scala.meta.internal.mtags.SymbolIndexBucket.query(SymbolIndexBucket.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.$anonfun$findSymbolDefinition$1(OnDemandSymbolIndex.scala:141)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.findSymbolDefinition(OnDemandSymbolIndex.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.definition(OnDemandSymbolIndex.scala:48)
	at scala.meta.internal.metals.Docstrings.indexSymbol(Docstrings.scala:118)
	at scala.meta.internal.metals.Docstrings.documentation(Docstrings.scala:44)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:43)
	at scala.meta.internal.mtags.MtagsEnrichments$.symbolDocumentation(MtagsEnrichments.scala:253)
	at scala.meta.internal.pc.HoverProvider$.$anonfun$3(HoverProvider.scala:137)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.pc.HoverProvider$.hover(HoverProvider.scala:137)
	at scala.meta.internal.pc.ScalaPresentationCompiler.hover$$anonfun$1(ScalaPresentationCompiler.scala:342)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:146)
	at scala.meta.internal.pc.CompilerAccess.withNonInterruptableCompiler$$anonfun$1(CompilerAccess.scala:132)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:232)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)

Jan. 29, 2024 11:12:15 A.M. scala.meta.internal.mtags.SymbolIndexBucket addMtagsSourceFile
WARNING: Error indexing C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody copy.scala
java.nio.file.NoSuchFileException: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody copy.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:371)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:422)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:415)
	at scala.meta.internal.mtags.Mtags.index(Mtags.scala:67)
	at scala.meta.internal.mtags.Mtags.allSymbols(Mtags.scala:21)
	at scala.meta.internal.mtags.SymbolIndexBucket.allSymbols(SymbolIndexBucket.scala:242)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:253)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1(SymbolIndexBucket.scala:168)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1$adapted(SymbolIndexBucket.scala:168)
	at scala.collection.immutable.Set$Set3.foreach(Set.scala:261)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:168)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$8(SymbolIndexBucket.scala:191)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:191)
	at scala.meta.internal.mtags.SymbolIndexBucket.query(SymbolIndexBucket.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.$anonfun$findSymbolDefinition$1(OnDemandSymbolIndex.scala:141)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.findSymbolDefinition(OnDemandSymbolIndex.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.definition(OnDemandSymbolIndex.scala:48)
	at scala.meta.internal.metals.Docstrings.indexSymbol(Docstrings.scala:118)
	at scala.meta.internal.metals.Docstrings.documentation(Docstrings.scala:44)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:43)
	at scala.meta.internal.mtags.MtagsEnrichments$.symbolDocumentation(MtagsEnrichments.scala:253)
	at scala.meta.internal.pc.HoverProvider$.$anonfun$3(HoverProvider.scala:137)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.pc.HoverProvider$.hover(HoverProvider.scala:137)
	at scala.meta.internal.pc.ScalaPresentationCompiler.hover$$anonfun$1(ScalaPresentationCompiler.scala:342)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:146)
	at scala.meta.internal.pc.CompilerAccess.withNonInterruptableCompiler$$anonfun$1(CompilerAccess.scala:132)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:232)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)

Jan. 29, 2024 11:12:15 A.M. scala.meta.internal.mtags.SymbolIndexBucket addMtagsSourceFile
WARNING: Error indexing C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody copy.scala
java.nio.file.NoSuchFileException: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody copy.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:371)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:422)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:415)
	at scala.meta.internal.mtags.Mtags.index(Mtags.scala:67)
	at scala.meta.internal.mtags.Mtags.allSymbols(Mtags.scala:21)
	at scala.meta.internal.mtags.SymbolIndexBucket.allSymbols(SymbolIndexBucket.scala:242)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:253)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:264)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1(SymbolIndexBucket.scala:168)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1$adapted(SymbolIndexBucket.scala:168)
	at scala.collection.immutable.Set$Set3.foreach(Set.scala:261)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:168)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$8(SymbolIndexBucket.scala:191)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:191)
	at scala.meta.internal.mtags.SymbolIndexBucket.query(SymbolIndexBucket.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.$anonfun$findSymbolDefinition$1(OnDemandSymbolIndex.scala:141)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.findSymbolDefinition(OnDemandSymbolIndex.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.definition(OnDemandSymbolIndex.scala:48)
	at scala.meta.internal.metals.Docstrings.indexSymbol(Docstrings.scala:118)
	at scala.meta.internal.metals.Docstrings.documentation(Docstrings.scala:44)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:43)
	at scala.meta.internal.mtags.MtagsEnrichments$.symbolDocumentation(MtagsEnrichments.scala:253)
	at scala.meta.internal.pc.HoverProvider$.$anonfun$3(HoverProvider.scala:137)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.pc.HoverProvider$.hover(HoverProvider.scala:137)
	at scala.meta.internal.pc.ScalaPresentationCompiler.hover$$anonfun$1(ScalaPresentationCompiler.scala:342)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:146)
	at scala.meta.internal.pc.CompilerAccess.withNonInterruptableCompiler$$anonfun$1(CompilerAccess.scala:132)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:232)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)

Jan. 29, 2024 11:12:23 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 1873
2024.01.29 11:12:30 INFO  compiling livechart (1 scala source)
2024.01.29 11:12:30 INFO  time: compiled livechart in 0.11s
2024.01.29 11:12:33 INFO  compiling livechart (1 scala source)
Exception in thread "pool-8-thread-2" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.29 11:12:33 INFO  time: compiled livechart in 99ms
2024.01.29 11:12:33 INFO  compiling livechart (1 scala source)
2024.01.29 11:12:33 INFO  time: compiled livechart in 0.1s
2024.01.29 11:12:37 WARN  Using indexes to guess the definition of model
2024.01.29 11:12:43 INFO  compiling livechart (1 scala source)
2024.01.29 11:12:43 INFO  time: compiled livechart in 86ms
2024.01.29 11:20:21 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.29 11:20:21 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.29 11:20:21 INFO  Connected to Build server: Bloop v1.5.13
2024.01.29 11:20:23 INFO  time: indexed workspace in 1.28s
2024.01.29 11:20:23 INFO  compiling livechart (1 scala source)
2024.01.29 11:20:25 INFO  time: compiled livechart in 2.15s
2024.01.29 11:21:01 INFO  compiling livechart (1 scala source)
2024.01.29 11:21:01 INFO  time: compiled livechart in 0.51s
Jan. 29, 2024 11:22:34 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 2167
2024.01.29 11:22:58 INFO  compiling livechart (1 scala source)
2024.01.29 11:22:58 INFO  time: compiled livechart in 0.48s
2024.01.29 11:22:58 INFO  compiling livechart (1 scala source)
2024.01.29 11:22:58 INFO  time: compiled livechart in 0.44s
2024.01.29 11:23:05 INFO  compiling livechart (2 scala sources)
2024.01.29 11:23:05 INFO  time: compiled livechart in 0.47s
2024.01.29 11:23:10 INFO  compiling livechart (3 scala sources)
2024.01.29 11:23:10 INFO  time: compiled livechart in 0.55s
2024.01.29 11:23:17 INFO  compiling livechart (3 scala sources)
2024.01.29 11:23:17 INFO  time: compiled livechart in 0.51s
2024.01.29 11:24:03 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 11:24:03 INFO  compiling livechart (1 scala source)
2024.01.29 11:24:03 INFO  time: compiled livechart in 0.42s
2024.01.29 11:33:53 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\utilities\sorting.scala:12: error: [dialect scala3] = expected but => found
  def sortGrid => (sortOrder: SortOrder)(a: String, b: String) = {
               ^
2024.01.29 11:33:53 INFO  compiling livechart (1 scala source)
2024.01.29 11:33:53 INFO  time: compiled livechart in 81ms
2024.01.29 11:33:59 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\utilities\sorting.scala:12: error: [dialect scala3] declaration requires a type
  val sortGrid => (sortOrder: SortOrder)(a: String, b: String) = {
               ^
2024.01.29 11:33:59 INFO  compiling livechart (1 scala source)
2024.01.29 11:33:59 INFO  time: compiled livechart in 64ms
2024.01.29 11:34:07 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\utilities\sorting.scala:12: error: [dialect scala3] ; expected but => found
  val sortGrid = (sortOrder: SortOrder)(a: String, b: String) => {
                                                              ^
2024.01.29 11:34:07 INFO  compiling livechart (1 scala source)
2024.01.29 11:34:07 INFO  time: compiled livechart in 99ms
2024.01.29 11:34:16 INFO  compiling livechart (1 scala source)
2024.01.29 11:34:16 INFO  time: compiled livechart in 0.21s
2024.01.29 11:35:08 INFO  compiling livechart (1 scala source)
2024.01.29 11:35:08 INFO  time: compiled livechart in 0.46s
2024.01.29 11:36:28 INFO  compiling livechart (1 scala source)
2024.01.29 11:36:29 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableHeader.scala
2024.01.29 11:36:28 INFO  time: compiled livechart in 0.5s
2024.01.29 11:36:32 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableHeader.scala
2024.01.29 11:36:32 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableHeader.scala
2024.01.29 11:36:32 WARN  Using indexes to guess the definition of sortGrid
2024.01.29 11:36:40 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableHeader.scala
2024.01.29 11:36:40 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableHeader.scala
2024.01.29 11:36:40 WARN  Using indexes to guess the definition of sortGrid
2024.01.29 11:37:18 INFO  compiling livechart (1 scala source)
2024.01.29 11:37:18 INFO  compiling livechart (2 scala sources)
2024.01.29 11:37:18 INFO  time: compiled livechart in 0.41s
2024.01.29 11:37:20 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableHeader.scala
2024.01.29 11:37:20 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableHeader.scala
2024.01.29 11:37:23 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableHeader.scala
2024.01.29 11:37:23 INFO  compiling livechart (1 scala source)
2024.01.29 11:37:23 INFO  time: compiled livechart in 0.2s
2024.01.29 11:37:23 INFO  compiling livechart (1 scala source)
2024.01.29 11:37:23 INFO  time: compiled livechart in 0.48s
2024.01.29 11:37:34 WARN  Using indexes to guess the definition of sortGrid
2024.01.29 11:37:34 WARN  Using indexes to guess the definition of sortGrid
Exception in thread "pool-14-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Jan. 29, 2024 11:38:31 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3211
2024.01.29 11:38:31 INFO  Deduplicating compilation of livechart from bsp client 'Metals 1.2.0' (since 18m 9.563s)
2024.01.29 11:38:31 INFO  compiling livechart (1 scala source)
2024.01.29 11:38:31 INFO  compiling livechart (1 scala source)
2024.01.29 11:38:31 INFO  time: compiled livechart in 0.2s
2024.01.29 11:38:31 INFO  compiling livechart (1 scala source)
2024.01.29 11:38:31 INFO  time: compiled livechart in 2ms
2024.01.29 11:38:31 INFO  compiling livechart (1 scala source)
2024.01.29 11:38:31 INFO  time: compiled livechart in 0.41s
2024.01.29 11:38:41 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/FunctionalInterface.java

Uri: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/FunctionalInterface.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:703)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 29, 2024 11:38:41 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.base/java/lang/FunctionalInterface.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.lang;\n\nimport java.lang.annotation.*;\n\n/**\n * An informative annotation type used to indicate that an interface\n * type declaration is intended to be a \u003ci\u003efunctional interface\u003c/i\u003e as\n * defined by the Java Language Specification.\n *\n * Conceptually, a functional interface has exactly one abstract\n * method.  Since {@linkplain java.lang.reflect.Method#isDefault()\n * default methods} have an implementation, they are not abstract.  If\n * an interface declares an abstract method overriding one of the\n * public methods of {@code java.lang.Object}, that also does\n * \u003cem\u003enot\u003c/em\u003e count toward the interface\u0027s abstract method count\n * since any implementation of the interface will have an\n * implementation from {@code java.lang.Object} or elsewhere.\n *\n * \u003cp\u003eNote that instances of functional interfaces can be created with\n * lambda expressions, method references, or constructor references.\n *\n * \u003cp\u003eIf a type is annotated with this annotation type, compilers are\n * required to generate an error message unless:\n *\n * \u003cul\u003e\n * \u003cli\u003e The type is an interface type and not an annotation type, enum, or class.\n * \u003cli\u003e The annotated type satisfies the requirements of a functional interface.\n * \u003c/ul\u003e\n *\n * \u003cp\u003eHowever, the compiler will treat any interface meeting the\n * definition of a functional interface as a functional interface\n * regardless of whether or not a {@code FunctionalInterface}\n * annotation is present on the interface declaration.\n *\n * @jls 4.3.2. The Class Object\n * @jls 9.8 Functional Interfaces\n * @jls 9.4.3 Interface Method Body\n * @jls 9.6.4.9 @FunctionalInterface\n * @since 1.8\n */\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\npublic @interface FunctionalInterface {}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/FunctionalInterface.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:339)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/FunctionalInterface.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

Jan. 29, 2024 11:38:41 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.base/java/lang/FunctionalInterface.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor16.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/FunctionalInterface.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:358)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/FunctionalInterface.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

Jan. 29, 2024 11:38:41 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3244
Jan. 29, 2024 11:38:41 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3245
Jan. 29, 2024 11:38:41 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3246
Jan. 29, 2024 11:38:41 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3247
Jan. 29, 2024 11:38:42 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3248
Jan. 29, 2024 11:38:42 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3249
Jan. 29, 2024 11:38:42 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3250
2024.01.29 11:38:45 INFO  compiling livechart (1 scala source)
2024.01.29 11:38:45 INFO  time: compiled livechart in 0.18s
2024.01.29 11:38:45 INFO  compiling livechart (1 scala source)
2024.01.29 11:38:45 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\utilities\sorting.scala
2024.01.29 11:38:45 INFO  time: compiled livechart in 0.63s
Exception in thread "pool-14-thread-2" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Jan. 29, 2024 11:38:53 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3318
Jan. 29, 2024 11:38:53 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3319
Jan. 29, 2024 11:38:53 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3320
Jan. 29, 2024 11:38:53 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3324
2024.01.29 11:38:55 INFO  compiling livechart (1 scala source)
2024.01.29 11:38:55 INFO  time: compiled livechart in 0.15s
2024.01.29 11:38:55 INFO  compiling livechart (1 scala source)
2024.01.29 11:38:55 INFO  time: compiled livechart in 0.44s
2024.01.29 11:39:13 INFO  compiling livechart (1 scala source)
2024.01.29 11:39:13 INFO  time: compiled livechart in 0.17s
2024.01.29 11:39:13 INFO  compiling livechart (1 scala source)
2024.01.29 11:39:14 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\utilities\sorting.scala
2024.01.29 11:39:13 INFO  time: compiled livechart in 0.41s
2024.01.29 13:40:42 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.29 13:40:42 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.29 13:40:42 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.29 13:40:42 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.29 13:40:42 INFO  Connected to Build server: Bloop v1.5.13
2024.01.29 13:40:42 INFO  Connected to Build server: Bloop v1.5.13
2024.01.29 13:40:42 INFO  compiling livechart (1 scala source)
2024.01.29 13:40:42 INFO  time: compiled livechart in 0.59s
2024.01.29 13:40:43 INFO  time: Imported build in 0.97s
2024.01.29 13:40:42 INFO  time: Imported build in 0.97s
2024.01.29 13:40:44 INFO  time: indexed workspace in 1.22s
2024.01.29 13:40:44 INFO  time: indexed workspace in 1.24s
2024.01.29 13:40:44 INFO  compiling livechart (1 scala source)
2024.01.29 13:40:45 INFO  time: compiled livechart in 1.09s
2024.01.29 13:40:45 INFO  compiling livechart (1 scala source)
2024.01.29 13:40:45 INFO  time: compiled livechart in 0.58s
Jan. 29, 2024 1:40:49 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 3843
Exception in thread "pool-18-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.29 13:40:50 INFO  compiling livechart (1 scala source)
2024.01.29 13:40:50 INFO  time: compiled livechart in 0.4s
2024.01.29 13:40:50 INFO  compiling livechart (1 scala source)
2024.01.29 13:40:50 INFO  time: compiled livechart in 0.53s
2024.01.29 13:41:03 INFO  compiling livechart (1 scala source)
2024.01.29 13:41:03 INFO  time: compiled livechart in 0.19s
2024.01.29 13:41:07 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 13:41:10 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 13:41:10 INFO  compiling livechart (1 scala source)
2024.01.29 13:41:10 INFO  time: compiled livechart in 0.41s
2024.01.29 13:41:18 INFO  compiling livechart (1 scala source)
2024.01.29 13:41:18 INFO  time: compiled livechart in 0.41s
2024.01.29 13:42:05 INFO  compiling livechart (1 scala source)
2024.01.29 13:42:05 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 13:42:05 INFO  time: compiled livechart in 0.66s
2024.01.29 13:42:20 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 13:42:22 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
Jan. 29, 2024 1:42:23 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 4073
2024.01.29 13:42:23 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 13:42:52 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 13:42:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 13:42:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 13:42:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 13:42:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 13:42:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 13:42:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 13:42:53 INFO  compiling livechart (1 scala source)
2024.01.29 13:42:53 INFO  time: compiled livechart in 0.56s
2024.01.29 13:43:03 INFO  compiling livechart (2 scala sources)
2024.01.29 13:43:03 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 13:43:03 INFO  time: compiled livechart in 0.71s
2024.01.29 13:43:03 INFO  compiling livechart (2 scala sources)
2024.01.29 13:43:04 INFO  time: compiled livechart in 0.59s
2024.01.29 13:43:10 INFO  compiling livechart (2 scala sources)
2024.01.29 13:43:10 INFO  time: compiled livechart in 0.6s
2024.01.29 13:43:47 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 13:43:53 WARN  Using indexes to guess the definition of JSON
2024.01.29 13:43:53 INFO  compiling livechart (3 scala sources)
2024.01.29 13:43:53 INFO  time: compiled livechart in 0.6s
2024.01.29 13:43:57 INFO  compiling livechart (3 scala sources)
2024.01.29 13:43:57 INFO  time: compiled livechart in 0.58s
2024.01.29 13:44:01 WARN  Using indexes to guess the definition of Patient
2024.01.29 13:44:01 INFO  compiling livechart (3 scala sources)
2024.01.29 13:44:01 INFO  time: compiled livechart in 0.55s
2024.01.29 13:44:01 INFO  compiling livechart (3 scala sources)
2024.01.29 13:44:02 INFO  time: compiled livechart in 0.59s
2024.01.29 13:44:03 INFO  compiling livechart (3 scala sources)
2024.01.29 13:44:03 INFO  time: compiled livechart in 0.62s
2024.01.29 13:44:11 INFO  compiling livechart (3 scala sources)
2024.01.29 13:44:11 INFO  time: compiled livechart in 0.63s
2024.01.29 13:44:13 WARN  Using indexes to guess the definition of JSON
2024.01.29 13:44:15 WARN  Using indexes to guess the definition of AjaxStreamError
2024.01.29 13:44:16 WARN  Using indexes to guess the definition of AjaxStreamError
2024.01.29 13:44:16 WARN  Using indexes to guess the definition of AjaxStreamError
2024.01.29 13:44:18 WARN  Using indexes to guess the definition of AjaxStreamError
2024.01.29 13:44:21 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 13:44:26 INFO  compiling livechart (3 scala sources)
2024.01.29 13:44:26 INFO  time: compiled livechart in 0.61s
2024.01.29 13:44:29 WARN  Using indexes to guess the definition of dom
2024.01.29 13:44:32 INFO  compiling livechart (3 scala sources)
2024.01.29 13:44:32 INFO  time: compiled livechart in 0.62s
2024.01.29 13:44:41 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 13:44:49 INFO  compiling livechart (3 scala sources)
2024.01.29 13:44:49 INFO  time: compiled livechart in 0.56s
2024.01.29 13:44:52 INFO  compiling livechart (3 scala sources)
2024.01.29 13:44:52 INFO  time: compiled livechart in 0.65s
2024.01.29 13:45:33 INFO  compiling livechart (3 scala sources)
2024.01.29 13:45:33 INFO  time: compiled livechart in 0.62s
2024.01.29 13:45:50 INFO  compiling livechart (3 scala sources)
2024.01.29 13:45:50 INFO  time: compiled livechart in 0.61s
2024.01.29 13:46:43 INFO  compiling livechart (3 scala sources)
2024.01.29 13:46:43 INFO  time: compiled livechart in 0.74s
2024.01.29 13:48:40 INFO  compiling livechart (3 scala sources)
2024.01.29 13:48:40 INFO  time: compiled livechart in 0.64s
2024.01.29 15:32:22 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.29 15:32:22 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.29 15:32:22 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.29 15:32:22 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.29 15:32:22 INFO  Connected to Build server: Bloop v1.5.13
2024.01.29 15:32:22 INFO  Connected to Build server: Bloop v1.5.13
2024.01.29 15:32:22 INFO  compiling livechart (3 scala sources)
2024.01.29 15:32:22 INFO  time: compiled livechart in 0.7s
2024.01.29 15:32:23 INFO  time: Imported build in 1.05s
2024.01.29 15:32:23 INFO  time: Imported build in 1.05s
2024.01.29 15:32:24 INFO  time: indexed workspace in 1.1s
2024.01.29 15:32:24 INFO  time: indexed workspace in 1.1s
2024.01.29 15:32:24 INFO  compiling livechart (3 scala sources)
2024.01.29 15:32:26 INFO  time: compiled livechart in 1.1s
2024.01.29 15:32:26 INFO  compiling livechart (3 scala sources)
2024.01.29 15:32:26 INFO  time: compiled livechart in 0.63s
2024.01.29 15:32:52 INFO  compiling livechart (3 scala sources)
2024.01.29 15:32:52 INFO  time: compiled livechart in 0.57s
2024.01.29 15:33:10 WARN  Using indexes to guess the definition of eventsVar
2024.01.29 15:33:23 INFO  compiling livechart (3 scala sources)
2024.01.29 15:33:23 INFO  time: compiled livechart in 0.67s
2024.01.29 15:34:00 INFO  compiling livechart (3 scala sources)
2024.01.29 15:34:00 INFO  time: compiled livechart in 0.61s
2024.01.29 15:34:14 INFO  compiling livechart (3 scala sources)
2024.01.29 15:34:14 INFO  time: compiled livechart in 0.65s
2024.01.29 15:35:05 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:35:50 INFO  compiling livechart (4 scala sources)
2024.01.29 15:35:52 INFO  time: compiled livechart in 1.9s
2024.01.29 15:35:57 INFO  compiling livechart (4 scala sources)
2024.01.29 15:35:59 INFO  time: compiled livechart in 1.98s
2024.01.29 15:35:59 INFO  compiling livechart (4 scala sources)
2024.01.29 15:36:00 INFO  time: compiled livechart in 1.4s
2024.01.29 15:36:00 INFO  compiling livechart (4 scala sources)
2024.01.29 15:36:01 INFO  time: compiled livechart in 1.26s
Exception in thread "pool-22-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-22-thread-2" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.29 15:36:07 INFO  compiling livechart (4 scala sources)
Exception in thread "pool-22-thread-3" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-22-thread-4" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-22-thread-5" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.29 15:36:09 INFO  time: compiled livechart in 1.26s
2024.01.29 15:36:09 INFO  compiling livechart (4 scala sources)
2024.01.29 15:36:10 INFO  time: compiled livechart in 1.22s
2024.01.29 15:36:18 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\utilities\fakeData.scala:54: error: [dialect scala3] ) expected but . found
                    patientJson.toList.map(patient => JSON.stringify((patient)))
                               ^
2024.01.29 15:36:18 INFO  compiling livechart (4 scala sources)
2024.01.29 15:36:19 INFO  time: compiled livechart in 1.23s
2024.01.29 15:36:40 WARN  Using indexes to guess the definition of JSON
Exception in thread "pool-22-thread-6" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.29 15:36:57 INFO  compiling livechart (4 scala sources)
2024.01.29 15:36:59 INFO  time: compiled livechart in 1.39s
2024.01.29 15:37:05 INFO  compiling livechart (4 scala sources)
2024.01.29 15:37:06 INFO  time: compiled livechart in 1.26s
Exception in thread "pool-22-thread-7" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.29 15:37:12 INFO  compiling livechart (4 scala sources)
2024.01.29 15:37:14 INFO  time: compiled livechart in 1.18s
2024.01.29 15:37:19 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:37:26 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:37:29 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:37:29 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:37:29 WARN  Using indexes to guess the definition of eventsVar
2024.01.29 15:37:29 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:37:31 INFO  compiling livechart (4 scala sources)
2024.01.29 15:37:31 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:37:31 INFO  time: compiled livechart in 0.3s
2024.01.29 15:37:35 INFO  compiling livechart (4 scala sources)
2024.01.29 15:37:35 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:37:35 WARN  there was 1 deprecation warning; re-run with -deprecation for details
2024.01.29 15:37:35 INFO  time: compiled livechart in 0.7s
2024.01.29 15:38:18 INFO  compiling livechart (1 scala source)
2024.01.29 15:38:18 INFO  time: compiled livechart in 0.44s
2024.01.29 15:39:17 INFO  compiling livechart (1 scala source)
2024.01.29 15:39:17 INFO  time: compiled livechart in 0.47s
2024.01.29 15:39:34 INFO  compiling livechart (1 scala source)
2024.01.29 15:39:34 INFO  time: compiled livechart in 0.42s
Jan. 29, 2024 3:40:07 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 6545
2024.01.29 15:41:21 INFO  compiling livechart (1 scala source)
2024.01.29 15:41:21 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:41:21 INFO  time: compiled livechart in 0.55s
2024.01.29 15:41:23 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:41:23 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:41:23 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:41:23 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:41:23 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:41:23 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:41:23 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:41:23 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:41:23 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:41:23 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:41:23 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:41:23 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:41:23 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:41:23 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:41:23 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:41:25 INFO  compiling livechart (1 scala source)
2024.01.29 15:41:25 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:41:25 INFO  time: compiled livechart in 0.47s
2024.01.29 15:41:31 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:41:31 INFO  compiling livechart (1 scala source)
2024.01.29 15:41:31 INFO  time: compiled livechart in 0.16s
2024.01.29 15:41:31 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:41:33 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:41:33 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:41:33 WARN  Using indexes to guess the definition of Patient
2024.01.29 15:41:33 INFO  compiling livechart (1 scala source)
2024.01.29 15:41:33 INFO  time: compiled livechart in 0.16s
2024.01.29 15:41:33 INFO  compiling livechart (1 scala source)
2024.01.29 15:41:33 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:41:34 INFO  time: compiled livechart in 0.48s
2024.01.29 15:41:56 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:41:56 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:42:11 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:42:11 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:42:11 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:42:11 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:42:11 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:42:11 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:42:11 INFO  compiling livechart (1 scala source)
2024.01.29 15:42:11 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:42:11 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:42:11 INFO  time: compiled livechart in 0.47s
2024.01.29 15:42:11 INFO  compiling livechart (1 scala source)
2024.01.29 15:42:11 INFO  time: compiled livechart in 0.46s
2024.01.29 15:42:24 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala:9: error: [dialect scala3] ) expected but var found
    var lastName: String = _
    ^
2024.01.29 15:42:24 INFO  compiling livechart (2 scala sources)
2024.01.29 15:42:24 INFO  time: compiled livechart in 0.52s
2024.01.29 15:42:32 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala:9: error: [dialect scala3] ) expected but var found
    var lastName: String = _
    ^
2024.01.29 15:42:32 INFO  compiling livechart (2 scala sources)
2024.01.29 15:42:32 INFO  time: compiled livechart in 0.18s
2024.01.29 15:42:40 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala:10: error: [dialect scala3] ) expected but var found
    var firstName: String = _
    ^
2024.01.29 15:42:40 INFO  compiling livechart (2 scala sources)
2024.01.29 15:42:40 INFO  time: compiled livechart in 0.18s
Jan. 29, 2024 3:42:48 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 6905
2024.01.29 15:42:55 INFO  compiling livechart (2 scala sources)
2024.01.29 15:42:55 INFO  time: compiled livechart in 0.23s
2024.01.29 15:43:01 INFO  compiling livechart (2 scala sources)
2024.01.29 15:43:01 INFO  time: compiled livechart in 0.49s
2024.01.29 15:43:01 INFO  compiling livechart (5 scala sources)
2024.01.29 15:43:03 INFO  time: compiled livechart in 1.14s
2024.01.29 15:43:54 INFO  compiling livechart (2 scala sources)
2024.01.29 15:43:54 INFO  time: compiled livechart in 0.29s
2024.01.29 15:44:19 INFO  compiling livechart (2 scala sources)
2024.01.29 15:44:19 INFO  time: compiled livechart in 0.21s
2024.01.29 15:44:24 INFO  compiling livechart (2 scala sources)
2024.01.29 15:44:24 INFO  time: compiled livechart in 0.18s
2024.01.29 15:44:27 INFO  compiling livechart (2 scala sources)
2024.01.29 15:44:27 INFO  time: compiled livechart in 0.49s
2024.01.29 15:44:27 INFO  compiling livechart (5 scala sources)
2024.01.29 15:44:28 INFO  time: compiled livechart in 1.19s
2024.01.29 15:44:28 INFO  compiling livechart (2 scala sources)
2024.01.29 15:44:29 INFO  time: compiled livechart in 0.44s
2024.01.29 15:44:29 INFO  compiling livechart (5 scala sources)
2024.01.29 15:44:31 INFO  time: compiled livechart in 1.1s
Jan. 29, 2024 3:44:43 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 7190
2024.01.29 15:44:44 INFO  compiling livechart (3 scala sources)
2024.01.29 15:44:45 INFO  time: compiled livechart in 1.02s
2024.01.29 15:44:52 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.29 15:44:52 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.29 15:44:52 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.29 15:44:52 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.29 15:44:52 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.29 15:44:53 INFO  compiling livechart (2 scala sources)
2024.01.29 15:44:53 INFO  time: compiled livechart in 0.52s
2024.01.29 15:44:53 INFO  compiling livechart (5 scala sources)
2024.01.29 15:44:55 INFO  time: compiled livechart in 1.19s
2024.01.29 15:45:03 INFO  compiling livechart (3 scala sources)
2024.01.29 15:45:03 INFO  time: compiled livechart in 0.64s
2024.01.29 15:45:03 INFO  compiling livechart (5 scala sources)
2024.01.29 15:45:04 INFO  time: compiled livechart in 0.64s
2024.01.29 15:45:16 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:45:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:45:23 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:45:24 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:45:25 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:45:25 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:45:25 INFO  compiling livechart (3 scala sources)
2024.01.29 15:45:25 INFO  time: compiled livechart in 0.57s
2024.01.29 15:45:25 INFO  compiling livechart (5 scala sources)
2024.01.29 15:45:26 INFO  time: compiled livechart in 0.64s
2024.01.29 15:45:30 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:45:30 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:45:30 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:45:30 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:45:31 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:45:31 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:45:31 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:45:31 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:45:31 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:45:31 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:45:31 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:45:31 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:45:32 INFO  compiling livechart (3 scala sources)
2024.01.29 15:45:32 INFO  time: compiled livechart in 0.51s
2024.01.29 15:45:32 INFO  compiling livechart (5 scala sources)
2024.01.29 15:45:33 INFO  time: compiled livechart in 0.61s
2024.01.29 15:45:35 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:45:35 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:45:42 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:45:42 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:45:42 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:45:42 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:45:42 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:45:42 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:45:42 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:45:42 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:45:43 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:45:43 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
Jan. 29, 2024 3:45:52 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 7390
2024.01.29 15:46:01 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:46:03 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:46:03 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:46:03 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:46:03 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:46:03 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:46:04 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:46:05 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:46:06 INFO  compiling livechart (3 scala sources)
2024.01.29 15:46:06 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 15:46:06 INFO  time: compiled livechart in 0.61s
2024.01.29 15:46:06 INFO  compiling livechart (3 scala sources)
2024.01.29 15:46:07 WARN  there was 1 deprecation warning; re-run with -deprecation for details
2024.01.29 15:46:07 INFO  time: compiled livechart in 0.71s
Jan. 29, 2024 3:50:12 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 7635
Jan. 29, 2024 3:50:13 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 7641
2024.01.29 15:50:21 INFO  compiling livechart (3 scala sources)
2024.01.29 15:50:21 WARN  there was 1 deprecation warning; re-run with -deprecation for details
2024.01.29 15:50:21 INFO  time: compiled livechart in 0.67s
2024.01.29 15:50:32 INFO  compiling livechart (1 scala source)
2024.01.29 15:50:32 INFO  time: compiled livechart in 0.39s
2024.01.29 15:50:50 INFO  compiling livechart (1 scala source)
2024.01.29 15:50:50 INFO  time: compiled livechart in 0.32s
2024.01.29 15:50:56 INFO  compiling livechart (1 scala source)
2024.01.29 15:50:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.29 15:50:56 INFO  time: compiled livechart in 0.35s
2024.01.29 15:52:54 INFO  compiling livechart (1 scala source)
2024.01.29 15:52:54 INFO  time: compiled livechart in 0.53s
Jan. 29, 2024 3:53:27 P.M. scala.meta.internal.mtags.SymbolIndexBucket addMtagsSourceFile
WARNING: Error indexing C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody copy.scala
java.nio.file.NoSuchFileException: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody copy.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:371)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:422)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:415)
	at scala.meta.internal.mtags.Mtags.index(Mtags.scala:67)
	at scala.meta.internal.mtags.Mtags.allSymbols(Mtags.scala:21)
	at scala.meta.internal.mtags.SymbolIndexBucket.allSymbols(SymbolIndexBucket.scala:242)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:253)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1(SymbolIndexBucket.scala:168)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1$adapted(SymbolIndexBucket.scala:168)
	at scala.collection.immutable.Set$Set3.foreach(Set.scala:261)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:168)
	at scala.meta.internal.mtags.SymbolIndexBucket.query(SymbolIndexBucket.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.$anonfun$findSymbolDefinition$1(OnDemandSymbolIndex.scala:141)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.findSymbolDefinition(OnDemandSymbolIndex.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.definition(OnDemandSymbolIndex.scala:48)
	at scala.meta.internal.metals.Docstrings.indexSymbol(Docstrings.scala:118)
	at scala.meta.internal.metals.Docstrings.documentation(Docstrings.scala:44)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:43)
	at scala.meta.internal.mtags.MtagsEnrichments$.symbolDocumentation(MtagsEnrichments.scala:253)
	at scala.meta.internal.pc.printer.MetalsPrinter.paramsDocs$lzyINIT1$1(MetalsPrinter.scala:184)
	at scala.meta.internal.pc.printer.MetalsPrinter.paramsDocs$1(MetalsPrinter.scala:188)
	at scala.meta.internal.pc.printer.MetalsPrinter.$anonfun$6(MetalsPrinter.scala:205)
	at scala.meta.internal.pc.printer.MetalsPrinter.paramLabel(MetalsPrinter.scala:354)
	at scala.meta.internal.pc.printer.MetalsPrinter.$anonfun$5(MetalsPrinter.scala:206)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.pc.printer.MetalsPrinter.label$1$$anonfun$1(MetalsPrinter.scala:209)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.pc.printer.MetalsPrinter.label$1(MetalsPrinter.scala:214)
	at scala.meta.internal.pc.printer.MetalsPrinter.defaultMethodSignature(MetalsPrinter.scala:217)
	at scala.meta.internal.pc.printer.MetalsPrinter.hoverSymbol(MetalsPrinter.scala:115)
	at scala.meta.internal.pc.HoverProvider$.hover(HoverProvider.scala:132)
	at scala.meta.internal.pc.ScalaPresentationCompiler.hover$$anonfun$1(ScalaPresentationCompiler.scala:342)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:146)
	at scala.meta.internal.pc.CompilerAccess.withNonInterruptableCompiler$$anonfun$1(CompilerAccess.scala:132)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:232)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)

Jan. 29, 2024 3:53:27 P.M. scala.meta.internal.mtags.SymbolIndexBucket addMtagsSourceFile
WARNING: Error indexing C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody copy.scala
java.nio.file.NoSuchFileException: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody copy.scala
	at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)
	at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)
	at java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:371)
	at java.base/java.nio.file.Files.newByteChannel(Files.java:422)
	at java.base/java.nio.file.Files.readAllBytes(Files.java:3206)
	at scala.meta.internal.io.PlatformFileIO$.slurp(PlatformFileIO.scala:45)
	at scala.meta.internal.io.FileIO$.slurp(FileIO.scala:24)
	at scala.meta.internal.mtags.ScalametaCommonEnrichments$XtensionAbsolutePath.toInput(ScalametaCommonEnrichments.scala:415)
	at scala.meta.internal.mtags.Mtags.index(Mtags.scala:67)
	at scala.meta.internal.mtags.Mtags.allSymbols(Mtags.scala:21)
	at scala.meta.internal.mtags.SymbolIndexBucket.allSymbols(SymbolIndexBucket.scala:242)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:253)
	at scala.meta.internal.mtags.SymbolIndexBucket.addMtagsSourceFile(SymbolIndexBucket.scala:264)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1(SymbolIndexBucket.scala:168)
	at scala.meta.internal.mtags.SymbolIndexBucket.$anonfun$query0$1$adapted(SymbolIndexBucket.scala:168)
	at scala.collection.immutable.Set$Set3.foreach(Set.scala:261)
	at scala.meta.internal.mtags.SymbolIndexBucket.query0(SymbolIndexBucket.scala:168)
	at scala.meta.internal.mtags.SymbolIndexBucket.query(SymbolIndexBucket.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.$anonfun$findSymbolDefinition$1(OnDemandSymbolIndex.scala:141)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.findSymbolDefinition(OnDemandSymbolIndex.scala:141)
	at scala.meta.internal.mtags.OnDemandSymbolIndex.definition(OnDemandSymbolIndex.scala:48)
	at scala.meta.internal.metals.Docstrings.indexSymbol(Docstrings.scala:118)
	at scala.meta.internal.metals.Docstrings.documentation(Docstrings.scala:44)
	at scala.meta.internal.metals.MetalsSymbolSearch.documentation(MetalsSymbolSearch.scala:43)
	at scala.meta.internal.mtags.MtagsEnrichments$.symbolDocumentation(MtagsEnrichments.scala:253)
	at scala.meta.internal.pc.printer.MetalsPrinter.paramsDocs$lzyINIT1$1(MetalsPrinter.scala:184)
	at scala.meta.internal.pc.printer.MetalsPrinter.paramsDocs$1(MetalsPrinter.scala:188)
	at scala.meta.internal.pc.printer.MetalsPrinter.$anonfun$6(MetalsPrinter.scala:205)
	at scala.meta.internal.pc.printer.MetalsPrinter.paramLabel(MetalsPrinter.scala:354)
	at scala.meta.internal.pc.printer.MetalsPrinter.$anonfun$5(MetalsPrinter.scala:206)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.pc.printer.MetalsPrinter.label$1$$anonfun$1(MetalsPrinter.scala:209)
	at scala.collection.immutable.List.flatMap(List.scala:293)
	at scala.meta.internal.pc.printer.MetalsPrinter.label$1(MetalsPrinter.scala:214)
	at scala.meta.internal.pc.printer.MetalsPrinter.defaultMethodSignature(MetalsPrinter.scala:217)
	at scala.meta.internal.pc.printer.MetalsPrinter.hoverSymbol(MetalsPrinter.scala:115)
	at scala.meta.internal.pc.HoverProvider$.hover(HoverProvider.scala:132)
	at scala.meta.internal.pc.ScalaPresentationCompiler.hover$$anonfun$1(ScalaPresentationCompiler.scala:342)
	at scala.meta.internal.pc.CompilerAccess.withSharedCompiler(CompilerAccess.scala:146)
	at scala.meta.internal.pc.CompilerAccess.withNonInterruptableCompiler$$anonfun$1(CompilerAccess.scala:132)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:232)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)

2024.01.29 15:53:29 INFO  compiling livechart (1 scala source)
2024.01.29 15:53:29 INFO  time: compiled livechart in 0.14s
2024.01.29 15:53:31 WARN  Using indexes to guess the definition of Patient
2024.01.29 15:53:37 INFO  compiling livechart (1 scala source)
2024.01.29 15:53:37 INFO  time: compiled livechart in 0.43s
2024.01.29 15:53:46 INFO  compiling livechart (1 scala source)
2024.01.29 15:53:46 INFO  time: compiled livechart in 0.31s
2024.01.29 15:58:17 INFO  compiling livechart (1 scala source)
2024.01.29 15:58:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.29 15:58:17 INFO  time: compiled livechart in 0.21s
2024.01.29 15:58:21 INFO  compiling livechart (1 scala source)
2024.01.29 15:58:22 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.29 15:58:21 INFO  time: compiled livechart in 0.32s
2024.01.29 15:58:51 INFO  compiling livechart (1 scala source)
2024.01.29 15:58:51 INFO  time: compiled livechart in 0.32s
2024.01.29 15:59:14 INFO  compiling livechart (1 scala source)
2024.01.29 15:59:14 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\utilities\fakeData.scala
2024.01.29 15:59:14 WARN  there was 1 deprecation warning; re-run with -deprecation for details
2024.01.29 15:59:14 INFO  time: compiled livechart in 0.24s
2024.01.29 15:59:21 INFO  compiling livechart (1 scala source)
2024.01.29 15:59:21 WARN  there was 1 deprecation warning; re-run with -deprecation for details
2024.01.29 15:59:21 INFO  time: compiled livechart in 0.25s
Exception in thread "pool-22-thread-8" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.29 15:59:33 INFO  compiling livechart (1 scala source)
2024.01.29 15:59:33 WARN  there was 1 deprecation warning; re-run with -deprecation for details
2024.01.29 15:59:33 INFO  time: compiled livechart in 0.25s
Jan. 29, 2024 4:01:34 P.M. scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\.reports\metals-full\2024-01-29\r_compiler-error_(livechart)_16-01-34-428.md
Exception in thread "pool-22-thread-9" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-22-thread-10" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.29 16:01:41 INFO  compiling livechart (1 scala source)
2024.01.29 16:01:41 INFO  time: compiled livechart in 0.2s
2024.01.29 16:01:42 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:01:45 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:01:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:01:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:01:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:01:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:01:48 WARN  Using indexes to guess the definition of Patient
2024.01.29 16:01:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:01:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
Exception in thread "pool-22-thread-11" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.29 16:01:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:01:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:01:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:01:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:01:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:01:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:01:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:01:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:01:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:01:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:01:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:01:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:01:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:01:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:01:50 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:01:50 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:01:50 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:01:50 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:01:50 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:01:50 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:01:51 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:01:51 INFO  compiling livechart (1 scala source)
2024.01.29 16:01:51 INFO  time: compiled livechart in 0.18s
2024.01.29 16:02:21 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:02:24 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:02:31 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:02:35 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:02:35 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:02:35 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:02:35 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:02:35 INFO  compiling livechart (1 scala source)
2024.01.29 16:02:35 INFO  time: compiled livechart in 0.2s
2024.01.29 16:02:36 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:02:36 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:02:36 WARN  Using indexes to guess the definition of Patient
2024.01.29 16:02:37 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala:63: error: [dialect scala3] ] expected but ( found
    val testDataVar = Var(List.empty[Patient()])
                                            ^
2024.01.29 16:02:37 INFO  compiling livechart (1 scala source)
2024.01.29 16:02:37 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:02:37 INFO  time: compiled livechart in 0.23s
2024.01.29 16:03:00 INFO  compiling livechart (2 scala sources)
2024.01.29 16:03:00 INFO  time: compiled livechart in 0.25s
2024.01.29 16:03:02 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:03:03 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:03:05 INFO  compiling livechart (2 scala sources)
2024.01.29 16:03:05 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:03:05 INFO  time: compiled livechart in 0.18s
2024.01.29 16:03:10 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:03:10 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:03:10 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:03:10 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
Exception in thread "pool-22-thread-12" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.29 16:03:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:03:18 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:03:19 INFO  compiling livechart (2 scala sources)
2024.01.29 16:03:19 INFO  time: compiled livechart in 0.22s
2024.01.29 16:03:23 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:03:23 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:03:23 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:03:23 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:03:23 WARN  Using indexes to guess the definition of eventsVar
2024.01.29 16:03:24 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:03:24 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:03:24 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:03:24 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:03:24 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:03:24 INFO  compiling livechart (2 scala sources)
2024.01.29 16:03:24 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:03:24 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.29 16:03:24 INFO  time: compiled livechart in 0.46s
2024.01.29 16:03:24 INFO  compiling livechart (4 scala sources)
2024.01.29 16:03:25 WARN  there was 1 deprecation warning; re-run with -deprecation for details
2024.01.29 16:03:25 INFO  time: compiled livechart in 0.71s
Jan. 29, 2024 4:03:44 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9044
2024.01.30 09:18:33 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.30 09:18:33 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.30 09:18:34 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.30 09:18:34 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.30 09:18:34 INFO  Connected to Build server: Bloop v1.5.13
2024.01.30 09:18:34 INFO  Connected to Build server: Bloop v1.5.13
2024.01.30 09:18:33 INFO  compiling livechart (1 scala source)
2024.01.30 09:18:33 INFO  time: compiled livechart in 0.34s
2024.01.30 09:18:33 INFO  compiling livechart (2 scala sources)
2024.01.30 09:18:33 INFO  time: compiled livechart in 0.2s
2024.01.30 09:18:34 INFO  time: Imported build in 0.93s
2024.01.30 09:18:34 INFO  time: Imported build in 0.93s
2024.01.30 09:18:36 INFO  time: indexed workspace in 1.18s
2024.01.30 09:18:36 INFO  time: indexed workspace in 1.2s
2024.01.30 09:18:36 INFO  compiling livechart (1 scala source)
2024.01.30 09:18:37 INFO  time: compiled livechart in 1.34s
2024.01.30 09:18:37 INFO  compiling livechart (2 scala sources)
2024.01.30 09:18:37 INFO  Deduplicating compilation of livechart from bsp client 'Metals 1.2.0' (since 2.664s)
2024.01.30 09:18:37 INFO  compiling livechart (1 scala source)
2024.01.30 09:18:37 INFO  time: compiled livechart in 1ms
2024.01.30 09:18:37 INFO  compiling livechart (2 scala sources)
2024.01.30 09:18:37 INFO  time: compiled livechart in 10ms
2024.01.30 09:18:37 INFO  compiling livechart (1 scala source)
2024.01.30 09:18:37 INFO  time: compiled livechart in 0.31s
2024.01.30 09:18:37 INFO  compiling livechart (2 scala sources)
2024.01.30 09:18:37 INFO  time: compiled livechart in 0.14s
2024.01.30 09:18:50 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 09:19:01 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\Table.scala
scala.meta.tokenizers.TokenizeException: <input>:7: error: unclosed string interpolation
case class Table(model: Model, dataUrl") extends AuroraElement {
                                       ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getStringPart(LegacyScanner.scala:659)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchDoubleQuote$1(LegacyScanner.scala:357)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:376)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.30 09:19:03 INFO  compiling livechart (1 scala source)
2024.01.30 09:19:03 INFO  time: compiled livechart in 0.3s
2024.01.30 09:19:03 INFO  compiling livechart (3 scala sources)
2024.01.30 09:19:03 INFO  time: compiled livechart in 0.3s
Exception in thread "pool-26-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-26-thread-2" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-26-thread-3" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.30 09:19:09 INFO  compiling livechart (1 scala source)
2024.01.30 09:19:09 INFO  time: compiled livechart in 0.29s
2024.01.30 09:19:09 INFO  compiling livechart (3 scala sources)
2024.01.30 09:19:09 INFO  time: compiled livechart in 0.25s
2024.01.30 09:19:14 INFO  compiling livechart (2 scala sources)
2024.01.30 09:19:14 INFO  time: compiled livechart in 0.46s
2024.01.30 09:19:14 INFO  compiling livechart (3 scala sources)
2024.01.30 09:19:15 INFO  time: compiled livechart in 0.56s
Jan. 30, 2024 9:19:19 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9585
2024.01.30 09:19:25 INFO  compiling livechart (1 scala source)
2024.01.30 09:19:25 INFO  time: compiled livechart in 0.4s
2024.01.30 09:19:25 INFO  compiling livechart (2 scala sources)
2024.01.30 09:19:25 INFO  time: compiled livechart in 0.57s
2024.01.30 09:19:54 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
scala.meta.tokenizers.TokenizeException: <input>:9: error: unclosed string interpolation
case class TableBody(model: Model, dataUrl") extends AuroraElement {
                                           ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getStringPart(LegacyScanner.scala:659)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchDoubleQuote$1(LegacyScanner.scala:357)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:376)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.30 09:19:54 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
scala.meta.tokenizers.TokenizeException: <input>:9: error: unclosed string interpolation
case class TableBody(model: Model, dataUrl" s) extends AuroraElement {
                                           ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getStringPart(LegacyScanner.scala:659)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchDoubleQuote$1(LegacyScanner.scala:357)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:376)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.30 09:19:55 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
scala.meta.tokenizers.TokenizeException: <input>:9: error: unclosed string interpolation
case class TableBody(model: Model, dataUrl" s) extends AuroraElement {
                                           ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getStringPart(LegacyScanner.scala:659)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchDoubleQuote$1(LegacyScanner.scala:357)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:376)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.30 09:20:06 INFO  compiling livechart (2 scala sources)
2024.01.30 09:20:06 INFO  time: compiled livechart in 0.6s
Exception in thread "pool-26-thread-4" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.30 09:20:17 INFO  compiling livechart (2 scala sources)
2024.01.30 09:20:17 INFO  time: compiled livechart in 0.58s
2024.01.30 09:20:24 INFO  compiling livechart (2 scala sources)
2024.01.30 09:20:24 INFO  time: compiled livechart in 0.46s
2024.01.30 09:20:24 INFO  compiling livechart (3 scala sources)
2024.01.30 09:20:24 INFO  time: compiled livechart in 0.26s
2024.01.30 09:20:31 INFO  compiling livechart (2 scala sources)
2024.01.30 09:20:31 INFO  time: compiled livechart in 0.37s
2024.01.30 09:20:31 INFO  compiling livechart (3 scala sources)
2024.01.30 09:20:31 INFO  time: compiled livechart in 0.23s
2024.01.30 09:20:32 INFO  compiling livechart (3 scala sources)
2024.01.30 09:20:32 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\Table.scala
2024.01.30 09:20:32 INFO  time: compiled livechart in 0.47s
Jan. 30, 2024 9:20:42 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9900
Jan. 30, 2024 9:20:46 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 9921
2024.01.30 09:21:08 INFO  compiling livechart (1 scala source)
2024.01.30 09:21:08 INFO  time: compiled livechart in 0.35s
2024.01.30 09:21:13 INFO  compiling livechart (1 scala source)
2024.01.30 09:21:13 INFO  time: compiled livechart in 0.36s
2024.01.30 09:21:15 INFO  compiling livechart (1 scala source)
2024.01.30 09:21:15 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 09:21:15 INFO  time: compiled livechart in 0.35s
2024.01.30 09:21:18 INFO  compiling livechart (1 scala source)
2024.01.30 09:21:18 INFO  time: compiled livechart in 0.19s
2024.01.30 09:21:21 INFO  compiling livechart (1 scala source)
2024.01.30 09:21:21 INFO  time: compiled livechart in 0.36s
2024.01.30 09:21:34 INFO  compiling livechart (1 scala source)
2024.01.30 09:21:34 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 09:21:34 INFO  time: compiled livechart in 0.38s
2024.01.30 09:21:45 INFO  compiling livechart (1 scala source)
2024.01.30 09:21:45 INFO  time: compiled livechart in 0.17s
2024.01.30 09:21:53 INFO  compiling livechart (1 scala source)
2024.01.30 09:21:53 INFO  time: compiled livechart in 0.16s
2024.01.30 09:22:19 INFO  compiling livechart (1 scala source)
2024.01.30 09:22:19 INFO  time: compiled livechart in 0.33s
2024.01.30 09:25:35 INFO  compiling livechart (1 scala source)
2024.01.30 09:25:35 INFO  time: compiled livechart in 0.17s
2024.01.30 09:25:38 INFO  compiling livechart (1 scala source)
Jan. 30, 2024 9:25:38 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10229
2024.01.30 09:25:38 INFO  time: compiled livechart in 0.18s
2024.01.30 09:25:38 INFO  compiling livechart (1 scala source)
2024.01.30 09:25:38 INFO  time: compiled livechart in 0.16s
2024.01.30 09:25:42 INFO  compiling livechart (1 scala source)
2024.01.30 09:25:42 INFO  time: compiled livechart in 0.16s
Jan. 30, 2024 9:25:42 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10264
2024.01.30 09:25:43 INFO  compiling livechart (1 scala source)
2024.01.30 09:25:43 INFO  time: compiled livechart in 0.36s
Jan. 30, 2024 9:25:49 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10288
Exception in thread "pool-26-thread-5" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.30 09:26:11 INFO  compiling livechart (1 scala source)
2024.01.30 09:26:11 INFO  time: compiled livechart in 0.34s
2024.01.30 09:26:30 INFO  compiling livechart (1 scala source)
2024.01.30 09:26:30 INFO  time: compiled livechart in 0.34s
2024.01.30 10:08:02 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.30 10:08:02 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.30 10:08:03 INFO  Connected to Build server: Bloop v1.5.13
2024.01.30 10:08:03 INFO  compiling livechart (1 scala source)
2024.01.30 10:08:03 INFO  time: compiled livechart in 0.55s
2024.01.30 10:08:03 INFO  time: Imported build in 0.65s
2024.01.30 10:08:05 INFO  time: indexed workspace in 1.57s
2024.01.30 10:08:08 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala:51: error: [dialect scala3] ) expected but string constant found
          idAttr := "myTableBody",
                    ^
2024.01.30 10:08:08 INFO  compiling livechart (1 scala source)
2024.01.30 10:08:08 INFO  time: compiled livechart in 0.17s
2024.01.30 10:08:10 INFO  compiling livechart (1 scala source)
2024.01.30 10:08:10 INFO  time: compiled livechart in 0.17s
2024.01.30 10:08:13 INFO  compiling livechart (1 scala source)
2024.01.30 10:08:13 INFO  time: compiled livechart in 0.15s
2024.01.30 10:08:15 INFO  compiling livechart (1 scala source)
2024.01.30 10:08:15 INFO  time: compiled livechart in 0.19s
2024.01.30 10:08:26 INFO  compiling livechart (1 scala source)
2024.01.30 10:08:26 INFO  time: compiled livechart in 0.16s
2024.01.30 10:08:30 INFO  compiling livechart (1 scala source)
2024.01.30 10:08:30 INFO  time: compiled livechart in 0.42s
2024.01.30 10:09:00 INFO  compiling livechart (1 scala source)
2024.01.30 10:09:01 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:09:00 INFO  time: compiled livechart in 0.36s
2024.01.30 10:09:06 INFO  compiling livechart (1 scala source)
2024.01.30 10:09:06 INFO  time: compiled livechart in 0.36s
Jan. 30, 2024 10:09:14 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10685
Exception in thread "pool-30-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-30-thread-2" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-30-thread-3" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.30 10:09:56 INFO  compiling livechart (1 scala source)
2024.01.30 10:09:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:09:56 INFO  time: compiled livechart in 0.43s
Jan. 30, 2024 10:10:58 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 10879
2024.01.30 10:10:58 INFO  compiling livechart (1 scala source)
2024.01.30 10:10:58 INFO  time: compiled livechart in 0.34s
2024.01.30 10:11:00 INFO  compiling livechart (1 scala source)
2024.01.30 10:11:00 INFO  time: compiled livechart in 0.35s
2024.01.30 10:11:08 INFO  compiling livechart (1 scala source)
2024.01.30 10:11:08 INFO  time: compiled livechart in 0.36s
2024.01.30 10:11:43 INFO  compiling livechart (1 scala source)
2024.01.30 10:11:43 WARN  there was 1 deprecation warning; re-run with -deprecation for details
2024.01.30 10:11:43 INFO  time: compiled livechart in 0.25s
2024.01.30 10:11:56 WARN  Using indexes to guess the definition of handleCellClick
2024.01.30 10:11:56 INFO  compiling livechart (1 scala source)
2024.01.30 10:11:56 INFO  time: compiled livechart in 0.56s
Jan. 30, 2024 10:12:24 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 11134
2024.01.30 10:12:26 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala:44: error: [dialect scala3] identifier expected but ) found
        )
        ^
2024.01.30 10:12:26 INFO  compiling livechart (1 scala source)
2024.01.30 10:12:26 INFO  time: compiled livechart in 0.17s
Jan. 30, 2024 10:15:09 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 11193
2024.01.30 10:15:13 INFO  compiling livechart (1 scala source)
2024.01.30 10:15:13 INFO  time: compiled livechart in 0.34s
2024.01.30 10:15:19 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala:23: error: [dialect scala3] ) expected but string constant found
          "Hello"
          ^
2024.01.30 10:15:19 INFO  compiling livechart (1 scala source)
2024.01.30 10:15:19 INFO  time: compiled livechart in 0.16s
2024.01.30 10:15:24 INFO  compiling livechart (1 scala source)
2024.01.30 10:15:24 INFO  time: compiled livechart in 0.38s
2024.01.30 10:16:59 WARN  Could not find semantic tokens for: file:///C:/Users/yashb/Documents/vscode-laminar-vite-extension/webview-ui/src/main/scala/utilities/JsonImplicits.scala
2024.01.30 10:16:59 WARN  Could not find semantic tokens for: file:///C:/Users/yashb/Documents/vscode-laminar-vite-extension/webview-ui/src/main/scala/utilities/JsonImplicits.scala
2024.01.30 10:17:36 INFO  compiling livechart (1 scala source)
2024.01.30 10:17:36 INFO  time: compiled livechart in 0.21s
2024.01.30 10:17:36 INFO  compiling livechart (4 scala sources)
2024.01.30 10:17:36 WARN  there was 1 deprecation warning; re-run with -deprecation for details
2024.01.30 10:17:36 INFO  time: compiled livechart in 0.7s
2024.01.30 10:17:49 INFO  compiling livechart (5 scala sources)
2024.01.30 10:17:49 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala
2024.01.30 10:17:49 INFO  time: compiled livechart in 0.32s
Jan. 30, 2024 10:18:01 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 11526
2024.01.30 10:18:32 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala
2024.01.30 10:18:34 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala
2024.01.30 10:18:35 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala
2024.01.30 10:18:35 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala
2024.01.30 10:18:36 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala
2024.01.30 10:18:36 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala
2024.01.30 10:18:37 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala
2024.01.30 10:18:37 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala:7: error: [dialect scala3] case classes must have a parameter list; try 'case class Patient()' or 'case object Patient'
case class Patient extends js.Object {
                   ^
2024.01.30 10:18:38 INFO  compiling livechart (5 scala sources)
2024.01.30 10:18:38 INFO  time: compiled livechart in 0.38s
2024.01.30 10:18:40 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala
2024.01.30 10:18:40 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala
2024.01.30 10:18:40 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala
2024.01.30 10:18:40 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala
2024.01.30 10:18:40 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala
2024.01.30 10:18:40 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala
2024.01.30 10:18:40 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala
2024.01.30 10:18:41 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala
2024.01.30 10:18:42 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala
2024.01.30 10:18:42 INFO  compiling livechart (5 scala sources)
2024.01.30 10:18:42 WARN  there was 1 deprecation warning; re-run with -deprecation for details
2024.01.30 10:18:42 INFO  time: compiled livechart in 0.61s
2024.01.30 10:19:18 INFO  compiling livechart (1 scala source)
2024.01.30 10:19:18 INFO  time: compiled livechart in 0.48s
2024.01.30 10:19:22 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 10:19:22 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 10:19:31 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 10:19:31 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 10:20:09 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 10:20:12 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 10:20:12 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 10:20:48 WARN  no build target for: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt
2024.01.30 10:20:49 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt:34: error: [dialect scala3] ) expected but string constant found
      libraryDependencies += "org.scala-lang" % "scala-reflect" % "2.13.12"
                             ^
2024.01.30 10:20:49 WARN  no build target for: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt
2024.01.30 10:20:51 WARN  no build target for: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt
2024.01.30 10:20:53 INFO  running 'C:\Program Files\Java\jdk-11\bin\java.exe -Djline.terminal=jline.UnsupportedTerminal -Dsbt.log.noformat=true -Dfile.encoding=UTF-8 -jar C:\Users\yashb\AppData\Local\Temp\metals2992591629847380374\sbt-launch.jar -Dbloop.export-jar-classifiers=sources bloopInstall'
2024.01.30 10:20:54 INFO  [info] welcome to sbt 1.8.2 (Oracle Corporation Java 11.0.18)
2024.01.30 10:20:54 INFO  [info] loading settings for project webview-ui-build-build-build from metals.sbt ...
2024.01.30 10:20:55 INFO  [info] loading project definition from C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\project\project\project
2024.01.30 10:20:55 INFO  [info] loading settings for project webview-ui-build-build from metals.sbt ...
2024.01.30 10:20:55 INFO  [info] loading project definition from C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\project\project
2024.01.30 10:20:58 INFO  [success] Generated .bloop\webview-ui-build-build.json
2024.01.30 10:20:58 INFO  [success] Total time: 2 s, completed Jan. 30, 2024, 10:20:58 a.m.
2024.01.30 10:20:58 INFO  [info] loading settings for project webview-ui-build from metals.sbt,plugins.sbt ...
2024.01.30 10:20:58 INFO  [info] loading project definition from C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\project
2024.01.30 10:20:59 INFO  [success] Generated .bloop\webview-ui-build.json
2024.01.30 10:20:59 INFO  [success] Total time: 1 s, completed Jan. 30, 2024, 10:20:59 a.m.
2024.01.30 10:21:01 INFO  [info] loading settings for project livechart from build.sbt ...
2024.01.30 10:21:01 INFO  [info] set current project to livechart (in build file:/C:/Users/yashb/Documents/vscode-laminar-vite-extension/webview-ui/)
2024.01.30 10:21:03 INFO  [success] Generated .bloop\livechart-test.json
2024.01.30 10:21:03 INFO  [success] Generated .bloop\livechart.json
2024.01.30 10:21:03 INFO  [success] Total time: 1 s, completed Jan. 30, 2024, 10:21:03 a.m.
2024.01.30 10:21:03 INFO  time: ran 'sbt bloopInstall' in 10s
2024.01.30 10:21:03 INFO  Disconnecting from Bloop session...
2024.01.30 10:21:03 INFO  Shut down connection with build server.
2024.01.30 10:21:03 INFO  Scala test classes not supported by server
2024.01.30 10:21:03 INFO  Cancelling compilation on Bloop server
2024.01.30 10:21:03 INFO  Cancelling compilation on Bloop server
2024.01.30 10:21:03 INFO  Attempting to connect to the build server...
2024.01.30 10:21:03 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.30 10:21:03 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.30 10:21:03 INFO  time: Connected to build server in 60ms
2024.01.30 10:21:03 INFO  Connected to Build server: Bloop v1.5.13
2024.01.30 10:21:04 INFO  time: indexed workspace in 1.15s
2024.01.30 10:21:04 WARN  no build target for: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt
2024.01.30 10:21:05 INFO  compiling livechart (20 scala sources)
2024.01.30 10:21:05 INFO  no build target found for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt. Using presentation compiler with project's scala-library version: 3.3.1
2024.01.30 10:21:05 INFO  time: code lens generation in 1.29s
2024.01.30 10:21:06 INFO  Generated JavaScript file 'C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\.bloop\livechart\livechart-test.js'
2024.01.30 10:21:06 WARN  there was 1 deprecation warning; re-run with -deprecation for details
2024.01.30 10:21:06 INFO  time: compiled livechart in 1.62s
2024.01.30 10:21:06 INFO  skipping build import with status 'Installed'
2024.01.30 10:22:13 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java

Uri: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:703)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	jdk.internal.reflect.GeneratedMethodAccessor31.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 30, 2024 10:22:13 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.base/java/lang/Class.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 1994, 2019, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.lang;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.module.ModuleReader;\nimport java.lang.ref.SoftReference;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.ObjectStreamField;\nimport java.lang.reflect.AnnotatedElement;\nimport java.lang.reflect.AnnotatedType;\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Executable;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.GenericArrayType;\nimport java.lang.reflect.GenericDeclaration;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Member;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.Proxy;\nimport java.lang.reflect.Type;\nimport java.lang.reflect.TypeVariable;\nimport java.net.URL;\nimport java.security.AccessController;\nimport java.security.PrivilegedAction;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.StringJoiner;\n\nimport jdk.internal.HotSpotIntrinsicCandidate;\nimport jdk.internal.loader.BootLoader;\nimport jdk.internal.loader.BuiltinClassLoader;\nimport jdk.internal.misc.Unsafe;\nimport jdk.internal.misc.VM;\nimport jdk.internal.module.Resources;\nimport jdk.internal.reflect.CallerSensitive;\nimport jdk.internal.reflect.ConstantPool;\nimport jdk.internal.reflect.Reflection;\nimport jdk.internal.reflect.ReflectionFactory;\nimport jdk.internal.vm.annotation.ForceInline;\nimport sun.reflect.generics.factory.CoreReflectionFactory;\nimport sun.reflect.generics.factory.GenericsFactory;\nimport sun.reflect.generics.repository.ClassRepository;\nimport sun.reflect.generics.repository.MethodRepository;\nimport sun.reflect.generics.repository.ConstructorRepository;\nimport sun.reflect.generics.scope.ClassScope;\nimport sun.security.util.SecurityConstants;\nimport sun.reflect.annotation.*;\nimport sun.reflect.misc.ReflectUtil;\n\n/**\n * Instances of the class {@code Class} represent classes and interfaces\n * in a running Java application. An enum type is a kind of class and an\n * annotation type is a kind of interface. Every array also\n * belongs to a class that is reflected as a {@code Class} object\n * that is shared by all arrays with the same element type and number\n * of dimensions.  The primitive Java types ({@code boolean},\n * {@code byte}, {@code char}, {@code short},\n * {@code int}, {@code long}, {@code float}, and\n * {@code double}), and the keyword {@code void} are also\n * represented as {@code Class} objects.\n *\n * \u003cp\u003e {@code Class} has no public constructor. Instead a {@code Class}\n * object is constructed automatically by the Java Virtual Machine\n * when a class loader invokes one of the\n * {@link ClassLoader#defineClass(String,byte[], int,int) defineClass} methods\n * and passes the bytes of a {@code class} file.\n *\n * \u003cp\u003e The methods of class {@code Class} expose many characteristics of a\n * class or interface. Most characteristics are derived from the {@code class}\n * file that the class loader passed to the Java Virtual Machine. A few\n * characteristics are determined by the class loading environment at run time,\n * such as the module returned by {@link #getModule() getModule()}.\n *\n * \u003cp\u003e Some methods of class {@code Class} expose whether the declaration of\n * a class or interface in Java source code was \u003cem\u003eenclosed\u003c/em\u003e within\n * another declaration. Other methods describe how a class or interface\n * is situated in a \u003cem\u003enest\u003c/em\u003e. A \u003ca id\u003d\"nest\"\u003enest\u003c/a\u003e is a set of\n * classes and interfaces, in the same run-time package, that\n * allow mutual access to their {@code private} members.\n * The classes and interfaces are known as \u003cem\u003enestmates\u003c/em\u003e.\n * One nestmate acts as the\n * \u003cem\u003enest host\u003c/em\u003e, and enumerates the other nestmates which\n * belong to the nest; each of them in turn records it as the nest host.\n * The classes and interfaces which belong to a nest, including its host, are\n * determined when\n * {@code class} files are generated, for example, a Java compiler\n * will typically record a top-level class as the host of a nest where the\n * other members are the classes and interfaces whose declarations are\n * enclosed within the top-level class declaration.\n *\n * \u003cp\u003e The following example uses a {@code Class} object to print the\n * class name of an object:\n *\n * \u003cblockquote\u003e\u003cpre\u003e\n *     void printClassName(Object obj) {\n *         System.out.println(\"The class of \" + obj +\n *                            \" is \" + obj.getClass().getName());\n *     }\n * \u003c/pre\u003e\u003c/blockquote\u003e\n *\n * \u003cp\u003e It is also possible to get the {@code Class} object for a named\n * type (or for void) using a class literal.  See Section 15.8.2 of\n * \u003ccite\u003eThe Java\u0026trade; Language Specification\u003c/cite\u003e.\n * For example:\n *\n * \u003cblockquote\u003e\n *     {@code System.out.println(\"The name of class Foo is: \"+Foo.class.getName());}\n * \u003c/blockquote\u003e\n *\n * @param \u003cT\u003e the type of the class modeled by this {@code Class}\n * object.  For example, the type of {@code String.class} is {@code\n * Class\u003cString\u003e}.  Use {@code Class\u003c?\u003e} if the class being modeled is\n * unknown.\n *\n * @author  unascribed\n * @see     java.lang.ClassLoader#defineClass(byte[], int, int)\n * @since   1.0\n */\npublic final class Class\u003cT\u003e implements java.io.Serializable,\n                              GenericDeclaration,\n                              Type,\n                              AnnotatedElement {\n    private static final int ANNOTATION\u003d 0x00002000;\n    private static final int ENUM      \u003d 0x00004000;\n    private static final int SYNTHETIC \u003d 0x00001000;\n\n    private static native void registerNatives();\n    static {\n        registerNatives();\n    }\n\n    /*\n     * Private constructor. Only the Java Virtual Machine creates Class objects.\n     * This constructor is not used and prevents the default constructor being\n     * generated.\n     */\n    private Class(ClassLoader loader, Class\u003c?\u003e arrayComponentType) {\n        // Initialize final field for classLoader.  The initialization value of non-null\n        // prevents future JIT optimizations from assuming this final field is null.\n        classLoader \u003d loader;\n        componentType \u003d arrayComponentType;\n    }\n\n    /**\n     * Converts the object to a string. The string representation is the\n     * string \"class\" or \"interface\", followed by a space, and then by the\n     * fully qualified name of the class in the format returned by\n     * {@code getName}.  If this {@code Class} object represents a\n     * primitive type, this method returns the name of the primitive type.  If\n     * this {@code Class} object represents void this method returns\n     * \"void\". If this {@code Class} object represents an array type,\n     * this method returns \"class \" followed by {@code getName}.\n     *\n     * @return a string representation of this class object.\n     */\n    public String toString() {\n        return (isInterface() ? \"interface \" : (isPrimitive() ? \"\" : \"class \"))\n            + getName();\n    }\n\n    /**\n     * Returns a string describing this {@code Class}, including\n     * information about modifiers and type parameters.\n     *\n     * The string is formatted as a list of type modifiers, if any,\n     * followed by the kind of type (empty string for primitive types\n     * and {@code class}, {@code enum}, {@code interface}, or\n     * \u003ccode\u003e\u0026#64;\u003c/code\u003e{@code interface}, as appropriate), followed\n     * by the type\u0027s name, followed by an angle-bracketed\n     * comma-separated list of the type\u0027s type parameters, if any.\n     *\n     * A space is used to separate modifiers from one another and to\n     * separate any modifiers from the kind of type. The modifiers\n     * occur in canonical order. If there are no type parameters, the\n     * type parameter list is elided.\n     *\n     * For an array type, the string starts with the type name,\n     * followed by an angle-bracketed comma-separated list of the\n     * type\u0027s type parameters, if any, followed by a sequence of\n     * {@code []} characters, one set of brackets per dimension of\n     * the array.\n     *\n     * \u003cp\u003eNote that since information about the runtime representation\n     * of a type is being generated, modifiers not present on the\n     * originating source code or illegal on the originating source\n     * code may be present.\n     *\n     * @return a string describing this {@code Class}, including\n     * information about modifiers and type parameters\n     *\n     * @since 1.8\n     */\n    public String toGenericString() {\n        if (isPrimitive()) {\n            return toString();\n        } else {\n            StringBuilder sb \u003d new StringBuilder();\n            Class\u003c?\u003e component \u003d this;\n            int arrayDepth \u003d 0;\n\n            if (isArray()) {\n                do {\n                    arrayDepth++;\n                    component \u003d component.getComponentType();\n                } while (component.isArray());\n                sb.append(component.getName());\n            } else {\n                // Class modifiers are a superset of interface modifiers\n                int modifiers \u003d getModifiers() \u0026 Modifier.classModifiers();\n                if (modifiers !\u003d 0) {\n                    sb.append(Modifier.toString(modifiers));\n                    sb.append(\u0027 \u0027);\n                }\n\n                if (isAnnotation()) {\n                    sb.append(\u0027@\u0027);\n                }\n                if (isInterface()) { // Note: all annotation types are interfaces\n                    sb.append(\"interface\");\n                } else {\n                    if (isEnum())\n                        sb.append(\"enum\");\n                    else\n                        sb.append(\"class\");\n                }\n                sb.append(\u0027 \u0027);\n                sb.append(getName());\n            }\n\n            TypeVariable\u003c?\u003e[] typeparms \u003d component.getTypeParameters();\n            if (typeparms.length \u003e 0) {\n                StringJoiner sj \u003d new StringJoiner(\",\", \"\u003c\", \"\u003e\");\n                for(TypeVariable\u003c?\u003e typeparm: typeparms) {\n                    sj.add(typeparm.getTypeName());\n                }\n                sb.append(sj.toString());\n            }\n\n            for (int i \u003d 0; i \u003c arrayDepth; i++)\n                sb.append(\"[]\");\n\n            return sb.toString();\n        }\n    }\n\n    /**\n     * Returns the {@code Class} object associated with the class or\n     * interface with the given string name.  Invoking this method is\n     * equivalent to:\n     *\n     * \u003cblockquote\u003e\n     *  {@code Class.forName(className, true, currentLoader)}\n     * \u003c/blockquote\u003e\n     *\n     * where {@code currentLoader} denotes the defining class loader of\n     * the current class.\n     *\n     * \u003cp\u003e For example, the following code fragment returns the\n     * runtime {@code Class} descriptor for the class named\n     * {@code java.lang.Thread}:\n     *\n     * \u003cblockquote\u003e\n     *   {@code Class t \u003d Class.forName(\"java.lang.Thread\")}\n     * \u003c/blockquote\u003e\n     * \u003cp\u003e\n     * A call to {@code forName(\"X\")} causes the class named\n     * {@code X} to be initialized.\n     *\n     * @param      className   the fully qualified name of the desired class.\n     * @return     the {@code Class} object for the class with the\n     *             specified name.\n     * @exception LinkageError if the linkage fails\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *            by this method fails\n     * @exception ClassNotFoundException if the class cannot be located\n     */\n    @CallerSensitive\n    public static Class\u003c?\u003e forName(String className)\n                throws ClassNotFoundException {\n        Class\u003c?\u003e caller \u003d Reflection.getCallerClass();\n        return forName0(className, true, ClassLoader.getClassLoader(caller), caller);\n    }\n\n\n    /**\n     * Returns the {@code Class} object associated with the class or\n     * interface with the given string name, using the given class loader.\n     * Given the fully qualified name for a class or interface (in the same\n     * format returned by {@code getName}) this method attempts to\n     * locate, load, and link the class or interface.  The specified class\n     * loader is used to load the class or interface.  If the parameter\n     * {@code loader} is null, the class is loaded through the bootstrap\n     * class loader.  The class is initialized only if the\n     * {@code initialize} parameter is {@code true} and if it has\n     * not been initialized earlier.\n     *\n     * \u003cp\u003e If {@code name} denotes a primitive type or void, an attempt\n     * will be made to locate a user-defined class in the unnamed package whose\n     * name is {@code name}. Therefore, this method cannot be used to\n     * obtain any of the {@code Class} objects representing primitive\n     * types or void.\n     *\n     * \u003cp\u003e If {@code name} denotes an array class, the component type of\n     * the array class is loaded but not initialized.\n     *\n     * \u003cp\u003e For example, in an instance method the expression:\n     *\n     * \u003cblockquote\u003e\n     *  {@code Class.forName(\"Foo\")}\n     * \u003c/blockquote\u003e\n     *\n     * is equivalent to:\n     *\n     * \u003cblockquote\u003e\n     *  {@code Class.forName(\"Foo\", true, this.getClass().getClassLoader())}\n     * \u003c/blockquote\u003e\n     *\n     * Note that this method throws errors related to loading, linking or\n     * initializing as specified in Sections 12.2, 12.3 and 12.4 of \u003cem\u003eThe\n     * Java Language Specification\u003c/em\u003e.\n     * Note that this method does not check whether the requested class\n     * is accessible to its caller.\n     *\n     * @param name       fully qualified name of the desired class\n     * @param initialize if {@code true} the class will be initialized.\n     *                   See Section 12.4 of \u003cem\u003eThe Java Language Specification\u003c/em\u003e.\n     * @param loader     class loader from which the class must be loaded\n     * @return           class object representing the desired class\n     *\n     * @exception LinkageError if the linkage fails\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *            by this method fails\n     * @exception ClassNotFoundException if the class cannot be located by\n     *            the specified class loader\n     * @exception SecurityException\n     *            if a security manager is present, and the {@code loader} is\n     *            {@code null}, and the caller\u0027s class loader is not\n     *            {@code null}, and the caller does not have the\n     *            {@link RuntimePermission}{@code (\"getClassLoader\")}\n     *\n     * @see       java.lang.Class#forName(String)\n     * @see       java.lang.ClassLoader\n     * @since     1.2\n     */\n    @CallerSensitive\n    public static Class\u003c?\u003e forName(String name, boolean initialize,\n                                   ClassLoader loader)\n        throws ClassNotFoundException\n    {\n        Class\u003c?\u003e caller \u003d null;\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            // Reflective call to get caller class is only needed if a security manager\n            // is present.  Avoid the overhead of making this call otherwise.\n            caller \u003d Reflection.getCallerClass();\n            if (loader \u003d\u003d null) {\n                ClassLoader ccl \u003d ClassLoader.getClassLoader(caller);\n                if (ccl !\u003d null) {\n                    sm.checkPermission(\n                        SecurityConstants.GET_CLASSLOADER_PERMISSION);\n                }\n            }\n        }\n        return forName0(name, initialize, loader, caller);\n    }\n\n    /** Called after security check for system loader access checks have been made. */\n    private static native Class\u003c?\u003e forName0(String name, boolean initialize,\n                                            ClassLoader loader,\n                                            Class\u003c?\u003e caller)\n        throws ClassNotFoundException;\n\n\n    /**\n     * Returns the {@code Class} with the given \u003ca href\u003d\"ClassLoader.html#name\"\u003e\n     * binary name\u003c/a\u003e in the given module.\n     *\n     * \u003cp\u003e This method attempts to locate, load, and link the class or interface.\n     * It does not run the class initializer.  If the class is not found, this\n     * method returns {@code null}. \u003c/p\u003e\n     *\n     * \u003cp\u003e If the class loader of the given module defines other modules and\n     * the given name is a class defined in a different module, this method\n     * returns {@code null} after the class is loaded. \u003c/p\u003e\n     *\n     * \u003cp\u003e This method does not check whether the requested class is\n     * accessible to its caller. \u003c/p\u003e\n     *\n     * @apiNote\n     * This method returns {@code null} on failure rather than\n     * throwing a {@link ClassNotFoundException}, as is done by\n     * the {@link #forName(String, boolean, ClassLoader)} method.\n     * The security check is a stack-based permission check if the caller\n     * loads a class in another module.\n     *\n     * @param  module   A module\n     * @param  name     The \u003ca href\u003d\"ClassLoader.html#name\"\u003ebinary name\u003c/a\u003e\n     *                  of the class\n     * @return {@code Class} object of the given name defined in the given module;\n     *         {@code null} if not found.\n     *\n     * @throws NullPointerException if the given module or name is {@code null}\n     *\n     * @throws LinkageError if the linkage fails\n     *\n     * @throws SecurityException\n     *         \u003cul\u003e\n     *         \u003cli\u003e if the caller is not the specified module and\n     *         {@code RuntimePermission(\"getClassLoader\")} permission is denied; or\u003c/li\u003e\n     *         \u003cli\u003e access to the module content is denied. For example,\n     *         permission check will be performed when a class loader calls\n     *         {@link ModuleReader#open(String)} to read the bytes of a class file\n     *         in a module.\u003c/li\u003e\n     *         \u003c/ul\u003e\n     *\n     * @since 9\n     * @spec JPMS\n     */\n    @CallerSensitive\n    public static Class\u003c?\u003e forName(Module module, String name) {\n        Objects.requireNonNull(module);\n        Objects.requireNonNull(name);\n\n        ClassLoader cl;\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            Class\u003c?\u003e caller \u003d Reflection.getCallerClass();\n            if (caller !\u003d null \u0026\u0026 caller.getModule() !\u003d module) {\n                // if caller is null, Class.forName is the last java frame on the stack.\n                // java.base has all permissions\n                sm.checkPermission(SecurityConstants.GET_CLASSLOADER_PERMISSION);\n            }\n            PrivilegedAction\u003cClassLoader\u003e pa \u003d module::getClassLoader;\n            cl \u003d AccessController.doPrivileged(pa);\n        } else {\n            cl \u003d module.getClassLoader();\n        }\n\n        if (cl !\u003d null) {\n            return cl.loadClass(module, name);\n        } else {\n            return BootLoader.loadClass(module, name);\n        }\n    }\n\n    /**\n     * Creates a new instance of the class represented by this {@code Class}\n     * object.  The class is instantiated as if by a {@code new}\n     * expression with an empty argument list.  The class is initialized if it\n     * has not already been initialized.\n     *\n     * @deprecated This method propagates any exception thrown by the\n     * nullary constructor, including a checked exception.  Use of\n     * this method effectively bypasses the compile-time exception\n     * checking that would otherwise be performed by the compiler.\n     * The {@link\n     * java.lang.reflect.Constructor#newInstance(java.lang.Object...)\n     * Constructor.newInstance} method avoids this problem by wrapping\n     * any exception thrown by the constructor in a (checked) {@link\n     * java.lang.reflect.InvocationTargetException}.\n     *\n     * \u003cp\u003eThe call\n     *\n     * \u003cpre\u003e{@code\n     * clazz.newInstance()\n     * }\u003c/pre\u003e\n     *\n     * can be replaced by\n     *\n     * \u003cpre\u003e{@code\n     * clazz.getDeclaredConstructor().newInstance()\n     * }\u003c/pre\u003e\n     *\n     * The latter sequence of calls is inferred to be able to throw\n     * the additional exception types {@link\n     * InvocationTargetException} and {@link\n     * NoSuchMethodException}. Both of these exception types are\n     * subclasses of {@link ReflectiveOperationException}.\n     *\n     * @return  a newly allocated instance of the class represented by this\n     *          object.\n     * @throws  IllegalAccessException  if the class or its nullary\n     *          constructor is not accessible.\n     * @throws  InstantiationException\n     *          if this {@code Class} represents an abstract class,\n     *          an interface, an array class, a primitive type, or void;\n     *          or if the class has no nullary constructor;\n     *          or if the instantiation fails for some other reason.\n     * @throws  ExceptionInInitializerError if the initialization\n     *          provoked by this method fails.\n     * @throws  SecurityException\n     *          If a security manager, \u003ci\u003es\u003c/i\u003e, is present and\n     *          the caller\u0027s class loader is not the same as or an\n     *          ancestor of the class loader for the current class and\n     *          invocation of {@link SecurityManager#checkPackageAccess\n     *          s.checkPackageAccess()} denies access to the package\n     *          of this class.\n     */\n    @CallerSensitive\n    @Deprecated(since\u003d\"9\")\n    public T newInstance()\n        throws InstantiationException, IllegalAccessException\n    {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.PUBLIC, Reflection.getCallerClass(), false);\n        }\n\n        // NOTE: the following code may not be strictly correct under\n        // the current Java memory model.\n\n        // Constructor lookup\n        if (cachedConstructor \u003d\u003d null) {\n            if (this \u003d\u003d Class.class) {\n                throw new IllegalAccessException(\n                    \"Can not call newInstance() on the Class for java.lang.Class\"\n                );\n            }\n            try {\n                Class\u003c?\u003e[] empty \u003d {};\n                final Constructor\u003cT\u003e c \u003d getReflectionFactory().copyConstructor(\n                    getConstructor0(empty, Member.DECLARED));\n                // Disable accessibility checks on the constructor\n                // since we have to do the security check here anyway\n                // (the stack depth is wrong for the Constructor\u0027s\n                // security check to work)\n                java.security.AccessController.doPrivileged(\n                    new java.security.PrivilegedAction\u003c\u003e() {\n                        public Void run() {\n                                c.setAccessible(true);\n                                return null;\n                            }\n                        });\n                cachedConstructor \u003d c;\n            } catch (NoSuchMethodException e) {\n                throw (InstantiationException)\n                    new InstantiationException(getName()).initCause(e);\n            }\n        }\n        Constructor\u003cT\u003e tmpConstructor \u003d cachedConstructor;\n        // Security check (same as in java.lang.reflect.Constructor)\n        Class\u003c?\u003e caller \u003d Reflection.getCallerClass();\n        if (newInstanceCallerCache !\u003d caller) {\n            int modifiers \u003d tmpConstructor.getModifiers();\n            Reflection.ensureMemberAccess(caller, this, this, modifiers);\n            newInstanceCallerCache \u003d caller;\n        }\n        // Run constructor\n        try {\n            return tmpConstructor.newInstance((Object[])null);\n        } catch (InvocationTargetException e) {\n            Unsafe.getUnsafe().throwException(e.getTargetException());\n            // Not reached\n            return null;\n        }\n    }\n    private transient volatile Constructor\u003cT\u003e cachedConstructor;\n    private transient volatile Class\u003c?\u003e       newInstanceCallerCache;\n\n\n    /**\n     * Determines if the specified {@code Object} is assignment-compatible\n     * with the object represented by this {@code Class}.  This method is\n     * the dynamic equivalent of the Java language {@code instanceof}\n     * operator. The method returns {@code true} if the specified\n     * {@code Object} argument is non-null and can be cast to the\n     * reference type represented by this {@code Class} object without\n     * raising a {@code ClassCastException.} It returns {@code false}\n     * otherwise.\n     *\n     * \u003cp\u003e Specifically, if this {@code Class} object represents a\n     * declared class, this method returns {@code true} if the specified\n     * {@code Object} argument is an instance of the represented class (or\n     * of any of its subclasses); it returns {@code false} otherwise. If\n     * this {@code Class} object represents an array class, this method\n     * returns {@code true} if the specified {@code Object} argument\n     * can be converted to an object of the array class by an identity\n     * conversion or by a widening reference conversion; it returns\n     * {@code false} otherwise. If this {@code Class} object\n     * represents an interface, this method returns {@code true} if the\n     * class or any superclass of the specified {@code Object} argument\n     * implements this interface; it returns {@code false} otherwise. If\n     * this {@code Class} object represents a primitive type, this method\n     * returns {@code false}.\n     *\n     * @param   obj the object to check\n     * @return  true if {@code obj} is an instance of this class\n     *\n     * @since 1.1\n     */\n    @HotSpotIntrinsicCandidate\n    public native boolean isInstance(Object obj);\n\n\n    /**\n     * Determines if the class or interface represented by this\n     * {@code Class} object is either the same as, or is a superclass or\n     * superinterface of, the class or interface represented by the specified\n     * {@code Class} parameter. It returns {@code true} if so;\n     * otherwise it returns {@code false}. If this {@code Class}\n     * object represents a primitive type, this method returns\n     * {@code true} if the specified {@code Class} parameter is\n     * exactly this {@code Class} object; otherwise it returns\n     * {@code false}.\n     *\n     * \u003cp\u003e Specifically, this method tests whether the type represented by the\n     * specified {@code Class} parameter can be converted to the type\n     * represented by this {@code Class} object via an identity conversion\n     * or via a widening reference conversion. See \u003cem\u003eThe Java Language\n     * Specification\u003c/em\u003e, sections 5.1.1 and 5.1.4 , for details.\n     *\n     * @param cls the {@code Class} object to be checked\n     * @return the {@code boolean} value indicating whether objects of the\n     * type {@code cls} can be assigned to objects of this class\n     * @exception NullPointerException if the specified Class parameter is\n     *            null.\n     * @since 1.1\n     */\n    @HotSpotIntrinsicCandidate\n    public native boolean isAssignableFrom(Class\u003c?\u003e cls);\n\n\n    /**\n     * Determines if the specified {@code Class} object represents an\n     * interface type.\n     *\n     * @return  {@code true} if this object represents an interface;\n     *          {@code false} otherwise.\n     */\n    @HotSpotIntrinsicCandidate\n    public native boolean isInterface();\n\n\n    /**\n     * Determines if this {@code Class} object represents an array class.\n     *\n     * @return  {@code true} if this object represents an array class;\n     *          {@code false} otherwise.\n     * @since   1.1\n     */\n    @HotSpotIntrinsicCandidate\n    public native boolean isArray();\n\n\n    /**\n     * Determines if the specified {@code Class} object represents a\n     * primitive type.\n     *\n     * \u003cp\u003e There are nine predefined {@code Class} objects to represent\n     * the eight primitive types and void.  These are created by the Java\n     * Virtual Machine, and have the same names as the primitive types that\n     * they represent, namely {@code boolean}, {@code byte},\n     * {@code char}, {@code short}, {@code int},\n     * {@code long}, {@code float}, and {@code double}.\n     *\n     * \u003cp\u003e These objects may only be accessed via the following public static\n     * final variables, and are the only {@code Class} objects for which\n     * this method returns {@code true}.\n     *\n     * @return true if and only if this class represents a primitive type\n     *\n     * @see     java.lang.Boolean#TYPE\n     * @see     java.lang.Character#TYPE\n     * @see     java.lang.Byte#TYPE\n     * @see     java.lang.Short#TYPE\n     * @see     java.lang.Integer#TYPE\n     * @see     java.lang.Long#TYPE\n     * @see     java.lang.Float#TYPE\n     * @see     java.lang.Double#TYPE\n     * @see     java.lang.Void#TYPE\n     * @since 1.1\n     */\n    @HotSpotIntrinsicCandidate\n    public native boolean isPrimitive();\n\n    /**\n     * Returns true if this {@code Class} object represents an annotation\n     * type.  Note that if this method returns true, {@link #isInterface()}\n     * would also return true, as all annotation types are also interfaces.\n     *\n     * @return {@code true} if this class object represents an annotation\n     *      type; {@code false} otherwise\n     * @since 1.5\n     */\n    public boolean isAnnotation() {\n        return (getModifiers() \u0026 ANNOTATION) !\u003d 0;\n    }\n\n    /**\n     * Returns {@code true} if this class is a synthetic class;\n     * returns {@code false} otherwise.\n     * @return {@code true} if and only if this class is a synthetic class as\n     *         defined by the Java Language Specification.\n     * @jls 13.1 The Form of a Binary\n     * @since 1.5\n     */\n    public boolean isSynthetic() {\n        return (getModifiers() \u0026 SYNTHETIC) !\u003d 0;\n    }\n\n    /**\n     * Returns the  name of the entity (class, interface, array class,\n     * primitive type, or void) represented by this {@code Class} object,\n     * as a {@code String}.\n     *\n     * \u003cp\u003e If this class object represents a reference type that is not an\n     * array type then the binary name of the class is returned, as specified\n     * by\n     * \u003ccite\u003eThe Java\u0026trade; Language Specification\u003c/cite\u003e.\n     *\n     * \u003cp\u003e If this class object represents a primitive type or void, then the\n     * name returned is a {@code String} equal to the Java language\n     * keyword corresponding to the primitive type or void.\n     *\n     * \u003cp\u003e If this class object represents a class of arrays, then the internal\n     * form of the name consists of the name of the element type preceded by\n     * one or more \u0027{@code [}\u0027 characters representing the depth of the array\n     * nesting.  The encoding of element type names is as follows:\n     *\n     * \u003cblockquote\u003e\u003ctable class\u003d\"striped\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eElement types and encodings\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"col\"\u003e Element Type \u003cth scope\u003d\"col\"\u003e Encoding\n     * \u003c/thead\u003e\n     * \u003ctbody style\u003d\"text-align:left\"\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\"\u003e boolean      \u003ctd style\u003d\"text-align:center\"\u003e Z\n     * \u003ctr\u003e\u003cth scope\u003d\"row\"\u003e byte         \u003ctd style\u003d\"text-align:center\"\u003e B\n     * \u003ctr\u003e\u003cth scope\u003d\"row\"\u003e char         \u003ctd style\u003d\"text-align:center\"\u003e C\n     * \u003ctr\u003e\u003cth scope\u003d\"row\"\u003e class or interface\n     *                                   \u003ctd style\u003d\"text-align:center\"\u003e L\u003ci\u003eclassname\u003c/i\u003e;\n     * \u003ctr\u003e\u003cth scope\u003d\"row\"\u003e double       \u003ctd style\u003d\"text-align:center\"\u003e D\n     * \u003ctr\u003e\u003cth scope\u003d\"row\"\u003e float        \u003ctd style\u003d\"text-align:center\"\u003e F\n     * \u003ctr\u003e\u003cth scope\u003d\"row\"\u003e int          \u003ctd style\u003d\"text-align:center\"\u003e I\n     * \u003ctr\u003e\u003cth scope\u003d\"row\"\u003e long         \u003ctd style\u003d\"text-align:center\"\u003e J\n     * \u003ctr\u003e\u003cth scope\u003d\"row\"\u003e short        \u003ctd style\u003d\"text-align:center\"\u003e S\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\u003c/blockquote\u003e\n     *\n     * \u003cp\u003e The class or interface name \u003ci\u003eclassname\u003c/i\u003e is the binary name of\n     * the class specified above.\n     *\n     * \u003cp\u003e Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * String.class.getName()\n     *     returns \"java.lang.String\"\n     * byte.class.getName()\n     *     returns \"byte\"\n     * (new Object[3]).getClass().getName()\n     *     returns \"[Ljava.lang.Object;\"\n     * (new int[3][4][5][6][7][8][9]).getClass().getName()\n     *     returns \"[[[[[[[I\"\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @return  the name of the class or interface\n     *          represented by this object.\n     */\n    public String getName() {\n        String name \u003d this.name;\n        return name !\u003d null ? name : initClassName();\n    }\n\n    // Cache the name to reduce the number of calls into the VM.\n    // This field would be set by VM itself during initClassName call.\n    private transient String name;\n    private native String initClassName();\n\n    /**\n     * Returns the class loader for the class.  Some implementations may use\n     * null to represent the bootstrap class loader. This method will return\n     * null in such implementations if this class was loaded by the bootstrap\n     * class loader.\n     *\n     * \u003cp\u003eIf this object\n     * represents a primitive type or void, null is returned.\n     *\n     * @return  the class loader that loaded the class or interface\n     *          represented by this object.\n     * @throws  SecurityException\n     *          if a security manager is present, and the caller\u0027s class loader\n     *          is not {@code null} and is not the same as or an ancestor of the\n     *          class loader for the class whose class loader is requested,\n     *          and the caller does not have the\n     *          {@link RuntimePermission}{@code (\"getClassLoader\")}\n     * @see java.lang.ClassLoader\n     * @see SecurityManager#checkPermission\n     * @see java.lang.RuntimePermission\n     */\n    @CallerSensitive\n    @ForceInline // to ensure Reflection.getCallerClass optimization\n    public ClassLoader getClassLoader() {\n        ClassLoader cl \u003d getClassLoader0();\n        if (cl \u003d\u003d null)\n            return null;\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            ClassLoader.checkClassLoaderPermission(cl, Reflection.getCallerClass());\n        }\n        return cl;\n    }\n\n    // Package-private to allow ClassLoader access\n    ClassLoader getClassLoader0() { return classLoader; }\n\n    /**\n     * Returns the module that this class or interface is a member of.\n     *\n     * If this class represents an array type then this method returns the\n     * {@code Module} for the element type. If this class represents a\n     * primitive type or void, then the {@code Module} object for the\n     * {@code java.base} module is returned.\n     *\n     * If this class is in an unnamed module then the {@linkplain\n     * ClassLoader#getUnnamedModule() unnamed} {@code Module} of the class\n     * loader for this class is returned.\n     *\n     * @return the module that this class or interface is a member of\n     *\n     * @since 9\n     * @spec JPMS\n     */\n    public Module getModule() {\n        return module;\n    }\n\n    // set by VM\n    private transient Module module;\n\n    // Initialized in JVM not by private constructor\n    // This field is filtered from reflection access, i.e. getDeclaredField\n    // will throw NoSuchFieldException\n    private final ClassLoader classLoader;\n\n    /**\n     * Returns an array of {@code TypeVariable} objects that represent the\n     * type variables declared by the generic declaration represented by this\n     * {@code GenericDeclaration} object, in declaration order.  Returns an\n     * array of length 0 if the underlying generic declaration declares no type\n     * variables.\n     *\n     * @return an array of {@code TypeVariable} objects that represent\n     *     the type variables declared by this generic declaration\n     * @throws java.lang.reflect.GenericSignatureFormatError if the generic\n     *     signature of this generic declaration does not conform to\n     *     the format specified in\n     *     \u003ccite\u003eThe Java\u0026trade; Virtual Machine Specification\u003c/cite\u003e\n     * @since 1.5\n     */\n    @SuppressWarnings(\"unchecked\")\n    public TypeVariable\u003cClass\u003cT\u003e\u003e[] getTypeParameters() {\n        ClassRepository info \u003d getGenericInfo();\n        if (info !\u003d null)\n            return (TypeVariable\u003cClass\u003cT\u003e\u003e[])info.getTypeParameters();\n        else\n            return (TypeVariable\u003cClass\u003cT\u003e\u003e[])new TypeVariable\u003c?\u003e[0];\n    }\n\n\n    /**\n     * Returns the {@code Class} representing the direct superclass of the\n     * entity (class, interface, primitive type or void) represented by\n     * this {@code Class}.  If this {@code Class} represents either the\n     * {@code Object} class, an interface, a primitive type, or void, then\n     * null is returned.  If this object represents an array class then the\n     * {@code Class} object representing the {@code Object} class is\n     * returned.\n     *\n     * @return the direct superclass of the class represented by this object\n     */\n    @HotSpotIntrinsicCandidate\n    public native Class\u003c? super T\u003e getSuperclass();\n\n\n    /**\n     * Returns the {@code Type} representing the direct superclass of\n     * the entity (class, interface, primitive type or void) represented by\n     * this {@code Class}.\n     *\n     * \u003cp\u003eIf the superclass is a parameterized type, the {@code Type}\n     * object returned must accurately reflect the actual type\n     * parameters used in the source code. The parameterized type\n     * representing the superclass is created if it had not been\n     * created before. See the declaration of {@link\n     * java.lang.reflect.ParameterizedType ParameterizedType} for the\n     * semantics of the creation process for parameterized types.  If\n     * this {@code Class} represents either the {@code Object}\n     * class, an interface, a primitive type, or void, then null is\n     * returned.  If this object represents an array class then the\n     * {@code Class} object representing the {@code Object} class is\n     * returned.\n     *\n     * @throws java.lang.reflect.GenericSignatureFormatError if the generic\n     *     class signature does not conform to the format specified in\n     *     \u003ccite\u003eThe Java\u0026trade; Virtual Machine Specification\u003c/cite\u003e\n     * @throws TypeNotPresentException if the generic superclass\n     *     refers to a non-existent type declaration\n     * @throws java.lang.reflect.MalformedParameterizedTypeException if the\n     *     generic superclass refers to a parameterized type that cannot be\n     *     instantiated  for any reason\n     * @return the direct superclass of the class represented by this object\n     * @since 1.5\n     */\n    public Type getGenericSuperclass() {\n        ClassRepository info \u003d getGenericInfo();\n        if (info \u003d\u003d null) {\n            return getSuperclass();\n        }\n\n        // Historical irregularity:\n        // Generic signature marks interfaces with superclass \u003d Object\n        // but this API returns null for interfaces\n        if (isInterface()) {\n            return null;\n        }\n\n        return info.getSuperclass();\n    }\n\n    /**\n     * Gets the package of this class.\n     *\n     * \u003cp\u003eIf this class represents an array type, a primitive type or void,\n     * this method returns {@code null}.\n     *\n     * @return the package of this class.\n     * @revised 9\n     * @spec JPMS\n     */\n    public Package getPackage() {\n        if (isPrimitive() || isArray()) {\n            return null;\n        }\n        ClassLoader cl \u003d getClassLoader0();\n        return cl !\u003d null ? cl.definePackage(this)\n                          : BootLoader.definePackage(this);\n    }\n\n    /**\n     * Returns the fully qualified package name.\n     *\n     * \u003cp\u003e If this class is a top level class, then this method returns the fully\n     * qualified name of the package that the class is a member of, or the\n     * empty string if the class is in an unnamed package.\n     *\n     * \u003cp\u003e If this class is a member class, then this method is equivalent to\n     * invoking {@code getPackageName()} on the {@linkplain #getEnclosingClass\n     * enclosing class}.\n     *\n     * \u003cp\u003e If this class is a {@linkplain #isLocalClass local class} or an {@linkplain\n     * #isAnonymousClass() anonymous class}, then this method is equivalent to\n     * invoking {@code getPackageName()} on the {@linkplain #getDeclaringClass\n     * declaring class} of the {@linkplain #getEnclosingMethod enclosing method} or\n     * {@linkplain #getEnclosingConstructor enclosing constructor}.\n     *\n     * \u003cp\u003e If this class represents an array type then this method returns the\n     * package name of the element type. If this class represents a primitive\n     * type or void then the package name \"{@code java.lang}\" is returned.\n     *\n     * @return the fully qualified package name\n     *\n     * @since 9\n     * @spec JPMS\n     * @jls 6.7  Fully Qualified Names\n     */\n    public String getPackageName() {\n        String pn \u003d this.packageName;\n        if (pn \u003d\u003d null) {\n            Class\u003c?\u003e c \u003d this;\n            while (c.isArray()) {\n                c \u003d c.getComponentType();\n            }\n            if (c.isPrimitive()) {\n                pn \u003d \"java.lang\";\n            } else {\n                String cn \u003d c.getName();\n                int dot \u003d cn.lastIndexOf(\u0027.\u0027);\n                pn \u003d (dot !\u003d -1) ? cn.substring(0, dot).intern() : \"\";\n            }\n            this.packageName \u003d pn;\n        }\n        return pn;\n    }\n\n    // cached package name\n    private transient String packageName;\n\n    /**\n     * Returns the interfaces directly implemented by the class or interface\n     * represented by this object.\n     *\n     * \u003cp\u003eIf this object represents a class, the return value is an array\n     * containing objects representing all interfaces directly implemented by\n     * the class.  The order of the interface objects in the array corresponds\n     * to the order of the interface names in the {@code implements} clause of\n     * the declaration of the class represented by this object.  For example,\n     * given the declaration:\n     * \u003cblockquote\u003e\n     * {@code class Shimmer implements FloorWax, DessertTopping { ... }}\n     * \u003c/blockquote\u003e\n     * suppose the value of {@code s} is an instance of\n     * {@code Shimmer}; the value of the expression:\n     * \u003cblockquote\u003e\n     * {@code s.getClass().getInterfaces()[0]}\n     * \u003c/blockquote\u003e\n     * is the {@code Class} object that represents interface\n     * {@code FloorWax}; and the value of:\n     * \u003cblockquote\u003e\n     * {@code s.getClass().getInterfaces()[1]}\n     * \u003c/blockquote\u003e\n     * is the {@code Class} object that represents interface\n     * {@code DessertTopping}.\n     *\n     * \u003cp\u003eIf this object represents an interface, the array contains objects\n     * representing all interfaces directly extended by the interface.  The\n     * order of the interface objects in the array corresponds to the order of\n     * the interface names in the {@code extends} clause of the declaration of\n     * the interface represented by this object.\n     *\n     * \u003cp\u003eIf this object represents a class or interface that implements no\n     * interfaces, the method returns an array of length 0.\n     *\n     * \u003cp\u003eIf this object represents a primitive type or void, the method\n     * returns an array of length 0.\n     *\n     * \u003cp\u003eIf this {@code Class} object represents an array type, the\n     * interfaces {@code Cloneable} and {@code java.io.Serializable} are\n     * returned in that order.\n     *\n     * @return an array of interfaces directly implemented by this class\n     */\n    public Class\u003c?\u003e[] getInterfaces() {\n        // defensively copy before handing over to user code\n        return getInterfaces(true);\n    }\n\n    private Class\u003c?\u003e[] getInterfaces(boolean cloneArray) {\n        ReflectionData\u003cT\u003e rd \u003d reflectionData();\n        if (rd \u003d\u003d null) {\n            // no cloning required\n            return getInterfaces0();\n        } else {\n            Class\u003c?\u003e[] interfaces \u003d rd.interfaces;\n            if (interfaces \u003d\u003d null) {\n                interfaces \u003d getInterfaces0();\n                rd.interfaces \u003d interfaces;\n            }\n            // defensively copy if requested\n            return cloneArray ? interfaces.clone() : interfaces;\n        }\n    }\n\n    private native Class\u003c?\u003e[] getInterfaces0();\n\n    /**\n     * Returns the {@code Type}s representing the interfaces\n     * directly implemented by the class or interface represented by\n     * this object.\n     *\n     * \u003cp\u003eIf a superinterface is a parameterized type, the\n     * {@code Type} object returned for it must accurately reflect\n     * the actual type parameters used in the source code. The\n     * parameterized type representing each superinterface is created\n     * if it had not been created before. See the declaration of\n     * {@link java.lang.reflect.ParameterizedType ParameterizedType}\n     * for the semantics of the creation process for parameterized\n     * types.\n     *\n     * \u003cp\u003eIf this object represents a class, the return value is an array\n     * containing objects representing all interfaces directly implemented by\n     * the class.  The order of the interface objects in the array corresponds\n     * to the order of the interface names in the {@code implements} clause of\n     * the declaration of the class represented by this object.\n     *\n     * \u003cp\u003eIf this object represents an interface, the array contains objects\n     * representing all interfaces directly extended by the interface.  The\n     * order of the interface objects in the array corresponds to the order of\n     * the interface names in the {@code extends} clause of the declaration of\n     * the interface represented by this object.\n     *\n     * \u003cp\u003eIf this object represents a class or interface that implements no\n     * interfaces, the method returns an array of length 0.\n     *\n     * \u003cp\u003eIf this object represents a primitive type or void, the method\n     * returns an array of length 0.\n     *\n     * \u003cp\u003eIf this {@code Class} object represents an array type, the\n     * interfaces {@code Cloneable} and {@code java.io.Serializable} are\n     * returned in that order.\n     *\n     * @throws java.lang.reflect.GenericSignatureFormatError\n     *     if the generic class signature does not conform to the format\n     *     specified in\n     *     \u003ccite\u003eThe Java\u0026trade; Virtual Machine Specification\u003c/cite\u003e\n     * @throws TypeNotPresentException if any of the generic\n     *     superinterfaces refers to a non-existent type declaration\n     * @throws java.lang.reflect.MalformedParameterizedTypeException\n     *     if any of the generic superinterfaces refer to a parameterized\n     *     type that cannot be instantiated for any reason\n     * @return an array of interfaces directly implemented by this class\n     * @since 1.5\n     */\n    public Type[] getGenericInterfaces() {\n        ClassRepository info \u003d getGenericInfo();\n        return (info \u003d\u003d null) ?  getInterfaces() : info.getSuperInterfaces();\n    }\n\n\n    /**\n     * Returns the {@code Class} representing the component type of an\n     * array.  If this class does not represent an array class this method\n     * returns null.\n     *\n     * @return the {@code Class} representing the component type of this\n     * class if this class is an array\n     * @see     java.lang.reflect.Array\n     * @since 1.1\n     */\n    public Class\u003c?\u003e getComponentType() {\n        // Only return for array types. Storage may be reused for Class for instance types.\n        if (isArray()) {\n            return componentType;\n        } else {\n            return null;\n        }\n    }\n\n    private final Class\u003c?\u003e componentType;\n\n\n    /**\n     * Returns the Java language modifiers for this class or interface, encoded\n     * in an integer. The modifiers consist of the Java Virtual Machine\u0027s\n     * constants for {@code public}, {@code protected},\n     * {@code private}, {@code final}, {@code static},\n     * {@code abstract} and {@code interface}; they should be decoded\n     * using the methods of class {@code Modifier}.\n     *\n     * \u003cp\u003e If the underlying class is an array class, then its\n     * {@code public}, {@code private} and {@code protected}\n     * modifiers are the same as those of its component type.  If this\n     * {@code Class} represents a primitive type or void, its\n     * {@code public} modifier is always {@code true}, and its\n     * {@code protected} and {@code private} modifiers are always\n     * {@code false}. If this object represents an array class, a\n     * primitive type or void, then its {@code final} modifier is always\n     * {@code true} and its interface modifier is always\n     * {@code false}. The values of its other modifiers are not determined\n     * by this specification.\n     *\n     * \u003cp\u003e The modifier encodings are defined in \u003cem\u003eThe Java Virtual Machine\n     * Specification\u003c/em\u003e, table 4.1.\n     *\n     * @return the {@code int} representing the modifiers for this class\n     * @see     java.lang.reflect.Modifier\n     * @since 1.1\n     */\n    @HotSpotIntrinsicCandidate\n    public native int getModifiers();\n\n\n    /**\n     * Gets the signers of this class.\n     *\n     * @return  the signers of this class, or null if there are no signers.  In\n     *          particular, this method returns null if this object represents\n     *          a primitive type or void.\n     * @since   1.1\n     */\n    public native Object[] getSigners();\n\n\n    /**\n     * Set the signers of this class.\n     */\n    native void setSigners(Object[] signers);\n\n\n    /**\n     * If this {@code Class} object represents a local or anonymous\n     * class within a method, returns a {@link\n     * java.lang.reflect.Method Method} object representing the\n     * immediately enclosing method of the underlying class. Returns\n     * {@code null} otherwise.\n     *\n     * In particular, this method returns {@code null} if the underlying\n     * class is a local or anonymous class immediately enclosed by a type\n     * declaration, instance initializer or static initializer.\n     *\n     * @return the immediately enclosing method of the underlying class, if\n     *     that class is a local or anonymous class; otherwise {@code null}.\n     *\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and any of the\n     *         following conditions is met:\n     *\n     *         \u003cul\u003e\n     *\n     *         \u003cli\u003e the caller\u0027s class loader is not the same as the\n     *         class loader of the enclosing class and invocation of\n     *         {@link SecurityManager#checkPermission\n     *         s.checkPermission} method with\n     *         {@code RuntimePermission(\"accessDeclaredMembers\")}\n     *         denies access to the methods within the enclosing class\n     *\n     *         \u003cli\u003e the caller\u0027s class loader is not the same as or an\n     *         ancestor of the class loader for the enclosing class and\n     *         invocation of {@link SecurityManager#checkPackageAccess\n     *         s.checkPackageAccess()} denies access to the package\n     *         of the enclosing class\n     *\n     *         \u003c/ul\u003e\n     * @since 1.5\n     */\n    @CallerSensitive\n    public Method getEnclosingMethod() throws SecurityException {\n        EnclosingMethodInfo enclosingInfo \u003d getEnclosingMethodInfo();\n\n        if (enclosingInfo \u003d\u003d null)\n            return null;\n        else {\n            if (!enclosingInfo.isMethod())\n                return null;\n\n            MethodRepository typeInfo \u003d MethodRepository.make(enclosingInfo.getDescriptor(),\n                                                              getFactory());\n            Class\u003c?\u003e   returnType       \u003d toClass(typeInfo.getReturnType());\n            Type []    parameterTypes   \u003d typeInfo.getParameterTypes();\n            Class\u003c?\u003e[] parameterClasses \u003d new Class\u003c?\u003e[parameterTypes.length];\n\n            // Convert Types to Classes; returned types *should*\n            // be class objects since the methodDescriptor\u0027s used\n            // don\u0027t have generics information\n            for(int i \u003d 0; i \u003c parameterClasses.length; i++)\n                parameterClasses[i] \u003d toClass(parameterTypes[i]);\n\n            // Perform access check\n            final Class\u003c?\u003e enclosingCandidate \u003d enclosingInfo.getEnclosingClass();\n            SecurityManager sm \u003d System.getSecurityManager();\n            if (sm !\u003d null) {\n                enclosingCandidate.checkMemberAccess(sm, Member.DECLARED,\n                                                     Reflection.getCallerClass(), true);\n            }\n            Method[] candidates \u003d enclosingCandidate.privateGetDeclaredMethods(false);\n\n            /*\n             * Loop over all declared methods; match method name,\n             * number of and type of parameters, *and* return\n             * type.  Matching return type is also necessary\n             * because of covariant returns, etc.\n             */\n            ReflectionFactory fact \u003d getReflectionFactory();\n            for (Method m : candidates) {\n                if (m.getName().equals(enclosingInfo.getName()) \u0026\u0026\n                    arrayContentsEq(parameterClasses,\n                                    fact.getExecutableSharedParameterTypes(m))) {\n                    // finally, check return type\n                    if (m.getReturnType().equals(returnType)) {\n                        return fact.copyMethod(m);\n                    }\n                }\n            }\n\n            throw new InternalError(\"Enclosing method not found\");\n        }\n    }\n\n    private native Object[] getEnclosingMethod0();\n\n    private EnclosingMethodInfo getEnclosingMethodInfo() {\n        Object[] enclosingInfo \u003d getEnclosingMethod0();\n        if (enclosingInfo \u003d\u003d null)\n            return null;\n        else {\n            return new EnclosingMethodInfo(enclosingInfo);\n        }\n    }\n\n    private static final class EnclosingMethodInfo {\n        private final Class\u003c?\u003e enclosingClass;\n        private final String name;\n        private final String descriptor;\n\n        static void validate(Object[] enclosingInfo) {\n            if (enclosingInfo.length !\u003d 3)\n                throw new InternalError(\"Malformed enclosing method information\");\n            try {\n                // The array is expected to have three elements:\n\n                // the immediately enclosing class\n                Class\u003c?\u003e enclosingClass \u003d (Class\u003c?\u003e)enclosingInfo[0];\n                assert(enclosingClass !\u003d null);\n\n                // the immediately enclosing method or constructor\u0027s\n                // name (can be null).\n                String name \u003d (String)enclosingInfo[1];\n\n                // the immediately enclosing method or constructor\u0027s\n                // descriptor (null iff name is).\n                String descriptor \u003d (String)enclosingInfo[2];\n                assert((name !\u003d null \u0026\u0026 descriptor !\u003d null) || name \u003d\u003d descriptor);\n            } catch (ClassCastException cce) {\n                throw new InternalError(\"Invalid type in enclosing method information\", cce);\n            }\n        }\n\n        EnclosingMethodInfo(Object[] enclosingInfo) {\n            validate(enclosingInfo);\n            this.enclosingClass \u003d (Class\u003c?\u003e)enclosingInfo[0];\n            this.name \u003d (String)enclosingInfo[1];\n            this.descriptor \u003d (String)enclosingInfo[2];\n        }\n\n        boolean isPartial() {\n            return enclosingClass \u003d\u003d null || name \u003d\u003d null || descriptor \u003d\u003d null;\n        }\n\n        boolean isConstructor() { return !isPartial() \u0026\u0026 \"\u003cinit\u003e\".equals(name); }\n\n        boolean isMethod() { return !isPartial() \u0026\u0026 !isConstructor() \u0026\u0026 !\"\u003cclinit\u003e\".equals(name); }\n\n        Class\u003c?\u003e getEnclosingClass() { return enclosingClass; }\n\n        String getName() { return name; }\n\n        String getDescriptor() { return descriptor; }\n\n    }\n\n    private static Class\u003c?\u003e toClass(Type o) {\n        if (o instanceof GenericArrayType)\n            return Array.newInstance(toClass(((GenericArrayType)o).getGenericComponentType()),\n                                     0)\n                .getClass();\n        return (Class\u003c?\u003e)o;\n     }\n\n    /**\n     * If this {@code Class} object represents a local or anonymous\n     * class within a constructor, returns a {@link\n     * java.lang.reflect.Constructor Constructor} object representing\n     * the immediately enclosing constructor of the underlying\n     * class. Returns {@code null} otherwise.  In particular, this\n     * method returns {@code null} if the underlying class is a local\n     * or anonymous class immediately enclosed by a type declaration,\n     * instance initializer or static initializer.\n     *\n     * @return the immediately enclosing constructor of the underlying class, if\n     *     that class is a local or anonymous class; otherwise {@code null}.\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and any of the\n     *         following conditions is met:\n     *\n     *         \u003cul\u003e\n     *\n     *         \u003cli\u003e the caller\u0027s class loader is not the same as the\n     *         class loader of the enclosing class and invocation of\n     *         {@link SecurityManager#checkPermission\n     *         s.checkPermission} method with\n     *         {@code RuntimePermission(\"accessDeclaredMembers\")}\n     *         denies access to the constructors within the enclosing class\n     *\n     *         \u003cli\u003e the caller\u0027s class loader is not the same as or an\n     *         ancestor of the class loader for the enclosing class and\n     *         invocation of {@link SecurityManager#checkPackageAccess\n     *         s.checkPackageAccess()} denies access to the package\n     *         of the enclosing class\n     *\n     *         \u003c/ul\u003e\n     * @since 1.5\n     */\n    @CallerSensitive\n    public Constructor\u003c?\u003e getEnclosingConstructor() throws SecurityException {\n        EnclosingMethodInfo enclosingInfo \u003d getEnclosingMethodInfo();\n\n        if (enclosingInfo \u003d\u003d null)\n            return null;\n        else {\n            if (!enclosingInfo.isConstructor())\n                return null;\n\n            ConstructorRepository typeInfo \u003d ConstructorRepository.make(enclosingInfo.getDescriptor(),\n                                                                        getFactory());\n            Type []    parameterTypes   \u003d typeInfo.getParameterTypes();\n            Class\u003c?\u003e[] parameterClasses \u003d new Class\u003c?\u003e[parameterTypes.length];\n\n            // Convert Types to Classes; returned types *should*\n            // be class objects since the methodDescriptor\u0027s used\n            // don\u0027t have generics information\n            for(int i \u003d 0; i \u003c parameterClasses.length; i++)\n                parameterClasses[i] \u003d toClass(parameterTypes[i]);\n\n            // Perform access check\n            final Class\u003c?\u003e enclosingCandidate \u003d enclosingInfo.getEnclosingClass();\n            SecurityManager sm \u003d System.getSecurityManager();\n            if (sm !\u003d null) {\n                enclosingCandidate.checkMemberAccess(sm, Member.DECLARED,\n                                                     Reflection.getCallerClass(), true);\n            }\n\n            Constructor\u003c?\u003e[] candidates \u003d enclosingCandidate\n                    .privateGetDeclaredConstructors(false);\n            /*\n             * Loop over all declared constructors; match number\n             * of and type of parameters.\n             */\n            ReflectionFactory fact \u003d getReflectionFactory();\n            for (Constructor\u003c?\u003e c : candidates) {\n                if (arrayContentsEq(parameterClasses,\n                                    fact.getExecutableSharedParameterTypes(c))) {\n                    return fact.copyConstructor(c);\n                }\n            }\n\n            throw new InternalError(\"Enclosing constructor not found\");\n        }\n    }\n\n\n    /**\n     * If the class or interface represented by this {@code Class} object\n     * is a member of another class, returns the {@code Class} object\n     * representing the class in which it was declared.  This method returns\n     * null if this class or interface is not a member of any other class.  If\n     * this {@code Class} object represents an array class, a primitive\n     * type, or void,then this method returns null.\n     *\n     * @return the declaring class for this class\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and the caller\u0027s\n     *         class loader is not the same as or an ancestor of the class\n     *         loader for the declaring class and invocation of {@link\n     *         SecurityManager#checkPackageAccess s.checkPackageAccess()}\n     *         denies access to the package of the declaring class\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Class\u003c?\u003e getDeclaringClass() throws SecurityException {\n        final Class\u003c?\u003e candidate \u003d getDeclaringClass0();\n\n        if (candidate !\u003d null) {\n            SecurityManager sm \u003d System.getSecurityManager();\n            if (sm !\u003d null) {\n                candidate.checkPackageAccess(sm,\n                    ClassLoader.getClassLoader(Reflection.getCallerClass()), true);\n            }\n        }\n        return candidate;\n    }\n\n    private native Class\u003c?\u003e getDeclaringClass0();\n\n\n    /**\n     * Returns the immediately enclosing class of the underlying\n     * class.  If the underlying class is a top level class this\n     * method returns {@code null}.\n     * @return the immediately enclosing class of the underlying class\n     * @exception  SecurityException\n     *             If a security manager, \u003ci\u003es\u003c/i\u003e, is present and the caller\u0027s\n     *             class loader is not the same as or an ancestor of the class\n     *             loader for the enclosing class and invocation of {@link\n     *             SecurityManager#checkPackageAccess s.checkPackageAccess()}\n     *             denies access to the package of the enclosing class\n     * @since 1.5\n     */\n    @CallerSensitive\n    public Class\u003c?\u003e getEnclosingClass() throws SecurityException {\n        // There are five kinds of classes (or interfaces):\n        // a) Top level classes\n        // b) Nested classes (static member classes)\n        // c) Inner classes (non-static member classes)\n        // d) Local classes (named classes declared within a method)\n        // e) Anonymous classes\n\n\n        // JVM Spec 4.7.7: A class must have an EnclosingMethod\n        // attribute if and only if it is a local class or an\n        // anonymous class.\n        EnclosingMethodInfo enclosingInfo \u003d getEnclosingMethodInfo();\n        Class\u003c?\u003e enclosingCandidate;\n\n        if (enclosingInfo \u003d\u003d null) {\n            // This is a top level or a nested class or an inner class (a, b, or c)\n            enclosingCandidate \u003d getDeclaringClass0();\n        } else {\n            Class\u003c?\u003e enclosingClass \u003d enclosingInfo.getEnclosingClass();\n            // This is a local class or an anonymous class (d or e)\n            if (enclosingClass \u003d\u003d this || enclosingClass \u003d\u003d null)\n                throw new InternalError(\"Malformed enclosing method information\");\n            else\n                enclosingCandidate \u003d enclosingClass;\n        }\n\n        if (enclosingCandidate !\u003d null) {\n            SecurityManager sm \u003d System.getSecurityManager();\n            if (sm !\u003d null) {\n                enclosingCandidate.checkPackageAccess(sm,\n                    ClassLoader.getClassLoader(Reflection.getCallerClass()), true);\n            }\n        }\n        return enclosingCandidate;\n    }\n\n    /**\n     * Returns the simple name of the underlying class as given in the\n     * source code. Returns an empty string if the underlying class is\n     * anonymous.\n     *\n     * \u003cp\u003eThe simple name of an array is the simple name of the\n     * component type with \"[]\" appended.  In particular the simple\n     * name of an array whose component type is anonymous is \"[]\".\n     *\n     * @return the simple name of the underlying class\n     * @since 1.5\n     */\n    public String getSimpleName() {\n        ReflectionData\u003cT\u003e rd \u003d reflectionData();\n        String simpleName \u003d rd.simpleName;\n        if (simpleName \u003d\u003d null) {\n            rd.simpleName \u003d simpleName \u003d getSimpleName0();\n        }\n        return simpleName;\n    }\n\n    private String getSimpleName0() {\n        if (isArray()) {\n            return getComponentType().getSimpleName() + \"[]\";\n        }\n        String simpleName \u003d getSimpleBinaryName();\n        if (simpleName \u003d\u003d null) { // top level class\n            simpleName \u003d getName();\n            simpleName \u003d simpleName.substring(simpleName.lastIndexOf(\u0027.\u0027) + 1); // strip the package name\n        }\n        return simpleName;\n    }\n\n    /**\n     * Return an informative string for the name of this type.\n     *\n     * @return an informative string for the name of this type\n     * @since 1.8\n     */\n    public String getTypeName() {\n        if (isArray()) {\n            try {\n                Class\u003c?\u003e cl \u003d this;\n                int dimensions \u003d 0;\n                do {\n                    dimensions++;\n                    cl \u003d cl.getComponentType();\n                } while (cl.isArray());\n                StringBuilder sb \u003d new StringBuilder();\n                sb.append(cl.getName());\n                for (int i \u003d 0; i \u003c dimensions; i++) {\n                    sb.append(\"[]\");\n                }\n                return sb.toString();\n            } catch (Throwable e) { /*FALLTHRU*/ }\n        }\n        return getName();\n    }\n\n    /**\n     * Returns the canonical name of the underlying class as\n     * defined by the Java Language Specification.  Returns null if\n     * the underlying class does not have a canonical name (i.e., if\n     * it is a local or anonymous class or an array whose component\n     * type does not have a canonical name).\n     * @return the canonical name of the underlying class if it exists, and\n     * {@code null} otherwise.\n     * @since 1.5\n     */\n    public String getCanonicalName() {\n        ReflectionData\u003cT\u003e rd \u003d reflectionData();\n        String canonicalName \u003d rd.canonicalName;\n        if (canonicalName \u003d\u003d null) {\n            rd.canonicalName \u003d canonicalName \u003d getCanonicalName0();\n        }\n        return canonicalName \u003d\u003d ReflectionData.NULL_SENTINEL? null : canonicalName;\n    }\n\n    private String getCanonicalName0() {\n        if (isArray()) {\n            String canonicalName \u003d getComponentType().getCanonicalName();\n            if (canonicalName !\u003d null)\n                return canonicalName + \"[]\";\n            else\n                return ReflectionData.NULL_SENTINEL;\n        }\n        if (isLocalOrAnonymousClass())\n            return ReflectionData.NULL_SENTINEL;\n        Class\u003c?\u003e enclosingClass \u003d getEnclosingClass();\n        if (enclosingClass \u003d\u003d null) { // top level class\n            return getName();\n        } else {\n            String enclosingName \u003d enclosingClass.getCanonicalName();\n            if (enclosingName \u003d\u003d null)\n                return ReflectionData.NULL_SENTINEL;\n            return enclosingName + \".\" + getSimpleName();\n        }\n    }\n\n    /**\n     * Returns {@code true} if and only if the underlying class\n     * is an anonymous class.\n     *\n     * @return {@code true} if and only if this class is an anonymous class.\n     * @since 1.5\n     */\n    public boolean isAnonymousClass() {\n        return !isArray() \u0026\u0026 isLocalOrAnonymousClass() \u0026\u0026\n                getSimpleBinaryName0() \u003d\u003d null;\n    }\n\n    /**\n     * Returns {@code true} if and only if the underlying class\n     * is a local class.\n     *\n     * @return {@code true} if and only if this class is a local class.\n     * @since 1.5\n     */\n    public boolean isLocalClass() {\n        return isLocalOrAnonymousClass() \u0026\u0026\n                (isArray() || getSimpleBinaryName0() !\u003d null);\n    }\n\n    /**\n     * Returns {@code true} if and only if the underlying class\n     * is a member class.\n     *\n     * @return {@code true} if and only if this class is a member class.\n     * @since 1.5\n     */\n    public boolean isMemberClass() {\n        return !isLocalOrAnonymousClass() \u0026\u0026 getDeclaringClass0() !\u003d null;\n    }\n\n    /**\n     * Returns the \"simple binary name\" of the underlying class, i.e.,\n     * the binary name without the leading enclosing class name.\n     * Returns {@code null} if the underlying class is a top level\n     * class.\n     */\n    private String getSimpleBinaryName() {\n        if (isTopLevelClass())\n            return null;\n        String name \u003d getSimpleBinaryName0();\n        if (name \u003d\u003d null) // anonymous class\n            return \"\";\n        return name;\n    }\n\n    private native String getSimpleBinaryName0();\n\n    /**\n     * Returns {@code true} if this is a top level class.  Returns {@code false}\n     * otherwise.\n     */\n    private boolean isTopLevelClass() {\n        return !isLocalOrAnonymousClass() \u0026\u0026 getDeclaringClass0() \u003d\u003d null;\n    }\n\n    /**\n     * Returns {@code true} if this is a local class or an anonymous\n     * class.  Returns {@code false} otherwise.\n     */\n    private boolean isLocalOrAnonymousClass() {\n        // JVM Spec 4.7.7: A class must have an EnclosingMethod\n        // attribute if and only if it is a local class or an\n        // anonymous class.\n        return hasEnclosingMethodInfo();\n    }\n\n    private boolean hasEnclosingMethodInfo() {\n        Object[] enclosingInfo \u003d getEnclosingMethod0();\n        if (enclosingInfo !\u003d null) {\n            EnclosingMethodInfo.validate(enclosingInfo);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Returns an array containing {@code Class} objects representing all\n     * the public classes and interfaces that are members of the class\n     * represented by this {@code Class} object.  This includes public\n     * class and interface members inherited from superclasses and public class\n     * and interface members declared by the class.  This method returns an\n     * array of length 0 if this {@code Class} object has no public member\n     * classes or interfaces.  This method also returns an array of length 0 if\n     * this {@code Class} object represents a primitive type, an array\n     * class, or void.\n     *\n     * @return the array of {@code Class} objects representing the public\n     *         members of this class\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and\n     *         the caller\u0027s class loader is not the same as or an\n     *         ancestor of the class loader for the current class and\n     *         invocation of {@link SecurityManager#checkPackageAccess\n     *         s.checkPackageAccess()} denies access to the package\n     *         of this class.\n     *\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Class\u003c?\u003e[] getClasses() {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.PUBLIC, Reflection.getCallerClass(), false);\n        }\n\n        // Privileged so this implementation can look at DECLARED classes,\n        // something the caller might not have privilege to do.  The code here\n        // is allowed to look at DECLARED classes because (1) it does not hand\n        // out anything other than public members and (2) public member access\n        // has already been ok\u0027d by the SecurityManager.\n\n        return java.security.AccessController.doPrivileged(\n            new java.security.PrivilegedAction\u003c\u003e() {\n                public Class\u003c?\u003e[] run() {\n                    List\u003cClass\u003c?\u003e\u003e list \u003d new ArrayList\u003c\u003e();\n                    Class\u003c?\u003e currentClass \u003d Class.this;\n                    while (currentClass !\u003d null) {\n                        for (Class\u003c?\u003e m : currentClass.getDeclaredClasses()) {\n                            if (Modifier.isPublic(m.getModifiers())) {\n                                list.add(m);\n                            }\n                        }\n                        currentClass \u003d currentClass.getSuperclass();\n                    }\n                    return list.toArray(new Class\u003c?\u003e[0]);\n                }\n            });\n    }\n\n\n    /**\n     * Returns an array containing {@code Field} objects reflecting all\n     * the accessible public fields of the class or interface represented by\n     * this {@code Class} object.\n     *\n     * \u003cp\u003e If this {@code Class} object represents a class or interface with\n     * no accessible public fields, then this method returns an array of length\n     * 0.\n     *\n     * \u003cp\u003e If this {@code Class} object represents a class, then this method\n     * returns the public fields of the class and of all its superclasses and\n     * superinterfaces.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an interface, then this\n     * method returns the fields of the interface and of all its\n     * superinterfaces.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an array type, a primitive\n     * type, or void, then this method returns an array of length 0.\n     *\n     * \u003cp\u003e The elements in the returned array are not sorted and are not in any\n     * particular order.\n     *\n     * @return the array of {@code Field} objects representing the\n     *         public fields\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and\n     *         the caller\u0027s class loader is not the same as or an\n     *         ancestor of the class loader for the current class and\n     *         invocation of {@link SecurityManager#checkPackageAccess\n     *         s.checkPackageAccess()} denies access to the package\n     *         of this class.\n     *\n     * @since 1.1\n     * @jls 8.2 Class Members\n     * @jls 8.3 Field Declarations\n     */\n    @CallerSensitive\n    public Field[] getFields() throws SecurityException {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.PUBLIC, Reflection.getCallerClass(), true);\n        }\n        return copyFields(privateGetPublicFields());\n    }\n\n\n    /**\n     * Returns an array containing {@code Method} objects reflecting all the\n     * public methods of the class or interface represented by this {@code\n     * Class} object, including those declared by the class or interface and\n     * those inherited from superclasses and superinterfaces.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an array type, then the\n     * returned array has a {@code Method} object for each of the public\n     * methods inherited by the array type from {@code Object}. It does not\n     * contain a {@code Method} object for {@code clone()}.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an interface then the\n     * returned array does not contain any implicitly declared methods from\n     * {@code Object}. Therefore, if no methods are explicitly declared in\n     * this interface or any of its superinterfaces then the returned array\n     * has length 0. (Note that a {@code Class} object which represents a class\n     * always has public methods, inherited from {@code Object}.)\n     *\n     * \u003cp\u003e The returned array never contains methods with names \"{@code \u003cinit\u003e}\"\n     * or \"{@code \u003cclinit\u003e}\".\n     *\n     * \u003cp\u003e The elements in the returned array are not sorted and are not in any\n     * particular order.\n     *\n     * \u003cp\u003e Generally, the result is computed as with the following 4 step algorithm.\n     * Let C be the class or interface represented by this {@code Class} object:\n     * \u003col\u003e\n     * \u003cli\u003e A union of methods is composed of:\n     *   \u003col type\u003d\"a\"\u003e\n     *   \u003cli\u003e C\u0027s declared public instance and static methods as returned by\n     *        {@link #getDeclaredMethods()} and filtered to include only public\n     *        methods.\u003c/li\u003e\n     *   \u003cli\u003e If C is a class other than {@code Object}, then include the result\n     *        of invoking this algorithm recursively on the superclass of C.\u003c/li\u003e\n     *   \u003cli\u003e Include the results of invoking this algorithm recursively on all\n     *        direct superinterfaces of C, but include only instance methods.\u003c/li\u003e\n     *   \u003c/ol\u003e\u003c/li\u003e\n     * \u003cli\u003e Union from step 1 is partitioned into subsets of methods with same\n     *      signature (name, parameter types) and return type.\u003c/li\u003e\n     * \u003cli\u003e Within each such subset only the most specific methods are selected.\n     *      Let method M be a method from a set of methods with same signature\n     *      and return type. M is most specific if there is no such method\n     *      N !\u003d M from the same set, such that N is more specific than M.\n     *      N is more specific than M if:\n     *   \u003col type\u003d\"a\"\u003e\n     *   \u003cli\u003e N is declared by a class and M is declared by an interface; or\u003c/li\u003e\n     *   \u003cli\u003e N and M are both declared by classes or both by interfaces and\n     *        N\u0027s declaring type is the same as or a subtype of M\u0027s declaring type\n     *        (clearly, if M\u0027s and N\u0027s declaring types are the same type, then\n     *        M and N are the same method).\u003c/li\u003e\n     *   \u003c/ol\u003e\u003c/li\u003e\n     * \u003cli\u003e The result of this algorithm is the union of all selected methods from\n     *      step 3.\u003c/li\u003e\n     * \u003c/ol\u003e\n     *\n     * @apiNote There may be more than one method with a particular name\n     * and parameter types in a class because while the Java language forbids a\n     * class to declare multiple methods with the same signature but different\n     * return types, the Java virtual machine does not.  This\n     * increased flexibility in the virtual machine can be used to\n     * implement various language features.  For example, covariant\n     * returns can be implemented with {@linkplain\n     * java.lang.reflect.Method#isBridge bridge methods}; the bridge\n     * method and the overriding method would have the same\n     * signature but different return types.\n     *\n     * @return the array of {@code Method} objects representing the\n     *         public methods of this class\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and\n     *         the caller\u0027s class loader is not the same as or an\n     *         ancestor of the class loader for the current class and\n     *         invocation of {@link SecurityManager#checkPackageAccess\n     *         s.checkPackageAccess()} denies access to the package\n     *         of this class.\n     *\n     * @jls 8.2 Class Members\n     * @jls 8.4 Method Declarations\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Method[] getMethods() throws SecurityException {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.PUBLIC, Reflection.getCallerClass(), true);\n        }\n        return copyMethods(privateGetPublicMethods());\n    }\n\n\n    /**\n     * Returns an array containing {@code Constructor} objects reflecting\n     * all the public constructors of the class represented by this\n     * {@code Class} object.  An array of length 0 is returned if the\n     * class has no public constructors, or if the class is an array class, or\n     * if the class reflects a primitive type or void.\n     *\n     * Note that while this method returns an array of {@code\n     * Constructor\u003cT\u003e} objects (that is an array of constructors from\n     * this class), the return type of this method is {@code\n     * Constructor\u003c?\u003e[]} and \u003cem\u003enot\u003c/em\u003e {@code Constructor\u003cT\u003e[]} as\n     * might be expected.  This less informative return type is\n     * necessary since after being returned from this method, the\n     * array could be modified to hold {@code Constructor} objects for\n     * different classes, which would violate the type guarantees of\n     * {@code Constructor\u003cT\u003e[]}.\n     *\n     * @return the array of {@code Constructor} objects representing the\n     *         public constructors of this class\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and\n     *         the caller\u0027s class loader is not the same as or an\n     *         ancestor of the class loader for the current class and\n     *         invocation of {@link SecurityManager#checkPackageAccess\n     *         s.checkPackageAccess()} denies access to the package\n     *         of this class.\n     *\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Constructor\u003c?\u003e[] getConstructors() throws SecurityException {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.PUBLIC, Reflection.getCallerClass(), true);\n        }\n        return copyConstructors(privateGetDeclaredConstructors(true));\n    }\n\n\n    /**\n     * Returns a {@code Field} object that reflects the specified public member\n     * field of the class or interface represented by this {@code Class}\n     * object. The {@code name} parameter is a {@code String} specifying the\n     * simple name of the desired field.\n     *\n     * \u003cp\u003e The field to be reflected is determined by the algorithm that\n     * follows.  Let C be the class or interface represented by this object:\n     *\n     * \u003cOL\u003e\n     * \u003cLI\u003e If C declares a public field with the name specified, that is the\n     *      field to be reflected.\u003c/LI\u003e\n     * \u003cLI\u003e If no field was found in step 1 above, this algorithm is applied\n     *      recursively to each direct superinterface of C. The direct\n     *      superinterfaces are searched in the order they were declared.\u003c/LI\u003e\n     * \u003cLI\u003e If no field was found in steps 1 and 2 above, and C has a\n     *      superclass S, then this algorithm is invoked recursively upon S.\n     *      If C has no superclass, then a {@code NoSuchFieldException}\n     *      is thrown.\u003c/LI\u003e\n     * \u003c/OL\u003e\n     *\n     * \u003cp\u003e If this {@code Class} object represents an array type, then this\n     * method does not find the {@code length} field of the array type.\n     *\n     * @param name the field name\n     * @return the {@code Field} object of this class specified by\n     *         {@code name}\n     * @throws NoSuchFieldException if a field with the specified name is\n     *         not found.\n     * @throws NullPointerException if {@code name} is {@code null}\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and\n     *         the caller\u0027s class loader is not the same as or an\n     *         ancestor of the class loader for the current class and\n     *         invocation of {@link SecurityManager#checkPackageAccess\n     *         s.checkPackageAccess()} denies access to the package\n     *         of this class.\n     *\n     * @since 1.1\n     * @jls 8.2 Class Members\n     * @jls 8.3 Field Declarations\n     */\n    @CallerSensitive\n    public Field getField(String name)\n        throws NoSuchFieldException, SecurityException {\n        Objects.requireNonNull(name);\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.PUBLIC, Reflection.getCallerClass(), true);\n        }\n        Field field \u003d getField0(name);\n        if (field \u003d\u003d null) {\n            throw new NoSuchFieldException(name);\n        }\n        return getReflectionFactory().copyField(field);\n    }\n\n\n    /**\n     * Returns a {@code Method} object that reflects the specified public\n     * member method of the class or interface represented by this\n     * {@code Class} object. The {@code name} parameter is a\n     * {@code String} specifying the simple name of the desired method. The\n     * {@code parameterTypes} parameter is an array of {@code Class}\n     * objects that identify the method\u0027s formal parameter types, in declared\n     * order. If {@code parameterTypes} is {@code null}, it is\n     * treated as if it were an empty array.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an array type, then this\n     * method finds any public method inherited by the array type from\n     * {@code Object} except method {@code clone()}.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an interface then this\n     * method does not find any implicitly declared method from\n     * {@code Object}. Therefore, if no methods are explicitly declared in\n     * this interface or any of its superinterfaces, then this method does not\n     * find any method.\n     *\n     * \u003cp\u003e This method does not find any method with name \"{@code \u003cinit\u003e}\" or\n     * \"{@code \u003cclinit\u003e}\".\n     *\n     * \u003cp\u003e Generally, the method to be reflected is determined by the 4 step\n     * algorithm that follows.\n     * Let C be the class or interface represented by this {@code Class} object:\n     * \u003col\u003e\n     * \u003cli\u003e A union of methods is composed of:\n     *   \u003col type\u003d\"a\"\u003e\n     *   \u003cli\u003e C\u0027s declared public instance and static methods as returned by\n     *        {@link #getDeclaredMethods()} and filtered to include only public\n     *        methods that match given {@code name} and {@code parameterTypes}\u003c/li\u003e\n     *   \u003cli\u003e If C is a class other than {@code Object}, then include the result\n     *        of invoking this algorithm recursively on the superclass of C.\u003c/li\u003e\n     *   \u003cli\u003e Include the results of invoking this algorithm recursively on all\n     *        direct superinterfaces of C, but include only instance methods.\u003c/li\u003e\n     *   \u003c/ol\u003e\u003c/li\u003e\n     * \u003cli\u003e This union is partitioned into subsets of methods with same\n     *      return type (the selection of methods from step 1 also guarantees that\n     *      they have the same method name and parameter types).\u003c/li\u003e\n     * \u003cli\u003e Within each such subset only the most specific methods are selected.\n     *      Let method M be a method from a set of methods with same VM\n     *      signature (return type, name, parameter types).\n     *      M is most specific if there is no such method N !\u003d M from the same\n     *      set, such that N is more specific than M. N is more specific than M\n     *      if:\n     *   \u003col type\u003d\"a\"\u003e\n     *   \u003cli\u003e N is declared by a class and M is declared by an interface; or\u003c/li\u003e\n     *   \u003cli\u003e N and M are both declared by classes or both by interfaces and\n     *        N\u0027s declaring type is the same as or a subtype of M\u0027s declaring type\n     *        (clearly, if M\u0027s and N\u0027s declaring types are the same type, then\n     *        M and N are the same method).\u003c/li\u003e\n     *   \u003c/ol\u003e\u003c/li\u003e\n     * \u003cli\u003e The result of this algorithm is chosen arbitrarily from the methods\n     *      with most specific return type among all selected methods from step 3.\n     *      Let R be a return type of a method M from the set of all selected methods\n     *      from step 3. M is a method with most specific return type if there is\n     *      no such method N !\u003d M from the same set, having return type S !\u003d R,\n     *      such that S is a subtype of R as determined by\n     *      R.class.{@link #isAssignableFrom}(S.class).\n     * \u003c/ol\u003e\n     *\n     * @apiNote There may be more than one method with matching name and\n     * parameter types in a class because while the Java language forbids a\n     * class to declare multiple methods with the same signature but different\n     * return types, the Java virtual machine does not.  This\n     * increased flexibility in the virtual machine can be used to\n     * implement various language features.  For example, covariant\n     * returns can be implemented with {@linkplain\n     * java.lang.reflect.Method#isBridge bridge methods}; the bridge\n     * method and the overriding method would have the same\n     * signature but different return types. This method would return the\n     * overriding method as it would have a more specific return type.\n     *\n     * @param name the name of the method\n     * @param parameterTypes the list of parameters\n     * @return the {@code Method} object that matches the specified\n     *         {@code name} and {@code parameterTypes}\n     * @throws NoSuchMethodException if a matching method is not found\n     *         or if the name is \"\u0026lt;init\u0026gt;\"or \"\u0026lt;clinit\u0026gt;\".\n     * @throws NullPointerException if {@code name} is {@code null}\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and\n     *         the caller\u0027s class loader is not the same as or an\n     *         ancestor of the class loader for the current class and\n     *         invocation of {@link SecurityManager#checkPackageAccess\n     *         s.checkPackageAccess()} denies access to the package\n     *         of this class.\n     *\n     * @jls 8.2 Class Members\n     * @jls 8.4 Method Declarations\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Method getMethod(String name, Class\u003c?\u003e... parameterTypes)\n        throws NoSuchMethodException, SecurityException {\n        Objects.requireNonNull(name);\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.PUBLIC, Reflection.getCallerClass(), true);\n        }\n        Method method \u003d getMethod0(name, parameterTypes);\n        if (method \u003d\u003d null) {\n            throw new NoSuchMethodException(methodToString(name, parameterTypes));\n        }\n        return getReflectionFactory().copyMethod(method);\n    }\n\n    /**\n     * Returns a {@code Constructor} object that reflects the specified\n     * public constructor of the class represented by this {@code Class}\n     * object. The {@code parameterTypes} parameter is an array of\n     * {@code Class} objects that identify the constructor\u0027s formal\n     * parameter types, in declared order.\n     *\n     * If this {@code Class} object represents an inner class\n     * declared in a non-static context, the formal parameter types\n     * include the explicit enclosing instance as the first parameter.\n     *\n     * \u003cp\u003e The constructor to reflect is the public constructor of the class\n     * represented by this {@code Class} object whose formal parameter\n     * types match those specified by {@code parameterTypes}.\n     *\n     * @param parameterTypes the parameter array\n     * @return the {@code Constructor} object of the public constructor that\n     *         matches the specified {@code parameterTypes}\n     * @throws NoSuchMethodException if a matching method is not found.\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and\n     *         the caller\u0027s class loader is not the same as or an\n     *         ancestor of the class loader for the current class and\n     *         invocation of {@link SecurityManager#checkPackageAccess\n     *         s.checkPackageAccess()} denies access to the package\n     *         of this class.\n     *\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Constructor\u003cT\u003e getConstructor(Class\u003c?\u003e... parameterTypes)\n        throws NoSuchMethodException, SecurityException\n    {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.PUBLIC, Reflection.getCallerClass(), true);\n        }\n        return getReflectionFactory().copyConstructor(\n            getConstructor0(parameterTypes, Member.PUBLIC));\n    }\n\n\n    /**\n     * Returns an array of {@code Class} objects reflecting all the\n     * classes and interfaces declared as members of the class represented by\n     * this {@code Class} object. This includes public, protected, default\n     * (package) access, and private classes and interfaces declared by the\n     * class, but excludes inherited classes and interfaces.  This method\n     * returns an array of length 0 if the class declares no classes or\n     * interfaces as members, or if this {@code Class} object represents a\n     * primitive type, an array class, or void.\n     *\n     * @return the array of {@code Class} objects representing all the\n     *         declared members of this class\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and any of the\n     *         following conditions is met:\n     *\n     *         \u003cul\u003e\n     *\n     *         \u003cli\u003e the caller\u0027s class loader is not the same as the\n     *         class loader of this class and invocation of\n     *         {@link SecurityManager#checkPermission\n     *         s.checkPermission} method with\n     *         {@code RuntimePermission(\"accessDeclaredMembers\")}\n     *         denies access to the declared classes within this class\n     *\n     *         \u003cli\u003e the caller\u0027s class loader is not the same as or an\n     *         ancestor of the class loader for the current class and\n     *         invocation of {@link SecurityManager#checkPackageAccess\n     *         s.checkPackageAccess()} denies access to the package\n     *         of this class\n     *\n     *         \u003c/ul\u003e\n     *\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Class\u003c?\u003e[] getDeclaredClasses() throws SecurityException {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.DECLARED, Reflection.getCallerClass(), false);\n        }\n        return getDeclaredClasses0();\n    }\n\n\n    /**\n     * Returns an array of {@code Field} objects reflecting all the fields\n     * declared by the class or interface represented by this\n     * {@code Class} object. This includes public, protected, default\n     * (package) access, and private fields, but excludes inherited fields.\n     *\n     * \u003cp\u003e If this {@code Class} object represents a class or interface with no\n     * declared fields, then this method returns an array of length 0.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an array type, a primitive\n     * type, or void, then this method returns an array of length 0.\n     *\n     * \u003cp\u003e The elements in the returned array are not sorted and are not in any\n     * particular order.\n     *\n     * @return  the array of {@code Field} objects representing all the\n     *          declared fields of this class\n     * @throws  SecurityException\n     *          If a security manager, \u003ci\u003es\u003c/i\u003e, is present and any of the\n     *          following conditions is met:\n     *\n     *          \u003cul\u003e\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as the\n     *          class loader of this class and invocation of\n     *          {@link SecurityManager#checkPermission\n     *          s.checkPermission} method with\n     *          {@code RuntimePermission(\"accessDeclaredMembers\")}\n     *          denies access to the declared fields within this class\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as or an\n     *          ancestor of the class loader for the current class and\n     *          invocation of {@link SecurityManager#checkPackageAccess\n     *          s.checkPackageAccess()} denies access to the package\n     *          of this class\n     *\n     *          \u003c/ul\u003e\n     *\n     * @since 1.1\n     * @jls 8.2 Class Members\n     * @jls 8.3 Field Declarations\n     */\n    @CallerSensitive\n    public Field[] getDeclaredFields() throws SecurityException {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.DECLARED, Reflection.getCallerClass(), true);\n        }\n        return copyFields(privateGetDeclaredFields(false));\n    }\n\n\n    /**\n     * Returns an array containing {@code Method} objects reflecting all the\n     * declared methods of the class or interface represented by this {@code\n     * Class} object, including public, protected, default (package)\n     * access, and private methods, but excluding inherited methods.\n     *\n     * \u003cp\u003e If this {@code Class} object represents a type that has multiple\n     * declared methods with the same name and parameter types, but different\n     * return types, then the returned array has a {@code Method} object for\n     * each such method.\n     *\n     * \u003cp\u003e If this {@code Class} object represents a type that has a class\n     * initialization method {@code \u003cclinit\u003e}, then the returned array does\n     * \u003cem\u003enot\u003c/em\u003e have a corresponding {@code Method} object.\n     *\n     * \u003cp\u003e If this {@code Class} object represents a class or interface with no\n     * declared methods, then the returned array has length 0.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an array type, a primitive\n     * type, or void, then the returned array has length 0.\n     *\n     * \u003cp\u003e The elements in the returned array are not sorted and are not in any\n     * particular order.\n     *\n     * @return  the array of {@code Method} objects representing all the\n     *          declared methods of this class\n     * @throws  SecurityException\n     *          If a security manager, \u003ci\u003es\u003c/i\u003e, is present and any of the\n     *          following conditions is met:\n     *\n     *          \u003cul\u003e\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as the\n     *          class loader of this class and invocation of\n     *          {@link SecurityManager#checkPermission\n     *          s.checkPermission} method with\n     *          {@code RuntimePermission(\"accessDeclaredMembers\")}\n     *          denies access to the declared methods within this class\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as or an\n     *          ancestor of the class loader for the current class and\n     *          invocation of {@link SecurityManager#checkPackageAccess\n     *          s.checkPackageAccess()} denies access to the package\n     *          of this class\n     *\n     *          \u003c/ul\u003e\n     *\n     * @jls 8.2 Class Members\n     * @jls 8.4 Method Declarations\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Method[] getDeclaredMethods() throws SecurityException {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.DECLARED, Reflection.getCallerClass(), true);\n        }\n        return copyMethods(privateGetDeclaredMethods(false));\n    }\n\n\n    /**\n     * Returns an array of {@code Constructor} objects reflecting all the\n     * constructors declared by the class represented by this\n     * {@code Class} object. These are public, protected, default\n     * (package) access, and private constructors.  The elements in the array\n     * returned are not sorted and are not in any particular order.  If the\n     * class has a default constructor, it is included in the returned array.\n     * This method returns an array of length 0 if this {@code Class}\n     * object represents an interface, a primitive type, an array class, or\n     * void.\n     *\n     * \u003cp\u003e See \u003cem\u003eThe Java Language Specification\u003c/em\u003e, section 8.2.\n     *\n     * @return  the array of {@code Constructor} objects representing all the\n     *          declared constructors of this class\n     * @throws  SecurityException\n     *          If a security manager, \u003ci\u003es\u003c/i\u003e, is present and any of the\n     *          following conditions is met:\n     *\n     *          \u003cul\u003e\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as the\n     *          class loader of this class and invocation of\n     *          {@link SecurityManager#checkPermission\n     *          s.checkPermission} method with\n     *          {@code RuntimePermission(\"accessDeclaredMembers\")}\n     *          denies access to the declared constructors within this class\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as or an\n     *          ancestor of the class loader for the current class and\n     *          invocation of {@link SecurityManager#checkPackageAccess\n     *          s.checkPackageAccess()} denies access to the package\n     *          of this class\n     *\n     *          \u003c/ul\u003e\n     *\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Constructor\u003c?\u003e[] getDeclaredConstructors() throws SecurityException {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.DECLARED, Reflection.getCallerClass(), true);\n        }\n        return copyConstructors(privateGetDeclaredConstructors(false));\n    }\n\n\n    /**\n     * Returns a {@code Field} object that reflects the specified declared\n     * field of the class or interface represented by this {@code Class}\n     * object. The {@code name} parameter is a {@code String} that specifies\n     * the simple name of the desired field.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an array type, then this\n     * method does not find the {@code length} field of the array type.\n     *\n     * @param name the name of the field\n     * @return  the {@code Field} object for the specified field in this\n     *          class\n     * @throws  NoSuchFieldException if a field with the specified name is\n     *          not found.\n     * @throws  NullPointerException if {@code name} is {@code null}\n     * @throws  SecurityException\n     *          If a security manager, \u003ci\u003es\u003c/i\u003e, is present and any of the\n     *          following conditions is met:\n     *\n     *          \u003cul\u003e\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as the\n     *          class loader of this class and invocation of\n     *          {@link SecurityManager#checkPermission\n     *          s.checkPermission} method with\n     *          {@code RuntimePermission(\"accessDeclaredMembers\")}\n     *          denies access to the declared field\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as or an\n     *          ancestor of the class loader for the current class and\n     *          invocation of {@link SecurityManager#checkPackageAccess\n     *          s.checkPackageAccess()} denies access to the package\n     *          of this class\n     *\n     *          \u003c/ul\u003e\n     *\n     * @since 1.1\n     * @jls 8.2 Class Members\n     * @jls 8.3 Field Declarations\n     */\n    @CallerSensitive\n    public Field getDeclaredField(String name)\n        throws NoSuchFieldException, SecurityException {\n        Objects.requireNonNull(name);\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.DECLARED, Reflection.getCallerClass(), true);\n        }\n        Field field \u003d searchFields(privateGetDeclaredFields(false), name);\n        if (field \u003d\u003d null) {\n            throw new NoSuchFieldException(name);\n        }\n        return getReflectionFactory().copyField(field);\n    }\n\n\n    /**\n     * Returns a {@code Method} object that reflects the specified\n     * declared method of the class or interface represented by this\n     * {@code Class} object. The {@code name} parameter is a\n     * {@code String} that specifies the simple name of the desired\n     * method, and the {@code parameterTypes} parameter is an array of\n     * {@code Class} objects that identify the method\u0027s formal parameter\n     * types, in declared order.  If more than one method with the same\n     * parameter types is declared in a class, and one of these methods has a\n     * return type that is more specific than any of the others, that method is\n     * returned; otherwise one of the methods is chosen arbitrarily.  If the\n     * name is \"\u0026lt;init\u0026gt;\"or \"\u0026lt;clinit\u0026gt;\" a {@code NoSuchMethodException}\n     * is raised.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an array type, then this\n     * method does not find the {@code clone()} method.\n     *\n     * @param name the name of the method\n     * @param parameterTypes the parameter array\n     * @return  the {@code Method} object for the method of this class\n     *          matching the specified name and parameters\n     * @throws  NoSuchMethodException if a matching method is not found.\n     * @throws  NullPointerException if {@code name} is {@code null}\n     * @throws  SecurityException\n     *          If a security manager, \u003ci\u003es\u003c/i\u003e, is present and any of the\n     *          following conditions is met:\n     *\n     *          \u003cul\u003e\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as the\n     *          class loader of this class and invocation of\n     *          {@link SecurityManager#checkPermission\n     *          s.checkPermission} method with\n     *          {@code RuntimePermission(\"accessDeclaredMembers\")}\n     *          denies access to the declared method\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as or an\n     *          ancestor of the class loader for the current class and\n     *          invocation of {@link SecurityManager#checkPackageAccess\n     *          s.checkPackageAccess()} denies access to the package\n     *          of this class\n     *\n     *          \u003c/ul\u003e\n     *\n     * @jls 8.2 Class Members\n     * @jls 8.4 Method Declarations\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Method getDeclaredMethod(String name, Class\u003c?\u003e... parameterTypes)\n        throws NoSuchMethodException, SecurityException {\n        Objects.requireNonNull(name);\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.DECLARED, Reflection.getCallerClass(), true);\n        }\n        Method method \u003d searchMethods(privateGetDeclaredMethods(false), name, parameterTypes);\n        if (method \u003d\u003d null) {\n            throw new NoSuchMethodException(methodToString(name, parameterTypes));\n        }\n        return getReflectionFactory().copyMethod(method);\n    }\n\n    /**\n     * Returns the list of {@code Method} objects for the declared public\n     * methods of this class or interface that have the specified method name\n     * and parameter types.\n     *\n     * @param name the name of the method\n     * @param parameterTypes the parameter array\n     * @return the list of {@code Method} objects for the public methods of\n     *         this class matching the specified name and parameters\n     */\n    List\u003cMethod\u003e getDeclaredPublicMethods(String name, Class\u003c?\u003e... parameterTypes) {\n        Method[] methods \u003d privateGetDeclaredMethods(/* publicOnly */ true);\n        ReflectionFactory factory \u003d getReflectionFactory();\n        List\u003cMethod\u003e result \u003d new ArrayList\u003c\u003e();\n        for (Method method : methods) {\n            if (method.getName().equals(name)\n                \u0026\u0026 Arrays.equals(\n                    factory.getExecutableSharedParameterTypes(method),\n                    parameterTypes)) {\n                result.add(factory.copyMethod(method));\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Returns a {@code Constructor} object that reflects the specified\n     * constructor of the class or interface represented by this\n     * {@code Class} object.  The {@code parameterTypes} parameter is\n     * an array of {@code Class} objects that identify the constructor\u0027s\n     * formal parameter types, in declared order.\n     *\n     * If this {@code Class} object represents an inner class\n     * declared in a non-static context, the formal parameter types\n     * include the explicit enclosing instance as the first parameter.\n     *\n     * @param parameterTypes the parameter array\n     * @return  The {@code Constructor} object for the constructor with the\n     *          specified parameter list\n     * @throws  NoSuchMethodException if a matching method is not found.\n     * @throws  SecurityException\n     *          If a security manager, \u003ci\u003es\u003c/i\u003e, is present and any of the\n     *          following conditions is met:\n     *\n     *          \u003cul\u003e\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as the\n     *          class loader of this class and invocation of\n     *          {@link SecurityManager#checkPermission\n     *          s.checkPermission} method with\n     *          {@code RuntimePermission(\"accessDeclaredMembers\")}\n     *          denies access to the declared constructor\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as or an\n     *          ancestor of the class loader for the current class and\n     *          invocation of {@link SecurityManager#checkPackageAccess\n     *          s.checkPackageAccess()} denies access to the package\n     *          of this class\n     *\n     *          \u003c/ul\u003e\n     *\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Constructor\u003cT\u003e getDeclaredConstructor(Class\u003c?\u003e... parameterTypes)\n        throws NoSuchMethodException, SecurityException\n    {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.DECLARED, Reflection.getCallerClass(), true);\n        }\n\n        return getReflectionFactory().copyConstructor(\n            getConstructor0(parameterTypes, Member.DECLARED));\n    }\n\n    /**\n     * Finds a resource with a given name.\n     *\n     * \u003cp\u003e If this class is in a named {@link Module Module} then this method\n     * will attempt to find the resource in the module. This is done by\n     * delegating to the module\u0027s class loader {@link\n     * ClassLoader#findResource(String,String) findResource(String,String)}\n     * method, invoking it with the module name and the absolute name of the\n     * resource. Resources in named modules are subject to the rules for\n     * encapsulation specified in the {@code Module} {@link\n     * Module#getResourceAsStream getResourceAsStream} method and so this\n     * method returns {@code null} when the resource is a\n     * non-\"{@code .class}\" resource in a package that is not open to the\n     * caller\u0027s module.\n     *\n     * \u003cp\u003e Otherwise, if this class is not in a named module then the rules for\n     * searching resources associated with a given class are implemented by the\n     * defining {@linkplain ClassLoader class loader} of the class.  This method\n     * delegates to this object\u0027s class loader.  If this object was loaded by\n     * the bootstrap class loader, the method delegates to {@link\n     * ClassLoader#getSystemResourceAsStream}.\n     *\n     * \u003cp\u003e Before delegation, an absolute resource name is constructed from the\n     * given resource name using this algorithm:\n     *\n     * \u003cul\u003e\n     *\n     * \u003cli\u003e If the {@code name} begins with a {@code \u0027/\u0027}\n     * (\u003ccode\u003e\u0027\u0026#92;u002f\u0027\u003c/code\u003e), then the absolute name of the resource is the\n     * portion of the {@code name} following the {@code \u0027/\u0027}.\n     *\n     * \u003cli\u003e Otherwise, the absolute name is of the following form:\n     *\n     * \u003cblockquote\u003e\n     *   {@code modified_package_name/name}\n     * \u003c/blockquote\u003e\n     *\n     * \u003cp\u003e Where the {@code modified_package_name} is the package name of this\n     * object with {@code \u0027/\u0027} substituted for {@code \u0027.\u0027}\n     * (\u003ccode\u003e\u0027\u0026#92;u002e\u0027\u003c/code\u003e).\n     *\n     * \u003c/ul\u003e\n     *\n     * @param  name name of the desired resource\n     * @return  A {@link java.io.InputStream} object; {@code null} if no\n     *          resource with this name is found, the resource is in a package\n     *          that is not {@linkplain Module#isOpen(String, Module) open} to at\n     *          least the caller module, or access to the resource is denied\n     *          by the security manager.\n     * @throws  NullPointerException If {@code name} is {@code null}\n     *\n     * @see Module#getResourceAsStream(String)\n     * @since  1.1\n     * @revised 9\n     * @spec JPMS\n     */\n    @CallerSensitive\n    public InputStream getResourceAsStream(String name) {\n        name \u003d resolveName(name);\n\n        Module thisModule \u003d getModule();\n        if (thisModule.isNamed()) {\n            // check if resource can be located by caller\n            if (Resources.canEncapsulate(name)\n                \u0026\u0026 !isOpenToCaller(name, Reflection.getCallerClass())) {\n                return null;\n            }\n\n            // resource not encapsulated or in package open to caller\n            String mn \u003d thisModule.getName();\n            ClassLoader cl \u003d getClassLoader0();\n            try {\n\n                // special-case built-in class loaders to avoid the\n                // need for a URL connection\n                if (cl \u003d\u003d null) {\n                    return BootLoader.findResourceAsStream(mn, name);\n                } else if (cl instanceof BuiltinClassLoader) {\n                    return ((BuiltinClassLoader) cl).findResourceAsStream(mn, name);\n                } else {\n                    URL url \u003d cl.findResource(mn, name);\n                    return (url !\u003d null) ? url.openStream() : null;\n                }\n\n            } catch (IOException | SecurityException e) {\n                return null;\n            }\n        }\n\n        // unnamed module\n        ClassLoader cl \u003d getClassLoader0();\n        if (cl \u003d\u003d null) {\n            return ClassLoader.getSystemResourceAsStream(name);\n        } else {\n            return cl.getResourceAsStream(name);\n        }\n    }\n\n    /**\n     * Finds a resource with a given name.\n     *\n     * \u003cp\u003e If this class is in a named {@link Module Module} then this method\n     * will attempt to find the resource in the module. This is done by\n     * delegating to the module\u0027s class loader {@link\n     * ClassLoader#findResource(String,String) findResource(String,String)}\n     * method, invoking it with the module name and the absolute name of the\n     * resource. Resources in named modules are subject to the rules for\n     * encapsulation specified in the {@code Module} {@link\n     * Module#getResourceAsStream getResourceAsStream} method and so this\n     * method returns {@code null} when the resource is a\n     * non-\"{@code .class}\" resource in a package that is not open to the\n     * caller\u0027s module.\n     *\n     * \u003cp\u003e Otherwise, if this class is not in a named module then the rules for\n     * searching resources associated with a given class are implemented by the\n     * defining {@linkplain ClassLoader class loader} of the class.  This method\n     * delegates to this object\u0027s class loader. If this object was loaded by\n     * the bootstrap class loader, the method delegates to {@link\n     * ClassLoader#getSystemResource}.\n     *\n     * \u003cp\u003e Before delegation, an absolute resource name is constructed from the\n     * given resource name using this algorithm:\n     *\n     * \u003cul\u003e\n     *\n     * \u003cli\u003e If the {@code name} begins with a {@code \u0027/\u0027}\n     * (\u003ccode\u003e\u0027\u0026#92;u002f\u0027\u003c/code\u003e), then the absolute name of the resource is the\n     * portion of the {@code name} following the {@code \u0027/\u0027}.\n     *\n     * \u003cli\u003e Otherwise, the absolute name is of the following form:\n     *\n     * \u003cblockquote\u003e\n     *   {@code modified_package_name/name}\n     * \u003c/blockquote\u003e\n     *\n     * \u003cp\u003e Where the {@code modified_package_name} is the package name of this\n     * object with {@code \u0027/\u0027} substituted for {@code \u0027.\u0027}\n     * (\u003ccode\u003e\u0027\u0026#92;u002e\u0027\u003c/code\u003e).\n     *\n     * \u003c/ul\u003e\n     *\n     * @param  name name of the desired resource\n     * @return A {@link java.net.URL} object; {@code null} if no resource with\n     *         this name is found, the resource cannot be located by a URL, the\n     *         resource is in a package that is not\n     *         {@linkplain Module#isOpen(String, Module) open} to at least the caller\n     *         module, or access to the resource is denied by the security\n     *         manager.\n     * @throws NullPointerException If {@code name} is {@code null}\n     * @since  1.1\n     * @revised 9\n     * @spec JPMS\n     */\n    @CallerSensitive\n    public URL getResource(String name) {\n        name \u003d resolveName(name);\n\n        Module thisModule \u003d getModule();\n        if (thisModule.isNamed()) {\n            // check if resource can be located by caller\n            if (Resources.canEncapsulate(name)\n                \u0026\u0026 !isOpenToCaller(name, Reflection.getCallerClass())) {\n                return null;\n            }\n\n            // resource not encapsulated or in package open to caller\n            String mn \u003d thisModule.getName();\n            ClassLoader cl \u003d getClassLoader0();\n            try {\n                if (cl \u003d\u003d null) {\n                    return BootLoader.findResource(mn, name);\n                } else {\n                    return cl.findResource(mn, name);\n                }\n            } catch (IOException ioe) {\n                return null;\n            }\n        }\n\n        // unnamed module\n        ClassLoader cl \u003d getClassLoader0();\n        if (cl \u003d\u003d null) {\n            return ClassLoader.getSystemResource(name);\n        } else {\n            return cl.getResource(name);\n        }\n    }\n\n    /**\n     * Returns true if a resource with the given name can be located by the\n     * given caller. All resources in a module can be located by code in\n     * the module. For other callers, then the package needs to be open to\n     * the caller.\n     */\n    private boolean isOpenToCaller(String name, Class\u003c?\u003e caller) {\n        // assert getModule().isNamed();\n        Module thisModule \u003d getModule();\n        Module callerModule \u003d (caller !\u003d null) ? caller.getModule() : null;\n        if (callerModule !\u003d thisModule) {\n            String pn \u003d Resources.toPackageName(name);\n            if (thisModule.getDescriptor().packages().contains(pn)) {\n                if (callerModule \u003d\u003d null \u0026\u0026 !thisModule.isOpen(pn)) {\n                    // no caller, package not open\n                    return false;\n                }\n                if (!thisModule.isOpen(pn, callerModule)) {\n                    // package not open to caller\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n\n    /** protection domain returned when the internal domain is null */\n    private static java.security.ProtectionDomain allPermDomain;\n\n    /**\n     * Returns the {@code ProtectionDomain} of this class.  If there is a\n     * security manager installed, this method first calls the security\n     * manager\u0027s {@code checkPermission} method with a\n     * {@code RuntimePermission(\"getProtectionDomain\")} permission to\n     * ensure it\u0027s ok to get the\n     * {@code ProtectionDomain}.\n     *\n     * @return the ProtectionDomain of this class\n     *\n     * @throws SecurityException\n     *        if a security manager exists and its\n     *        {@code checkPermission} method doesn\u0027t allow\n     *        getting the ProtectionDomain.\n     *\n     * @see java.security.ProtectionDomain\n     * @see SecurityManager#checkPermission\n     * @see java.lang.RuntimePermission\n     * @since 1.2\n     */\n    public java.security.ProtectionDomain getProtectionDomain() {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            sm.checkPermission(SecurityConstants.GET_PD_PERMISSION);\n        }\n        java.security.ProtectionDomain pd \u003d getProtectionDomain0();\n        if (pd \u003d\u003d null) {\n            if (allPermDomain \u003d\u003d null) {\n                java.security.Permissions perms \u003d\n                    new java.security.Permissions();\n                perms.add(SecurityConstants.ALL_PERMISSION);\n                allPermDomain \u003d\n                    new java.security.ProtectionDomain(null, perms);\n            }\n            pd \u003d allPermDomain;\n        }\n        return pd;\n    }\n\n\n    /**\n     * Returns the ProtectionDomain of this class.\n     */\n    private native java.security.ProtectionDomain getProtectionDomain0();\n\n    /*\n     * Return the Virtual Machine\u0027s Class object for the named\n     * primitive type.\n     */\n    static native Class\u003c?\u003e getPrimitiveClass(String name);\n\n    /*\n     * Check if client is allowed to access members.  If access is denied,\n     * throw a SecurityException.\n     *\n     * This method also enforces package access.\n     *\n     * \u003cp\u003e Default policy: allow all clients access with normal Java access\n     * control.\n     *\n     * \u003cp\u003e NOTE: should only be called if a SecurityManager is installed\n     */\n    private void checkMemberAccess(SecurityManager sm, int which,\n                                   Class\u003c?\u003e caller, boolean checkProxyInterfaces) {\n        /* Default policy allows access to all {@link Member#PUBLIC} members,\n         * as well as access to classes that have the same class loader as the caller.\n         * In all other cases, it requires RuntimePermission(\"accessDeclaredMembers\")\n         * permission.\n         */\n        final ClassLoader ccl \u003d ClassLoader.getClassLoader(caller);\n        if (which !\u003d Member.PUBLIC) {\n            final ClassLoader cl \u003d getClassLoader0();\n            if (ccl !\u003d cl) {\n                sm.checkPermission(SecurityConstants.CHECK_MEMBER_ACCESS_PERMISSION);\n            }\n        }\n        this.checkPackageAccess(sm, ccl, checkProxyInterfaces);\n    }\n\n    /*\n     * Checks if a client loaded in ClassLoader ccl is allowed to access this\n     * class under the current package access policy. If access is denied,\n     * throw a SecurityException.\n     *\n     * NOTE: this method should only be called if a SecurityManager is active\n     */\n    private void checkPackageAccess(SecurityManager sm, final ClassLoader ccl,\n                                    boolean checkProxyInterfaces) {\n        final ClassLoader cl \u003d getClassLoader0();\n\n        if (ReflectUtil.needsPackageAccessCheck(ccl, cl)) {\n            String pkg \u003d this.getPackageName();\n            if (pkg !\u003d null \u0026\u0026 !pkg.isEmpty()) {\n                // skip the package access check on a proxy class in default proxy package\n                if (!Proxy.isProxyClass(this) || ReflectUtil.isNonPublicProxyClass(this)) {\n                    sm.checkPackageAccess(pkg);\n                }\n            }\n        }\n        // check package access on the proxy interfaces\n        if (checkProxyInterfaces \u0026\u0026 Proxy.isProxyClass(this)) {\n            ReflectUtil.checkProxyPackageAccess(ccl, this.getInterfaces());\n        }\n    }\n\n    /**\n     * Add a package name prefix if the name is not absolute Remove leading \"/\"\n     * if name is absolute\n     */\n    private String resolveName(String name) {\n        if (!name.startsWith(\"/\")) {\n            Class\u003c?\u003e c \u003d this;\n            while (c.isArray()) {\n                c \u003d c.getComponentType();\n            }\n            String baseName \u003d c.getPackageName();\n            if (baseName !\u003d null \u0026\u0026 !baseName.isEmpty()) {\n                name \u003d baseName.replace(\u0027.\u0027, \u0027/\u0027) + \"/\" + name;\n            }\n        } else {\n            name \u003d name.substring(1);\n        }\n        return name;\n    }\n\n    /**\n     * Atomic operations support.\n     */\n    private static class Atomic {\n        // initialize Unsafe machinery here, since we need to call Class.class instance method\n        // and have to avoid calling it in the static initializer of the Class class...\n        private static final Unsafe unsafe \u003d Unsafe.getUnsafe();\n        // offset of Class.reflectionData instance field\n        private static final long reflectionDataOffset\n                \u003d unsafe.objectFieldOffset(Class.class, \"reflectionData\");\n        // offset of Class.annotationType instance field\n        private static final long annotationTypeOffset\n                \u003d unsafe.objectFieldOffset(Class.class, \"annotationType\");\n        // offset of Class.annotationData instance field\n        private static final long annotationDataOffset\n                \u003d unsafe.objectFieldOffset(Class.class, \"annotationData\");\n\n        static \u003cT\u003e boolean casReflectionData(Class\u003c?\u003e clazz,\n                                             SoftReference\u003cReflectionData\u003cT\u003e\u003e oldData,\n                                             SoftReference\u003cReflectionData\u003cT\u003e\u003e newData) {\n            return unsafe.compareAndSetObject(clazz, reflectionDataOffset, oldData, newData);\n        }\n\n        static \u003cT\u003e boolean casAnnotationType(Class\u003c?\u003e clazz,\n                                             AnnotationType oldType,\n                                             AnnotationType newType) {\n            return unsafe.compareAndSetObject(clazz, annotationTypeOffset, oldType, newType);\n        }\n\n        static \u003cT\u003e boolean casAnnotationData(Class\u003c?\u003e clazz,\n                                             AnnotationData oldData,\n                                             AnnotationData newData) {\n            return unsafe.compareAndSetObject(clazz, annotationDataOffset, oldData, newData);\n        }\n    }\n\n    /**\n     * Reflection support.\n     */\n\n    // Reflection data caches various derived names and reflective members. Cached\n    // values may be invalidated when JVM TI RedefineClasses() is called\n    private static class ReflectionData\u003cT\u003e {\n        volatile Field[] declaredFields;\n        volatile Field[] publicFields;\n        volatile Method[] declaredMethods;\n        volatile Method[] publicMethods;\n        volatile Constructor\u003cT\u003e[] declaredConstructors;\n        volatile Constructor\u003cT\u003e[] publicConstructors;\n        // Intermediate results for getFields and getMethods\n        volatile Field[] declaredPublicFields;\n        volatile Method[] declaredPublicMethods;\n        volatile Class\u003c?\u003e[] interfaces;\n\n        // Cached names\n        String simpleName;\n        String canonicalName;\n        static final String NULL_SENTINEL \u003d new String();\n\n        // Value of classRedefinedCount when we created this ReflectionData instance\n        final int redefinedCount;\n\n        ReflectionData(int redefinedCount) {\n            this.redefinedCount \u003d redefinedCount;\n        }\n    }\n\n    private transient volatile SoftReference\u003cReflectionData\u003cT\u003e\u003e reflectionData;\n\n    // Incremented by the VM on each call to JVM TI RedefineClasses()\n    // that redefines this class or a superclass.\n    private transient volatile int classRedefinedCount;\n\n    // Lazily create and cache ReflectionData\n    private ReflectionData\u003cT\u003e reflectionData() {\n        SoftReference\u003cReflectionData\u003cT\u003e\u003e reflectionData \u003d this.reflectionData;\n        int classRedefinedCount \u003d this.classRedefinedCount;\n        ReflectionData\u003cT\u003e rd;\n        if (reflectionData !\u003d null \u0026\u0026\n            (rd \u003d reflectionData.get()) !\u003d null \u0026\u0026\n            rd.redefinedCount \u003d\u003d classRedefinedCount) {\n            return rd;\n        }\n        // else no SoftReference or cleared SoftReference or stale ReflectionData\n        // -\u003e create and replace new instance\n        return newReflectionData(reflectionData, classRedefinedCount);\n    }\n\n    private ReflectionData\u003cT\u003e newReflectionData(SoftReference\u003cReflectionData\u003cT\u003e\u003e oldReflectionData,\n                                                int classRedefinedCount) {\n        while (true) {\n            ReflectionData\u003cT\u003e rd \u003d new ReflectionData\u003c\u003e(classRedefinedCount);\n            // try to CAS it...\n            if (Atomic.casReflectionData(this, oldReflectionData, new SoftReference\u003c\u003e(rd))) {\n                return rd;\n            }\n            // else retry\n            oldReflectionData \u003d this.reflectionData;\n            classRedefinedCount \u003d this.classRedefinedCount;\n            if (oldReflectionData !\u003d null \u0026\u0026\n                (rd \u003d oldReflectionData.get()) !\u003d null \u0026\u0026\n                rd.redefinedCount \u003d\u003d classRedefinedCount) {\n                return rd;\n            }\n        }\n    }\n\n    // Generic signature handling\n    private native String getGenericSignature0();\n\n    // Generic info repository; lazily initialized\n    private transient volatile ClassRepository genericInfo;\n\n    // accessor for factory\n    private GenericsFactory getFactory() {\n        // create scope and factory\n        return CoreReflectionFactory.make(this, ClassScope.make(this));\n    }\n\n    // accessor for generic info repository;\n    // generic info is lazily initialized\n    private ClassRepository getGenericInfo() {\n        ClassRepository genericInfo \u003d this.genericInfo;\n        if (genericInfo \u003d\u003d null) {\n            String signature \u003d getGenericSignature0();\n            if (signature \u003d\u003d null) {\n                genericInfo \u003d ClassRepository.NONE;\n            } else {\n                genericInfo \u003d ClassRepository.make(signature, getFactory());\n            }\n            this.genericInfo \u003d genericInfo;\n        }\n        return (genericInfo !\u003d ClassRepository.NONE) ? genericInfo : null;\n    }\n\n    // Annotations handling\n    native byte[] getRawAnnotations();\n    // Since 1.8\n    native byte[] getRawTypeAnnotations();\n    static byte[] getExecutableTypeAnnotationBytes(Executable ex) {\n        return getReflectionFactory().getExecutableTypeAnnotationBytes(ex);\n    }\n\n    native ConstantPool getConstantPool();\n\n    //\n    //\n    // java.lang.reflect.Field handling\n    //\n    //\n\n    // Returns an array of \"root\" fields. These Field objects must NOT\n    // be propagated to the outside world, but must instead be copied\n    // via ReflectionFactory.copyField.\n    private Field[] privateGetDeclaredFields(boolean publicOnly) {\n        Field[] res;\n        ReflectionData\u003cT\u003e rd \u003d reflectionData();\n        if (rd !\u003d null) {\n            res \u003d publicOnly ? rd.declaredPublicFields : rd.declaredFields;\n            if (res !\u003d null) return res;\n        }\n        // No cached value available; request value from VM\n        res \u003d Reflection.filterFields(this, getDeclaredFields0(publicOnly));\n        if (rd !\u003d null) {\n            if (publicOnly) {\n                rd.declaredPublicFields \u003d res;\n            } else {\n                rd.declaredFields \u003d res;\n            }\n        }\n        return res;\n    }\n\n    // Returns an array of \"root\" fields. These Field objects must NOT\n    // be propagated to the outside world, but must instead be copied\n    // via ReflectionFactory.copyField.\n    private Field[] privateGetPublicFields() {\n        Field[] res;\n        ReflectionData\u003cT\u003e rd \u003d reflectionData();\n        if (rd !\u003d null) {\n            res \u003d rd.publicFields;\n            if (res !\u003d null) return res;\n        }\n\n        // Use a linked hash set to ensure order is preserved and\n        // fields from common super interfaces are not duplicated\n        LinkedHashSet\u003cField\u003e fields \u003d new LinkedHashSet\u003c\u003e();\n\n        // Local fields\n        addAll(fields, privateGetDeclaredFields(true));\n\n        // Direct superinterfaces, recursively\n        for (Class\u003c?\u003e si : getInterfaces()) {\n            addAll(fields, si.privateGetPublicFields());\n        }\n\n        // Direct superclass, recursively\n        Class\u003c?\u003e sc \u003d getSuperclass();\n        if (sc !\u003d null) {\n            addAll(fields, sc.privateGetPublicFields());\n        }\n\n        res \u003d fields.toArray(new Field[0]);\n        if (rd !\u003d null) {\n            rd.publicFields \u003d res;\n        }\n        return res;\n    }\n\n    private static void addAll(Collection\u003cField\u003e c, Field[] o) {\n        for (Field f : o) {\n            c.add(f);\n        }\n    }\n\n\n    //\n    //\n    // java.lang.reflect.Constructor handling\n    //\n    //\n\n    // Returns an array of \"root\" constructors. These Constructor\n    // objects must NOT be propagated to the outside world, but must\n    // instead be copied via ReflectionFactory.copyConstructor.\n    private Constructor\u003cT\u003e[] privateGetDeclaredConstructors(boolean publicOnly) {\n        Constructor\u003cT\u003e[] res;\n        ReflectionData\u003cT\u003e rd \u003d reflectionData();\n        if (rd !\u003d null) {\n            res \u003d publicOnly ? rd.publicConstructors : rd.declaredConstructors;\n            if (res !\u003d null) return res;\n        }\n        // No cached value available; request value from VM\n        if (isInterface()) {\n            @SuppressWarnings(\"unchecked\")\n            Constructor\u003cT\u003e[] temporaryRes \u003d (Constructor\u003cT\u003e[]) new Constructor\u003c?\u003e[0];\n            res \u003d temporaryRes;\n        } else {\n            res \u003d getDeclaredConstructors0(publicOnly);\n        }\n        if (rd !\u003d null) {\n            if (publicOnly) {\n                rd.publicConstructors \u003d res;\n            } else {\n                rd.declaredConstructors \u003d res;\n            }\n        }\n        return res;\n    }\n\n    //\n    //\n    // java.lang.reflect.Method handling\n    //\n    //\n\n    // Returns an array of \"root\" methods. These Method objects must NOT\n    // be propagated to the outside world, but must instead be copied\n    // via ReflectionFactory.copyMethod.\n    private Method[] privateGetDeclaredMethods(boolean publicOnly) {\n        Method[] res;\n        ReflectionData\u003cT\u003e rd \u003d reflectionData();\n        if (rd !\u003d null) {\n            res \u003d publicOnly ? rd.declaredPublicMethods : rd.declaredMethods;\n            if (res !\u003d null) return res;\n        }\n        // No cached value available; request value from VM\n        res \u003d Reflection.filterMethods(this, getDeclaredMethods0(publicOnly));\n        if (rd !\u003d null) {\n            if (publicOnly) {\n                rd.declaredPublicMethods \u003d res;\n            } else {\n                rd.declaredMethods \u003d res;\n            }\n        }\n        return res;\n    }\n\n    // Returns an array of \"root\" methods. These Method objects must NOT\n    // be propagated to the outside world, but must instead be copied\n    // via ReflectionFactory.copyMethod.\n    private Method[] privateGetPublicMethods() {\n        Method[] res;\n        ReflectionData\u003cT\u003e rd \u003d reflectionData();\n        if (rd !\u003d null) {\n            res \u003d rd.publicMethods;\n            if (res !\u003d null) return res;\n        }\n\n        // No cached value available; compute value recursively.\n        // Start by fetching public declared methods...\n        PublicMethods pms \u003d new PublicMethods();\n        for (Method m : privateGetDeclaredMethods(/* publicOnly */ true)) {\n            pms.merge(m);\n        }\n        // ...then recur over superclass methods...\n        Class\u003c?\u003e sc \u003d getSuperclass();\n        if (sc !\u003d null) {\n            for (Method m : sc.privateGetPublicMethods()) {\n                pms.merge(m);\n            }\n        }\n        // ...and finally over direct superinterfaces.\n        for (Class\u003c?\u003e intf : getInterfaces(/* cloneArray */ false)) {\n            for (Method m : intf.privateGetPublicMethods()) {\n                // static interface methods are not inherited\n                if (!Modifier.isStatic(m.getModifiers())) {\n                    pms.merge(m);\n                }\n            }\n        }\n\n        res \u003d pms.toArray();\n        if (rd !\u003d null) {\n            rd.publicMethods \u003d res;\n        }\n        return res;\n    }\n\n\n    //\n    // Helpers for fetchers of one field, method, or constructor\n    //\n\n    // This method does not copy the returned Field object!\n    private static Field searchFields(Field[] fields, String name) {\n        for (Field field : fields) {\n            if (field.getName().equals(name)) {\n                return field;\n            }\n        }\n        return null;\n    }\n\n    // Returns a \"root\" Field object. This Field object must NOT\n    // be propagated to the outside world, but must instead be copied\n    // via ReflectionFactory.copyField.\n    private Field getField0(String name) {\n        // Note: the intent is that the search algorithm this routine\n        // uses be equivalent to the ordering imposed by\n        // privateGetPublicFields(). It fetches only the declared\n        // public fields for each class, however, to reduce the number\n        // of Field objects which have to be created for the common\n        // case where the field being requested is declared in the\n        // class which is being queried.\n        Field res;\n        // Search declared public fields\n        if ((res \u003d searchFields(privateGetDeclaredFields(true), name)) !\u003d null) {\n            return res;\n        }\n        // Direct superinterfaces, recursively\n        Class\u003c?\u003e[] interfaces \u003d getInterfaces(/* cloneArray */ false);\n        for (Class\u003c?\u003e c : interfaces) {\n            if ((res \u003d c.getField0(name)) !\u003d null) {\n                return res;\n            }\n        }\n        // Direct superclass, recursively\n        if (!isInterface()) {\n            Class\u003c?\u003e c \u003d getSuperclass();\n            if (c !\u003d null) {\n                if ((res \u003d c.getField0(name)) !\u003d null) {\n                    return res;\n                }\n            }\n        }\n        return null;\n    }\n\n    // This method does not copy the returned Method object!\n    private static Method searchMethods(Method[] methods,\n                                        String name,\n                                        Class\u003c?\u003e[] parameterTypes)\n    {\n        ReflectionFactory fact \u003d getReflectionFactory();\n        Method res \u003d null;\n        for (Method m : methods) {\n            if (m.getName().equals(name)\n                \u0026\u0026 arrayContentsEq(parameterTypes,\n                                   fact.getExecutableSharedParameterTypes(m))\n                \u0026\u0026 (res \u003d\u003d null\n                    || (res.getReturnType() !\u003d m.getReturnType()\n                        \u0026\u0026 res.getReturnType().isAssignableFrom(m.getReturnType()))))\n                res \u003d m;\n        }\n        return res;\n    }\n\n    private static final Class\u003c?\u003e[] EMPTY_CLASS_ARRAY \u003d new Class\u003c?\u003e[0];\n\n    // Returns a \"root\" Method object. This Method object must NOT\n    // be propagated to the outside world, but must instead be copied\n    // via ReflectionFactory.copyMethod.\n    private Method getMethod0(String name, Class\u003c?\u003e[] parameterTypes) {\n        PublicMethods.MethodList res \u003d getMethodsRecursive(\n            name,\n            parameterTypes \u003d\u003d null ? EMPTY_CLASS_ARRAY : parameterTypes,\n            /* includeStatic */ true);\n        return res \u003d\u003d null ? null : res.getMostSpecific();\n    }\n\n    // Returns a list of \"root\" Method objects. These Method objects must NOT\n    // be propagated to the outside world, but must instead be copied\n    // via ReflectionFactory.copyMethod.\n    private PublicMethods.MethodList getMethodsRecursive(String name,\n                                                         Class\u003c?\u003e[] parameterTypes,\n                                                         boolean includeStatic) {\n        // 1st check declared public methods\n        Method[] methods \u003d privateGetDeclaredMethods(/* publicOnly */ true);\n        PublicMethods.MethodList res \u003d PublicMethods.MethodList\n            .filter(methods, name, parameterTypes, includeStatic);\n        // if there is at least one match among declared methods, we need not\n        // search any further as such match surely overrides matching methods\n        // declared in superclass(es) or interface(s).\n        if (res !\u003d null) {\n            return res;\n        }\n\n        // if there was no match among declared methods,\n        // we must consult the superclass (if any) recursively...\n        Class\u003c?\u003e sc \u003d getSuperclass();\n        if (sc !\u003d null) {\n            res \u003d sc.getMethodsRecursive(name, parameterTypes, includeStatic);\n        }\n\n        // ...and coalesce the superclass methods with methods obtained\n        // from directly implemented interfaces excluding static methods...\n        for (Class\u003c?\u003e intf : getInterfaces(/* cloneArray */ false)) {\n            res \u003d PublicMethods.MethodList.merge(\n                res, intf.getMethodsRecursive(name, parameterTypes,\n                                              /* includeStatic */ false));\n        }\n\n        return res;\n    }\n\n    // Returns a \"root\" Constructor object. This Constructor object must NOT\n    // be propagated to the outside world, but must instead be copied\n    // via ReflectionFactory.copyConstructor.\n    private Constructor\u003cT\u003e getConstructor0(Class\u003c?\u003e[] parameterTypes,\n                                        int which) throws NoSuchMethodException\n    {\n        ReflectionFactory fact \u003d getReflectionFactory();\n        Constructor\u003cT\u003e[] constructors \u003d privateGetDeclaredConstructors((which \u003d\u003d Member.PUBLIC));\n        for (Constructor\u003cT\u003e constructor : constructors) {\n            if (arrayContentsEq(parameterTypes,\n                                fact.getExecutableSharedParameterTypes(constructor))) {\n                return constructor;\n            }\n        }\n        throw new NoSuchMethodException(methodToString(\"\u003cinit\u003e\", parameterTypes));\n    }\n\n    //\n    // Other helpers and base implementation\n    //\n\n    private static boolean arrayContentsEq(Object[] a1, Object[] a2) {\n        if (a1 \u003d\u003d null) {\n            return a2 \u003d\u003d null || a2.length \u003d\u003d 0;\n        }\n\n        if (a2 \u003d\u003d null) {\n            return a1.length \u003d\u003d 0;\n        }\n\n        if (a1.length !\u003d a2.length) {\n            return false;\n        }\n\n        for (int i \u003d 0; i \u003c a1.length; i++) {\n            if (a1[i] !\u003d a2[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private static Field[] copyFields(Field[] arg) {\n        Field[] out \u003d new Field[arg.length];\n        ReflectionFactory fact \u003d getReflectionFactory();\n        for (int i \u003d 0; i \u003c arg.length; i++) {\n            out[i] \u003d fact.copyField(arg[i]);\n        }\n        return out;\n    }\n\n    private static Method[] copyMethods(Method[] arg) {\n        Method[] out \u003d new Method[arg.length];\n        ReflectionFactory fact \u003d getReflectionFactory();\n        for (int i \u003d 0; i \u003c arg.length; i++) {\n            out[i] \u003d fact.copyMethod(arg[i]);\n        }\n        return out;\n    }\n\n    private static \u003cU\u003e Constructor\u003cU\u003e[] copyConstructors(Constructor\u003cU\u003e[] arg) {\n        Constructor\u003cU\u003e[] out \u003d arg.clone();\n        ReflectionFactory fact \u003d getReflectionFactory();\n        for (int i \u003d 0; i \u003c out.length; i++) {\n            out[i] \u003d fact.copyConstructor(out[i]);\n        }\n        return out;\n    }\n\n    private native Field[]       getDeclaredFields0(boolean publicOnly);\n    private native Method[]      getDeclaredMethods0(boolean publicOnly);\n    private native Constructor\u003cT\u003e[] getDeclaredConstructors0(boolean publicOnly);\n    private native Class\u003c?\u003e[]   getDeclaredClasses0();\n\n    /**\n     * Helper method to get the method name from arguments.\n     */\n    private String methodToString(String name, Class\u003c?\u003e[] argTypes) {\n        StringJoiner sj \u003d new StringJoiner(\", \", getName() + \".\" + name + \"(\", \")\");\n        if (argTypes !\u003d null) {\n            for (int i \u003d 0; i \u003c argTypes.length; i++) {\n                Class\u003c?\u003e c \u003d argTypes[i];\n                sj.add((c \u003d\u003d null) ? \"null\" : c.getName());\n            }\n        }\n        return sj.toString();\n    }\n\n    /** use serialVersionUID from JDK 1.1 for interoperability */\n    private static final long serialVersionUID \u003d 3206093459760846163L;\n\n\n    /**\n     * Class Class is special cased within the Serialization Stream Protocol.\n     *\n     * A Class instance is written initially into an ObjectOutputStream in the\n     * following format:\n     * \u003cpre\u003e\n     *      {@code TC_CLASS} ClassDescriptor\n     *      A ClassDescriptor is a special cased serialization of\n     *      a {@code java.io.ObjectStreamClass} instance.\n     * \u003c/pre\u003e\n     * A new handle is generated for the initial time the class descriptor\n     * is written into the stream. Future references to the class descriptor\n     * are written as references to the initial class descriptor instance.\n     *\n     * @see java.io.ObjectStreamClass\n     */\n    private static final ObjectStreamField[] serialPersistentFields \u003d\n        new ObjectStreamField[0];\n\n\n    /**\n     * Returns the assertion status that would be assigned to this\n     * class if it were to be initialized at the time this method is invoked.\n     * If this class has had its assertion status set, the most recent\n     * setting will be returned; otherwise, if any package default assertion\n     * status pertains to this class, the most recent setting for the most\n     * specific pertinent package default assertion status is returned;\n     * otherwise, if this class is not a system class (i.e., it has a\n     * class loader) its class loader\u0027s default assertion status is returned;\n     * otherwise, the system class default assertion status is returned.\n     * \u003cp\u003e\n     * Few programmers will have any need for this method; it is provided\n     * for the benefit of the JRE itself.  (It allows a class to determine at\n     * the time that it is initialized whether assertions should be enabled.)\n     * Note that this method is not guaranteed to return the actual\n     * assertion status that was (or will be) associated with the specified\n     * class when it was (or will be) initialized.\n     *\n     * @return the desired assertion status of the specified class.\n     * @see    java.lang.ClassLoader#setClassAssertionStatus\n     * @see    java.lang.ClassLoader#setPackageAssertionStatus\n     * @see    java.lang.ClassLoader#setDefaultAssertionStatus\n     * @since  1.4\n     */\n    public boolean desiredAssertionStatus() {\n        ClassLoader loader \u003d getClassLoader0();\n        // If the loader is null this is a system class, so ask the VM\n        if (loader \u003d\u003d null)\n            return desiredAssertionStatus0(this);\n\n        // If the classloader has been initialized with the assertion\n        // directives, ask it. Otherwise, ask the VM.\n        synchronized(loader.assertionLock) {\n            if (loader.classAssertionStatus !\u003d null) {\n                return loader.desiredAssertionStatus(getName());\n            }\n        }\n        return desiredAssertionStatus0(this);\n    }\n\n    // Retrieves the desired assertion status of this class from the VM\n    private static native boolean desiredAssertionStatus0(Class\u003c?\u003e clazz);\n\n    /**\n     * Returns true if and only if this class was declared as an enum in the\n     * source code.\n     *\n     * @return true if and only if this class was declared as an enum in the\n     *     source code\n     * @since 1.5\n     */\n    public boolean isEnum() {\n        // An enum must both directly extend java.lang.Enum and have\n        // the ENUM bit set; classes for specialized enum constants\n        // don\u0027t do the former.\n        return (this.getModifiers() \u0026 ENUM) !\u003d 0 \u0026\u0026\n        this.getSuperclass() \u003d\u003d java.lang.Enum.class;\n    }\n\n    // Fetches the factory for reflective objects\n    private static ReflectionFactory getReflectionFactory() {\n        if (reflectionFactory \u003d\u003d null) {\n            reflectionFactory \u003d\n                java.security.AccessController.doPrivileged\n                    (new ReflectionFactory.GetReflectionFactoryAction());\n        }\n        return reflectionFactory;\n    }\n    private static ReflectionFactory reflectionFactory;\n\n    /**\n     * Returns the elements of this enum class or null if this\n     * Class object does not represent an enum type.\n     *\n     * @return an array containing the values comprising the enum class\n     *     represented by this Class object in the order they\u0027re\n     *     declared, or null if this Class object does not\n     *     represent an enum type\n     * @since 1.5\n     */\n    public T[] getEnumConstants() {\n        T[] values \u003d getEnumConstantsShared();\n        return (values !\u003d null) ? values.clone() : null;\n    }\n\n    /**\n     * Returns the elements of this enum class or null if this\n     * Class object does not represent an enum type;\n     * identical to getEnumConstants except that the result is\n     * uncloned, cached, and shared by all callers.\n     */\n    T[] getEnumConstantsShared() {\n        T[] constants \u003d enumConstants;\n        if (constants \u003d\u003d null) {\n            if (!isEnum()) return null;\n            try {\n                final Method values \u003d getMethod(\"values\");\n                java.security.AccessController.doPrivileged(\n                    new java.security.PrivilegedAction\u003c\u003e() {\n                        public Void run() {\n                                values.setAccessible(true);\n                                return null;\n                            }\n                        });\n                @SuppressWarnings(\"unchecked\")\n                T[] temporaryConstants \u003d (T[])values.invoke(null);\n                enumConstants \u003d constants \u003d temporaryConstants;\n            }\n            // These can happen when users concoct enum-like classes\n            // that don\u0027t comply with the enum spec.\n            catch (InvocationTargetException | NoSuchMethodException |\n                   IllegalAccessException ex) { return null; }\n        }\n        return constants;\n    }\n    private transient volatile T[] enumConstants;\n\n    /**\n     * Returns a map from simple name to enum constant.  This package-private\n     * method is used internally by Enum to implement\n     * {@code public static \u003cT extends Enum\u003cT\u003e\u003e T valueOf(Class\u003cT\u003e, String)}\n     * efficiently.  Note that the map is returned by this method is\n     * created lazily on first use.  Typically it won\u0027t ever get created.\n     */\n    Map\u003cString, T\u003e enumConstantDirectory() {\n        Map\u003cString, T\u003e directory \u003d enumConstantDirectory;\n        if (directory \u003d\u003d null) {\n            T[] universe \u003d getEnumConstantsShared();\n            if (universe \u003d\u003d null)\n                throw new IllegalArgumentException(\n                    getName() + \" is not an enum type\");\n            directory \u003d new HashMap\u003c\u003e((int)(universe.length / 0.75f) + 1);\n            for (T constant : universe) {\n                directory.put(((Enum\u003c?\u003e)constant).name(), constant);\n            }\n            enumConstantDirectory \u003d directory;\n        }\n        return directory;\n    }\n    private transient volatile Map\u003cString, T\u003e enumConstantDirectory;\n\n    /**\n     * Casts an object to the class or interface represented\n     * by this {@code Class} object.\n     *\n     * @param obj the object to be cast\n     * @return the object after casting, or null if obj is null\n     *\n     * @throws ClassCastException if the object is not\n     * null and is not assignable to the type T.\n     *\n     * @since 1.5\n     */\n    @SuppressWarnings(\"unchecked\")\n    @HotSpotIntrinsicCandidate\n    public T cast(Object obj) {\n        if (obj !\u003d null \u0026\u0026 !isInstance(obj))\n            throw new ClassCastException(cannotCastMsg(obj));\n        return (T) obj;\n    }\n\n    private String cannotCastMsg(Object obj) {\n        return \"Cannot cast \" + obj.getClass().getName() + \" to \" + getName();\n    }\n\n    /**\n     * Casts this {@code Class} object to represent a subclass of the class\n     * represented by the specified class object.  Checks that the cast\n     * is valid, and throws a {@code ClassCastException} if it is not.  If\n     * this method succeeds, it always returns a reference to this class object.\n     *\n     * \u003cp\u003eThis method is useful when a client needs to \"narrow\" the type of\n     * a {@code Class} object to pass it to an API that restricts the\n     * {@code Class} objects that it is willing to accept.  A cast would\n     * generate a compile-time warning, as the correctness of the cast\n     * could not be checked at runtime (because generic types are implemented\n     * by erasure).\n     *\n     * @param \u003cU\u003e the type to cast this class object to\n     * @param clazz the class of the type to cast this class object to\n     * @return this {@code Class} object, cast to represent a subclass of\n     *    the specified class object.\n     * @throws ClassCastException if this {@code Class} object does not\n     *    represent a subclass of the specified class (here \"subclass\" includes\n     *    the class itself).\n     * @since 1.5\n     */\n    @SuppressWarnings(\"unchecked\")\n    public \u003cU\u003e Class\u003c? extends U\u003e asSubclass(Class\u003cU\u003e clazz) {\n        if (clazz.isAssignableFrom(this))\n            return (Class\u003c? extends U\u003e) this;\n        else\n            throw new ClassCastException(this.toString());\n    }\n\n    /**\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.5\n     */\n    @SuppressWarnings(\"unchecked\")\n    public \u003cA extends Annotation\u003e A getAnnotation(Class\u003cA\u003e annotationClass) {\n        Objects.requireNonNull(annotationClass);\n\n        return (A) annotationData().annotations.get(annotationClass);\n    }\n\n    /**\n     * {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.5\n     */\n    @Override\n    public boolean isAnnotationPresent(Class\u003c? extends Annotation\u003e annotationClass) {\n        return GenericDeclaration.super.isAnnotationPresent(annotationClass);\n    }\n\n    /**\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.8\n     */\n    @Override\n    public \u003cA extends Annotation\u003e A[] getAnnotationsByType(Class\u003cA\u003e annotationClass) {\n        Objects.requireNonNull(annotationClass);\n\n        AnnotationData annotationData \u003d annotationData();\n        return AnnotationSupport.getAssociatedAnnotations(annotationData.declaredAnnotations,\n                                                          this,\n                                                          annotationClass);\n    }\n\n    /**\n     * @since 1.5\n     */\n    public Annotation[] getAnnotations() {\n        return AnnotationParser.toArray(annotationData().annotations);\n    }\n\n    /**\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.8\n     */\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public \u003cA extends Annotation\u003e A getDeclaredAnnotation(Class\u003cA\u003e annotationClass) {\n        Objects.requireNonNull(annotationClass);\n\n        return (A) annotationData().declaredAnnotations.get(annotationClass);\n    }\n\n    /**\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.8\n     */\n    @Override\n    public \u003cA extends Annotation\u003e A[] getDeclaredAnnotationsByType(Class\u003cA\u003e annotationClass) {\n        Objects.requireNonNull(annotationClass);\n\n        return AnnotationSupport.getDirectlyAndIndirectlyPresent(annotationData().declaredAnnotations,\n                                                                 annotationClass);\n    }\n\n    /**\n     * @since 1.5\n     */\n    public Annotation[] getDeclaredAnnotations()  {\n        return AnnotationParser.toArray(annotationData().declaredAnnotations);\n    }\n\n    // annotation data that might get invalidated when JVM TI RedefineClasses() is called\n    private static class AnnotationData {\n        final Map\u003cClass\u003c? extends Annotation\u003e, Annotation\u003e annotations;\n        final Map\u003cClass\u003c? extends Annotation\u003e, Annotation\u003e declaredAnnotations;\n\n        // Value of classRedefinedCount when we created this AnnotationData instance\n        final int redefinedCount;\n\n        AnnotationData(Map\u003cClass\u003c? extends Annotation\u003e, Annotation\u003e annotations,\n                       Map\u003cClass\u003c? extends Annotation\u003e, Annotation\u003e declaredAnnotations,\n                       int redefinedCount) {\n            this.annotations \u003d annotations;\n            this.declaredAnnotations \u003d declaredAnnotations;\n            this.redefinedCount \u003d redefinedCount;\n        }\n    }\n\n    // Annotations cache\n    @SuppressWarnings(\"UnusedDeclaration\")\n    private transient volatile AnnotationData annotationData;\n\n    private AnnotationData annotationData() {\n        while (true) { // retry loop\n            AnnotationData annotationData \u003d this.annotationData;\n            int classRedefinedCount \u003d this.classRedefinedCount;\n            if (annotationData !\u003d null \u0026\u0026\n                annotationData.redefinedCount \u003d\u003d classRedefinedCount) {\n                return annotationData;\n            }\n            // null or stale annotationData -\u003e optimistically create new instance\n            AnnotationData newAnnotationData \u003d createAnnotationData(classRedefinedCount);\n            // try to install it\n            if (Atomic.casAnnotationData(this, annotationData, newAnnotationData)) {\n                // successfully installed new AnnotationData\n                return newAnnotationData;\n            }\n        }\n    }\n\n    private AnnotationData createAnnotationData(int classRedefinedCount) {\n        Map\u003cClass\u003c? extends Annotation\u003e, Annotation\u003e declaredAnnotations \u003d\n            AnnotationParser.parseAnnotations(getRawAnnotations(), getConstantPool(), this);\n        Class\u003c?\u003e superClass \u003d getSuperclass();\n        Map\u003cClass\u003c? extends Annotation\u003e, Annotation\u003e annotations \u003d null;\n        if (superClass !\u003d null) {\n            Map\u003cClass\u003c? extends Annotation\u003e, Annotation\u003e superAnnotations \u003d\n                superClass.annotationData().annotations;\n            for (Map.Entry\u003cClass\u003c? extends Annotation\u003e, Annotation\u003e e : superAnnotations.entrySet()) {\n                Class\u003c? extends Annotation\u003e annotationClass \u003d e.getKey();\n                if (AnnotationType.getInstance(annotationClass).isInherited()) {\n                    if (annotations \u003d\u003d null) { // lazy construction\n                        annotations \u003d new LinkedHashMap\u003c\u003e((Math.max(\n                                declaredAnnotations.size(),\n                                Math.min(12, declaredAnnotations.size() + superAnnotations.size())\n                            ) * 4 + 2) / 3\n                        );\n                    }\n                    annotations.put(annotationClass, e.getValue());\n                }\n            }\n        }\n        if (annotations \u003d\u003d null) {\n            // no inherited annotations -\u003e share the Map with declaredAnnotations\n            annotations \u003d declaredAnnotations;\n        } else {\n            // at least one inherited annotation -\u003e declared may override inherited\n            annotations.putAll(declaredAnnotations);\n        }\n        return new AnnotationData(annotations, declaredAnnotations, classRedefinedCount);\n    }\n\n    // Annotation types cache their internal (AnnotationType) form\n\n    @SuppressWarnings(\"UnusedDeclaration\")\n    private transient volatile AnnotationType annotationType;\n\n    boolean casAnnotationType(AnnotationType oldType, AnnotationType newType) {\n        return Atomic.casAnnotationType(this, oldType, newType);\n    }\n\n    AnnotationType getAnnotationType() {\n        return annotationType;\n    }\n\n    Map\u003cClass\u003c? extends Annotation\u003e, Annotation\u003e getDeclaredAnnotationMap() {\n        return annotationData().declaredAnnotations;\n    }\n\n    /* Backing store of user-defined values pertaining to this class.\n     * Maintained by the ClassValue class.\n     */\n    transient ClassValue.ClassValueMap classValueMap;\n\n    /**\n     * Returns an {@code AnnotatedType} object that represents the use of a\n     * type to specify the superclass of the entity represented by this {@code\n     * Class} object. (The \u003cem\u003euse\u003c/em\u003e of type Foo to specify the superclass\n     * in \u0027...  extends Foo\u0027 is distinct from the \u003cem\u003edeclaration\u003c/em\u003e of type\n     * Foo.)\n     *\n     * \u003cp\u003e If this {@code Class} object represents a type whose declaration\n     * does not explicitly indicate an annotated superclass, then the return\n     * value is an {@code AnnotatedType} object representing an element with no\n     * annotations.\n     *\n     * \u003cp\u003e If this {@code Class} represents either the {@code Object} class, an\n     * interface type, an array type, a primitive type, or void, the return\n     * value is {@code null}.\n     *\n     * @return an object representing the superclass\n     * @since 1.8\n     */\n    public AnnotatedType getAnnotatedSuperclass() {\n        if (this \u003d\u003d Object.class ||\n                isInterface() ||\n                isArray() ||\n                isPrimitive() ||\n                this \u003d\u003d Void.TYPE) {\n            return null;\n        }\n\n        return TypeAnnotationParser.buildAnnotatedSuperclass(getRawTypeAnnotations(), getConstantPool(), this);\n    }\n\n    /**\n     * Returns an array of {@code AnnotatedType} objects that represent the use\n     * of types to specify superinterfaces of the entity represented by this\n     * {@code Class} object. (The \u003cem\u003euse\u003c/em\u003e of type Foo to specify a\n     * superinterface in \u0027... implements Foo\u0027 is distinct from the\n     * \u003cem\u003edeclaration\u003c/em\u003e of type Foo.)\n     *\n     * \u003cp\u003e If this {@code Class} object represents a class, the return value is\n     * an array containing objects representing the uses of interface types to\n     * specify interfaces implemented by the class. The order of the objects in\n     * the array corresponds to the order of the interface types used in the\n     * \u0027implements\u0027 clause of the declaration of this {@code Class} object.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an interface, the return\n     * value is an array containing objects representing the uses of interface\n     * types to specify interfaces directly extended by the interface. The\n     * order of the objects in the array corresponds to the order of the\n     * interface types used in the \u0027extends\u0027 clause of the declaration of this\n     * {@code Class} object.\n     *\n     * \u003cp\u003e If this {@code Class} object represents a class or interface whose\n     * declaration does not explicitly indicate any annotated superinterfaces,\n     * the return value is an array of length 0.\n     *\n     * \u003cp\u003e If this {@code Class} object represents either the {@code Object}\n     * class, an array type, a primitive type, or void, the return value is an\n     * array of length 0.\n     *\n     * @return an array representing the superinterfaces\n     * @since 1.8\n     */\n    public AnnotatedType[] getAnnotatedInterfaces() {\n         return TypeAnnotationParser.buildAnnotatedInterfaces(getRawTypeAnnotations(), getConstantPool(), this);\n    }\n\n    private native Class\u003c?\u003e getNestHost0();\n\n    /**\n     * Returns the nest host of the \u003ca href\u003d#nest\u003enest\u003c/a\u003e to which the class\n     * or interface represented by this {@code Class} object belongs.\n     * Every class and interface is a member of exactly one nest.\n     * A class or interface that is not recorded as belonging to a nest\n     * belongs to the nest consisting only of itself, and is the nest\n     * host.\n     *\n     * \u003cp\u003eEach of the {@code Class} objects representing array types,\n     * primitive types, and {@code void} returns {@code this} to indicate\n     * that the represented entity belongs to the nest consisting only of\n     * itself, and is the nest host.\n     *\n     * \u003cp\u003eIf there is a {@linkplain LinkageError linkage error} accessing\n     * the nest host, or if this class or interface is not enumerated as\n     * a member of the nest by the nest host, then it is considered to belong\n     * to its own nest and {@code this} is returned as the host.\n     *\n     * @apiNote A {@code class} file of version 55.0 or greater may record the\n     * host of the nest to which it belongs by using the {@code NestHost}\n     * attribute (JVMS 4.7.28). Alternatively, a {@code class} file of\n     * version 55.0 or greater may act as a nest host by enumerating the nest\u0027s\n     * other members with the\n     * {@code NestMembers} attribute (JVMS 4.7.29).\n     * A {@code class} file of version 54.0 or lower does not use these\n     * attributes.\n     *\n     * @return the nest host of this class or interface\n     *\n     * @throws SecurityException\n     *         If the returned class is not the current class, and\n     *         if a security manager, \u003ci\u003es\u003c/i\u003e, is present and the caller\u0027s\n     *         class loader is not the same as or an ancestor of the class\n     *         loader for the returned class and invocation of {@link\n     *         SecurityManager#checkPackageAccess s.checkPackageAccess()}\n     *         denies access to the package of the returned class\n     * @since 11\n     * @jvms 4.7.28 and 4.7.29 NestHost and NestMembers attributes\n     * @jvms 5.4.4 Access Control\n     */\n    @CallerSensitive\n    public Class\u003c?\u003e getNestHost() {\n        if (isPrimitive() || isArray()) {\n            return this;\n        }\n        Class\u003c?\u003e host;\n        try {\n            host \u003d getNestHost0();\n        } catch (LinkageError e) {\n            // if we couldn\u0027t load our nest-host then we\n            // act as-if we have no nest-host attribute\n            return this;\n        }\n        // if null then nest membership validation failed, so we\n        // act as-if we have no nest-host attribute\n        if (host \u003d\u003d null || host \u003d\u003d this) {\n            return this;\n        }\n        // returning a different class requires a security check\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkPackageAccess(sm,\n                               ClassLoader.getClassLoader(Reflection.getCallerClass()), true);\n        }\n        return host;\n    }\n\n    /**\n     * Determines if the given {@code Class} is a nestmate of the\n     * class or interface represented by this {@code Class} object.\n     * Two classes or interfaces are nestmates\n     * if they have the same {@linkplain #getNestHost() nest host}.\n     *\n     * @param c the class to check\n     * @return {@code true} if this class and {@code c} are members of\n     * the same nest; and {@code false} otherwise.\n     *\n     * @since 11\n     */\n    public boolean isNestmateOf(Class\u003c?\u003e c) {\n        if (this \u003d\u003d c) {\n            return true;\n        }\n        if (isPrimitive() || isArray() ||\n            c.isPrimitive() || c.isArray()) {\n            return false;\n        }\n        try {\n            return getNestHost0() \u003d\u003d c.getNestHost0();\n        } catch (LinkageError e) {\n            return false;\n        }\n    }\n\n    private native Class\u003c?\u003e[] getNestMembers0();\n\n    /**\n     * Returns an array containing {@code Class} objects representing all the\n     * classes and interfaces that are members of the nest to which the class\n     * or interface represented by this {@code Class} object belongs.\n     * The {@linkplain #getNestHost() nest host} of that nest is the zeroth\n     * element of the array. Subsequent elements represent any classes or\n     * interfaces that are recorded by the nest host as being members of\n     * the nest; the order of such elements is unspecified. Duplicates are\n     * permitted.\n     * If the nest host of that nest does not enumerate any members, then the\n     * array has a single element containing {@code this}.\n     *\n     * \u003cp\u003eEach of the {@code Class} objects representing array types,\n     * primitive types, and {@code void} returns an array containing only\n     * {@code this}.\n     *\n     * \u003cp\u003eThis method validates that, for each class or interface which is\n     * recorded as a member of the nest by the nest host, that class or\n     * interface records itself as a member of that same nest. Any exceptions\n     * that occur during this validation are rethrown by this method.\n     *\n     * @return an array of all classes and interfaces in the same nest as\n     * this class\n     *\n     * @throws LinkageError\n     *         If there is any problem loading or validating a nest member or\n     *         its nest host\n     * @throws SecurityException\n     *         If any returned class is not the current class, and\n     *         if a security manager, \u003ci\u003es\u003c/i\u003e, is present and the caller\u0027s\n     *         class loader is not the same as or an ancestor of the class\n     *         loader for that returned class and invocation of {@link\n     *         SecurityManager#checkPackageAccess s.checkPackageAccess()}\n     *         denies access to the package of that returned class\n     *\n     * @since 11\n     * @see #getNestHost()\n     */\n    @CallerSensitive\n    public Class\u003c?\u003e[] getNestMembers() {\n        if (isPrimitive() || isArray()) {\n            return new Class\u003c?\u003e[] { this };\n        }\n        Class\u003c?\u003e[] members \u003d getNestMembers0();\n        // Can\u0027t actually enable this due to bootstrapping issues\n        // assert(members.length !\u003d 1 || members[0] \u003d\u003d this); // expected invariant from VM\n\n        if (members.length \u003e 1) {\n            // If we return anything other than the current class we need\n            // a security check\n            SecurityManager sm \u003d System.getSecurityManager();\n            if (sm !\u003d null) {\n                checkPackageAccess(sm,\n                                   ClassLoader.getClassLoader(Reflection.getCallerClass()), true);\n            }\n        }\n        return members;\n    }\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:339)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

Jan. 30, 2024 10:22:13 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.base/java/lang/Class.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor16.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:358)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

2024.01.30 10:22:13 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java

Uri: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.executeCommand(WorkspaceLspService.scala:703)
	scala.meta.metals.lsp.DelegatingScalaService.executeCommand(DelegatingScalaService.scala:169)
	jdk.internal.reflect.GeneratedMethodAccessor31.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 30, 2024 10:22:13 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didOpen",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.base/java/lang/Class.java",
      "languageId": "java",
      "version": 1,
      "text": "/*\n * Copyright (c) 1994, 2019, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.lang;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.module.ModuleReader;\nimport java.lang.ref.SoftReference;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.ObjectStreamField;\nimport java.lang.reflect.AnnotatedElement;\nimport java.lang.reflect.AnnotatedType;\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Executable;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.GenericArrayType;\nimport java.lang.reflect.GenericDeclaration;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Member;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.Proxy;\nimport java.lang.reflect.Type;\nimport java.lang.reflect.TypeVariable;\nimport java.net.URL;\nimport java.security.AccessController;\nimport java.security.PrivilegedAction;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.StringJoiner;\n\nimport jdk.internal.HotSpotIntrinsicCandidate;\nimport jdk.internal.loader.BootLoader;\nimport jdk.internal.loader.BuiltinClassLoader;\nimport jdk.internal.misc.Unsafe;\nimport jdk.internal.misc.VM;\nimport jdk.internal.module.Resources;\nimport jdk.internal.reflect.CallerSensitive;\nimport jdk.internal.reflect.ConstantPool;\nimport jdk.internal.reflect.Reflection;\nimport jdk.internal.reflect.ReflectionFactory;\nimport jdk.internal.vm.annotation.ForceInline;\nimport sun.reflect.generics.factory.CoreReflectionFactory;\nimport sun.reflect.generics.factory.GenericsFactory;\nimport sun.reflect.generics.repository.ClassRepository;\nimport sun.reflect.generics.repository.MethodRepository;\nimport sun.reflect.generics.repository.ConstructorRepository;\nimport sun.reflect.generics.scope.ClassScope;\nimport sun.security.util.SecurityConstants;\nimport sun.reflect.annotation.*;\nimport sun.reflect.misc.ReflectUtil;\n\n/**\n * Instances of the class {@code Class} represent classes and interfaces\n * in a running Java application. An enum type is a kind of class and an\n * annotation type is a kind of interface. Every array also\n * belongs to a class that is reflected as a {@code Class} object\n * that is shared by all arrays with the same element type and number\n * of dimensions.  The primitive Java types ({@code boolean},\n * {@code byte}, {@code char}, {@code short},\n * {@code int}, {@code long}, {@code float}, and\n * {@code double}), and the keyword {@code void} are also\n * represented as {@code Class} objects.\n *\n * \u003cp\u003e {@code Class} has no public constructor. Instead a {@code Class}\n * object is constructed automatically by the Java Virtual Machine\n * when a class loader invokes one of the\n * {@link ClassLoader#defineClass(String,byte[], int,int) defineClass} methods\n * and passes the bytes of a {@code class} file.\n *\n * \u003cp\u003e The methods of class {@code Class} expose many characteristics of a\n * class or interface. Most characteristics are derived from the {@code class}\n * file that the class loader passed to the Java Virtual Machine. A few\n * characteristics are determined by the class loading environment at run time,\n * such as the module returned by {@link #getModule() getModule()}.\n *\n * \u003cp\u003e Some methods of class {@code Class} expose whether the declaration of\n * a class or interface in Java source code was \u003cem\u003eenclosed\u003c/em\u003e within\n * another declaration. Other methods describe how a class or interface\n * is situated in a \u003cem\u003enest\u003c/em\u003e. A \u003ca id\u003d\"nest\"\u003enest\u003c/a\u003e is a set of\n * classes and interfaces, in the same run-time package, that\n * allow mutual access to their {@code private} members.\n * The classes and interfaces are known as \u003cem\u003enestmates\u003c/em\u003e.\n * One nestmate acts as the\n * \u003cem\u003enest host\u003c/em\u003e, and enumerates the other nestmates which\n * belong to the nest; each of them in turn records it as the nest host.\n * The classes and interfaces which belong to a nest, including its host, are\n * determined when\n * {@code class} files are generated, for example, a Java compiler\n * will typically record a top-level class as the host of a nest where the\n * other members are the classes and interfaces whose declarations are\n * enclosed within the top-level class declaration.\n *\n * \u003cp\u003e The following example uses a {@code Class} object to print the\n * class name of an object:\n *\n * \u003cblockquote\u003e\u003cpre\u003e\n *     void printClassName(Object obj) {\n *         System.out.println(\"The class of \" + obj +\n *                            \" is \" + obj.getClass().getName());\n *     }\n * \u003c/pre\u003e\u003c/blockquote\u003e\n *\n * \u003cp\u003e It is also possible to get the {@code Class} object for a named\n * type (or for void) using a class literal.  See Section 15.8.2 of\n * \u003ccite\u003eThe Java\u0026trade; Language Specification\u003c/cite\u003e.\n * For example:\n *\n * \u003cblockquote\u003e\n *     {@code System.out.println(\"The name of class Foo is: \"+Foo.class.getName());}\n * \u003c/blockquote\u003e\n *\n * @param \u003cT\u003e the type of the class modeled by this {@code Class}\n * object.  For example, the type of {@code String.class} is {@code\n * Class\u003cString\u003e}.  Use {@code Class\u003c?\u003e} if the class being modeled is\n * unknown.\n *\n * @author  unascribed\n * @see     java.lang.ClassLoader#defineClass(byte[], int, int)\n * @since   1.0\n */\npublic final class Class\u003cT\u003e implements java.io.Serializable,\n                              GenericDeclaration,\n                              Type,\n                              AnnotatedElement {\n    private static final int ANNOTATION\u003d 0x00002000;\n    private static final int ENUM      \u003d 0x00004000;\n    private static final int SYNTHETIC \u003d 0x00001000;\n\n    private static native void registerNatives();\n    static {\n        registerNatives();\n    }\n\n    /*\n     * Private constructor. Only the Java Virtual Machine creates Class objects.\n     * This constructor is not used and prevents the default constructor being\n     * generated.\n     */\n    private Class(ClassLoader loader, Class\u003c?\u003e arrayComponentType) {\n        // Initialize final field for classLoader.  The initialization value of non-null\n        // prevents future JIT optimizations from assuming this final field is null.\n        classLoader \u003d loader;\n        componentType \u003d arrayComponentType;\n    }\n\n    /**\n     * Converts the object to a string. The string representation is the\n     * string \"class\" or \"interface\", followed by a space, and then by the\n     * fully qualified name of the class in the format returned by\n     * {@code getName}.  If this {@code Class} object represents a\n     * primitive type, this method returns the name of the primitive type.  If\n     * this {@code Class} object represents void this method returns\n     * \"void\". If this {@code Class} object represents an array type,\n     * this method returns \"class \" followed by {@code getName}.\n     *\n     * @return a string representation of this class object.\n     */\n    public String toString() {\n        return (isInterface() ? \"interface \" : (isPrimitive() ? \"\" : \"class \"))\n            + getName();\n    }\n\n    /**\n     * Returns a string describing this {@code Class}, including\n     * information about modifiers and type parameters.\n     *\n     * The string is formatted as a list of type modifiers, if any,\n     * followed by the kind of type (empty string for primitive types\n     * and {@code class}, {@code enum}, {@code interface}, or\n     * \u003ccode\u003e\u0026#64;\u003c/code\u003e{@code interface}, as appropriate), followed\n     * by the type\u0027s name, followed by an angle-bracketed\n     * comma-separated list of the type\u0027s type parameters, if any.\n     *\n     * A space is used to separate modifiers from one another and to\n     * separate any modifiers from the kind of type. The modifiers\n     * occur in canonical order. If there are no type parameters, the\n     * type parameter list is elided.\n     *\n     * For an array type, the string starts with the type name,\n     * followed by an angle-bracketed comma-separated list of the\n     * type\u0027s type parameters, if any, followed by a sequence of\n     * {@code []} characters, one set of brackets per dimension of\n     * the array.\n     *\n     * \u003cp\u003eNote that since information about the runtime representation\n     * of a type is being generated, modifiers not present on the\n     * originating source code or illegal on the originating source\n     * code may be present.\n     *\n     * @return a string describing this {@code Class}, including\n     * information about modifiers and type parameters\n     *\n     * @since 1.8\n     */\n    public String toGenericString() {\n        if (isPrimitive()) {\n            return toString();\n        } else {\n            StringBuilder sb \u003d new StringBuilder();\n            Class\u003c?\u003e component \u003d this;\n            int arrayDepth \u003d 0;\n\n            if (isArray()) {\n                do {\n                    arrayDepth++;\n                    component \u003d component.getComponentType();\n                } while (component.isArray());\n                sb.append(component.getName());\n            } else {\n                // Class modifiers are a superset of interface modifiers\n                int modifiers \u003d getModifiers() \u0026 Modifier.classModifiers();\n                if (modifiers !\u003d 0) {\n                    sb.append(Modifier.toString(modifiers));\n                    sb.append(\u0027 \u0027);\n                }\n\n                if (isAnnotation()) {\n                    sb.append(\u0027@\u0027);\n                }\n                if (isInterface()) { // Note: all annotation types are interfaces\n                    sb.append(\"interface\");\n                } else {\n                    if (isEnum())\n                        sb.append(\"enum\");\n                    else\n                        sb.append(\"class\");\n                }\n                sb.append(\u0027 \u0027);\n                sb.append(getName());\n            }\n\n            TypeVariable\u003c?\u003e[] typeparms \u003d component.getTypeParameters();\n            if (typeparms.length \u003e 0) {\n                StringJoiner sj \u003d new StringJoiner(\",\", \"\u003c\", \"\u003e\");\n                for(TypeVariable\u003c?\u003e typeparm: typeparms) {\n                    sj.add(typeparm.getTypeName());\n                }\n                sb.append(sj.toString());\n            }\n\n            for (int i \u003d 0; i \u003c arrayDepth; i++)\n                sb.append(\"[]\");\n\n            return sb.toString();\n        }\n    }\n\n    /**\n     * Returns the {@code Class} object associated with the class or\n     * interface with the given string name.  Invoking this method is\n     * equivalent to:\n     *\n     * \u003cblockquote\u003e\n     *  {@code Class.forName(className, true, currentLoader)}\n     * \u003c/blockquote\u003e\n     *\n     * where {@code currentLoader} denotes the defining class loader of\n     * the current class.\n     *\n     * \u003cp\u003e For example, the following code fragment returns the\n     * runtime {@code Class} descriptor for the class named\n     * {@code java.lang.Thread}:\n     *\n     * \u003cblockquote\u003e\n     *   {@code Class t \u003d Class.forName(\"java.lang.Thread\")}\n     * \u003c/blockquote\u003e\n     * \u003cp\u003e\n     * A call to {@code forName(\"X\")} causes the class named\n     * {@code X} to be initialized.\n     *\n     * @param      className   the fully qualified name of the desired class.\n     * @return     the {@code Class} object for the class with the\n     *             specified name.\n     * @exception LinkageError if the linkage fails\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *            by this method fails\n     * @exception ClassNotFoundException if the class cannot be located\n     */\n    @CallerSensitive\n    public static Class\u003c?\u003e forName(String className)\n                throws ClassNotFoundException {\n        Class\u003c?\u003e caller \u003d Reflection.getCallerClass();\n        return forName0(className, true, ClassLoader.getClassLoader(caller), caller);\n    }\n\n\n    /**\n     * Returns the {@code Class} object associated with the class or\n     * interface with the given string name, using the given class loader.\n     * Given the fully qualified name for a class or interface (in the same\n     * format returned by {@code getName}) this method attempts to\n     * locate, load, and link the class or interface.  The specified class\n     * loader is used to load the class or interface.  If the parameter\n     * {@code loader} is null, the class is loaded through the bootstrap\n     * class loader.  The class is initialized only if the\n     * {@code initialize} parameter is {@code true} and if it has\n     * not been initialized earlier.\n     *\n     * \u003cp\u003e If {@code name} denotes a primitive type or void, an attempt\n     * will be made to locate a user-defined class in the unnamed package whose\n     * name is {@code name}. Therefore, this method cannot be used to\n     * obtain any of the {@code Class} objects representing primitive\n     * types or void.\n     *\n     * \u003cp\u003e If {@code name} denotes an array class, the component type of\n     * the array class is loaded but not initialized.\n     *\n     * \u003cp\u003e For example, in an instance method the expression:\n     *\n     * \u003cblockquote\u003e\n     *  {@code Class.forName(\"Foo\")}\n     * \u003c/blockquote\u003e\n     *\n     * is equivalent to:\n     *\n     * \u003cblockquote\u003e\n     *  {@code Class.forName(\"Foo\", true, this.getClass().getClassLoader())}\n     * \u003c/blockquote\u003e\n     *\n     * Note that this method throws errors related to loading, linking or\n     * initializing as specified in Sections 12.2, 12.3 and 12.4 of \u003cem\u003eThe\n     * Java Language Specification\u003c/em\u003e.\n     * Note that this method does not check whether the requested class\n     * is accessible to its caller.\n     *\n     * @param name       fully qualified name of the desired class\n     * @param initialize if {@code true} the class will be initialized.\n     *                   See Section 12.4 of \u003cem\u003eThe Java Language Specification\u003c/em\u003e.\n     * @param loader     class loader from which the class must be loaded\n     * @return           class object representing the desired class\n     *\n     * @exception LinkageError if the linkage fails\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *            by this method fails\n     * @exception ClassNotFoundException if the class cannot be located by\n     *            the specified class loader\n     * @exception SecurityException\n     *            if a security manager is present, and the {@code loader} is\n     *            {@code null}, and the caller\u0027s class loader is not\n     *            {@code null}, and the caller does not have the\n     *            {@link RuntimePermission}{@code (\"getClassLoader\")}\n     *\n     * @see       java.lang.Class#forName(String)\n     * @see       java.lang.ClassLoader\n     * @since     1.2\n     */\n    @CallerSensitive\n    public static Class\u003c?\u003e forName(String name, boolean initialize,\n                                   ClassLoader loader)\n        throws ClassNotFoundException\n    {\n        Class\u003c?\u003e caller \u003d null;\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            // Reflective call to get caller class is only needed if a security manager\n            // is present.  Avoid the overhead of making this call otherwise.\n            caller \u003d Reflection.getCallerClass();\n            if (loader \u003d\u003d null) {\n                ClassLoader ccl \u003d ClassLoader.getClassLoader(caller);\n                if (ccl !\u003d null) {\n                    sm.checkPermission(\n                        SecurityConstants.GET_CLASSLOADER_PERMISSION);\n                }\n            }\n        }\n        return forName0(name, initialize, loader, caller);\n    }\n\n    /** Called after security check for system loader access checks have been made. */\n    private static native Class\u003c?\u003e forName0(String name, boolean initialize,\n                                            ClassLoader loader,\n                                            Class\u003c?\u003e caller)\n        throws ClassNotFoundException;\n\n\n    /**\n     * Returns the {@code Class} with the given \u003ca href\u003d\"ClassLoader.html#name\"\u003e\n     * binary name\u003c/a\u003e in the given module.\n     *\n     * \u003cp\u003e This method attempts to locate, load, and link the class or interface.\n     * It does not run the class initializer.  If the class is not found, this\n     * method returns {@code null}. \u003c/p\u003e\n     *\n     * \u003cp\u003e If the class loader of the given module defines other modules and\n     * the given name is a class defined in a different module, this method\n     * returns {@code null} after the class is loaded. \u003c/p\u003e\n     *\n     * \u003cp\u003e This method does not check whether the requested class is\n     * accessible to its caller. \u003c/p\u003e\n     *\n     * @apiNote\n     * This method returns {@code null} on failure rather than\n     * throwing a {@link ClassNotFoundException}, as is done by\n     * the {@link #forName(String, boolean, ClassLoader)} method.\n     * The security check is a stack-based permission check if the caller\n     * loads a class in another module.\n     *\n     * @param  module   A module\n     * @param  name     The \u003ca href\u003d\"ClassLoader.html#name\"\u003ebinary name\u003c/a\u003e\n     *                  of the class\n     * @return {@code Class} object of the given name defined in the given module;\n     *         {@code null} if not found.\n     *\n     * @throws NullPointerException if the given module or name is {@code null}\n     *\n     * @throws LinkageError if the linkage fails\n     *\n     * @throws SecurityException\n     *         \u003cul\u003e\n     *         \u003cli\u003e if the caller is not the specified module and\n     *         {@code RuntimePermission(\"getClassLoader\")} permission is denied; or\u003c/li\u003e\n     *         \u003cli\u003e access to the module content is denied. For example,\n     *         permission check will be performed when a class loader calls\n     *         {@link ModuleReader#open(String)} to read the bytes of a class file\n     *         in a module.\u003c/li\u003e\n     *         \u003c/ul\u003e\n     *\n     * @since 9\n     * @spec JPMS\n     */\n    @CallerSensitive\n    public static Class\u003c?\u003e forName(Module module, String name) {\n        Objects.requireNonNull(module);\n        Objects.requireNonNull(name);\n\n        ClassLoader cl;\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            Class\u003c?\u003e caller \u003d Reflection.getCallerClass();\n            if (caller !\u003d null \u0026\u0026 caller.getModule() !\u003d module) {\n                // if caller is null, Class.forName is the last java frame on the stack.\n                // java.base has all permissions\n                sm.checkPermission(SecurityConstants.GET_CLASSLOADER_PERMISSION);\n            }\n            PrivilegedAction\u003cClassLoader\u003e pa \u003d module::getClassLoader;\n            cl \u003d AccessController.doPrivileged(pa);\n        } else {\n            cl \u003d module.getClassLoader();\n        }\n\n        if (cl !\u003d null) {\n            return cl.loadClass(module, name);\n        } else {\n            return BootLoader.loadClass(module, name);\n        }\n    }\n\n    /**\n     * Creates a new instance of the class represented by this {@code Class}\n     * object.  The class is instantiated as if by a {@code new}\n     * expression with an empty argument list.  The class is initialized if it\n     * has not already been initialized.\n     *\n     * @deprecated This method propagates any exception thrown by the\n     * nullary constructor, including a checked exception.  Use of\n     * this method effectively bypasses the compile-time exception\n     * checking that would otherwise be performed by the compiler.\n     * The {@link\n     * java.lang.reflect.Constructor#newInstance(java.lang.Object...)\n     * Constructor.newInstance} method avoids this problem by wrapping\n     * any exception thrown by the constructor in a (checked) {@link\n     * java.lang.reflect.InvocationTargetException}.\n     *\n     * \u003cp\u003eThe call\n     *\n     * \u003cpre\u003e{@code\n     * clazz.newInstance()\n     * }\u003c/pre\u003e\n     *\n     * can be replaced by\n     *\n     * \u003cpre\u003e{@code\n     * clazz.getDeclaredConstructor().newInstance()\n     * }\u003c/pre\u003e\n     *\n     * The latter sequence of calls is inferred to be able to throw\n     * the additional exception types {@link\n     * InvocationTargetException} and {@link\n     * NoSuchMethodException}. Both of these exception types are\n     * subclasses of {@link ReflectiveOperationException}.\n     *\n     * @return  a newly allocated instance of the class represented by this\n     *          object.\n     * @throws  IllegalAccessException  if the class or its nullary\n     *          constructor is not accessible.\n     * @throws  InstantiationException\n     *          if this {@code Class} represents an abstract class,\n     *          an interface, an array class, a primitive type, or void;\n     *          or if the class has no nullary constructor;\n     *          or if the instantiation fails for some other reason.\n     * @throws  ExceptionInInitializerError if the initialization\n     *          provoked by this method fails.\n     * @throws  SecurityException\n     *          If a security manager, \u003ci\u003es\u003c/i\u003e, is present and\n     *          the caller\u0027s class loader is not the same as or an\n     *          ancestor of the class loader for the current class and\n     *          invocation of {@link SecurityManager#checkPackageAccess\n     *          s.checkPackageAccess()} denies access to the package\n     *          of this class.\n     */\n    @CallerSensitive\n    @Deprecated(since\u003d\"9\")\n    public T newInstance()\n        throws InstantiationException, IllegalAccessException\n    {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.PUBLIC, Reflection.getCallerClass(), false);\n        }\n\n        // NOTE: the following code may not be strictly correct under\n        // the current Java memory model.\n\n        // Constructor lookup\n        if (cachedConstructor \u003d\u003d null) {\n            if (this \u003d\u003d Class.class) {\n                throw new IllegalAccessException(\n                    \"Can not call newInstance() on the Class for java.lang.Class\"\n                );\n            }\n            try {\n                Class\u003c?\u003e[] empty \u003d {};\n                final Constructor\u003cT\u003e c \u003d getReflectionFactory().copyConstructor(\n                    getConstructor0(empty, Member.DECLARED));\n                // Disable accessibility checks on the constructor\n                // since we have to do the security check here anyway\n                // (the stack depth is wrong for the Constructor\u0027s\n                // security check to work)\n                java.security.AccessController.doPrivileged(\n                    new java.security.PrivilegedAction\u003c\u003e() {\n                        public Void run() {\n                                c.setAccessible(true);\n                                return null;\n                            }\n                        });\n                cachedConstructor \u003d c;\n            } catch (NoSuchMethodException e) {\n                throw (InstantiationException)\n                    new InstantiationException(getName()).initCause(e);\n            }\n        }\n        Constructor\u003cT\u003e tmpConstructor \u003d cachedConstructor;\n        // Security check (same as in java.lang.reflect.Constructor)\n        Class\u003c?\u003e caller \u003d Reflection.getCallerClass();\n        if (newInstanceCallerCache !\u003d caller) {\n            int modifiers \u003d tmpConstructor.getModifiers();\n            Reflection.ensureMemberAccess(caller, this, this, modifiers);\n            newInstanceCallerCache \u003d caller;\n        }\n        // Run constructor\n        try {\n            return tmpConstructor.newInstance((Object[])null);\n        } catch (InvocationTargetException e) {\n            Unsafe.getUnsafe().throwException(e.getTargetException());\n            // Not reached\n            return null;\n        }\n    }\n    private transient volatile Constructor\u003cT\u003e cachedConstructor;\n    private transient volatile Class\u003c?\u003e       newInstanceCallerCache;\n\n\n    /**\n     * Determines if the specified {@code Object} is assignment-compatible\n     * with the object represented by this {@code Class}.  This method is\n     * the dynamic equivalent of the Java language {@code instanceof}\n     * operator. The method returns {@code true} if the specified\n     * {@code Object} argument is non-null and can be cast to the\n     * reference type represented by this {@code Class} object without\n     * raising a {@code ClassCastException.} It returns {@code false}\n     * otherwise.\n     *\n     * \u003cp\u003e Specifically, if this {@code Class} object represents a\n     * declared class, this method returns {@code true} if the specified\n     * {@code Object} argument is an instance of the represented class (or\n     * of any of its subclasses); it returns {@code false} otherwise. If\n     * this {@code Class} object represents an array class, this method\n     * returns {@code true} if the specified {@code Object} argument\n     * can be converted to an object of the array class by an identity\n     * conversion or by a widening reference conversion; it returns\n     * {@code false} otherwise. If this {@code Class} object\n     * represents an interface, this method returns {@code true} if the\n     * class or any superclass of the specified {@code Object} argument\n     * implements this interface; it returns {@code false} otherwise. If\n     * this {@code Class} object represents a primitive type, this method\n     * returns {@code false}.\n     *\n     * @param   obj the object to check\n     * @return  true if {@code obj} is an instance of this class\n     *\n     * @since 1.1\n     */\n    @HotSpotIntrinsicCandidate\n    public native boolean isInstance(Object obj);\n\n\n    /**\n     * Determines if the class or interface represented by this\n     * {@code Class} object is either the same as, or is a superclass or\n     * superinterface of, the class or interface represented by the specified\n     * {@code Class} parameter. It returns {@code true} if so;\n     * otherwise it returns {@code false}. If this {@code Class}\n     * object represents a primitive type, this method returns\n     * {@code true} if the specified {@code Class} parameter is\n     * exactly this {@code Class} object; otherwise it returns\n     * {@code false}.\n     *\n     * \u003cp\u003e Specifically, this method tests whether the type represented by the\n     * specified {@code Class} parameter can be converted to the type\n     * represented by this {@code Class} object via an identity conversion\n     * or via a widening reference conversion. See \u003cem\u003eThe Java Language\n     * Specification\u003c/em\u003e, sections 5.1.1 and 5.1.4 , for details.\n     *\n     * @param cls the {@code Class} object to be checked\n     * @return the {@code boolean} value indicating whether objects of the\n     * type {@code cls} can be assigned to objects of this class\n     * @exception NullPointerException if the specified Class parameter is\n     *            null.\n     * @since 1.1\n     */\n    @HotSpotIntrinsicCandidate\n    public native boolean isAssignableFrom(Class\u003c?\u003e cls);\n\n\n    /**\n     * Determines if the specified {@code Class} object represents an\n     * interface type.\n     *\n     * @return  {@code true} if this object represents an interface;\n     *          {@code false} otherwise.\n     */\n    @HotSpotIntrinsicCandidate\n    public native boolean isInterface();\n\n\n    /**\n     * Determines if this {@code Class} object represents an array class.\n     *\n     * @return  {@code true} if this object represents an array class;\n     *          {@code false} otherwise.\n     * @since   1.1\n     */\n    @HotSpotIntrinsicCandidate\n    public native boolean isArray();\n\n\n    /**\n     * Determines if the specified {@code Class} object represents a\n     * primitive type.\n     *\n     * \u003cp\u003e There are nine predefined {@code Class} objects to represent\n     * the eight primitive types and void.  These are created by the Java\n     * Virtual Machine, and have the same names as the primitive types that\n     * they represent, namely {@code boolean}, {@code byte},\n     * {@code char}, {@code short}, {@code int},\n     * {@code long}, {@code float}, and {@code double}.\n     *\n     * \u003cp\u003e These objects may only be accessed via the following public static\n     * final variables, and are the only {@code Class} objects for which\n     * this method returns {@code true}.\n     *\n     * @return true if and only if this class represents a primitive type\n     *\n     * @see     java.lang.Boolean#TYPE\n     * @see     java.lang.Character#TYPE\n     * @see     java.lang.Byte#TYPE\n     * @see     java.lang.Short#TYPE\n     * @see     java.lang.Integer#TYPE\n     * @see     java.lang.Long#TYPE\n     * @see     java.lang.Float#TYPE\n     * @see     java.lang.Double#TYPE\n     * @see     java.lang.Void#TYPE\n     * @since 1.1\n     */\n    @HotSpotIntrinsicCandidate\n    public native boolean isPrimitive();\n\n    /**\n     * Returns true if this {@code Class} object represents an annotation\n     * type.  Note that if this method returns true, {@link #isInterface()}\n     * would also return true, as all annotation types are also interfaces.\n     *\n     * @return {@code true} if this class object represents an annotation\n     *      type; {@code false} otherwise\n     * @since 1.5\n     */\n    public boolean isAnnotation() {\n        return (getModifiers() \u0026 ANNOTATION) !\u003d 0;\n    }\n\n    /**\n     * Returns {@code true} if this class is a synthetic class;\n     * returns {@code false} otherwise.\n     * @return {@code true} if and only if this class is a synthetic class as\n     *         defined by the Java Language Specification.\n     * @jls 13.1 The Form of a Binary\n     * @since 1.5\n     */\n    public boolean isSynthetic() {\n        return (getModifiers() \u0026 SYNTHETIC) !\u003d 0;\n    }\n\n    /**\n     * Returns the  name of the entity (class, interface, array class,\n     * primitive type, or void) represented by this {@code Class} object,\n     * as a {@code String}.\n     *\n     * \u003cp\u003e If this class object represents a reference type that is not an\n     * array type then the binary name of the class is returned, as specified\n     * by\n     * \u003ccite\u003eThe Java\u0026trade; Language Specification\u003c/cite\u003e.\n     *\n     * \u003cp\u003e If this class object represents a primitive type or void, then the\n     * name returned is a {@code String} equal to the Java language\n     * keyword corresponding to the primitive type or void.\n     *\n     * \u003cp\u003e If this class object represents a class of arrays, then the internal\n     * form of the name consists of the name of the element type preceded by\n     * one or more \u0027{@code [}\u0027 characters representing the depth of the array\n     * nesting.  The encoding of element type names is as follows:\n     *\n     * \u003cblockquote\u003e\u003ctable class\u003d\"striped\"\u003e\n     * \u003ccaption style\u003d\"display:none\"\u003eElement types and encodings\u003c/caption\u003e\n     * \u003cthead\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"col\"\u003e Element Type \u003cth scope\u003d\"col\"\u003e Encoding\n     * \u003c/thead\u003e\n     * \u003ctbody style\u003d\"text-align:left\"\u003e\n     * \u003ctr\u003e\u003cth scope\u003d\"row\"\u003e boolean      \u003ctd style\u003d\"text-align:center\"\u003e Z\n     * \u003ctr\u003e\u003cth scope\u003d\"row\"\u003e byte         \u003ctd style\u003d\"text-align:center\"\u003e B\n     * \u003ctr\u003e\u003cth scope\u003d\"row\"\u003e char         \u003ctd style\u003d\"text-align:center\"\u003e C\n     * \u003ctr\u003e\u003cth scope\u003d\"row\"\u003e class or interface\n     *                                   \u003ctd style\u003d\"text-align:center\"\u003e L\u003ci\u003eclassname\u003c/i\u003e;\n     * \u003ctr\u003e\u003cth scope\u003d\"row\"\u003e double       \u003ctd style\u003d\"text-align:center\"\u003e D\n     * \u003ctr\u003e\u003cth scope\u003d\"row\"\u003e float        \u003ctd style\u003d\"text-align:center\"\u003e F\n     * \u003ctr\u003e\u003cth scope\u003d\"row\"\u003e int          \u003ctd style\u003d\"text-align:center\"\u003e I\n     * \u003ctr\u003e\u003cth scope\u003d\"row\"\u003e long         \u003ctd style\u003d\"text-align:center\"\u003e J\n     * \u003ctr\u003e\u003cth scope\u003d\"row\"\u003e short        \u003ctd style\u003d\"text-align:center\"\u003e S\n     * \u003c/tbody\u003e\n     * \u003c/table\u003e\u003c/blockquote\u003e\n     *\n     * \u003cp\u003e The class or interface name \u003ci\u003eclassname\u003c/i\u003e is the binary name of\n     * the class specified above.\n     *\n     * \u003cp\u003e Examples:\n     * \u003cblockquote\u003e\u003cpre\u003e\n     * String.class.getName()\n     *     returns \"java.lang.String\"\n     * byte.class.getName()\n     *     returns \"byte\"\n     * (new Object[3]).getClass().getName()\n     *     returns \"[Ljava.lang.Object;\"\n     * (new int[3][4][5][6][7][8][9]).getClass().getName()\n     *     returns \"[[[[[[[I\"\n     * \u003c/pre\u003e\u003c/blockquote\u003e\n     *\n     * @return  the name of the class or interface\n     *          represented by this object.\n     */\n    public String getName() {\n        String name \u003d this.name;\n        return name !\u003d null ? name : initClassName();\n    }\n\n    // Cache the name to reduce the number of calls into the VM.\n    // This field would be set by VM itself during initClassName call.\n    private transient String name;\n    private native String initClassName();\n\n    /**\n     * Returns the class loader for the class.  Some implementations may use\n     * null to represent the bootstrap class loader. This method will return\n     * null in such implementations if this class was loaded by the bootstrap\n     * class loader.\n     *\n     * \u003cp\u003eIf this object\n     * represents a primitive type or void, null is returned.\n     *\n     * @return  the class loader that loaded the class or interface\n     *          represented by this object.\n     * @throws  SecurityException\n     *          if a security manager is present, and the caller\u0027s class loader\n     *          is not {@code null} and is not the same as or an ancestor of the\n     *          class loader for the class whose class loader is requested,\n     *          and the caller does not have the\n     *          {@link RuntimePermission}{@code (\"getClassLoader\")}\n     * @see java.lang.ClassLoader\n     * @see SecurityManager#checkPermission\n     * @see java.lang.RuntimePermission\n     */\n    @CallerSensitive\n    @ForceInline // to ensure Reflection.getCallerClass optimization\n    public ClassLoader getClassLoader() {\n        ClassLoader cl \u003d getClassLoader0();\n        if (cl \u003d\u003d null)\n            return null;\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            ClassLoader.checkClassLoaderPermission(cl, Reflection.getCallerClass());\n        }\n        return cl;\n    }\n\n    // Package-private to allow ClassLoader access\n    ClassLoader getClassLoader0() { return classLoader; }\n\n    /**\n     * Returns the module that this class or interface is a member of.\n     *\n     * If this class represents an array type then this method returns the\n     * {@code Module} for the element type. If this class represents a\n     * primitive type or void, then the {@code Module} object for the\n     * {@code java.base} module is returned.\n     *\n     * If this class is in an unnamed module then the {@linkplain\n     * ClassLoader#getUnnamedModule() unnamed} {@code Module} of the class\n     * loader for this class is returned.\n     *\n     * @return the module that this class or interface is a member of\n     *\n     * @since 9\n     * @spec JPMS\n     */\n    public Module getModule() {\n        return module;\n    }\n\n    // set by VM\n    private transient Module module;\n\n    // Initialized in JVM not by private constructor\n    // This field is filtered from reflection access, i.e. getDeclaredField\n    // will throw NoSuchFieldException\n    private final ClassLoader classLoader;\n\n    /**\n     * Returns an array of {@code TypeVariable} objects that represent the\n     * type variables declared by the generic declaration represented by this\n     * {@code GenericDeclaration} object, in declaration order.  Returns an\n     * array of length 0 if the underlying generic declaration declares no type\n     * variables.\n     *\n     * @return an array of {@code TypeVariable} objects that represent\n     *     the type variables declared by this generic declaration\n     * @throws java.lang.reflect.GenericSignatureFormatError if the generic\n     *     signature of this generic declaration does not conform to\n     *     the format specified in\n     *     \u003ccite\u003eThe Java\u0026trade; Virtual Machine Specification\u003c/cite\u003e\n     * @since 1.5\n     */\n    @SuppressWarnings(\"unchecked\")\n    public TypeVariable\u003cClass\u003cT\u003e\u003e[] getTypeParameters() {\n        ClassRepository info \u003d getGenericInfo();\n        if (info !\u003d null)\n            return (TypeVariable\u003cClass\u003cT\u003e\u003e[])info.getTypeParameters();\n        else\n            return (TypeVariable\u003cClass\u003cT\u003e\u003e[])new TypeVariable\u003c?\u003e[0];\n    }\n\n\n    /**\n     * Returns the {@code Class} representing the direct superclass of the\n     * entity (class, interface, primitive type or void) represented by\n     * this {@code Class}.  If this {@code Class} represents either the\n     * {@code Object} class, an interface, a primitive type, or void, then\n     * null is returned.  If this object represents an array class then the\n     * {@code Class} object representing the {@code Object} class is\n     * returned.\n     *\n     * @return the direct superclass of the class represented by this object\n     */\n    @HotSpotIntrinsicCandidate\n    public native Class\u003c? super T\u003e getSuperclass();\n\n\n    /**\n     * Returns the {@code Type} representing the direct superclass of\n     * the entity (class, interface, primitive type or void) represented by\n     * this {@code Class}.\n     *\n     * \u003cp\u003eIf the superclass is a parameterized type, the {@code Type}\n     * object returned must accurately reflect the actual type\n     * parameters used in the source code. The parameterized type\n     * representing the superclass is created if it had not been\n     * created before. See the declaration of {@link\n     * java.lang.reflect.ParameterizedType ParameterizedType} for the\n     * semantics of the creation process for parameterized types.  If\n     * this {@code Class} represents either the {@code Object}\n     * class, an interface, a primitive type, or void, then null is\n     * returned.  If this object represents an array class then the\n     * {@code Class} object representing the {@code Object} class is\n     * returned.\n     *\n     * @throws java.lang.reflect.GenericSignatureFormatError if the generic\n     *     class signature does not conform to the format specified in\n     *     \u003ccite\u003eThe Java\u0026trade; Virtual Machine Specification\u003c/cite\u003e\n     * @throws TypeNotPresentException if the generic superclass\n     *     refers to a non-existent type declaration\n     * @throws java.lang.reflect.MalformedParameterizedTypeException if the\n     *     generic superclass refers to a parameterized type that cannot be\n     *     instantiated  for any reason\n     * @return the direct superclass of the class represented by this object\n     * @since 1.5\n     */\n    public Type getGenericSuperclass() {\n        ClassRepository info \u003d getGenericInfo();\n        if (info \u003d\u003d null) {\n            return getSuperclass();\n        }\n\n        // Historical irregularity:\n        // Generic signature marks interfaces with superclass \u003d Object\n        // but this API returns null for interfaces\n        if (isInterface()) {\n            return null;\n        }\n\n        return info.getSuperclass();\n    }\n\n    /**\n     * Gets the package of this class.\n     *\n     * \u003cp\u003eIf this class represents an array type, a primitive type or void,\n     * this method returns {@code null}.\n     *\n     * @return the package of this class.\n     * @revised 9\n     * @spec JPMS\n     */\n    public Package getPackage() {\n        if (isPrimitive() || isArray()) {\n            return null;\n        }\n        ClassLoader cl \u003d getClassLoader0();\n        return cl !\u003d null ? cl.definePackage(this)\n                          : BootLoader.definePackage(this);\n    }\n\n    /**\n     * Returns the fully qualified package name.\n     *\n     * \u003cp\u003e If this class is a top level class, then this method returns the fully\n     * qualified name of the package that the class is a member of, or the\n     * empty string if the class is in an unnamed package.\n     *\n     * \u003cp\u003e If this class is a member class, then this method is equivalent to\n     * invoking {@code getPackageName()} on the {@linkplain #getEnclosingClass\n     * enclosing class}.\n     *\n     * \u003cp\u003e If this class is a {@linkplain #isLocalClass local class} or an {@linkplain\n     * #isAnonymousClass() anonymous class}, then this method is equivalent to\n     * invoking {@code getPackageName()} on the {@linkplain #getDeclaringClass\n     * declaring class} of the {@linkplain #getEnclosingMethod enclosing method} or\n     * {@linkplain #getEnclosingConstructor enclosing constructor}.\n     *\n     * \u003cp\u003e If this class represents an array type then this method returns the\n     * package name of the element type. If this class represents a primitive\n     * type or void then the package name \"{@code java.lang}\" is returned.\n     *\n     * @return the fully qualified package name\n     *\n     * @since 9\n     * @spec JPMS\n     * @jls 6.7  Fully Qualified Names\n     */\n    public String getPackageName() {\n        String pn \u003d this.packageName;\n        if (pn \u003d\u003d null) {\n            Class\u003c?\u003e c \u003d this;\n            while (c.isArray()) {\n                c \u003d c.getComponentType();\n            }\n            if (c.isPrimitive()) {\n                pn \u003d \"java.lang\";\n            } else {\n                String cn \u003d c.getName();\n                int dot \u003d cn.lastIndexOf(\u0027.\u0027);\n                pn \u003d (dot !\u003d -1) ? cn.substring(0, dot).intern() : \"\";\n            }\n            this.packageName \u003d pn;\n        }\n        return pn;\n    }\n\n    // cached package name\n    private transient String packageName;\n\n    /**\n     * Returns the interfaces directly implemented by the class or interface\n     * represented by this object.\n     *\n     * \u003cp\u003eIf this object represents a class, the return value is an array\n     * containing objects representing all interfaces directly implemented by\n     * the class.  The order of the interface objects in the array corresponds\n     * to the order of the interface names in the {@code implements} clause of\n     * the declaration of the class represented by this object.  For example,\n     * given the declaration:\n     * \u003cblockquote\u003e\n     * {@code class Shimmer implements FloorWax, DessertTopping { ... }}\n     * \u003c/blockquote\u003e\n     * suppose the value of {@code s} is an instance of\n     * {@code Shimmer}; the value of the expression:\n     * \u003cblockquote\u003e\n     * {@code s.getClass().getInterfaces()[0]}\n     * \u003c/blockquote\u003e\n     * is the {@code Class} object that represents interface\n     * {@code FloorWax}; and the value of:\n     * \u003cblockquote\u003e\n     * {@code s.getClass().getInterfaces()[1]}\n     * \u003c/blockquote\u003e\n     * is the {@code Class} object that represents interface\n     * {@code DessertTopping}.\n     *\n     * \u003cp\u003eIf this object represents an interface, the array contains objects\n     * representing all interfaces directly extended by the interface.  The\n     * order of the interface objects in the array corresponds to the order of\n     * the interface names in the {@code extends} clause of the declaration of\n     * the interface represented by this object.\n     *\n     * \u003cp\u003eIf this object represents a class or interface that implements no\n     * interfaces, the method returns an array of length 0.\n     *\n     * \u003cp\u003eIf this object represents a primitive type or void, the method\n     * returns an array of length 0.\n     *\n     * \u003cp\u003eIf this {@code Class} object represents an array type, the\n     * interfaces {@code Cloneable} and {@code java.io.Serializable} are\n     * returned in that order.\n     *\n     * @return an array of interfaces directly implemented by this class\n     */\n    public Class\u003c?\u003e[] getInterfaces() {\n        // defensively copy before handing over to user code\n        return getInterfaces(true);\n    }\n\n    private Class\u003c?\u003e[] getInterfaces(boolean cloneArray) {\n        ReflectionData\u003cT\u003e rd \u003d reflectionData();\n        if (rd \u003d\u003d null) {\n            // no cloning required\n            return getInterfaces0();\n        } else {\n            Class\u003c?\u003e[] interfaces \u003d rd.interfaces;\n            if (interfaces \u003d\u003d null) {\n                interfaces \u003d getInterfaces0();\n                rd.interfaces \u003d interfaces;\n            }\n            // defensively copy if requested\n            return cloneArray ? interfaces.clone() : interfaces;\n        }\n    }\n\n    private native Class\u003c?\u003e[] getInterfaces0();\n\n    /**\n     * Returns the {@code Type}s representing the interfaces\n     * directly implemented by the class or interface represented by\n     * this object.\n     *\n     * \u003cp\u003eIf a superinterface is a parameterized type, the\n     * {@code Type} object returned for it must accurately reflect\n     * the actual type parameters used in the source code. The\n     * parameterized type representing each superinterface is created\n     * if it had not been created before. See the declaration of\n     * {@link java.lang.reflect.ParameterizedType ParameterizedType}\n     * for the semantics of the creation process for parameterized\n     * types.\n     *\n     * \u003cp\u003eIf this object represents a class, the return value is an array\n     * containing objects representing all interfaces directly implemented by\n     * the class.  The order of the interface objects in the array corresponds\n     * to the order of the interface names in the {@code implements} clause of\n     * the declaration of the class represented by this object.\n     *\n     * \u003cp\u003eIf this object represents an interface, the array contains objects\n     * representing all interfaces directly extended by the interface.  The\n     * order of the interface objects in the array corresponds to the order of\n     * the interface names in the {@code extends} clause of the declaration of\n     * the interface represented by this object.\n     *\n     * \u003cp\u003eIf this object represents a class or interface that implements no\n     * interfaces, the method returns an array of length 0.\n     *\n     * \u003cp\u003eIf this object represents a primitive type or void, the method\n     * returns an array of length 0.\n     *\n     * \u003cp\u003eIf this {@code Class} object represents an array type, the\n     * interfaces {@code Cloneable} and {@code java.io.Serializable} are\n     * returned in that order.\n     *\n     * @throws java.lang.reflect.GenericSignatureFormatError\n     *     if the generic class signature does not conform to the format\n     *     specified in\n     *     \u003ccite\u003eThe Java\u0026trade; Virtual Machine Specification\u003c/cite\u003e\n     * @throws TypeNotPresentException if any of the generic\n     *     superinterfaces refers to a non-existent type declaration\n     * @throws java.lang.reflect.MalformedParameterizedTypeException\n     *     if any of the generic superinterfaces refer to a parameterized\n     *     type that cannot be instantiated for any reason\n     * @return an array of interfaces directly implemented by this class\n     * @since 1.5\n     */\n    public Type[] getGenericInterfaces() {\n        ClassRepository info \u003d getGenericInfo();\n        return (info \u003d\u003d null) ?  getInterfaces() : info.getSuperInterfaces();\n    }\n\n\n    /**\n     * Returns the {@code Class} representing the component type of an\n     * array.  If this class does not represent an array class this method\n     * returns null.\n     *\n     * @return the {@code Class} representing the component type of this\n     * class if this class is an array\n     * @see     java.lang.reflect.Array\n     * @since 1.1\n     */\n    public Class\u003c?\u003e getComponentType() {\n        // Only return for array types. Storage may be reused for Class for instance types.\n        if (isArray()) {\n            return componentType;\n        } else {\n            return null;\n        }\n    }\n\n    private final Class\u003c?\u003e componentType;\n\n\n    /**\n     * Returns the Java language modifiers for this class or interface, encoded\n     * in an integer. The modifiers consist of the Java Virtual Machine\u0027s\n     * constants for {@code public}, {@code protected},\n     * {@code private}, {@code final}, {@code static},\n     * {@code abstract} and {@code interface}; they should be decoded\n     * using the methods of class {@code Modifier}.\n     *\n     * \u003cp\u003e If the underlying class is an array class, then its\n     * {@code public}, {@code private} and {@code protected}\n     * modifiers are the same as those of its component type.  If this\n     * {@code Class} represents a primitive type or void, its\n     * {@code public} modifier is always {@code true}, and its\n     * {@code protected} and {@code private} modifiers are always\n     * {@code false}. If this object represents an array class, a\n     * primitive type or void, then its {@code final} modifier is always\n     * {@code true} and its interface modifier is always\n     * {@code false}. The values of its other modifiers are not determined\n     * by this specification.\n     *\n     * \u003cp\u003e The modifier encodings are defined in \u003cem\u003eThe Java Virtual Machine\n     * Specification\u003c/em\u003e, table 4.1.\n     *\n     * @return the {@code int} representing the modifiers for this class\n     * @see     java.lang.reflect.Modifier\n     * @since 1.1\n     */\n    @HotSpotIntrinsicCandidate\n    public native int getModifiers();\n\n\n    /**\n     * Gets the signers of this class.\n     *\n     * @return  the signers of this class, or null if there are no signers.  In\n     *          particular, this method returns null if this object represents\n     *          a primitive type or void.\n     * @since   1.1\n     */\n    public native Object[] getSigners();\n\n\n    /**\n     * Set the signers of this class.\n     */\n    native void setSigners(Object[] signers);\n\n\n    /**\n     * If this {@code Class} object represents a local or anonymous\n     * class within a method, returns a {@link\n     * java.lang.reflect.Method Method} object representing the\n     * immediately enclosing method of the underlying class. Returns\n     * {@code null} otherwise.\n     *\n     * In particular, this method returns {@code null} if the underlying\n     * class is a local or anonymous class immediately enclosed by a type\n     * declaration, instance initializer or static initializer.\n     *\n     * @return the immediately enclosing method of the underlying class, if\n     *     that class is a local or anonymous class; otherwise {@code null}.\n     *\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and any of the\n     *         following conditions is met:\n     *\n     *         \u003cul\u003e\n     *\n     *         \u003cli\u003e the caller\u0027s class loader is not the same as the\n     *         class loader of the enclosing class and invocation of\n     *         {@link SecurityManager#checkPermission\n     *         s.checkPermission} method with\n     *         {@code RuntimePermission(\"accessDeclaredMembers\")}\n     *         denies access to the methods within the enclosing class\n     *\n     *         \u003cli\u003e the caller\u0027s class loader is not the same as or an\n     *         ancestor of the class loader for the enclosing class and\n     *         invocation of {@link SecurityManager#checkPackageAccess\n     *         s.checkPackageAccess()} denies access to the package\n     *         of the enclosing class\n     *\n     *         \u003c/ul\u003e\n     * @since 1.5\n     */\n    @CallerSensitive\n    public Method getEnclosingMethod() throws SecurityException {\n        EnclosingMethodInfo enclosingInfo \u003d getEnclosingMethodInfo();\n\n        if (enclosingInfo \u003d\u003d null)\n            return null;\n        else {\n            if (!enclosingInfo.isMethod())\n                return null;\n\n            MethodRepository typeInfo \u003d MethodRepository.make(enclosingInfo.getDescriptor(),\n                                                              getFactory());\n            Class\u003c?\u003e   returnType       \u003d toClass(typeInfo.getReturnType());\n            Type []    parameterTypes   \u003d typeInfo.getParameterTypes();\n            Class\u003c?\u003e[] parameterClasses \u003d new Class\u003c?\u003e[parameterTypes.length];\n\n            // Convert Types to Classes; returned types *should*\n            // be class objects since the methodDescriptor\u0027s used\n            // don\u0027t have generics information\n            for(int i \u003d 0; i \u003c parameterClasses.length; i++)\n                parameterClasses[i] \u003d toClass(parameterTypes[i]);\n\n            // Perform access check\n            final Class\u003c?\u003e enclosingCandidate \u003d enclosingInfo.getEnclosingClass();\n            SecurityManager sm \u003d System.getSecurityManager();\n            if (sm !\u003d null) {\n                enclosingCandidate.checkMemberAccess(sm, Member.DECLARED,\n                                                     Reflection.getCallerClass(), true);\n            }\n            Method[] candidates \u003d enclosingCandidate.privateGetDeclaredMethods(false);\n\n            /*\n             * Loop over all declared methods; match method name,\n             * number of and type of parameters, *and* return\n             * type.  Matching return type is also necessary\n             * because of covariant returns, etc.\n             */\n            ReflectionFactory fact \u003d getReflectionFactory();\n            for (Method m : candidates) {\n                if (m.getName().equals(enclosingInfo.getName()) \u0026\u0026\n                    arrayContentsEq(parameterClasses,\n                                    fact.getExecutableSharedParameterTypes(m))) {\n                    // finally, check return type\n                    if (m.getReturnType().equals(returnType)) {\n                        return fact.copyMethod(m);\n                    }\n                }\n            }\n\n            throw new InternalError(\"Enclosing method not found\");\n        }\n    }\n\n    private native Object[] getEnclosingMethod0();\n\n    private EnclosingMethodInfo getEnclosingMethodInfo() {\n        Object[] enclosingInfo \u003d getEnclosingMethod0();\n        if (enclosingInfo \u003d\u003d null)\n            return null;\n        else {\n            return new EnclosingMethodInfo(enclosingInfo);\n        }\n    }\n\n    private static final class EnclosingMethodInfo {\n        private final Class\u003c?\u003e enclosingClass;\n        private final String name;\n        private final String descriptor;\n\n        static void validate(Object[] enclosingInfo) {\n            if (enclosingInfo.length !\u003d 3)\n                throw new InternalError(\"Malformed enclosing method information\");\n            try {\n                // The array is expected to have three elements:\n\n                // the immediately enclosing class\n                Class\u003c?\u003e enclosingClass \u003d (Class\u003c?\u003e)enclosingInfo[0];\n                assert(enclosingClass !\u003d null);\n\n                // the immediately enclosing method or constructor\u0027s\n                // name (can be null).\n                String name \u003d (String)enclosingInfo[1];\n\n                // the immediately enclosing method or constructor\u0027s\n                // descriptor (null iff name is).\n                String descriptor \u003d (String)enclosingInfo[2];\n                assert((name !\u003d null \u0026\u0026 descriptor !\u003d null) || name \u003d\u003d descriptor);\n            } catch (ClassCastException cce) {\n                throw new InternalError(\"Invalid type in enclosing method information\", cce);\n            }\n        }\n\n        EnclosingMethodInfo(Object[] enclosingInfo) {\n            validate(enclosingInfo);\n            this.enclosingClass \u003d (Class\u003c?\u003e)enclosingInfo[0];\n            this.name \u003d (String)enclosingInfo[1];\n            this.descriptor \u003d (String)enclosingInfo[2];\n        }\n\n        boolean isPartial() {\n            return enclosingClass \u003d\u003d null || name \u003d\u003d null || descriptor \u003d\u003d null;\n        }\n\n        boolean isConstructor() { return !isPartial() \u0026\u0026 \"\u003cinit\u003e\".equals(name); }\n\n        boolean isMethod() { return !isPartial() \u0026\u0026 !isConstructor() \u0026\u0026 !\"\u003cclinit\u003e\".equals(name); }\n\n        Class\u003c?\u003e getEnclosingClass() { return enclosingClass; }\n\n        String getName() { return name; }\n\n        String getDescriptor() { return descriptor; }\n\n    }\n\n    private static Class\u003c?\u003e toClass(Type o) {\n        if (o instanceof GenericArrayType)\n            return Array.newInstance(toClass(((GenericArrayType)o).getGenericComponentType()),\n                                     0)\n                .getClass();\n        return (Class\u003c?\u003e)o;\n     }\n\n    /**\n     * If this {@code Class} object represents a local or anonymous\n     * class within a constructor, returns a {@link\n     * java.lang.reflect.Constructor Constructor} object representing\n     * the immediately enclosing constructor of the underlying\n     * class. Returns {@code null} otherwise.  In particular, this\n     * method returns {@code null} if the underlying class is a local\n     * or anonymous class immediately enclosed by a type declaration,\n     * instance initializer or static initializer.\n     *\n     * @return the immediately enclosing constructor of the underlying class, if\n     *     that class is a local or anonymous class; otherwise {@code null}.\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and any of the\n     *         following conditions is met:\n     *\n     *         \u003cul\u003e\n     *\n     *         \u003cli\u003e the caller\u0027s class loader is not the same as the\n     *         class loader of the enclosing class and invocation of\n     *         {@link SecurityManager#checkPermission\n     *         s.checkPermission} method with\n     *         {@code RuntimePermission(\"accessDeclaredMembers\")}\n     *         denies access to the constructors within the enclosing class\n     *\n     *         \u003cli\u003e the caller\u0027s class loader is not the same as or an\n     *         ancestor of the class loader for the enclosing class and\n     *         invocation of {@link SecurityManager#checkPackageAccess\n     *         s.checkPackageAccess()} denies access to the package\n     *         of the enclosing class\n     *\n     *         \u003c/ul\u003e\n     * @since 1.5\n     */\n    @CallerSensitive\n    public Constructor\u003c?\u003e getEnclosingConstructor() throws SecurityException {\n        EnclosingMethodInfo enclosingInfo \u003d getEnclosingMethodInfo();\n\n        if (enclosingInfo \u003d\u003d null)\n            return null;\n        else {\n            if (!enclosingInfo.isConstructor())\n                return null;\n\n            ConstructorRepository typeInfo \u003d ConstructorRepository.make(enclosingInfo.getDescriptor(),\n                                                                        getFactory());\n            Type []    parameterTypes   \u003d typeInfo.getParameterTypes();\n            Class\u003c?\u003e[] parameterClasses \u003d new Class\u003c?\u003e[parameterTypes.length];\n\n            // Convert Types to Classes; returned types *should*\n            // be class objects since the methodDescriptor\u0027s used\n            // don\u0027t have generics information\n            for(int i \u003d 0; i \u003c parameterClasses.length; i++)\n                parameterClasses[i] \u003d toClass(parameterTypes[i]);\n\n            // Perform access check\n            final Class\u003c?\u003e enclosingCandidate \u003d enclosingInfo.getEnclosingClass();\n            SecurityManager sm \u003d System.getSecurityManager();\n            if (sm !\u003d null) {\n                enclosingCandidate.checkMemberAccess(sm, Member.DECLARED,\n                                                     Reflection.getCallerClass(), true);\n            }\n\n            Constructor\u003c?\u003e[] candidates \u003d enclosingCandidate\n                    .privateGetDeclaredConstructors(false);\n            /*\n             * Loop over all declared constructors; match number\n             * of and type of parameters.\n             */\n            ReflectionFactory fact \u003d getReflectionFactory();\n            for (Constructor\u003c?\u003e c : candidates) {\n                if (arrayContentsEq(parameterClasses,\n                                    fact.getExecutableSharedParameterTypes(c))) {\n                    return fact.copyConstructor(c);\n                }\n            }\n\n            throw new InternalError(\"Enclosing constructor not found\");\n        }\n    }\n\n\n    /**\n     * If the class or interface represented by this {@code Class} object\n     * is a member of another class, returns the {@code Class} object\n     * representing the class in which it was declared.  This method returns\n     * null if this class or interface is not a member of any other class.  If\n     * this {@code Class} object represents an array class, a primitive\n     * type, or void,then this method returns null.\n     *\n     * @return the declaring class for this class\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and the caller\u0027s\n     *         class loader is not the same as or an ancestor of the class\n     *         loader for the declaring class and invocation of {@link\n     *         SecurityManager#checkPackageAccess s.checkPackageAccess()}\n     *         denies access to the package of the declaring class\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Class\u003c?\u003e getDeclaringClass() throws SecurityException {\n        final Class\u003c?\u003e candidate \u003d getDeclaringClass0();\n\n        if (candidate !\u003d null) {\n            SecurityManager sm \u003d System.getSecurityManager();\n            if (sm !\u003d null) {\n                candidate.checkPackageAccess(sm,\n                    ClassLoader.getClassLoader(Reflection.getCallerClass()), true);\n            }\n        }\n        return candidate;\n    }\n\n    private native Class\u003c?\u003e getDeclaringClass0();\n\n\n    /**\n     * Returns the immediately enclosing class of the underlying\n     * class.  If the underlying class is a top level class this\n     * method returns {@code null}.\n     * @return the immediately enclosing class of the underlying class\n     * @exception  SecurityException\n     *             If a security manager, \u003ci\u003es\u003c/i\u003e, is present and the caller\u0027s\n     *             class loader is not the same as or an ancestor of the class\n     *             loader for the enclosing class and invocation of {@link\n     *             SecurityManager#checkPackageAccess s.checkPackageAccess()}\n     *             denies access to the package of the enclosing class\n     * @since 1.5\n     */\n    @CallerSensitive\n    public Class\u003c?\u003e getEnclosingClass() throws SecurityException {\n        // There are five kinds of classes (or interfaces):\n        // a) Top level classes\n        // b) Nested classes (static member classes)\n        // c) Inner classes (non-static member classes)\n        // d) Local classes (named classes declared within a method)\n        // e) Anonymous classes\n\n\n        // JVM Spec 4.7.7: A class must have an EnclosingMethod\n        // attribute if and only if it is a local class or an\n        // anonymous class.\n        EnclosingMethodInfo enclosingInfo \u003d getEnclosingMethodInfo();\n        Class\u003c?\u003e enclosingCandidate;\n\n        if (enclosingInfo \u003d\u003d null) {\n            // This is a top level or a nested class or an inner class (a, b, or c)\n            enclosingCandidate \u003d getDeclaringClass0();\n        } else {\n            Class\u003c?\u003e enclosingClass \u003d enclosingInfo.getEnclosingClass();\n            // This is a local class or an anonymous class (d or e)\n            if (enclosingClass \u003d\u003d this || enclosingClass \u003d\u003d null)\n                throw new InternalError(\"Malformed enclosing method information\");\n            else\n                enclosingCandidate \u003d enclosingClass;\n        }\n\n        if (enclosingCandidate !\u003d null) {\n            SecurityManager sm \u003d System.getSecurityManager();\n            if (sm !\u003d null) {\n                enclosingCandidate.checkPackageAccess(sm,\n                    ClassLoader.getClassLoader(Reflection.getCallerClass()), true);\n            }\n        }\n        return enclosingCandidate;\n    }\n\n    /**\n     * Returns the simple name of the underlying class as given in the\n     * source code. Returns an empty string if the underlying class is\n     * anonymous.\n     *\n     * \u003cp\u003eThe simple name of an array is the simple name of the\n     * component type with \"[]\" appended.  In particular the simple\n     * name of an array whose component type is anonymous is \"[]\".\n     *\n     * @return the simple name of the underlying class\n     * @since 1.5\n     */\n    public String getSimpleName() {\n        ReflectionData\u003cT\u003e rd \u003d reflectionData();\n        String simpleName \u003d rd.simpleName;\n        if (simpleName \u003d\u003d null) {\n            rd.simpleName \u003d simpleName \u003d getSimpleName0();\n        }\n        return simpleName;\n    }\n\n    private String getSimpleName0() {\n        if (isArray()) {\n            return getComponentType().getSimpleName() + \"[]\";\n        }\n        String simpleName \u003d getSimpleBinaryName();\n        if (simpleName \u003d\u003d null) { // top level class\n            simpleName \u003d getName();\n            simpleName \u003d simpleName.substring(simpleName.lastIndexOf(\u0027.\u0027) + 1); // strip the package name\n        }\n        return simpleName;\n    }\n\n    /**\n     * Return an informative string for the name of this type.\n     *\n     * @return an informative string for the name of this type\n     * @since 1.8\n     */\n    public String getTypeName() {\n        if (isArray()) {\n            try {\n                Class\u003c?\u003e cl \u003d this;\n                int dimensions \u003d 0;\n                do {\n                    dimensions++;\n                    cl \u003d cl.getComponentType();\n                } while (cl.isArray());\n                StringBuilder sb \u003d new StringBuilder();\n                sb.append(cl.getName());\n                for (int i \u003d 0; i \u003c dimensions; i++) {\n                    sb.append(\"[]\");\n                }\n                return sb.toString();\n            } catch (Throwable e) { /*FALLTHRU*/ }\n        }\n        return getName();\n    }\n\n    /**\n     * Returns the canonical name of the underlying class as\n     * defined by the Java Language Specification.  Returns null if\n     * the underlying class does not have a canonical name (i.e., if\n     * it is a local or anonymous class or an array whose component\n     * type does not have a canonical name).\n     * @return the canonical name of the underlying class if it exists, and\n     * {@code null} otherwise.\n     * @since 1.5\n     */\n    public String getCanonicalName() {\n        ReflectionData\u003cT\u003e rd \u003d reflectionData();\n        String canonicalName \u003d rd.canonicalName;\n        if (canonicalName \u003d\u003d null) {\n            rd.canonicalName \u003d canonicalName \u003d getCanonicalName0();\n        }\n        return canonicalName \u003d\u003d ReflectionData.NULL_SENTINEL? null : canonicalName;\n    }\n\n    private String getCanonicalName0() {\n        if (isArray()) {\n            String canonicalName \u003d getComponentType().getCanonicalName();\n            if (canonicalName !\u003d null)\n                return canonicalName + \"[]\";\n            else\n                return ReflectionData.NULL_SENTINEL;\n        }\n        if (isLocalOrAnonymousClass())\n            return ReflectionData.NULL_SENTINEL;\n        Class\u003c?\u003e enclosingClass \u003d getEnclosingClass();\n        if (enclosingClass \u003d\u003d null) { // top level class\n            return getName();\n        } else {\n            String enclosingName \u003d enclosingClass.getCanonicalName();\n            if (enclosingName \u003d\u003d null)\n                return ReflectionData.NULL_SENTINEL;\n            return enclosingName + \".\" + getSimpleName();\n        }\n    }\n\n    /**\n     * Returns {@code true} if and only if the underlying class\n     * is an anonymous class.\n     *\n     * @return {@code true} if and only if this class is an anonymous class.\n     * @since 1.5\n     */\n    public boolean isAnonymousClass() {\n        return !isArray() \u0026\u0026 isLocalOrAnonymousClass() \u0026\u0026\n                getSimpleBinaryName0() \u003d\u003d null;\n    }\n\n    /**\n     * Returns {@code true} if and only if the underlying class\n     * is a local class.\n     *\n     * @return {@code true} if and only if this class is a local class.\n     * @since 1.5\n     */\n    public boolean isLocalClass() {\n        return isLocalOrAnonymousClass() \u0026\u0026\n                (isArray() || getSimpleBinaryName0() !\u003d null);\n    }\n\n    /**\n     * Returns {@code true} if and only if the underlying class\n     * is a member class.\n     *\n     * @return {@code true} if and only if this class is a member class.\n     * @since 1.5\n     */\n    public boolean isMemberClass() {\n        return !isLocalOrAnonymousClass() \u0026\u0026 getDeclaringClass0() !\u003d null;\n    }\n\n    /**\n     * Returns the \"simple binary name\" of the underlying class, i.e.,\n     * the binary name without the leading enclosing class name.\n     * Returns {@code null} if the underlying class is a top level\n     * class.\n     */\n    private String getSimpleBinaryName() {\n        if (isTopLevelClass())\n            return null;\n        String name \u003d getSimpleBinaryName0();\n        if (name \u003d\u003d null) // anonymous class\n            return \"\";\n        return name;\n    }\n\n    private native String getSimpleBinaryName0();\n\n    /**\n     * Returns {@code true} if this is a top level class.  Returns {@code false}\n     * otherwise.\n     */\n    private boolean isTopLevelClass() {\n        return !isLocalOrAnonymousClass() \u0026\u0026 getDeclaringClass0() \u003d\u003d null;\n    }\n\n    /**\n     * Returns {@code true} if this is a local class or an anonymous\n     * class.  Returns {@code false} otherwise.\n     */\n    private boolean isLocalOrAnonymousClass() {\n        // JVM Spec 4.7.7: A class must have an EnclosingMethod\n        // attribute if and only if it is a local class or an\n        // anonymous class.\n        return hasEnclosingMethodInfo();\n    }\n\n    private boolean hasEnclosingMethodInfo() {\n        Object[] enclosingInfo \u003d getEnclosingMethod0();\n        if (enclosingInfo !\u003d null) {\n            EnclosingMethodInfo.validate(enclosingInfo);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Returns an array containing {@code Class} objects representing all\n     * the public classes and interfaces that are members of the class\n     * represented by this {@code Class} object.  This includes public\n     * class and interface members inherited from superclasses and public class\n     * and interface members declared by the class.  This method returns an\n     * array of length 0 if this {@code Class} object has no public member\n     * classes or interfaces.  This method also returns an array of length 0 if\n     * this {@code Class} object represents a primitive type, an array\n     * class, or void.\n     *\n     * @return the array of {@code Class} objects representing the public\n     *         members of this class\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and\n     *         the caller\u0027s class loader is not the same as or an\n     *         ancestor of the class loader for the current class and\n     *         invocation of {@link SecurityManager#checkPackageAccess\n     *         s.checkPackageAccess()} denies access to the package\n     *         of this class.\n     *\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Class\u003c?\u003e[] getClasses() {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.PUBLIC, Reflection.getCallerClass(), false);\n        }\n\n        // Privileged so this implementation can look at DECLARED classes,\n        // something the caller might not have privilege to do.  The code here\n        // is allowed to look at DECLARED classes because (1) it does not hand\n        // out anything other than public members and (2) public member access\n        // has already been ok\u0027d by the SecurityManager.\n\n        return java.security.AccessController.doPrivileged(\n            new java.security.PrivilegedAction\u003c\u003e() {\n                public Class\u003c?\u003e[] run() {\n                    List\u003cClass\u003c?\u003e\u003e list \u003d new ArrayList\u003c\u003e();\n                    Class\u003c?\u003e currentClass \u003d Class.this;\n                    while (currentClass !\u003d null) {\n                        for (Class\u003c?\u003e m : currentClass.getDeclaredClasses()) {\n                            if (Modifier.isPublic(m.getModifiers())) {\n                                list.add(m);\n                            }\n                        }\n                        currentClass \u003d currentClass.getSuperclass();\n                    }\n                    return list.toArray(new Class\u003c?\u003e[0]);\n                }\n            });\n    }\n\n\n    /**\n     * Returns an array containing {@code Field} objects reflecting all\n     * the accessible public fields of the class or interface represented by\n     * this {@code Class} object.\n     *\n     * \u003cp\u003e If this {@code Class} object represents a class or interface with\n     * no accessible public fields, then this method returns an array of length\n     * 0.\n     *\n     * \u003cp\u003e If this {@code Class} object represents a class, then this method\n     * returns the public fields of the class and of all its superclasses and\n     * superinterfaces.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an interface, then this\n     * method returns the fields of the interface and of all its\n     * superinterfaces.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an array type, a primitive\n     * type, or void, then this method returns an array of length 0.\n     *\n     * \u003cp\u003e The elements in the returned array are not sorted and are not in any\n     * particular order.\n     *\n     * @return the array of {@code Field} objects representing the\n     *         public fields\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and\n     *         the caller\u0027s class loader is not the same as or an\n     *         ancestor of the class loader for the current class and\n     *         invocation of {@link SecurityManager#checkPackageAccess\n     *         s.checkPackageAccess()} denies access to the package\n     *         of this class.\n     *\n     * @since 1.1\n     * @jls 8.2 Class Members\n     * @jls 8.3 Field Declarations\n     */\n    @CallerSensitive\n    public Field[] getFields() throws SecurityException {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.PUBLIC, Reflection.getCallerClass(), true);\n        }\n        return copyFields(privateGetPublicFields());\n    }\n\n\n    /**\n     * Returns an array containing {@code Method} objects reflecting all the\n     * public methods of the class or interface represented by this {@code\n     * Class} object, including those declared by the class or interface and\n     * those inherited from superclasses and superinterfaces.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an array type, then the\n     * returned array has a {@code Method} object for each of the public\n     * methods inherited by the array type from {@code Object}. It does not\n     * contain a {@code Method} object for {@code clone()}.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an interface then the\n     * returned array does not contain any implicitly declared methods from\n     * {@code Object}. Therefore, if no methods are explicitly declared in\n     * this interface or any of its superinterfaces then the returned array\n     * has length 0. (Note that a {@code Class} object which represents a class\n     * always has public methods, inherited from {@code Object}.)\n     *\n     * \u003cp\u003e The returned array never contains methods with names \"{@code \u003cinit\u003e}\"\n     * or \"{@code \u003cclinit\u003e}\".\n     *\n     * \u003cp\u003e The elements in the returned array are not sorted and are not in any\n     * particular order.\n     *\n     * \u003cp\u003e Generally, the result is computed as with the following 4 step algorithm.\n     * Let C be the class or interface represented by this {@code Class} object:\n     * \u003col\u003e\n     * \u003cli\u003e A union of methods is composed of:\n     *   \u003col type\u003d\"a\"\u003e\n     *   \u003cli\u003e C\u0027s declared public instance and static methods as returned by\n     *        {@link #getDeclaredMethods()} and filtered to include only public\n     *        methods.\u003c/li\u003e\n     *   \u003cli\u003e If C is a class other than {@code Object}, then include the result\n     *        of invoking this algorithm recursively on the superclass of C.\u003c/li\u003e\n     *   \u003cli\u003e Include the results of invoking this algorithm recursively on all\n     *        direct superinterfaces of C, but include only instance methods.\u003c/li\u003e\n     *   \u003c/ol\u003e\u003c/li\u003e\n     * \u003cli\u003e Union from step 1 is partitioned into subsets of methods with same\n     *      signature (name, parameter types) and return type.\u003c/li\u003e\n     * \u003cli\u003e Within each such subset only the most specific methods are selected.\n     *      Let method M be a method from a set of methods with same signature\n     *      and return type. M is most specific if there is no such method\n     *      N !\u003d M from the same set, such that N is more specific than M.\n     *      N is more specific than M if:\n     *   \u003col type\u003d\"a\"\u003e\n     *   \u003cli\u003e N is declared by a class and M is declared by an interface; or\u003c/li\u003e\n     *   \u003cli\u003e N and M are both declared by classes or both by interfaces and\n     *        N\u0027s declaring type is the same as or a subtype of M\u0027s declaring type\n     *        (clearly, if M\u0027s and N\u0027s declaring types are the same type, then\n     *        M and N are the same method).\u003c/li\u003e\n     *   \u003c/ol\u003e\u003c/li\u003e\n     * \u003cli\u003e The result of this algorithm is the union of all selected methods from\n     *      step 3.\u003c/li\u003e\n     * \u003c/ol\u003e\n     *\n     * @apiNote There may be more than one method with a particular name\n     * and parameter types in a class because while the Java language forbids a\n     * class to declare multiple methods with the same signature but different\n     * return types, the Java virtual machine does not.  This\n     * increased flexibility in the virtual machine can be used to\n     * implement various language features.  For example, covariant\n     * returns can be implemented with {@linkplain\n     * java.lang.reflect.Method#isBridge bridge methods}; the bridge\n     * method and the overriding method would have the same\n     * signature but different return types.\n     *\n     * @return the array of {@code Method} objects representing the\n     *         public methods of this class\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and\n     *         the caller\u0027s class loader is not the same as or an\n     *         ancestor of the class loader for the current class and\n     *         invocation of {@link SecurityManager#checkPackageAccess\n     *         s.checkPackageAccess()} denies access to the package\n     *         of this class.\n     *\n     * @jls 8.2 Class Members\n     * @jls 8.4 Method Declarations\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Method[] getMethods() throws SecurityException {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.PUBLIC, Reflection.getCallerClass(), true);\n        }\n        return copyMethods(privateGetPublicMethods());\n    }\n\n\n    /**\n     * Returns an array containing {@code Constructor} objects reflecting\n     * all the public constructors of the class represented by this\n     * {@code Class} object.  An array of length 0 is returned if the\n     * class has no public constructors, or if the class is an array class, or\n     * if the class reflects a primitive type or void.\n     *\n     * Note that while this method returns an array of {@code\n     * Constructor\u003cT\u003e} objects (that is an array of constructors from\n     * this class), the return type of this method is {@code\n     * Constructor\u003c?\u003e[]} and \u003cem\u003enot\u003c/em\u003e {@code Constructor\u003cT\u003e[]} as\n     * might be expected.  This less informative return type is\n     * necessary since after being returned from this method, the\n     * array could be modified to hold {@code Constructor} objects for\n     * different classes, which would violate the type guarantees of\n     * {@code Constructor\u003cT\u003e[]}.\n     *\n     * @return the array of {@code Constructor} objects representing the\n     *         public constructors of this class\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and\n     *         the caller\u0027s class loader is not the same as or an\n     *         ancestor of the class loader for the current class and\n     *         invocation of {@link SecurityManager#checkPackageAccess\n     *         s.checkPackageAccess()} denies access to the package\n     *         of this class.\n     *\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Constructor\u003c?\u003e[] getConstructors() throws SecurityException {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.PUBLIC, Reflection.getCallerClass(), true);\n        }\n        return copyConstructors(privateGetDeclaredConstructors(true));\n    }\n\n\n    /**\n     * Returns a {@code Field} object that reflects the specified public member\n     * field of the class or interface represented by this {@code Class}\n     * object. The {@code name} parameter is a {@code String} specifying the\n     * simple name of the desired field.\n     *\n     * \u003cp\u003e The field to be reflected is determined by the algorithm that\n     * follows.  Let C be the class or interface represented by this object:\n     *\n     * \u003cOL\u003e\n     * \u003cLI\u003e If C declares a public field with the name specified, that is the\n     *      field to be reflected.\u003c/LI\u003e\n     * \u003cLI\u003e If no field was found in step 1 above, this algorithm is applied\n     *      recursively to each direct superinterface of C. The direct\n     *      superinterfaces are searched in the order they were declared.\u003c/LI\u003e\n     * \u003cLI\u003e If no field was found in steps 1 and 2 above, and C has a\n     *      superclass S, then this algorithm is invoked recursively upon S.\n     *      If C has no superclass, then a {@code NoSuchFieldException}\n     *      is thrown.\u003c/LI\u003e\n     * \u003c/OL\u003e\n     *\n     * \u003cp\u003e If this {@code Class} object represents an array type, then this\n     * method does not find the {@code length} field of the array type.\n     *\n     * @param name the field name\n     * @return the {@code Field} object of this class specified by\n     *         {@code name}\n     * @throws NoSuchFieldException if a field with the specified name is\n     *         not found.\n     * @throws NullPointerException if {@code name} is {@code null}\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and\n     *         the caller\u0027s class loader is not the same as or an\n     *         ancestor of the class loader for the current class and\n     *         invocation of {@link SecurityManager#checkPackageAccess\n     *         s.checkPackageAccess()} denies access to the package\n     *         of this class.\n     *\n     * @since 1.1\n     * @jls 8.2 Class Members\n     * @jls 8.3 Field Declarations\n     */\n    @CallerSensitive\n    public Field getField(String name)\n        throws NoSuchFieldException, SecurityException {\n        Objects.requireNonNull(name);\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.PUBLIC, Reflection.getCallerClass(), true);\n        }\n        Field field \u003d getField0(name);\n        if (field \u003d\u003d null) {\n            throw new NoSuchFieldException(name);\n        }\n        return getReflectionFactory().copyField(field);\n    }\n\n\n    /**\n     * Returns a {@code Method} object that reflects the specified public\n     * member method of the class or interface represented by this\n     * {@code Class} object. The {@code name} parameter is a\n     * {@code String} specifying the simple name of the desired method. The\n     * {@code parameterTypes} parameter is an array of {@code Class}\n     * objects that identify the method\u0027s formal parameter types, in declared\n     * order. If {@code parameterTypes} is {@code null}, it is\n     * treated as if it were an empty array.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an array type, then this\n     * method finds any public method inherited by the array type from\n     * {@code Object} except method {@code clone()}.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an interface then this\n     * method does not find any implicitly declared method from\n     * {@code Object}. Therefore, if no methods are explicitly declared in\n     * this interface or any of its superinterfaces, then this method does not\n     * find any method.\n     *\n     * \u003cp\u003e This method does not find any method with name \"{@code \u003cinit\u003e}\" or\n     * \"{@code \u003cclinit\u003e}\".\n     *\n     * \u003cp\u003e Generally, the method to be reflected is determined by the 4 step\n     * algorithm that follows.\n     * Let C be the class or interface represented by this {@code Class} object:\n     * \u003col\u003e\n     * \u003cli\u003e A union of methods is composed of:\n     *   \u003col type\u003d\"a\"\u003e\n     *   \u003cli\u003e C\u0027s declared public instance and static methods as returned by\n     *        {@link #getDeclaredMethods()} and filtered to include only public\n     *        methods that match given {@code name} and {@code parameterTypes}\u003c/li\u003e\n     *   \u003cli\u003e If C is a class other than {@code Object}, then include the result\n     *        of invoking this algorithm recursively on the superclass of C.\u003c/li\u003e\n     *   \u003cli\u003e Include the results of invoking this algorithm recursively on all\n     *        direct superinterfaces of C, but include only instance methods.\u003c/li\u003e\n     *   \u003c/ol\u003e\u003c/li\u003e\n     * \u003cli\u003e This union is partitioned into subsets of methods with same\n     *      return type (the selection of methods from step 1 also guarantees that\n     *      they have the same method name and parameter types).\u003c/li\u003e\n     * \u003cli\u003e Within each such subset only the most specific methods are selected.\n     *      Let method M be a method from a set of methods with same VM\n     *      signature (return type, name, parameter types).\n     *      M is most specific if there is no such method N !\u003d M from the same\n     *      set, such that N is more specific than M. N is more specific than M\n     *      if:\n     *   \u003col type\u003d\"a\"\u003e\n     *   \u003cli\u003e N is declared by a class and M is declared by an interface; or\u003c/li\u003e\n     *   \u003cli\u003e N and M are both declared by classes or both by interfaces and\n     *        N\u0027s declaring type is the same as or a subtype of M\u0027s declaring type\n     *        (clearly, if M\u0027s and N\u0027s declaring types are the same type, then\n     *        M and N are the same method).\u003c/li\u003e\n     *   \u003c/ol\u003e\u003c/li\u003e\n     * \u003cli\u003e The result of this algorithm is chosen arbitrarily from the methods\n     *      with most specific return type among all selected methods from step 3.\n     *      Let R be a return type of a method M from the set of all selected methods\n     *      from step 3. M is a method with most specific return type if there is\n     *      no such method N !\u003d M from the same set, having return type S !\u003d R,\n     *      such that S is a subtype of R as determined by\n     *      R.class.{@link #isAssignableFrom}(S.class).\n     * \u003c/ol\u003e\n     *\n     * @apiNote There may be more than one method with matching name and\n     * parameter types in a class because while the Java language forbids a\n     * class to declare multiple methods with the same signature but different\n     * return types, the Java virtual machine does not.  This\n     * increased flexibility in the virtual machine can be used to\n     * implement various language features.  For example, covariant\n     * returns can be implemented with {@linkplain\n     * java.lang.reflect.Method#isBridge bridge methods}; the bridge\n     * method and the overriding method would have the same\n     * signature but different return types. This method would return the\n     * overriding method as it would have a more specific return type.\n     *\n     * @param name the name of the method\n     * @param parameterTypes the list of parameters\n     * @return the {@code Method} object that matches the specified\n     *         {@code name} and {@code parameterTypes}\n     * @throws NoSuchMethodException if a matching method is not found\n     *         or if the name is \"\u0026lt;init\u0026gt;\"or \"\u0026lt;clinit\u0026gt;\".\n     * @throws NullPointerException if {@code name} is {@code null}\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and\n     *         the caller\u0027s class loader is not the same as or an\n     *         ancestor of the class loader for the current class and\n     *         invocation of {@link SecurityManager#checkPackageAccess\n     *         s.checkPackageAccess()} denies access to the package\n     *         of this class.\n     *\n     * @jls 8.2 Class Members\n     * @jls 8.4 Method Declarations\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Method getMethod(String name, Class\u003c?\u003e... parameterTypes)\n        throws NoSuchMethodException, SecurityException {\n        Objects.requireNonNull(name);\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.PUBLIC, Reflection.getCallerClass(), true);\n        }\n        Method method \u003d getMethod0(name, parameterTypes);\n        if (method \u003d\u003d null) {\n            throw new NoSuchMethodException(methodToString(name, parameterTypes));\n        }\n        return getReflectionFactory().copyMethod(method);\n    }\n\n    /**\n     * Returns a {@code Constructor} object that reflects the specified\n     * public constructor of the class represented by this {@code Class}\n     * object. The {@code parameterTypes} parameter is an array of\n     * {@code Class} objects that identify the constructor\u0027s formal\n     * parameter types, in declared order.\n     *\n     * If this {@code Class} object represents an inner class\n     * declared in a non-static context, the formal parameter types\n     * include the explicit enclosing instance as the first parameter.\n     *\n     * \u003cp\u003e The constructor to reflect is the public constructor of the class\n     * represented by this {@code Class} object whose formal parameter\n     * types match those specified by {@code parameterTypes}.\n     *\n     * @param parameterTypes the parameter array\n     * @return the {@code Constructor} object of the public constructor that\n     *         matches the specified {@code parameterTypes}\n     * @throws NoSuchMethodException if a matching method is not found.\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and\n     *         the caller\u0027s class loader is not the same as or an\n     *         ancestor of the class loader for the current class and\n     *         invocation of {@link SecurityManager#checkPackageAccess\n     *         s.checkPackageAccess()} denies access to the package\n     *         of this class.\n     *\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Constructor\u003cT\u003e getConstructor(Class\u003c?\u003e... parameterTypes)\n        throws NoSuchMethodException, SecurityException\n    {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.PUBLIC, Reflection.getCallerClass(), true);\n        }\n        return getReflectionFactory().copyConstructor(\n            getConstructor0(parameterTypes, Member.PUBLIC));\n    }\n\n\n    /**\n     * Returns an array of {@code Class} objects reflecting all the\n     * classes and interfaces declared as members of the class represented by\n     * this {@code Class} object. This includes public, protected, default\n     * (package) access, and private classes and interfaces declared by the\n     * class, but excludes inherited classes and interfaces.  This method\n     * returns an array of length 0 if the class declares no classes or\n     * interfaces as members, or if this {@code Class} object represents a\n     * primitive type, an array class, or void.\n     *\n     * @return the array of {@code Class} objects representing all the\n     *         declared members of this class\n     * @throws SecurityException\n     *         If a security manager, \u003ci\u003es\u003c/i\u003e, is present and any of the\n     *         following conditions is met:\n     *\n     *         \u003cul\u003e\n     *\n     *         \u003cli\u003e the caller\u0027s class loader is not the same as the\n     *         class loader of this class and invocation of\n     *         {@link SecurityManager#checkPermission\n     *         s.checkPermission} method with\n     *         {@code RuntimePermission(\"accessDeclaredMembers\")}\n     *         denies access to the declared classes within this class\n     *\n     *         \u003cli\u003e the caller\u0027s class loader is not the same as or an\n     *         ancestor of the class loader for the current class and\n     *         invocation of {@link SecurityManager#checkPackageAccess\n     *         s.checkPackageAccess()} denies access to the package\n     *         of this class\n     *\n     *         \u003c/ul\u003e\n     *\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Class\u003c?\u003e[] getDeclaredClasses() throws SecurityException {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.DECLARED, Reflection.getCallerClass(), false);\n        }\n        return getDeclaredClasses0();\n    }\n\n\n    /**\n     * Returns an array of {@code Field} objects reflecting all the fields\n     * declared by the class or interface represented by this\n     * {@code Class} object. This includes public, protected, default\n     * (package) access, and private fields, but excludes inherited fields.\n     *\n     * \u003cp\u003e If this {@code Class} object represents a class or interface with no\n     * declared fields, then this method returns an array of length 0.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an array type, a primitive\n     * type, or void, then this method returns an array of length 0.\n     *\n     * \u003cp\u003e The elements in the returned array are not sorted and are not in any\n     * particular order.\n     *\n     * @return  the array of {@code Field} objects representing all the\n     *          declared fields of this class\n     * @throws  SecurityException\n     *          If a security manager, \u003ci\u003es\u003c/i\u003e, is present and any of the\n     *          following conditions is met:\n     *\n     *          \u003cul\u003e\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as the\n     *          class loader of this class and invocation of\n     *          {@link SecurityManager#checkPermission\n     *          s.checkPermission} method with\n     *          {@code RuntimePermission(\"accessDeclaredMembers\")}\n     *          denies access to the declared fields within this class\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as or an\n     *          ancestor of the class loader for the current class and\n     *          invocation of {@link SecurityManager#checkPackageAccess\n     *          s.checkPackageAccess()} denies access to the package\n     *          of this class\n     *\n     *          \u003c/ul\u003e\n     *\n     * @since 1.1\n     * @jls 8.2 Class Members\n     * @jls 8.3 Field Declarations\n     */\n    @CallerSensitive\n    public Field[] getDeclaredFields() throws SecurityException {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.DECLARED, Reflection.getCallerClass(), true);\n        }\n        return copyFields(privateGetDeclaredFields(false));\n    }\n\n\n    /**\n     * Returns an array containing {@code Method} objects reflecting all the\n     * declared methods of the class or interface represented by this {@code\n     * Class} object, including public, protected, default (package)\n     * access, and private methods, but excluding inherited methods.\n     *\n     * \u003cp\u003e If this {@code Class} object represents a type that has multiple\n     * declared methods with the same name and parameter types, but different\n     * return types, then the returned array has a {@code Method} object for\n     * each such method.\n     *\n     * \u003cp\u003e If this {@code Class} object represents a type that has a class\n     * initialization method {@code \u003cclinit\u003e}, then the returned array does\n     * \u003cem\u003enot\u003c/em\u003e have a corresponding {@code Method} object.\n     *\n     * \u003cp\u003e If this {@code Class} object represents a class or interface with no\n     * declared methods, then the returned array has length 0.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an array type, a primitive\n     * type, or void, then the returned array has length 0.\n     *\n     * \u003cp\u003e The elements in the returned array are not sorted and are not in any\n     * particular order.\n     *\n     * @return  the array of {@code Method} objects representing all the\n     *          declared methods of this class\n     * @throws  SecurityException\n     *          If a security manager, \u003ci\u003es\u003c/i\u003e, is present and any of the\n     *          following conditions is met:\n     *\n     *          \u003cul\u003e\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as the\n     *          class loader of this class and invocation of\n     *          {@link SecurityManager#checkPermission\n     *          s.checkPermission} method with\n     *          {@code RuntimePermission(\"accessDeclaredMembers\")}\n     *          denies access to the declared methods within this class\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as or an\n     *          ancestor of the class loader for the current class and\n     *          invocation of {@link SecurityManager#checkPackageAccess\n     *          s.checkPackageAccess()} denies access to the package\n     *          of this class\n     *\n     *          \u003c/ul\u003e\n     *\n     * @jls 8.2 Class Members\n     * @jls 8.4 Method Declarations\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Method[] getDeclaredMethods() throws SecurityException {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.DECLARED, Reflection.getCallerClass(), true);\n        }\n        return copyMethods(privateGetDeclaredMethods(false));\n    }\n\n\n    /**\n     * Returns an array of {@code Constructor} objects reflecting all the\n     * constructors declared by the class represented by this\n     * {@code Class} object. These are public, protected, default\n     * (package) access, and private constructors.  The elements in the array\n     * returned are not sorted and are not in any particular order.  If the\n     * class has a default constructor, it is included in the returned array.\n     * This method returns an array of length 0 if this {@code Class}\n     * object represents an interface, a primitive type, an array class, or\n     * void.\n     *\n     * \u003cp\u003e See \u003cem\u003eThe Java Language Specification\u003c/em\u003e, section 8.2.\n     *\n     * @return  the array of {@code Constructor} objects representing all the\n     *          declared constructors of this class\n     * @throws  SecurityException\n     *          If a security manager, \u003ci\u003es\u003c/i\u003e, is present and any of the\n     *          following conditions is met:\n     *\n     *          \u003cul\u003e\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as the\n     *          class loader of this class and invocation of\n     *          {@link SecurityManager#checkPermission\n     *          s.checkPermission} method with\n     *          {@code RuntimePermission(\"accessDeclaredMembers\")}\n     *          denies access to the declared constructors within this class\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as or an\n     *          ancestor of the class loader for the current class and\n     *          invocation of {@link SecurityManager#checkPackageAccess\n     *          s.checkPackageAccess()} denies access to the package\n     *          of this class\n     *\n     *          \u003c/ul\u003e\n     *\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Constructor\u003c?\u003e[] getDeclaredConstructors() throws SecurityException {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.DECLARED, Reflection.getCallerClass(), true);\n        }\n        return copyConstructors(privateGetDeclaredConstructors(false));\n    }\n\n\n    /**\n     * Returns a {@code Field} object that reflects the specified declared\n     * field of the class or interface represented by this {@code Class}\n     * object. The {@code name} parameter is a {@code String} that specifies\n     * the simple name of the desired field.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an array type, then this\n     * method does not find the {@code length} field of the array type.\n     *\n     * @param name the name of the field\n     * @return  the {@code Field} object for the specified field in this\n     *          class\n     * @throws  NoSuchFieldException if a field with the specified name is\n     *          not found.\n     * @throws  NullPointerException if {@code name} is {@code null}\n     * @throws  SecurityException\n     *          If a security manager, \u003ci\u003es\u003c/i\u003e, is present and any of the\n     *          following conditions is met:\n     *\n     *          \u003cul\u003e\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as the\n     *          class loader of this class and invocation of\n     *          {@link SecurityManager#checkPermission\n     *          s.checkPermission} method with\n     *          {@code RuntimePermission(\"accessDeclaredMembers\")}\n     *          denies access to the declared field\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as or an\n     *          ancestor of the class loader for the current class and\n     *          invocation of {@link SecurityManager#checkPackageAccess\n     *          s.checkPackageAccess()} denies access to the package\n     *          of this class\n     *\n     *          \u003c/ul\u003e\n     *\n     * @since 1.1\n     * @jls 8.2 Class Members\n     * @jls 8.3 Field Declarations\n     */\n    @CallerSensitive\n    public Field getDeclaredField(String name)\n        throws NoSuchFieldException, SecurityException {\n        Objects.requireNonNull(name);\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.DECLARED, Reflection.getCallerClass(), true);\n        }\n        Field field \u003d searchFields(privateGetDeclaredFields(false), name);\n        if (field \u003d\u003d null) {\n            throw new NoSuchFieldException(name);\n        }\n        return getReflectionFactory().copyField(field);\n    }\n\n\n    /**\n     * Returns a {@code Method} object that reflects the specified\n     * declared method of the class or interface represented by this\n     * {@code Class} object. The {@code name} parameter is a\n     * {@code String} that specifies the simple name of the desired\n     * method, and the {@code parameterTypes} parameter is an array of\n     * {@code Class} objects that identify the method\u0027s formal parameter\n     * types, in declared order.  If more than one method with the same\n     * parameter types is declared in a class, and one of these methods has a\n     * return type that is more specific than any of the others, that method is\n     * returned; otherwise one of the methods is chosen arbitrarily.  If the\n     * name is \"\u0026lt;init\u0026gt;\"or \"\u0026lt;clinit\u0026gt;\" a {@code NoSuchMethodException}\n     * is raised.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an array type, then this\n     * method does not find the {@code clone()} method.\n     *\n     * @param name the name of the method\n     * @param parameterTypes the parameter array\n     * @return  the {@code Method} object for the method of this class\n     *          matching the specified name and parameters\n     * @throws  NoSuchMethodException if a matching method is not found.\n     * @throws  NullPointerException if {@code name} is {@code null}\n     * @throws  SecurityException\n     *          If a security manager, \u003ci\u003es\u003c/i\u003e, is present and any of the\n     *          following conditions is met:\n     *\n     *          \u003cul\u003e\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as the\n     *          class loader of this class and invocation of\n     *          {@link SecurityManager#checkPermission\n     *          s.checkPermission} method with\n     *          {@code RuntimePermission(\"accessDeclaredMembers\")}\n     *          denies access to the declared method\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as or an\n     *          ancestor of the class loader for the current class and\n     *          invocation of {@link SecurityManager#checkPackageAccess\n     *          s.checkPackageAccess()} denies access to the package\n     *          of this class\n     *\n     *          \u003c/ul\u003e\n     *\n     * @jls 8.2 Class Members\n     * @jls 8.4 Method Declarations\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Method getDeclaredMethod(String name, Class\u003c?\u003e... parameterTypes)\n        throws NoSuchMethodException, SecurityException {\n        Objects.requireNonNull(name);\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.DECLARED, Reflection.getCallerClass(), true);\n        }\n        Method method \u003d searchMethods(privateGetDeclaredMethods(false), name, parameterTypes);\n        if (method \u003d\u003d null) {\n            throw new NoSuchMethodException(methodToString(name, parameterTypes));\n        }\n        return getReflectionFactory().copyMethod(method);\n    }\n\n    /**\n     * Returns the list of {@code Method} objects for the declared public\n     * methods of this class or interface that have the specified method name\n     * and parameter types.\n     *\n     * @param name the name of the method\n     * @param parameterTypes the parameter array\n     * @return the list of {@code Method} objects for the public methods of\n     *         this class matching the specified name and parameters\n     */\n    List\u003cMethod\u003e getDeclaredPublicMethods(String name, Class\u003c?\u003e... parameterTypes) {\n        Method[] methods \u003d privateGetDeclaredMethods(/* publicOnly */ true);\n        ReflectionFactory factory \u003d getReflectionFactory();\n        List\u003cMethod\u003e result \u003d new ArrayList\u003c\u003e();\n        for (Method method : methods) {\n            if (method.getName().equals(name)\n                \u0026\u0026 Arrays.equals(\n                    factory.getExecutableSharedParameterTypes(method),\n                    parameterTypes)) {\n                result.add(factory.copyMethod(method));\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Returns a {@code Constructor} object that reflects the specified\n     * constructor of the class or interface represented by this\n     * {@code Class} object.  The {@code parameterTypes} parameter is\n     * an array of {@code Class} objects that identify the constructor\u0027s\n     * formal parameter types, in declared order.\n     *\n     * If this {@code Class} object represents an inner class\n     * declared in a non-static context, the formal parameter types\n     * include the explicit enclosing instance as the first parameter.\n     *\n     * @param parameterTypes the parameter array\n     * @return  The {@code Constructor} object for the constructor with the\n     *          specified parameter list\n     * @throws  NoSuchMethodException if a matching method is not found.\n     * @throws  SecurityException\n     *          If a security manager, \u003ci\u003es\u003c/i\u003e, is present and any of the\n     *          following conditions is met:\n     *\n     *          \u003cul\u003e\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as the\n     *          class loader of this class and invocation of\n     *          {@link SecurityManager#checkPermission\n     *          s.checkPermission} method with\n     *          {@code RuntimePermission(\"accessDeclaredMembers\")}\n     *          denies access to the declared constructor\n     *\n     *          \u003cli\u003e the caller\u0027s class loader is not the same as or an\n     *          ancestor of the class loader for the current class and\n     *          invocation of {@link SecurityManager#checkPackageAccess\n     *          s.checkPackageAccess()} denies access to the package\n     *          of this class\n     *\n     *          \u003c/ul\u003e\n     *\n     * @since 1.1\n     */\n    @CallerSensitive\n    public Constructor\u003cT\u003e getDeclaredConstructor(Class\u003c?\u003e... parameterTypes)\n        throws NoSuchMethodException, SecurityException\n    {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkMemberAccess(sm, Member.DECLARED, Reflection.getCallerClass(), true);\n        }\n\n        return getReflectionFactory().copyConstructor(\n            getConstructor0(parameterTypes, Member.DECLARED));\n    }\n\n    /**\n     * Finds a resource with a given name.\n     *\n     * \u003cp\u003e If this class is in a named {@link Module Module} then this method\n     * will attempt to find the resource in the module. This is done by\n     * delegating to the module\u0027s class loader {@link\n     * ClassLoader#findResource(String,String) findResource(String,String)}\n     * method, invoking it with the module name and the absolute name of the\n     * resource. Resources in named modules are subject to the rules for\n     * encapsulation specified in the {@code Module} {@link\n     * Module#getResourceAsStream getResourceAsStream} method and so this\n     * method returns {@code null} when the resource is a\n     * non-\"{@code .class}\" resource in a package that is not open to the\n     * caller\u0027s module.\n     *\n     * \u003cp\u003e Otherwise, if this class is not in a named module then the rules for\n     * searching resources associated with a given class are implemented by the\n     * defining {@linkplain ClassLoader class loader} of the class.  This method\n     * delegates to this object\u0027s class loader.  If this object was loaded by\n     * the bootstrap class loader, the method delegates to {@link\n     * ClassLoader#getSystemResourceAsStream}.\n     *\n     * \u003cp\u003e Before delegation, an absolute resource name is constructed from the\n     * given resource name using this algorithm:\n     *\n     * \u003cul\u003e\n     *\n     * \u003cli\u003e If the {@code name} begins with a {@code \u0027/\u0027}\n     * (\u003ccode\u003e\u0027\u0026#92;u002f\u0027\u003c/code\u003e), then the absolute name of the resource is the\n     * portion of the {@code name} following the {@code \u0027/\u0027}.\n     *\n     * \u003cli\u003e Otherwise, the absolute name is of the following form:\n     *\n     * \u003cblockquote\u003e\n     *   {@code modified_package_name/name}\n     * \u003c/blockquote\u003e\n     *\n     * \u003cp\u003e Where the {@code modified_package_name} is the package name of this\n     * object with {@code \u0027/\u0027} substituted for {@code \u0027.\u0027}\n     * (\u003ccode\u003e\u0027\u0026#92;u002e\u0027\u003c/code\u003e).\n     *\n     * \u003c/ul\u003e\n     *\n     * @param  name name of the desired resource\n     * @return  A {@link java.io.InputStream} object; {@code null} if no\n     *          resource with this name is found, the resource is in a package\n     *          that is not {@linkplain Module#isOpen(String, Module) open} to at\n     *          least the caller module, or access to the resource is denied\n     *          by the security manager.\n     * @throws  NullPointerException If {@code name} is {@code null}\n     *\n     * @see Module#getResourceAsStream(String)\n     * @since  1.1\n     * @revised 9\n     * @spec JPMS\n     */\n    @CallerSensitive\n    public InputStream getResourceAsStream(String name) {\n        name \u003d resolveName(name);\n\n        Module thisModule \u003d getModule();\n        if (thisModule.isNamed()) {\n            // check if resource can be located by caller\n            if (Resources.canEncapsulate(name)\n                \u0026\u0026 !isOpenToCaller(name, Reflection.getCallerClass())) {\n                return null;\n            }\n\n            // resource not encapsulated or in package open to caller\n            String mn \u003d thisModule.getName();\n            ClassLoader cl \u003d getClassLoader0();\n            try {\n\n                // special-case built-in class loaders to avoid the\n                // need for a URL connection\n                if (cl \u003d\u003d null) {\n                    return BootLoader.findResourceAsStream(mn, name);\n                } else if (cl instanceof BuiltinClassLoader) {\n                    return ((BuiltinClassLoader) cl).findResourceAsStream(mn, name);\n                } else {\n                    URL url \u003d cl.findResource(mn, name);\n                    return (url !\u003d null) ? url.openStream() : null;\n                }\n\n            } catch (IOException | SecurityException e) {\n                return null;\n            }\n        }\n\n        // unnamed module\n        ClassLoader cl \u003d getClassLoader0();\n        if (cl \u003d\u003d null) {\n            return ClassLoader.getSystemResourceAsStream(name);\n        } else {\n            return cl.getResourceAsStream(name);\n        }\n    }\n\n    /**\n     * Finds a resource with a given name.\n     *\n     * \u003cp\u003e If this class is in a named {@link Module Module} then this method\n     * will attempt to find the resource in the module. This is done by\n     * delegating to the module\u0027s class loader {@link\n     * ClassLoader#findResource(String,String) findResource(String,String)}\n     * method, invoking it with the module name and the absolute name of the\n     * resource. Resources in named modules are subject to the rules for\n     * encapsulation specified in the {@code Module} {@link\n     * Module#getResourceAsStream getResourceAsStream} method and so this\n     * method returns {@code null} when the resource is a\n     * non-\"{@code .class}\" resource in a package that is not open to the\n     * caller\u0027s module.\n     *\n     * \u003cp\u003e Otherwise, if this class is not in a named module then the rules for\n     * searching resources associated with a given class are implemented by the\n     * defining {@linkplain ClassLoader class loader} of the class.  This method\n     * delegates to this object\u0027s class loader. If this object was loaded by\n     * the bootstrap class loader, the method delegates to {@link\n     * ClassLoader#getSystemResource}.\n     *\n     * \u003cp\u003e Before delegation, an absolute resource name is constructed from the\n     * given resource name using this algorithm:\n     *\n     * \u003cul\u003e\n     *\n     * \u003cli\u003e If the {@code name} begins with a {@code \u0027/\u0027}\n     * (\u003ccode\u003e\u0027\u0026#92;u002f\u0027\u003c/code\u003e), then the absolute name of the resource is the\n     * portion of the {@code name} following the {@code \u0027/\u0027}.\n     *\n     * \u003cli\u003e Otherwise, the absolute name is of the following form:\n     *\n     * \u003cblockquote\u003e\n     *   {@code modified_package_name/name}\n     * \u003c/blockquote\u003e\n     *\n     * \u003cp\u003e Where the {@code modified_package_name} is the package name of this\n     * object with {@code \u0027/\u0027} substituted for {@code \u0027.\u0027}\n     * (\u003ccode\u003e\u0027\u0026#92;u002e\u0027\u003c/code\u003e).\n     *\n     * \u003c/ul\u003e\n     *\n     * @param  name name of the desired resource\n     * @return A {@link java.net.URL} object; {@code null} if no resource with\n     *         this name is found, the resource cannot be located by a URL, the\n     *         resource is in a package that is not\n     *         {@linkplain Module#isOpen(String, Module) open} to at least the caller\n     *         module, or access to the resource is denied by the security\n     *         manager.\n     * @throws NullPointerException If {@code name} is {@code null}\n     * @since  1.1\n     * @revised 9\n     * @spec JPMS\n     */\n    @CallerSensitive\n    public URL getResource(String name) {\n        name \u003d resolveName(name);\n\n        Module thisModule \u003d getModule();\n        if (thisModule.isNamed()) {\n            // check if resource can be located by caller\n            if (Resources.canEncapsulate(name)\n                \u0026\u0026 !isOpenToCaller(name, Reflection.getCallerClass())) {\n                return null;\n            }\n\n            // resource not encapsulated or in package open to caller\n            String mn \u003d thisModule.getName();\n            ClassLoader cl \u003d getClassLoader0();\n            try {\n                if (cl \u003d\u003d null) {\n                    return BootLoader.findResource(mn, name);\n                } else {\n                    return cl.findResource(mn, name);\n                }\n            } catch (IOException ioe) {\n                return null;\n            }\n        }\n\n        // unnamed module\n        ClassLoader cl \u003d getClassLoader0();\n        if (cl \u003d\u003d null) {\n            return ClassLoader.getSystemResource(name);\n        } else {\n            return cl.getResource(name);\n        }\n    }\n\n    /**\n     * Returns true if a resource with the given name can be located by the\n     * given caller. All resources in a module can be located by code in\n     * the module. For other callers, then the package needs to be open to\n     * the caller.\n     */\n    private boolean isOpenToCaller(String name, Class\u003c?\u003e caller) {\n        // assert getModule().isNamed();\n        Module thisModule \u003d getModule();\n        Module callerModule \u003d (caller !\u003d null) ? caller.getModule() : null;\n        if (callerModule !\u003d thisModule) {\n            String pn \u003d Resources.toPackageName(name);\n            if (thisModule.getDescriptor().packages().contains(pn)) {\n                if (callerModule \u003d\u003d null \u0026\u0026 !thisModule.isOpen(pn)) {\n                    // no caller, package not open\n                    return false;\n                }\n                if (!thisModule.isOpen(pn, callerModule)) {\n                    // package not open to caller\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n\n    /** protection domain returned when the internal domain is null */\n    private static java.security.ProtectionDomain allPermDomain;\n\n    /**\n     * Returns the {@code ProtectionDomain} of this class.  If there is a\n     * security manager installed, this method first calls the security\n     * manager\u0027s {@code checkPermission} method with a\n     * {@code RuntimePermission(\"getProtectionDomain\")} permission to\n     * ensure it\u0027s ok to get the\n     * {@code ProtectionDomain}.\n     *\n     * @return the ProtectionDomain of this class\n     *\n     * @throws SecurityException\n     *        if a security manager exists and its\n     *        {@code checkPermission} method doesn\u0027t allow\n     *        getting the ProtectionDomain.\n     *\n     * @see java.security.ProtectionDomain\n     * @see SecurityManager#checkPermission\n     * @see java.lang.RuntimePermission\n     * @since 1.2\n     */\n    public java.security.ProtectionDomain getProtectionDomain() {\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            sm.checkPermission(SecurityConstants.GET_PD_PERMISSION);\n        }\n        java.security.ProtectionDomain pd \u003d getProtectionDomain0();\n        if (pd \u003d\u003d null) {\n            if (allPermDomain \u003d\u003d null) {\n                java.security.Permissions perms \u003d\n                    new java.security.Permissions();\n                perms.add(SecurityConstants.ALL_PERMISSION);\n                allPermDomain \u003d\n                    new java.security.ProtectionDomain(null, perms);\n            }\n            pd \u003d allPermDomain;\n        }\n        return pd;\n    }\n\n\n    /**\n     * Returns the ProtectionDomain of this class.\n     */\n    private native java.security.ProtectionDomain getProtectionDomain0();\n\n    /*\n     * Return the Virtual Machine\u0027s Class object for the named\n     * primitive type.\n     */\n    static native Class\u003c?\u003e getPrimitiveClass(String name);\n\n    /*\n     * Check if client is allowed to access members.  If access is denied,\n     * throw a SecurityException.\n     *\n     * This method also enforces package access.\n     *\n     * \u003cp\u003e Default policy: allow all clients access with normal Java access\n     * control.\n     *\n     * \u003cp\u003e NOTE: should only be called if a SecurityManager is installed\n     */\n    private void checkMemberAccess(SecurityManager sm, int which,\n                                   Class\u003c?\u003e caller, boolean checkProxyInterfaces) {\n        /* Default policy allows access to all {@link Member#PUBLIC} members,\n         * as well as access to classes that have the same class loader as the caller.\n         * In all other cases, it requires RuntimePermission(\"accessDeclaredMembers\")\n         * permission.\n         */\n        final ClassLoader ccl \u003d ClassLoader.getClassLoader(caller);\n        if (which !\u003d Member.PUBLIC) {\n            final ClassLoader cl \u003d getClassLoader0();\n            if (ccl !\u003d cl) {\n                sm.checkPermission(SecurityConstants.CHECK_MEMBER_ACCESS_PERMISSION);\n            }\n        }\n        this.checkPackageAccess(sm, ccl, checkProxyInterfaces);\n    }\n\n    /*\n     * Checks if a client loaded in ClassLoader ccl is allowed to access this\n     * class under the current package access policy. If access is denied,\n     * throw a SecurityException.\n     *\n     * NOTE: this method should only be called if a SecurityManager is active\n     */\n    private void checkPackageAccess(SecurityManager sm, final ClassLoader ccl,\n                                    boolean checkProxyInterfaces) {\n        final ClassLoader cl \u003d getClassLoader0();\n\n        if (ReflectUtil.needsPackageAccessCheck(ccl, cl)) {\n            String pkg \u003d this.getPackageName();\n            if (pkg !\u003d null \u0026\u0026 !pkg.isEmpty()) {\n                // skip the package access check on a proxy class in default proxy package\n                if (!Proxy.isProxyClass(this) || ReflectUtil.isNonPublicProxyClass(this)) {\n                    sm.checkPackageAccess(pkg);\n                }\n            }\n        }\n        // check package access on the proxy interfaces\n        if (checkProxyInterfaces \u0026\u0026 Proxy.isProxyClass(this)) {\n            ReflectUtil.checkProxyPackageAccess(ccl, this.getInterfaces());\n        }\n    }\n\n    /**\n     * Add a package name prefix if the name is not absolute Remove leading \"/\"\n     * if name is absolute\n     */\n    private String resolveName(String name) {\n        if (!name.startsWith(\"/\")) {\n            Class\u003c?\u003e c \u003d this;\n            while (c.isArray()) {\n                c \u003d c.getComponentType();\n            }\n            String baseName \u003d c.getPackageName();\n            if (baseName !\u003d null \u0026\u0026 !baseName.isEmpty()) {\n                name \u003d baseName.replace(\u0027.\u0027, \u0027/\u0027) + \"/\" + name;\n            }\n        } else {\n            name \u003d name.substring(1);\n        }\n        return name;\n    }\n\n    /**\n     * Atomic operations support.\n     */\n    private static class Atomic {\n        // initialize Unsafe machinery here, since we need to call Class.class instance method\n        // and have to avoid calling it in the static initializer of the Class class...\n        private static final Unsafe unsafe \u003d Unsafe.getUnsafe();\n        // offset of Class.reflectionData instance field\n        private static final long reflectionDataOffset\n                \u003d unsafe.objectFieldOffset(Class.class, \"reflectionData\");\n        // offset of Class.annotationType instance field\n        private static final long annotationTypeOffset\n                \u003d unsafe.objectFieldOffset(Class.class, \"annotationType\");\n        // offset of Class.annotationData instance field\n        private static final long annotationDataOffset\n                \u003d unsafe.objectFieldOffset(Class.class, \"annotationData\");\n\n        static \u003cT\u003e boolean casReflectionData(Class\u003c?\u003e clazz,\n                                             SoftReference\u003cReflectionData\u003cT\u003e\u003e oldData,\n                                             SoftReference\u003cReflectionData\u003cT\u003e\u003e newData) {\n            return unsafe.compareAndSetObject(clazz, reflectionDataOffset, oldData, newData);\n        }\n\n        static \u003cT\u003e boolean casAnnotationType(Class\u003c?\u003e clazz,\n                                             AnnotationType oldType,\n                                             AnnotationType newType) {\n            return unsafe.compareAndSetObject(clazz, annotationTypeOffset, oldType, newType);\n        }\n\n        static \u003cT\u003e boolean casAnnotationData(Class\u003c?\u003e clazz,\n                                             AnnotationData oldData,\n                                             AnnotationData newData) {\n            return unsafe.compareAndSetObject(clazz, annotationDataOffset, oldData, newData);\n        }\n    }\n\n    /**\n     * Reflection support.\n     */\n\n    // Reflection data caches various derived names and reflective members. Cached\n    // values may be invalidated when JVM TI RedefineClasses() is called\n    private static class ReflectionData\u003cT\u003e {\n        volatile Field[] declaredFields;\n        volatile Field[] publicFields;\n        volatile Method[] declaredMethods;\n        volatile Method[] publicMethods;\n        volatile Constructor\u003cT\u003e[] declaredConstructors;\n        volatile Constructor\u003cT\u003e[] publicConstructors;\n        // Intermediate results for getFields and getMethods\n        volatile Field[] declaredPublicFields;\n        volatile Method[] declaredPublicMethods;\n        volatile Class\u003c?\u003e[] interfaces;\n\n        // Cached names\n        String simpleName;\n        String canonicalName;\n        static final String NULL_SENTINEL \u003d new String();\n\n        // Value of classRedefinedCount when we created this ReflectionData instance\n        final int redefinedCount;\n\n        ReflectionData(int redefinedCount) {\n            this.redefinedCount \u003d redefinedCount;\n        }\n    }\n\n    private transient volatile SoftReference\u003cReflectionData\u003cT\u003e\u003e reflectionData;\n\n    // Incremented by the VM on each call to JVM TI RedefineClasses()\n    // that redefines this class or a superclass.\n    private transient volatile int classRedefinedCount;\n\n    // Lazily create and cache ReflectionData\n    private ReflectionData\u003cT\u003e reflectionData() {\n        SoftReference\u003cReflectionData\u003cT\u003e\u003e reflectionData \u003d this.reflectionData;\n        int classRedefinedCount \u003d this.classRedefinedCount;\n        ReflectionData\u003cT\u003e rd;\n        if (reflectionData !\u003d null \u0026\u0026\n            (rd \u003d reflectionData.get()) !\u003d null \u0026\u0026\n            rd.redefinedCount \u003d\u003d classRedefinedCount) {\n            return rd;\n        }\n        // else no SoftReference or cleared SoftReference or stale ReflectionData\n        // -\u003e create and replace new instance\n        return newReflectionData(reflectionData, classRedefinedCount);\n    }\n\n    private ReflectionData\u003cT\u003e newReflectionData(SoftReference\u003cReflectionData\u003cT\u003e\u003e oldReflectionData,\n                                                int classRedefinedCount) {\n        while (true) {\n            ReflectionData\u003cT\u003e rd \u003d new ReflectionData\u003c\u003e(classRedefinedCount);\n            // try to CAS it...\n            if (Atomic.casReflectionData(this, oldReflectionData, new SoftReference\u003c\u003e(rd))) {\n                return rd;\n            }\n            // else retry\n            oldReflectionData \u003d this.reflectionData;\n            classRedefinedCount \u003d this.classRedefinedCount;\n            if (oldReflectionData !\u003d null \u0026\u0026\n                (rd \u003d oldReflectionData.get()) !\u003d null \u0026\u0026\n                rd.redefinedCount \u003d\u003d classRedefinedCount) {\n                return rd;\n            }\n        }\n    }\n\n    // Generic signature handling\n    private native String getGenericSignature0();\n\n    // Generic info repository; lazily initialized\n    private transient volatile ClassRepository genericInfo;\n\n    // accessor for factory\n    private GenericsFactory getFactory() {\n        // create scope and factory\n        return CoreReflectionFactory.make(this, ClassScope.make(this));\n    }\n\n    // accessor for generic info repository;\n    // generic info is lazily initialized\n    private ClassRepository getGenericInfo() {\n        ClassRepository genericInfo \u003d this.genericInfo;\n        if (genericInfo \u003d\u003d null) {\n            String signature \u003d getGenericSignature0();\n            if (signature \u003d\u003d null) {\n                genericInfo \u003d ClassRepository.NONE;\n            } else {\n                genericInfo \u003d ClassRepository.make(signature, getFactory());\n            }\n            this.genericInfo \u003d genericInfo;\n        }\n        return (genericInfo !\u003d ClassRepository.NONE) ? genericInfo : null;\n    }\n\n    // Annotations handling\n    native byte[] getRawAnnotations();\n    // Since 1.8\n    native byte[] getRawTypeAnnotations();\n    static byte[] getExecutableTypeAnnotationBytes(Executable ex) {\n        return getReflectionFactory().getExecutableTypeAnnotationBytes(ex);\n    }\n\n    native ConstantPool getConstantPool();\n\n    //\n    //\n    // java.lang.reflect.Field handling\n    //\n    //\n\n    // Returns an array of \"root\" fields. These Field objects must NOT\n    // be propagated to the outside world, but must instead be copied\n    // via ReflectionFactory.copyField.\n    private Field[] privateGetDeclaredFields(boolean publicOnly) {\n        Field[] res;\n        ReflectionData\u003cT\u003e rd \u003d reflectionData();\n        if (rd !\u003d null) {\n            res \u003d publicOnly ? rd.declaredPublicFields : rd.declaredFields;\n            if (res !\u003d null) return res;\n        }\n        // No cached value available; request value from VM\n        res \u003d Reflection.filterFields(this, getDeclaredFields0(publicOnly));\n        if (rd !\u003d null) {\n            if (publicOnly) {\n                rd.declaredPublicFields \u003d res;\n            } else {\n                rd.declaredFields \u003d res;\n            }\n        }\n        return res;\n    }\n\n    // Returns an array of \"root\" fields. These Field objects must NOT\n    // be propagated to the outside world, but must instead be copied\n    // via ReflectionFactory.copyField.\n    private Field[] privateGetPublicFields() {\n        Field[] res;\n        ReflectionData\u003cT\u003e rd \u003d reflectionData();\n        if (rd !\u003d null) {\n            res \u003d rd.publicFields;\n            if (res !\u003d null) return res;\n        }\n\n        // Use a linked hash set to ensure order is preserved and\n        // fields from common super interfaces are not duplicated\n        LinkedHashSet\u003cField\u003e fields \u003d new LinkedHashSet\u003c\u003e();\n\n        // Local fields\n        addAll(fields, privateGetDeclaredFields(true));\n\n        // Direct superinterfaces, recursively\n        for (Class\u003c?\u003e si : getInterfaces()) {\n            addAll(fields, si.privateGetPublicFields());\n        }\n\n        // Direct superclass, recursively\n        Class\u003c?\u003e sc \u003d getSuperclass();\n        if (sc !\u003d null) {\n            addAll(fields, sc.privateGetPublicFields());\n        }\n\n        res \u003d fields.toArray(new Field[0]);\n        if (rd !\u003d null) {\n            rd.publicFields \u003d res;\n        }\n        return res;\n    }\n\n    private static void addAll(Collection\u003cField\u003e c, Field[] o) {\n        for (Field f : o) {\n            c.add(f);\n        }\n    }\n\n\n    //\n    //\n    // java.lang.reflect.Constructor handling\n    //\n    //\n\n    // Returns an array of \"root\" constructors. These Constructor\n    // objects must NOT be propagated to the outside world, but must\n    // instead be copied via ReflectionFactory.copyConstructor.\n    private Constructor\u003cT\u003e[] privateGetDeclaredConstructors(boolean publicOnly) {\n        Constructor\u003cT\u003e[] res;\n        ReflectionData\u003cT\u003e rd \u003d reflectionData();\n        if (rd !\u003d null) {\n            res \u003d publicOnly ? rd.publicConstructors : rd.declaredConstructors;\n            if (res !\u003d null) return res;\n        }\n        // No cached value available; request value from VM\n        if (isInterface()) {\n            @SuppressWarnings(\"unchecked\")\n            Constructor\u003cT\u003e[] temporaryRes \u003d (Constructor\u003cT\u003e[]) new Constructor\u003c?\u003e[0];\n            res \u003d temporaryRes;\n        } else {\n            res \u003d getDeclaredConstructors0(publicOnly);\n        }\n        if (rd !\u003d null) {\n            if (publicOnly) {\n                rd.publicConstructors \u003d res;\n            } else {\n                rd.declaredConstructors \u003d res;\n            }\n        }\n        return res;\n    }\n\n    //\n    //\n    // java.lang.reflect.Method handling\n    //\n    //\n\n    // Returns an array of \"root\" methods. These Method objects must NOT\n    // be propagated to the outside world, but must instead be copied\n    // via ReflectionFactory.copyMethod.\n    private Method[] privateGetDeclaredMethods(boolean publicOnly) {\n        Method[] res;\n        ReflectionData\u003cT\u003e rd \u003d reflectionData();\n        if (rd !\u003d null) {\n            res \u003d publicOnly ? rd.declaredPublicMethods : rd.declaredMethods;\n            if (res !\u003d null) return res;\n        }\n        // No cached value available; request value from VM\n        res \u003d Reflection.filterMethods(this, getDeclaredMethods0(publicOnly));\n        if (rd !\u003d null) {\n            if (publicOnly) {\n                rd.declaredPublicMethods \u003d res;\n            } else {\n                rd.declaredMethods \u003d res;\n            }\n        }\n        return res;\n    }\n\n    // Returns an array of \"root\" methods. These Method objects must NOT\n    // be propagated to the outside world, but must instead be copied\n    // via ReflectionFactory.copyMethod.\n    private Method[] privateGetPublicMethods() {\n        Method[] res;\n        ReflectionData\u003cT\u003e rd \u003d reflectionData();\n        if (rd !\u003d null) {\n            res \u003d rd.publicMethods;\n            if (res !\u003d null) return res;\n        }\n\n        // No cached value available; compute value recursively.\n        // Start by fetching public declared methods...\n        PublicMethods pms \u003d new PublicMethods();\n        for (Method m : privateGetDeclaredMethods(/* publicOnly */ true)) {\n            pms.merge(m);\n        }\n        // ...then recur over superclass methods...\n        Class\u003c?\u003e sc \u003d getSuperclass();\n        if (sc !\u003d null) {\n            for (Method m : sc.privateGetPublicMethods()) {\n                pms.merge(m);\n            }\n        }\n        // ...and finally over direct superinterfaces.\n        for (Class\u003c?\u003e intf : getInterfaces(/* cloneArray */ false)) {\n            for (Method m : intf.privateGetPublicMethods()) {\n                // static interface methods are not inherited\n                if (!Modifier.isStatic(m.getModifiers())) {\n                    pms.merge(m);\n                }\n            }\n        }\n\n        res \u003d pms.toArray();\n        if (rd !\u003d null) {\n            rd.publicMethods \u003d res;\n        }\n        return res;\n    }\n\n\n    //\n    // Helpers for fetchers of one field, method, or constructor\n    //\n\n    // This method does not copy the returned Field object!\n    private static Field searchFields(Field[] fields, String name) {\n        for (Field field : fields) {\n            if (field.getName().equals(name)) {\n                return field;\n            }\n        }\n        return null;\n    }\n\n    // Returns a \"root\" Field object. This Field object must NOT\n    // be propagated to the outside world, but must instead be copied\n    // via ReflectionFactory.copyField.\n    private Field getField0(String name) {\n        // Note: the intent is that the search algorithm this routine\n        // uses be equivalent to the ordering imposed by\n        // privateGetPublicFields(). It fetches only the declared\n        // public fields for each class, however, to reduce the number\n        // of Field objects which have to be created for the common\n        // case where the field being requested is declared in the\n        // class which is being queried.\n        Field res;\n        // Search declared public fields\n        if ((res \u003d searchFields(privateGetDeclaredFields(true), name)) !\u003d null) {\n            return res;\n        }\n        // Direct superinterfaces, recursively\n        Class\u003c?\u003e[] interfaces \u003d getInterfaces(/* cloneArray */ false);\n        for (Class\u003c?\u003e c : interfaces) {\n            if ((res \u003d c.getField0(name)) !\u003d null) {\n                return res;\n            }\n        }\n        // Direct superclass, recursively\n        if (!isInterface()) {\n            Class\u003c?\u003e c \u003d getSuperclass();\n            if (c !\u003d null) {\n                if ((res \u003d c.getField0(name)) !\u003d null) {\n                    return res;\n                }\n            }\n        }\n        return null;\n    }\n\n    // This method does not copy the returned Method object!\n    private static Method searchMethods(Method[] methods,\n                                        String name,\n                                        Class\u003c?\u003e[] parameterTypes)\n    {\n        ReflectionFactory fact \u003d getReflectionFactory();\n        Method res \u003d null;\n        for (Method m : methods) {\n            if (m.getName().equals(name)\n                \u0026\u0026 arrayContentsEq(parameterTypes,\n                                   fact.getExecutableSharedParameterTypes(m))\n                \u0026\u0026 (res \u003d\u003d null\n                    || (res.getReturnType() !\u003d m.getReturnType()\n                        \u0026\u0026 res.getReturnType().isAssignableFrom(m.getReturnType()))))\n                res \u003d m;\n        }\n        return res;\n    }\n\n    private static final Class\u003c?\u003e[] EMPTY_CLASS_ARRAY \u003d new Class\u003c?\u003e[0];\n\n    // Returns a \"root\" Method object. This Method object must NOT\n    // be propagated to the outside world, but must instead be copied\n    // via ReflectionFactory.copyMethod.\n    private Method getMethod0(String name, Class\u003c?\u003e[] parameterTypes) {\n        PublicMethods.MethodList res \u003d getMethodsRecursive(\n            name,\n            parameterTypes \u003d\u003d null ? EMPTY_CLASS_ARRAY : parameterTypes,\n            /* includeStatic */ true);\n        return res \u003d\u003d null ? null : res.getMostSpecific();\n    }\n\n    // Returns a list of \"root\" Method objects. These Method objects must NOT\n    // be propagated to the outside world, but must instead be copied\n    // via ReflectionFactory.copyMethod.\n    private PublicMethods.MethodList getMethodsRecursive(String name,\n                                                         Class\u003c?\u003e[] parameterTypes,\n                                                         boolean includeStatic) {\n        // 1st check declared public methods\n        Method[] methods \u003d privateGetDeclaredMethods(/* publicOnly */ true);\n        PublicMethods.MethodList res \u003d PublicMethods.MethodList\n            .filter(methods, name, parameterTypes, includeStatic);\n        // if there is at least one match among declared methods, we need not\n        // search any further as such match surely overrides matching methods\n        // declared in superclass(es) or interface(s).\n        if (res !\u003d null) {\n            return res;\n        }\n\n        // if there was no match among declared methods,\n        // we must consult the superclass (if any) recursively...\n        Class\u003c?\u003e sc \u003d getSuperclass();\n        if (sc !\u003d null) {\n            res \u003d sc.getMethodsRecursive(name, parameterTypes, includeStatic);\n        }\n\n        // ...and coalesce the superclass methods with methods obtained\n        // from directly implemented interfaces excluding static methods...\n        for (Class\u003c?\u003e intf : getInterfaces(/* cloneArray */ false)) {\n            res \u003d PublicMethods.MethodList.merge(\n                res, intf.getMethodsRecursive(name, parameterTypes,\n                                              /* includeStatic */ false));\n        }\n\n        return res;\n    }\n\n    // Returns a \"root\" Constructor object. This Constructor object must NOT\n    // be propagated to the outside world, but must instead be copied\n    // via ReflectionFactory.copyConstructor.\n    private Constructor\u003cT\u003e getConstructor0(Class\u003c?\u003e[] parameterTypes,\n                                        int which) throws NoSuchMethodException\n    {\n        ReflectionFactory fact \u003d getReflectionFactory();\n        Constructor\u003cT\u003e[] constructors \u003d privateGetDeclaredConstructors((which \u003d\u003d Member.PUBLIC));\n        for (Constructor\u003cT\u003e constructor : constructors) {\n            if (arrayContentsEq(parameterTypes,\n                                fact.getExecutableSharedParameterTypes(constructor))) {\n                return constructor;\n            }\n        }\n        throw new NoSuchMethodException(methodToString(\"\u003cinit\u003e\", parameterTypes));\n    }\n\n    //\n    // Other helpers and base implementation\n    //\n\n    private static boolean arrayContentsEq(Object[] a1, Object[] a2) {\n        if (a1 \u003d\u003d null) {\n            return a2 \u003d\u003d null || a2.length \u003d\u003d 0;\n        }\n\n        if (a2 \u003d\u003d null) {\n            return a1.length \u003d\u003d 0;\n        }\n\n        if (a1.length !\u003d a2.length) {\n            return false;\n        }\n\n        for (int i \u003d 0; i \u003c a1.length; i++) {\n            if (a1[i] !\u003d a2[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private static Field[] copyFields(Field[] arg) {\n        Field[] out \u003d new Field[arg.length];\n        ReflectionFactory fact \u003d getReflectionFactory();\n        for (int i \u003d 0; i \u003c arg.length; i++) {\n            out[i] \u003d fact.copyField(arg[i]);\n        }\n        return out;\n    }\n\n    private static Method[] copyMethods(Method[] arg) {\n        Method[] out \u003d new Method[arg.length];\n        ReflectionFactory fact \u003d getReflectionFactory();\n        for (int i \u003d 0; i \u003c arg.length; i++) {\n            out[i] \u003d fact.copyMethod(arg[i]);\n        }\n        return out;\n    }\n\n    private static \u003cU\u003e Constructor\u003cU\u003e[] copyConstructors(Constructor\u003cU\u003e[] arg) {\n        Constructor\u003cU\u003e[] out \u003d arg.clone();\n        ReflectionFactory fact \u003d getReflectionFactory();\n        for (int i \u003d 0; i \u003c out.length; i++) {\n            out[i] \u003d fact.copyConstructor(out[i]);\n        }\n        return out;\n    }\n\n    private native Field[]       getDeclaredFields0(boolean publicOnly);\n    private native Method[]      getDeclaredMethods0(boolean publicOnly);\n    private native Constructor\u003cT\u003e[] getDeclaredConstructors0(boolean publicOnly);\n    private native Class\u003c?\u003e[]   getDeclaredClasses0();\n\n    /**\n     * Helper method to get the method name from arguments.\n     */\n    private String methodToString(String name, Class\u003c?\u003e[] argTypes) {\n        StringJoiner sj \u003d new StringJoiner(\", \", getName() + \".\" + name + \"(\", \")\");\n        if (argTypes !\u003d null) {\n            for (int i \u003d 0; i \u003c argTypes.length; i++) {\n                Class\u003c?\u003e c \u003d argTypes[i];\n                sj.add((c \u003d\u003d null) ? \"null\" : c.getName());\n            }\n        }\n        return sj.toString();\n    }\n\n    /** use serialVersionUID from JDK 1.1 for interoperability */\n    private static final long serialVersionUID \u003d 3206093459760846163L;\n\n\n    /**\n     * Class Class is special cased within the Serialization Stream Protocol.\n     *\n     * A Class instance is written initially into an ObjectOutputStream in the\n     * following format:\n     * \u003cpre\u003e\n     *      {@code TC_CLASS} ClassDescriptor\n     *      A ClassDescriptor is a special cased serialization of\n     *      a {@code java.io.ObjectStreamClass} instance.\n     * \u003c/pre\u003e\n     * A new handle is generated for the initial time the class descriptor\n     * is written into the stream. Future references to the class descriptor\n     * are written as references to the initial class descriptor instance.\n     *\n     * @see java.io.ObjectStreamClass\n     */\n    private static final ObjectStreamField[] serialPersistentFields \u003d\n        new ObjectStreamField[0];\n\n\n    /**\n     * Returns the assertion status that would be assigned to this\n     * class if it were to be initialized at the time this method is invoked.\n     * If this class has had its assertion status set, the most recent\n     * setting will be returned; otherwise, if any package default assertion\n     * status pertains to this class, the most recent setting for the most\n     * specific pertinent package default assertion status is returned;\n     * otherwise, if this class is not a system class (i.e., it has a\n     * class loader) its class loader\u0027s default assertion status is returned;\n     * otherwise, the system class default assertion status is returned.\n     * \u003cp\u003e\n     * Few programmers will have any need for this method; it is provided\n     * for the benefit of the JRE itself.  (It allows a class to determine at\n     * the time that it is initialized whether assertions should be enabled.)\n     * Note that this method is not guaranteed to return the actual\n     * assertion status that was (or will be) associated with the specified\n     * class when it was (or will be) initialized.\n     *\n     * @return the desired assertion status of the specified class.\n     * @see    java.lang.ClassLoader#setClassAssertionStatus\n     * @see    java.lang.ClassLoader#setPackageAssertionStatus\n     * @see    java.lang.ClassLoader#setDefaultAssertionStatus\n     * @since  1.4\n     */\n    public boolean desiredAssertionStatus() {\n        ClassLoader loader \u003d getClassLoader0();\n        // If the loader is null this is a system class, so ask the VM\n        if (loader \u003d\u003d null)\n            return desiredAssertionStatus0(this);\n\n        // If the classloader has been initialized with the assertion\n        // directives, ask it. Otherwise, ask the VM.\n        synchronized(loader.assertionLock) {\n            if (loader.classAssertionStatus !\u003d null) {\n                return loader.desiredAssertionStatus(getName());\n            }\n        }\n        return desiredAssertionStatus0(this);\n    }\n\n    // Retrieves the desired assertion status of this class from the VM\n    private static native boolean desiredAssertionStatus0(Class\u003c?\u003e clazz);\n\n    /**\n     * Returns true if and only if this class was declared as an enum in the\n     * source code.\n     *\n     * @return true if and only if this class was declared as an enum in the\n     *     source code\n     * @since 1.5\n     */\n    public boolean isEnum() {\n        // An enum must both directly extend java.lang.Enum and have\n        // the ENUM bit set; classes for specialized enum constants\n        // don\u0027t do the former.\n        return (this.getModifiers() \u0026 ENUM) !\u003d 0 \u0026\u0026\n        this.getSuperclass() \u003d\u003d java.lang.Enum.class;\n    }\n\n    // Fetches the factory for reflective objects\n    private static ReflectionFactory getReflectionFactory() {\n        if (reflectionFactory \u003d\u003d null) {\n            reflectionFactory \u003d\n                java.security.AccessController.doPrivileged\n                    (new ReflectionFactory.GetReflectionFactoryAction());\n        }\n        return reflectionFactory;\n    }\n    private static ReflectionFactory reflectionFactory;\n\n    /**\n     * Returns the elements of this enum class or null if this\n     * Class object does not represent an enum type.\n     *\n     * @return an array containing the values comprising the enum class\n     *     represented by this Class object in the order they\u0027re\n     *     declared, or null if this Class object does not\n     *     represent an enum type\n     * @since 1.5\n     */\n    public T[] getEnumConstants() {\n        T[] values \u003d getEnumConstantsShared();\n        return (values !\u003d null) ? values.clone() : null;\n    }\n\n    /**\n     * Returns the elements of this enum class or null if this\n     * Class object does not represent an enum type;\n     * identical to getEnumConstants except that the result is\n     * uncloned, cached, and shared by all callers.\n     */\n    T[] getEnumConstantsShared() {\n        T[] constants \u003d enumConstants;\n        if (constants \u003d\u003d null) {\n            if (!isEnum()) return null;\n            try {\n                final Method values \u003d getMethod(\"values\");\n                java.security.AccessController.doPrivileged(\n                    new java.security.PrivilegedAction\u003c\u003e() {\n                        public Void run() {\n                                values.setAccessible(true);\n                                return null;\n                            }\n                        });\n                @SuppressWarnings(\"unchecked\")\n                T[] temporaryConstants \u003d (T[])values.invoke(null);\n                enumConstants \u003d constants \u003d temporaryConstants;\n            }\n            // These can happen when users concoct enum-like classes\n            // that don\u0027t comply with the enum spec.\n            catch (InvocationTargetException | NoSuchMethodException |\n                   IllegalAccessException ex) { return null; }\n        }\n        return constants;\n    }\n    private transient volatile T[] enumConstants;\n\n    /**\n     * Returns a map from simple name to enum constant.  This package-private\n     * method is used internally by Enum to implement\n     * {@code public static \u003cT extends Enum\u003cT\u003e\u003e T valueOf(Class\u003cT\u003e, String)}\n     * efficiently.  Note that the map is returned by this method is\n     * created lazily on first use.  Typically it won\u0027t ever get created.\n     */\n    Map\u003cString, T\u003e enumConstantDirectory() {\n        Map\u003cString, T\u003e directory \u003d enumConstantDirectory;\n        if (directory \u003d\u003d null) {\n            T[] universe \u003d getEnumConstantsShared();\n            if (universe \u003d\u003d null)\n                throw new IllegalArgumentException(\n                    getName() + \" is not an enum type\");\n            directory \u003d new HashMap\u003c\u003e((int)(universe.length / 0.75f) + 1);\n            for (T constant : universe) {\n                directory.put(((Enum\u003c?\u003e)constant).name(), constant);\n            }\n            enumConstantDirectory \u003d directory;\n        }\n        return directory;\n    }\n    private transient volatile Map\u003cString, T\u003e enumConstantDirectory;\n\n    /**\n     * Casts an object to the class or interface represented\n     * by this {@code Class} object.\n     *\n     * @param obj the object to be cast\n     * @return the object after casting, or null if obj is null\n     *\n     * @throws ClassCastException if the object is not\n     * null and is not assignable to the type T.\n     *\n     * @since 1.5\n     */\n    @SuppressWarnings(\"unchecked\")\n    @HotSpotIntrinsicCandidate\n    public T cast(Object obj) {\n        if (obj !\u003d null \u0026\u0026 !isInstance(obj))\n            throw new ClassCastException(cannotCastMsg(obj));\n        return (T) obj;\n    }\n\n    private String cannotCastMsg(Object obj) {\n        return \"Cannot cast \" + obj.getClass().getName() + \" to \" + getName();\n    }\n\n    /**\n     * Casts this {@code Class} object to represent a subclass of the class\n     * represented by the specified class object.  Checks that the cast\n     * is valid, and throws a {@code ClassCastException} if it is not.  If\n     * this method succeeds, it always returns a reference to this class object.\n     *\n     * \u003cp\u003eThis method is useful when a client needs to \"narrow\" the type of\n     * a {@code Class} object to pass it to an API that restricts the\n     * {@code Class} objects that it is willing to accept.  A cast would\n     * generate a compile-time warning, as the correctness of the cast\n     * could not be checked at runtime (because generic types are implemented\n     * by erasure).\n     *\n     * @param \u003cU\u003e the type to cast this class object to\n     * @param clazz the class of the type to cast this class object to\n     * @return this {@code Class} object, cast to represent a subclass of\n     *    the specified class object.\n     * @throws ClassCastException if this {@code Class} object does not\n     *    represent a subclass of the specified class (here \"subclass\" includes\n     *    the class itself).\n     * @since 1.5\n     */\n    @SuppressWarnings(\"unchecked\")\n    public \u003cU\u003e Class\u003c? extends U\u003e asSubclass(Class\u003cU\u003e clazz) {\n        if (clazz.isAssignableFrom(this))\n            return (Class\u003c? extends U\u003e) this;\n        else\n            throw new ClassCastException(this.toString());\n    }\n\n    /**\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.5\n     */\n    @SuppressWarnings(\"unchecked\")\n    public \u003cA extends Annotation\u003e A getAnnotation(Class\u003cA\u003e annotationClass) {\n        Objects.requireNonNull(annotationClass);\n\n        return (A) annotationData().annotations.get(annotationClass);\n    }\n\n    /**\n     * {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.5\n     */\n    @Override\n    public boolean isAnnotationPresent(Class\u003c? extends Annotation\u003e annotationClass) {\n        return GenericDeclaration.super.isAnnotationPresent(annotationClass);\n    }\n\n    /**\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.8\n     */\n    @Override\n    public \u003cA extends Annotation\u003e A[] getAnnotationsByType(Class\u003cA\u003e annotationClass) {\n        Objects.requireNonNull(annotationClass);\n\n        AnnotationData annotationData \u003d annotationData();\n        return AnnotationSupport.getAssociatedAnnotations(annotationData.declaredAnnotations,\n                                                          this,\n                                                          annotationClass);\n    }\n\n    /**\n     * @since 1.5\n     */\n    public Annotation[] getAnnotations() {\n        return AnnotationParser.toArray(annotationData().annotations);\n    }\n\n    /**\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.8\n     */\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public \u003cA extends Annotation\u003e A getDeclaredAnnotation(Class\u003cA\u003e annotationClass) {\n        Objects.requireNonNull(annotationClass);\n\n        return (A) annotationData().declaredAnnotations.get(annotationClass);\n    }\n\n    /**\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.8\n     */\n    @Override\n    public \u003cA extends Annotation\u003e A[] getDeclaredAnnotationsByType(Class\u003cA\u003e annotationClass) {\n        Objects.requireNonNull(annotationClass);\n\n        return AnnotationSupport.getDirectlyAndIndirectlyPresent(annotationData().declaredAnnotations,\n                                                                 annotationClass);\n    }\n\n    /**\n     * @since 1.5\n     */\n    public Annotation[] getDeclaredAnnotations()  {\n        return AnnotationParser.toArray(annotationData().declaredAnnotations);\n    }\n\n    // annotation data that might get invalidated when JVM TI RedefineClasses() is called\n    private static class AnnotationData {\n        final Map\u003cClass\u003c? extends Annotation\u003e, Annotation\u003e annotations;\n        final Map\u003cClass\u003c? extends Annotation\u003e, Annotation\u003e declaredAnnotations;\n\n        // Value of classRedefinedCount when we created this AnnotationData instance\n        final int redefinedCount;\n\n        AnnotationData(Map\u003cClass\u003c? extends Annotation\u003e, Annotation\u003e annotations,\n                       Map\u003cClass\u003c? extends Annotation\u003e, Annotation\u003e declaredAnnotations,\n                       int redefinedCount) {\n            this.annotations \u003d annotations;\n            this.declaredAnnotations \u003d declaredAnnotations;\n            this.redefinedCount \u003d redefinedCount;\n        }\n    }\n\n    // Annotations cache\n    @SuppressWarnings(\"UnusedDeclaration\")\n    private transient volatile AnnotationData annotationData;\n\n    private AnnotationData annotationData() {\n        while (true) { // retry loop\n            AnnotationData annotationData \u003d this.annotationData;\n            int classRedefinedCount \u003d this.classRedefinedCount;\n            if (annotationData !\u003d null \u0026\u0026\n                annotationData.redefinedCount \u003d\u003d classRedefinedCount) {\n                return annotationData;\n            }\n            // null or stale annotationData -\u003e optimistically create new instance\n            AnnotationData newAnnotationData \u003d createAnnotationData(classRedefinedCount);\n            // try to install it\n            if (Atomic.casAnnotationData(this, annotationData, newAnnotationData)) {\n                // successfully installed new AnnotationData\n                return newAnnotationData;\n            }\n        }\n    }\n\n    private AnnotationData createAnnotationData(int classRedefinedCount) {\n        Map\u003cClass\u003c? extends Annotation\u003e, Annotation\u003e declaredAnnotations \u003d\n            AnnotationParser.parseAnnotations(getRawAnnotations(), getConstantPool(), this);\n        Class\u003c?\u003e superClass \u003d getSuperclass();\n        Map\u003cClass\u003c? extends Annotation\u003e, Annotation\u003e annotations \u003d null;\n        if (superClass !\u003d null) {\n            Map\u003cClass\u003c? extends Annotation\u003e, Annotation\u003e superAnnotations \u003d\n                superClass.annotationData().annotations;\n            for (Map.Entry\u003cClass\u003c? extends Annotation\u003e, Annotation\u003e e : superAnnotations.entrySet()) {\n                Class\u003c? extends Annotation\u003e annotationClass \u003d e.getKey();\n                if (AnnotationType.getInstance(annotationClass).isInherited()) {\n                    if (annotations \u003d\u003d null) { // lazy construction\n                        annotations \u003d new LinkedHashMap\u003c\u003e((Math.max(\n                                declaredAnnotations.size(),\n                                Math.min(12, declaredAnnotations.size() + superAnnotations.size())\n                            ) * 4 + 2) / 3\n                        );\n                    }\n                    annotations.put(annotationClass, e.getValue());\n                }\n            }\n        }\n        if (annotations \u003d\u003d null) {\n            // no inherited annotations -\u003e share the Map with declaredAnnotations\n            annotations \u003d declaredAnnotations;\n        } else {\n            // at least one inherited annotation -\u003e declared may override inherited\n            annotations.putAll(declaredAnnotations);\n        }\n        return new AnnotationData(annotations, declaredAnnotations, classRedefinedCount);\n    }\n\n    // Annotation types cache their internal (AnnotationType) form\n\n    @SuppressWarnings(\"UnusedDeclaration\")\n    private transient volatile AnnotationType annotationType;\n\n    boolean casAnnotationType(AnnotationType oldType, AnnotationType newType) {\n        return Atomic.casAnnotationType(this, oldType, newType);\n    }\n\n    AnnotationType getAnnotationType() {\n        return annotationType;\n    }\n\n    Map\u003cClass\u003c? extends Annotation\u003e, Annotation\u003e getDeclaredAnnotationMap() {\n        return annotationData().declaredAnnotations;\n    }\n\n    /* Backing store of user-defined values pertaining to this class.\n     * Maintained by the ClassValue class.\n     */\n    transient ClassValue.ClassValueMap classValueMap;\n\n    /**\n     * Returns an {@code AnnotatedType} object that represents the use of a\n     * type to specify the superclass of the entity represented by this {@code\n     * Class} object. (The \u003cem\u003euse\u003c/em\u003e of type Foo to specify the superclass\n     * in \u0027...  extends Foo\u0027 is distinct from the \u003cem\u003edeclaration\u003c/em\u003e of type\n     * Foo.)\n     *\n     * \u003cp\u003e If this {@code Class} object represents a type whose declaration\n     * does not explicitly indicate an annotated superclass, then the return\n     * value is an {@code AnnotatedType} object representing an element with no\n     * annotations.\n     *\n     * \u003cp\u003e If this {@code Class} represents either the {@code Object} class, an\n     * interface type, an array type, a primitive type, or void, the return\n     * value is {@code null}.\n     *\n     * @return an object representing the superclass\n     * @since 1.8\n     */\n    public AnnotatedType getAnnotatedSuperclass() {\n        if (this \u003d\u003d Object.class ||\n                isInterface() ||\n                isArray() ||\n                isPrimitive() ||\n                this \u003d\u003d Void.TYPE) {\n            return null;\n        }\n\n        return TypeAnnotationParser.buildAnnotatedSuperclass(getRawTypeAnnotations(), getConstantPool(), this);\n    }\n\n    /**\n     * Returns an array of {@code AnnotatedType} objects that represent the use\n     * of types to specify superinterfaces of the entity represented by this\n     * {@code Class} object. (The \u003cem\u003euse\u003c/em\u003e of type Foo to specify a\n     * superinterface in \u0027... implements Foo\u0027 is distinct from the\n     * \u003cem\u003edeclaration\u003c/em\u003e of type Foo.)\n     *\n     * \u003cp\u003e If this {@code Class} object represents a class, the return value is\n     * an array containing objects representing the uses of interface types to\n     * specify interfaces implemented by the class. The order of the objects in\n     * the array corresponds to the order of the interface types used in the\n     * \u0027implements\u0027 clause of the declaration of this {@code Class} object.\n     *\n     * \u003cp\u003e If this {@code Class} object represents an interface, the return\n     * value is an array containing objects representing the uses of interface\n     * types to specify interfaces directly extended by the interface. The\n     * order of the objects in the array corresponds to the order of the\n     * interface types used in the \u0027extends\u0027 clause of the declaration of this\n     * {@code Class} object.\n     *\n     * \u003cp\u003e If this {@code Class} object represents a class or interface whose\n     * declaration does not explicitly indicate any annotated superinterfaces,\n     * the return value is an array of length 0.\n     *\n     * \u003cp\u003e If this {@code Class} object represents either the {@code Object}\n     * class, an array type, a primitive type, or void, the return value is an\n     * array of length 0.\n     *\n     * @return an array representing the superinterfaces\n     * @since 1.8\n     */\n    public AnnotatedType[] getAnnotatedInterfaces() {\n         return TypeAnnotationParser.buildAnnotatedInterfaces(getRawTypeAnnotations(), getConstantPool(), this);\n    }\n\n    private native Class\u003c?\u003e getNestHost0();\n\n    /**\n     * Returns the nest host of the \u003ca href\u003d#nest\u003enest\u003c/a\u003e to which the class\n     * or interface represented by this {@code Class} object belongs.\n     * Every class and interface is a member of exactly one nest.\n     * A class or interface that is not recorded as belonging to a nest\n     * belongs to the nest consisting only of itself, and is the nest\n     * host.\n     *\n     * \u003cp\u003eEach of the {@code Class} objects representing array types,\n     * primitive types, and {@code void} returns {@code this} to indicate\n     * that the represented entity belongs to the nest consisting only of\n     * itself, and is the nest host.\n     *\n     * \u003cp\u003eIf there is a {@linkplain LinkageError linkage error} accessing\n     * the nest host, or if this class or interface is not enumerated as\n     * a member of the nest by the nest host, then it is considered to belong\n     * to its own nest and {@code this} is returned as the host.\n     *\n     * @apiNote A {@code class} file of version 55.0 or greater may record the\n     * host of the nest to which it belongs by using the {@code NestHost}\n     * attribute (JVMS 4.7.28). Alternatively, a {@code class} file of\n     * version 55.0 or greater may act as a nest host by enumerating the nest\u0027s\n     * other members with the\n     * {@code NestMembers} attribute (JVMS 4.7.29).\n     * A {@code class} file of version 54.0 or lower does not use these\n     * attributes.\n     *\n     * @return the nest host of this class or interface\n     *\n     * @throws SecurityException\n     *         If the returned class is not the current class, and\n     *         if a security manager, \u003ci\u003es\u003c/i\u003e, is present and the caller\u0027s\n     *         class loader is not the same as or an ancestor of the class\n     *         loader for the returned class and invocation of {@link\n     *         SecurityManager#checkPackageAccess s.checkPackageAccess()}\n     *         denies access to the package of the returned class\n     * @since 11\n     * @jvms 4.7.28 and 4.7.29 NestHost and NestMembers attributes\n     * @jvms 5.4.4 Access Control\n     */\n    @CallerSensitive\n    public Class\u003c?\u003e getNestHost() {\n        if (isPrimitive() || isArray()) {\n            return this;\n        }\n        Class\u003c?\u003e host;\n        try {\n            host \u003d getNestHost0();\n        } catch (LinkageError e) {\n            // if we couldn\u0027t load our nest-host then we\n            // act as-if we have no nest-host attribute\n            return this;\n        }\n        // if null then nest membership validation failed, so we\n        // act as-if we have no nest-host attribute\n        if (host \u003d\u003d null || host \u003d\u003d this) {\n            return this;\n        }\n        // returning a different class requires a security check\n        SecurityManager sm \u003d System.getSecurityManager();\n        if (sm !\u003d null) {\n            checkPackageAccess(sm,\n                               ClassLoader.getClassLoader(Reflection.getCallerClass()), true);\n        }\n        return host;\n    }\n\n    /**\n     * Determines if the given {@code Class} is a nestmate of the\n     * class or interface represented by this {@code Class} object.\n     * Two classes or interfaces are nestmates\n     * if they have the same {@linkplain #getNestHost() nest host}.\n     *\n     * @param c the class to check\n     * @return {@code true} if this class and {@code c} are members of\n     * the same nest; and {@code false} otherwise.\n     *\n     * @since 11\n     */\n    public boolean isNestmateOf(Class\u003c?\u003e c) {\n        if (this \u003d\u003d c) {\n            return true;\n        }\n        if (isPrimitive() || isArray() ||\n            c.isPrimitive() || c.isArray()) {\n            return false;\n        }\n        try {\n            return getNestHost0() \u003d\u003d c.getNestHost0();\n        } catch (LinkageError e) {\n            return false;\n        }\n    }\n\n    private native Class\u003c?\u003e[] getNestMembers0();\n\n    /**\n     * Returns an array containing {@code Class} objects representing all the\n     * classes and interfaces that are members of the nest to which the class\n     * or interface represented by this {@code Class} object belongs.\n     * The {@linkplain #getNestHost() nest host} of that nest is the zeroth\n     * element of the array. Subsequent elements represent any classes or\n     * interfaces that are recorded by the nest host as being members of\n     * the nest; the order of such elements is unspecified. Duplicates are\n     * permitted.\n     * If the nest host of that nest does not enumerate any members, then the\n     * array has a single element containing {@code this}.\n     *\n     * \u003cp\u003eEach of the {@code Class} objects representing array types,\n     * primitive types, and {@code void} returns an array containing only\n     * {@code this}.\n     *\n     * \u003cp\u003eThis method validates that, for each class or interface which is\n     * recorded as a member of the nest by the nest host, that class or\n     * interface records itself as a member of that same nest. Any exceptions\n     * that occur during this validation are rethrown by this method.\n     *\n     * @return an array of all classes and interfaces in the same nest as\n     * this class\n     *\n     * @throws LinkageError\n     *         If there is any problem loading or validating a nest member or\n     *         its nest host\n     * @throws SecurityException\n     *         If any returned class is not the current class, and\n     *         if a security manager, \u003ci\u003es\u003c/i\u003e, is present and the caller\u0027s\n     *         class loader is not the same as or an ancestor of the class\n     *         loader for that returned class and invocation of {@link\n     *         SecurityManager#checkPackageAccess s.checkPackageAccess()}\n     *         denies access to the package of that returned class\n     *\n     * @since 11\n     * @see #getNestHost()\n     */\n    @CallerSensitive\n    public Class\u003c?\u003e[] getNestMembers() {\n        if (isPrimitive() || isArray()) {\n            return new Class\u003c?\u003e[] { this };\n        }\n        Class\u003c?\u003e[] members \u003d getNestMembers0();\n        // Can\u0027t actually enable this due to bootstrapping issues\n        // assert(members.length !\u003d 1 || members[0] \u003d\u003d this); // expected invariant from VM\n\n        if (members.length \u003e 1) {\n            // If we return anything other than the current class we need\n            // a security check\n            SecurityManager sm \u003d System.getSecurityManager();\n            if (sm !\u003d null) {\n                checkPackageAccess(sm,\n                                   ClassLoader.getClassLoader(Reflection.getCallerClass()), true);\n            }\n        }\n        return members;\n    }\n}\n"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didOpen(WorkspaceLspService.scala:339)
	at scala.meta.metals.lsp.DelegatingScalaService.didOpen(DelegatingScalaService.scala:39)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

Jan. 30, 2024 10:22:13 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "metals/didFocusTextDocument",
  "params": [
    "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.base/java/lang/Class.java"
  ]
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor7.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didFocus(WorkspaceLspService.scala:627)
	at scala.meta.metals.lsp.DelegatingScalaService.didFocus(DelegatingScalaService.scala:43)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

2024.01.30 10:22:13 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java

Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.base/java/lang/Class.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.semanticTokensFull(WorkspaceLspService.scala:481)
	scala.meta.metals.lsp.DelegatingScalaService.semanticTokensFull(DelegatingScalaService.scala:208)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 30, 2024 10:22:13 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java
java.util.concurrent.CompletionException: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java
	at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:331)
	at java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:346)
	at java.base/java.util.concurrent.CompletableFuture$UniAccept.tryFire(CompletableFuture.java:704)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:506)
	at java.base/java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:2088)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1(CancelTokens.scala:40)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1$adapted(CancelTokens.scala:38)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:484)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.Compilers.semanticTokens(Compilers.scala:426)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$semanticTokensFull$2(MetalsLspService.scala:1605)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:470)
	... 3 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 12 more

2024.01.30 10:22:13 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java

Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.base/java/lang/Class.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.foldingRange(WorkspaceLspService.scala:471)
	scala.meta.metals.lsp.DelegatingScalaService.foldingRange(DelegatingScalaService.scala:155)
	jdk.internal.reflect.GeneratedMethodAccessor6.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 30, 2024 10:22:14 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor6.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$foldingRange$1(MetalsLspService.scala:1683)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.foldingRange(MetalsLspService.scala:1682)
	at scala.meta.internal.metals.WorkspaceLspService.foldingRange(WorkspaceLspService.scala:471)
	at scala.meta.metals.lsp.DelegatingScalaService.foldingRange(DelegatingScalaService.scala:155)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 26 more

2024.01.30 10:22:13 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java

Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.base/java/lang/Class.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.codeLens(WorkspaceLspService.scala:466)
	scala.meta.metals.lsp.DelegatingScalaService.codeLens(DelegatingScalaService.scala:150)
	jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 30, 2024 10:22:14 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java
java.util.concurrent.CompletionException: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java
	at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:331)
	at java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:346)
	at java.base/java.util.concurrent.CompletableFuture$UniAccept.tryFire(CompletableFuture.java:704)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:506)
	at java.base/java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:2088)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1(CancelTokens.scala:40)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1$adapted(CancelTokens.scala:38)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:484)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$codeLens$3(MetalsLspService.scala:1673)
	at scala.meta.internal.metals.TimerProvider.timedThunk(TimerProvider.scala:25)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$codeLens$2(MetalsLspService.scala:1672)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	... 3 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 13 more

2024.01.30 10:22:13 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java

Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.base/java/lang/Class.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:386)
	scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	jdk.internal.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 30, 2024 10:22:14 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.Compilers.withPCAndAdjustLsp(Compilers.scala:1079)
	at scala.meta.internal.metals.Compilers.hover(Compilers.scala:737)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$hover$1(MetalsLspService.scala:1429)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.hover(MetalsLspService.scala:1427)
	at scala.meta.internal.metals.WorkspaceLspService.hover(WorkspaceLspService.scala:386)
	at scala.meta.metals.lsp.DelegatingScalaService.hover(DelegatingScalaService.scala:82)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 28 more

2024.01.30 10:22:40 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:22:42 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:22:45 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:22:46 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:22:46 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:22:46 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:22:46 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:22:47 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:22:47 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:22:50 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:22:50 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:22:52 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:22:52 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:22:52 WARN  Using indexes to guess the definition of printFields
2024.01.30 10:22:52 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:22:52 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:22:53 WARN  Using indexes to guess the definition of printFields
2024.01.30 10:22:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:22:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:22:53 WARN  Using indexes to guess the definition of printFields
Jan. 30, 2024 10:22:54 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 11955
2024.01.30 10:22:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:22:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:22:54 WARN  Using indexes to guess the definition of printFields
2024.01.30 10:22:55 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:22:55 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:22:54 WARN  Using indexes to guess the definition of printFields
2024.01.30 10:22:58 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:23:05 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:23:07 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:23:08 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:23:08 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:23:10 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:23:10 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:23:13 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:23:19 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:23:19 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:23:19 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:23:20 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:23:34 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:23:35 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:23:35 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:23:35 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:23:35 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:23:35 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:23:35 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:23:35 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:23:35 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:23:35 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:23:35 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:23:37 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:23:38 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:23:40 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:23:44 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:23:44 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:23:45 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:23:46 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:23:46 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:23:54 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:23:54 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:24:03 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:24:18 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
Exception in thread "pool-33-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Jan. 30, 2024 10:24:25 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "metals/didFocusTextDocument",
  "params": [
    "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.base/java/lang/Class.java"
  ]
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor7.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didFocus(WorkspaceLspService.scala:627)
	at scala.meta.metals.lsp.DelegatingScalaService.didFocus(DelegatingScalaService.scala:43)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

2024.01.30 10:24:25 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java

Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.base/java/lang/Class.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.foldingRange(WorkspaceLspService.scala:471)
	scala.meta.metals.lsp.DelegatingScalaService.foldingRange(DelegatingScalaService.scala:155)
	jdk.internal.reflect.GeneratedMethodAccessor6.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 30, 2024 10:24:25 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.reflect.InvocationTargetException
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor6.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$foldingRange$1(MetalsLspService.scala:1683)
	at scala.meta.internal.metals.CancelTokens$.future(CancelTokens.scala:38)
	at scala.meta.internal.metals.MetalsLspService.foldingRange(MetalsLspService.scala:1682)
	at scala.meta.internal.metals.WorkspaceLspService.foldingRange(WorkspaceLspService.scala:471)
	at scala.meta.metals.lsp.DelegatingScalaService.foldingRange(DelegatingScalaService.scala:155)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 26 more

2024.01.30 10:24:25 INFO  Report absolute-path: ### java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java

Uri: jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.base/java/lang/Class.java


#### Error stacktrace:

```
java.base/java.net.URI.create(URI.java:883)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePathSafe(MetalsEnrichments.scala:667)
	scala.meta.internal.metals.WorkspaceLspService.getServiceFor(WorkspaceLspService.scala:262)
	scala.meta.internal.metals.WorkspaceLspService.semanticTokensFull(WorkspaceLspService.scala:481)
	scala.meta.metals.lsp.DelegatingScalaService.semanticTokensFull(DelegatingScalaService.scala:208)
	jdk.internal.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)
	java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	java.base/java.lang.reflect.Method.invoke(Method.java:566)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.request(GenericEndpoint.java:120)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleRequest(RemoteEndpoint.java:261)
	org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:190)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	java.base/java.lang.Thread.run(Thread.java:834)
```

Jan. 30, 2024 10:24:26 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint fallbackResponseError
SEVERE: Internal error: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java
java.util.concurrent.CompletionException: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java
	at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:331)
	at java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:346)
	at java.base/java.util.concurrent.CompletableFuture$UniAccept.tryFire(CompletableFuture.java:704)
	at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:506)
	at java.base/java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:2088)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1(CancelTokens.scala:40)
	at scala.meta.internal.metals.CancelTokens$.$anonfun$future$1$adapted(CancelTokens.scala:38)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:484)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.Compilers.semanticTokens(Compilers.scala:426)
	at scala.meta.internal.metals.MetalsLspService.$anonfun$semanticTokensFull$2(MetalsLspService.scala:1605)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:470)
	... 3 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 12 more

Jan. 30, 2024 10:24:30 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleNotification
WARNING: Notification threw an exception: {
  "jsonrpc": "2.0",
  "method": "textDocument/didClose",
  "params": {
    "textDocument": {
      "uri": "jar:file%3A///C%3A/Program%20Files/Java/jdk-11/lib/src.zip%21/java.base/java/lang/Class.java"
    }
  }
}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:67)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.notify(GenericEndpoint.java:152)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.handleNotification(RemoteEndpoint.java:220)
	at org.eclipse.lsp4j.jsonrpc.RemoteEndpoint.consume(RemoteEndpoint.java:187)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.handleMessage(StreamMessageProducer.java:194)
	at org.eclipse.lsp4j.jsonrpc.json.StreamMessageProducer.listen(StreamMessageProducer.java:94)
	at org.eclipse.lsp4j.jsonrpc.json.ConcurrentMessageProcessor.run(ConcurrentMessageProcessor.java:113)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.reflect.InvocationTargetException
	at jdk.internal.reflect.GeneratedMethodAccessor16.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint.lambda$null$0(GenericEndpoint.java:65)
	... 11 more
Caused by: java.lang.IllegalArgumentException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java
	at java.base/java.net.URI.create(URI.java:883)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:177)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.$anonfun$toAbsolutePath$3(MtagsEnrichments.scala:174)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.withTryDecode$1(MtagsEnrichments.scala:153)
	at scala.meta.internal.mtags.MtagsEnrichments$XtensionStringMtags.toAbsolutePath(MtagsEnrichments.scala:174)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:684)
	at scala.meta.internal.metals.MetalsEnrichments$XtensionString.toAbsolutePath(MetalsEnrichments.scala:681)
	at scala.meta.internal.metals.WorkspaceLspService.didClose(WorkspaceLspService.scala:358)
	at scala.meta.metals.lsp.DelegatingScalaService.didClose(DelegatingScalaService.scala:53)
	... 15 more
Caused by: java.net.URISyntaxException: Illegal character in opaque part at index 22: jar:file:///C:/Program Files/Java/jdk-11/lib/src.zip!/java.base/java/lang/Class.java
	at java.base/java.net.URI$Parser.fail(URI.java:2913)
	at java.base/java.net.URI$Parser.checkChars(URI.java:3084)
	at java.base/java.net.URI$Parser.parse(URI.java:3120)
	at java.base/java.net.URI.<init>(URI.java:600)
	at java.base/java.net.URI.create(URI.java:881)
	... 23 more

2024.01.30 10:26:37 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:26:39 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:26:39 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:26:39 WARN  Using indexes to guess the definition of printFields
2024.01.30 10:26:39 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:26:39 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:26:39 WARN  Using indexes to guess the definition of printFields
2024.01.30 10:26:40 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:26:40 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:26:40 WARN  Using indexes to guess the definition of printFields
2024.01.30 10:26:44 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:26:44 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:26:44 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:26:44 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:26:44 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:26:46 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:26:46 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:26:46 WARN  Using indexes to guess the definition of printFields
2024.01.30 10:26:51 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:26:51 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:26:51 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:26:51 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:26:51 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:26:51 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:26:51 WARN  Using indexes to guess the definition of printFields
2024.01.30 10:26:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:26:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:26:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:26:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:26:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:26:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:26:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:29:10 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:29:13 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:29:33 WARN  Could not find semantic tokens for: file:///C:/Users/yashb/Documents/vscode-laminar-vite-extension/webview-ui/src/main/scala/utilities/JsonImplicits.scala
2024.01.30 10:30:06 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:30:19 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
Exception in thread "pool-33-thread-2" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Jan. 30, 2024 10:31:43 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 12624
Exception in thread "pool-33-thread-3" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.30 10:31:49 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\utilities\JsonImplicits.scala:14: error: [dialect scala3] ] expected but = found
    implicit val patientEncoder: Encoder[List[Patient] = deriveEncoder[List[Patient]]
                                                       ^
Exception in thread "pool-33-thread-4" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.30 10:33:02 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:33:09 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:33:09 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:33:09 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:33:13 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:33:14 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:38:49 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:38:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:39:00 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:39:01 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:39:03 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:39:06 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:39:08 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:39:11 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:39:12 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:39:15 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:39:15 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
Jan. 30, 2024 10:39:23 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 12940
2024.01.30 10:39:24 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:39:28 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:39:30 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:39:30 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:39:31 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:39:32 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:39:34 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:39:35 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:39:35 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:39:36 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:39:40 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:39:40 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:39:43 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:39:46 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:39:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:39:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:39:50 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:39:51 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:39:52 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:39:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:39:54 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:39:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:39:59 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:39:59 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:40:00 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:40:05 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
Jan. 30, 2024 10:40:14 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 13146
2024.01.30 10:40:15 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:40:15 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:40:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:40:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:40:18 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
scala.meta.tokenizers.TokenizeException: <input>:49: error: unclosed string literal
        resp.replace("[{","").replace("}]","").split("},{)
                                                     ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getStringLit(LegacyScanner.scala:553)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchDoubleQuote$1(LegacyScanner.scala:372)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:376)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.30 10:40:20 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:40:20 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
scala.meta.tokenizers.TokenizeException: <input>:49: error: unclosed string literal
        resp.replace("[{","").replace("}]","").split("},{"")
                                                          ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getStringLit(LegacyScanner.scala:553)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchDoubleQuote$1(LegacyScanner.scala:372)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:376)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.30 10:40:21 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:04 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:07 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:08 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:09 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:11 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:11 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:11 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:11 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:11 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:11 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:11 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:11 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:11 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:11 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:12 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:15 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:16 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:18 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:19 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:20 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:20 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:20 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:20 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:26 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:28 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:36 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:37 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:38 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:39 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:40 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:44 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:44 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:44 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:44 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:44 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:44 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:44 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:44 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:45 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:45 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:45 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:45 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:45 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:45 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:46 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:41:49 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:42:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:43:47 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:44:02 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:44:03 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:44:16 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 10:46:27 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 11:05:03 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.30 11:05:03 INFO  Bloop uses C:\Program Files\Java\jdk-11 defined at C:\Users\yashb\.bloop\bloop.json
2024.01.30 11:05:03 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.30 11:05:03 INFO  tracing is disabled for protocol BSP, to enable tracing of incoming and outgoing JSON messages create an empty file at C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\bsp.trace.json or C:\Users\yashb\AppData\Local\scalameta\metals\cache\bsp.trace.json
2024.01.30 11:05:03 INFO  Connected to Build server: Bloop v1.5.13
2024.01.30 11:05:03 INFO  Connected to Build server: Bloop v1.5.13
2024.01.30 11:05:03 INFO  compiling livechart (4 scala sources)
2024.01.30 11:05:05 INFO  time: compiled livechart in 1.61s
2024.01.30 11:05:05 INFO  compiling livechart (4 scala sources)
2024.01.30 11:05:05 WARN  there was 1 deprecation warning; re-run with -deprecation for details
2024.01.30 11:05:05 INFO  time: compiled livechart in 0.7s
2024.01.30 11:05:05 INFO  time: Imported build in 2.43s
2024.01.30 11:05:05 INFO  time: Imported build in 2.44s
2024.01.30 11:05:07 INFO  time: indexed workspace in 1.2s
2024.01.30 11:05:07 INFO  time: indexed workspace in 1.21s
2024.01.30 11:05:07 WARN  no build target for: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt
2024.01.30 11:05:07 WARN  no build target for: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\build.sbt
2024.01.30 11:07:50 INFO  compiling livechart (4 scala sources)
2024.01.30 11:07:50 WARN  there was 1 deprecation warning; re-run with -deprecation for details
2024.01.30 11:07:50 INFO  time: compiled livechart in 0.56s
2024.01.30 11:07:53 INFO  compiling livechart (1 scala source)
2024.01.30 11:07:53 INFO  time: compiled livechart in 0.2s
2024.01.30 11:08:02 INFO  compiling livechart (1 scala source)
2024.01.30 11:08:02 INFO  time: compiled livechart in 0.26s
Exception in thread "pool-37-thread-1" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-37-thread-2" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-37-thread-3" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.30 11:08:07 INFO  compiling livechart (1 scala source)
2024.01.30 11:08:07 INFO  time: compiled livechart in 0.36s
2024.01.30 11:08:28 INFO  compiling livechart (1 scala source)
2024.01.30 11:08:28 INFO  time: compiled livechart in 0.26s
2024.01.30 11:08:36 INFO  compiling livechart (1 scala source)
2024.01.30 11:08:36 INFO  time: compiled livechart in 0.33s
2024.01.30 11:08:39 INFO  compiling livechart (1 scala source)
2024.01.30 11:08:39 INFO  time: compiled livechart in 0.41s
2024.01.30 11:11:39 INFO  compiling livechart (1 scala source)
2024.01.30 11:11:39 INFO  time: compiled livechart in 52ms
2024.01.30 11:11:43 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala
2024.01.30 11:11:43 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala
2024.01.30 11:11:45 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala
2024.01.30 11:11:47 INFO  compiling livechart (1 scala source)
2024.01.30 11:11:47 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala
2024.01.30 11:11:47 INFO  time: compiled livechart in 0.18s
2024.01.30 11:11:47 INFO  compiling livechart (4 scala sources)
2024.01.30 11:11:47 INFO  time: compiled livechart in 0.5s
2024.01.30 11:12:06 INFO  compiling livechart (2 scala sources)
2024.01.30 11:12:06 INFO  time: compiled livechart in 0.31s
2024.01.30 11:12:19 INFO  compiling livechart (2 scala sources)
2024.01.30 11:12:19 INFO  time: compiled livechart in 0.17s
2024.01.30 11:12:27 INFO  compiling livechart (2 scala sources)
2024.01.30 11:12:27 INFO  time: compiled livechart in 0.75s
Jan. 30, 2024 11:12:39 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 13956
2024.01.30 11:12:43 INFO  compiling livechart (2 scala sources)
2024.01.30 11:12:43 INFO  time: compiled livechart in 0.51s
2024.01.30 11:12:43 INFO  compiling livechart (3 scala sources)
2024.01.30 11:12:45 WARN  there was 1 deprecation warning; re-run with -deprecation for details
2024.01.30 11:12:45 INFO  time: compiled livechart in 0.61s
Exception in thread "pool-37-thread-4" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.30 11:16:58 INFO  compiling livechart (1 scala source)
2024.01.30 11:16:58 INFO  time: compiled livechart in 0.15s
2024.01.30 11:17:01 INFO  compiling livechart (1 scala source)
2024.01.30 11:17:01 INFO  time: compiled livechart in 0.12s
2024.01.30 11:17:07 INFO  compiling livechart (1 scala source)
2024.01.30 11:17:07 INFO  time: compiled livechart in 0.39s
2024.01.30 11:17:07 INFO  compiling livechart (1 scala source)
2024.01.30 11:17:07 INFO  time: compiled livechart in 0.47s
Jan. 30, 2024 11:19:04 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 14139
2024.01.30 11:19:05 INFO  compiling livechart (1 scala source)
2024.01.30 11:19:05 INFO  time: compiled livechart in 0.43s
2024.01.30 11:19:38 INFO  compiling livechart (1 scala source)
2024.01.30 11:19:38 INFO  time: compiled livechart in 0.46s
2024.01.30 11:19:43 INFO  compiling livechart (1 scala source)
2024.01.30 11:19:43 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 11:19:43 INFO  time: compiled livechart in 0.54s
2024.01.30 11:20:13 INFO  compiling livechart (1 scala source)
2024.01.30 11:20:14 INFO  time: compiled livechart in 1.16s
2024.01.30 11:20:17 WARN  Using indexes to guess the definition of content
2024.01.30 11:20:32 WARN  Using indexes to guess the definition of handleCellClick
2024.01.30 11:20:32 WARN  Using indexes to guess the definition of handleCellDblClick
2024.01.30 11:20:33 WARN  Using indexes to guess the definition of handleCellDblClick
2024.01.30 11:20:33 WARN  Using indexes to guess the definition of handleCellClick
2024.01.30 11:20:34 WARN  Using indexes to guess the definition of handleCellClick
2024.01.30 11:20:40 INFO  compiling livechart (1 scala source)
2024.01.30 11:20:40 INFO  time: compiled livechart in 0.22s
2024.01.30 11:54:40 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala:30: error: [dialect scala3] ; expected but = found
    getAsTableRow(): Element = {
                             ^
2024.01.30 11:54:41 INFO  compiling livechart (2 scala sources)
2024.01.30 11:54:41 INFO  time: compiled livechart in 0.24s
2024.01.30 11:54:44 INFO  compiling livechart (2 scala sources)
2024.01.30 11:54:44 INFO  time: compiled livechart in 0.24s
2024.01.30 11:55:17 INFO  compiling livechart (2 scala sources)
2024.01.30 11:55:17 INFO  time: compiled livechart in 0.33s
2024.01.30 11:55:20 WARN  Using indexes to guess the definition of Element
2024.01.30 11:55:22 INFO  compiling livechart (2 scala sources)
2024.01.30 11:55:22 INFO  time: compiled livechart in 0.36s
2024.01.30 11:55:41 INFO  compiling livechart (2 scala sources)
2024.01.30 11:55:42 INFO  time: compiled livechart in 1.2s
2024.01.30 11:56:16 INFO  compiling livechart (2 scala sources)
2024.01.30 11:56:18 INFO  time: compiled livechart in 1.57s
2024.01.30 11:56:18 INFO  compiling livechart (3 scala sources)
2024.01.30 11:56:19 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 11:56:20 INFO  time: compiled livechart in 1.46s
2024.01.30 11:56:20 INFO  compiling livechart (3 scala sources)
2024.01.30 11:56:21 INFO  time: compiled livechart in 1.08s
2024.01.30 11:56:24 INFO  compiling livechart (4 scala sources)
2024.01.30 11:56:26 INFO  time: compiled livechart in 1.42s
2024.01.30 11:56:28 WARN  Using indexes to guess the definition of MouseEvent
2024.01.30 11:56:30 INFO  compiling livechart (4 scala sources)
2024.01.30 11:56:31 INFO  time: compiled livechart in 1.25s
2024.01.30 11:56:32 WARN  Using indexes to guess the definition of HTMLTableCellElement
2024.01.30 11:56:34 INFO  compiling livechart (4 scala sources)
2024.01.30 11:56:35 INFO  time: compiled livechart in 1.22s
2024.01.30 11:56:53 INFO  compiling livechart (4 scala sources)
2024.01.30 11:56:54 INFO  time: compiled livechart in 1.23s
2024.01.30 11:57:01 INFO  compiling livechart (4 scala sources)
2024.01.30 11:57:03 INFO  time: compiled livechart in 1.38s
2024.01.30 11:57:04 WARN  Using indexes to guess the definition of dom
2024.01.30 11:57:14 INFO  compiling livechart (4 scala sources)
2024.01.30 11:57:15 INFO  time: compiled livechart in 1.12s
2024.01.30 11:57:17 WARN  Using indexes to guess the definition of KeyboardEvent
2024.01.30 11:57:17 WARN  Using indexes to guess the definition of KeyboardEvent
2024.01.30 11:57:18 INFO  compiling livechart (4 scala sources)
2024.01.30 11:57:19 INFO  time: compiled livechart in 1.15s
2024.01.30 11:57:20 WARN  Using indexes to guess the definition of FocusEvent
2024.01.30 11:57:22 INFO  compiling livechart (4 scala sources)
2024.01.30 11:57:23 INFO  time: compiled livechart in 1.24s
2024.01.30 11:57:31 INFO  compiling livechart (4 scala sources)
2024.01.30 11:57:31 INFO  compiling livechart (4 scala sources)
2024.01.30 11:57:32 INFO  time: compiled livechart in 0.63s
Jan. 30, 2024 11:57:37 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 15309
Jan. 30, 2024 11:57:53 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 15338
2024.01.30 11:58:01 INFO  compiling livechart (4 scala sources)
2024.01.30 11:58:03 INFO  time: compiled livechart in 1.1s
2024.01.30 11:58:29 INFO  compiling livechart (4 scala sources)
2024.01.30 11:58:30 INFO  time: compiled livechart in 1.09s
Jan. 30, 2024 11:58:30 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 15411
2024.01.30 11:58:33 WARN  Using indexes to guess the definition of TableCell
2024.01.30 11:58:37 INFO  compiling livechart (4 scala sources)
2024.01.30 11:58:38 INFO  time: compiled livechart in 1.05s
2024.01.30 11:58:38 INFO  compiling livechart (4 scala sources)
2024.01.30 11:58:39 INFO  time: compiled livechart in 1.07s
2024.01.30 11:58:40 INFO  compiling livechart (4 scala sources)
2024.01.30 11:58:40 INFO  time: compiled livechart in 0.37s
2024.01.30 11:58:42 WARN  Using indexes to guess the definition of TableCell
2024.01.30 11:58:43 WARN  Using indexes to guess the definition of TableCell
2024.01.30 11:58:43 WARN  Using indexes to guess the definition of TableCell
2024.01.30 11:58:54 WARN  Using indexes to guess the definition of TableCell
Exception in thread "pool-37-thread-5" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.30 11:59:12 INFO  compiling livechart (4 scala sources)
2024.01.30 11:59:12 INFO  time: compiled livechart in 0.33s
2024.01.30 11:59:35 INFO  compiling livechart (4 scala sources)
2024.01.30 11:59:35 INFO  time: compiled livechart in 0.31s
2024.01.30 11:59:36 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 11:59:40 INFO  compiling livechart (4 scala sources)
2024.01.30 11:59:40 INFO  time: compiled livechart in 0.34s
2024.01.30 11:59:41 WARN  Using indexes to guess the definition of TableCell
2024.01.30 11:59:45 INFO  compiling livechart (4 scala sources)
2024.01.30 11:59:46 INFO  time: compiled livechart in 1.23s
2024.01.30 11:59:56 ERROR Failed to tokenize input for semantic tokens for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala
scala.meta.tokenizers.TokenizeException: <input>:36: error: malformed xml literal, expected:
Expected ([\t\n\r ] | "/>" | ">"):36:30, found "(unitNumbe"
          children <TableCell(unitNumber),
                             ^
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:23)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.Reporter.syntaxError(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter.syntaxError$(Reporter.scala:25)
	at scala.meta.internal.tokenizers.Reporter$$anon$1.syntaxError(Reporter.scala:33)
	at scala.meta.internal.tokenizers.LegacyScanner.getXml(LegacyScanner.scala:937)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchLT$1(LegacyScanner.scala:295)
	at scala.meta.internal.tokenizers.LegacyScanner.fetchToken(LegacyScanner.scala:303)
	at scala.meta.internal.tokenizers.LegacyScanner.nextToken(LegacyScanner.scala:211)
	at scala.meta.internal.tokenizers.LegacyScanner.foreach(LegacyScanner.scala:1011)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.uncachedTokenize(ScalametaTokenizer.scala:24)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.$anonfun$tokenize$1(ScalametaTokenizer.scala:17)
	at scala.collection.concurrent.TrieMap.getOrElseUpdate(TrieMap.scala:962)
	at scala.meta.internal.tokenizers.ScalametaTokenizer.tokenize(ScalametaTokenizer.scala:17)
	at scala.meta.internal.tokenizers.ScalametaTokenizer$$anon$2.apply(ScalametaTokenizer.scala:332)
	at scala.meta.tokenizers.Api$XtensionTokenizeDialectInput.tokenize(Api.scala:25)
	at scala.meta.tokenizers.Api$XtensionTokenizeInputLike.tokenize(Api.scala:14)
	at scala.meta.internal.metals.SemanticTokensProvider$.getTokens(SemanticTokensProvider.scala:28)
	at scala.meta.internal.metals.SemanticTokensProvider$.provide(SemanticTokensProvider.scala:89)
	at scala.meta.internal.metals.Compilers.$anonfun$semanticTokens$3(Compilers.scala:541)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.lang.Thread.run(Thread.java:834)

2024.01.30 11:59:59 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala:37: error: [dialect scala3] ; expected but , found
            TableCell(unitNumber),
                                 ^
2024.01.30 11:59:59 INFO  compiling livechart (4 scala sources)
2024.01.30 11:59:59 INFO  time: compiled livechart in 0.32s
2024.01.30 12:00:19 INFO  compiling livechart (4 scala sources)
2024.01.30 12:00:19 INFO  time: compiled livechart in 0.28s
2024.01.30 12:00:26 INFO  compiling livechart (4 scala sources)
2024.01.30 12:00:26 INFO  time: compiled livechart in 0.31s
2024.01.30 12:00:31 INFO  compiling livechart (4 scala sources)
2024.01.30 12:00:31 INFO  time: compiled livechart in 0.33s
2024.01.30 12:00:35 INFO  compiling livechart (4 scala sources)
2024.01.30 12:00:35 INFO  time: compiled livechart in 0.27s
2024.01.30 12:01:02 INFO  compiling livechart (4 scala sources)
2024.01.30 12:01:02 INFO  time: compiled livechart in 0.34s
2024.01.30 12:01:12 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala:38: error: [dialect scala3] ) expected but } found
    }
    ^
2024.01.30 12:01:12 INFO  compiling livechart (4 scala sources)
2024.01.30 12:01:12 INFO  time: compiled livechart in 0.3s
2024.01.30 12:01:12 INFO  compiling livechart (4 scala sources)
2024.01.30 12:01:12 INFO  time: compiled livechart in 0.35s
2024.01.30 12:01:14 INFO  compiling livechart (4 scala sources)
2024.01.30 12:01:14 INFO  time: compiled livechart in 0.29s
2024.01.30 12:02:02 INFO  compiling livechart (4 scala sources)
2024.01.30 12:02:02 INFO  time: compiled livechart in 0.27s
2024.01.30 12:02:38 INFO  compiling livechart (4 scala sources)
2024.01.30 12:02:39 INFO  time: compiled livechart in 1.11s
2024.01.30 12:02:50 INFO  compiling livechart (4 scala sources)
2024.01.30 12:02:50 INFO  time: compiled livechart in 0.31s
2024.01.30 12:03:04 INFO  compiling livechart (4 scala sources)
2024.01.30 12:03:05 INFO  time: compiled livechart in 1.15s
2024.01.30 12:03:14 INFO  compiling livechart (4 scala sources)
2024.01.30 12:03:14 INFO  time: compiled livechart in 0.38s
2024.01.30 12:03:17 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:03:25 INFO  compiling livechart (4 scala sources)
2024.01.30 12:03:25 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:03:25 INFO  time: compiled livechart in 0.61s
2024.01.30 12:03:41 INFO  compiling livechart (1 scala source)
2024.01.30 12:03:42 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 12:03:41 INFO  time: compiled livechart in 0.43s
2024.01.30 12:04:02 INFO  compiling livechart (1 scala source)
2024.01.30 12:04:02 INFO  time: compiled livechart in 0.47s
2024.01.30 12:04:10 INFO  compiling livechart (1 scala source)
2024.01.30 12:04:10 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala
2024.01.30 12:04:10 INFO  time: compiled livechart in 0.35s
2024.01.30 12:04:15 INFO  compiling livechart (1 scala source)
2024.01.30 12:04:15 INFO  time: compiled livechart in 0.34s
2024.01.30 12:05:56 WARN  Using indexes to guess the definition of TableCell
2024.01.30 12:05:56 INFO  compiling livechart (1 scala source)
2024.01.30 12:05:56 INFO  time: compiled livechart in 0.17s
2024.01.30 12:05:58 INFO  compiling livechart (1 scala source)
2024.01.30 12:05:58 INFO  time: compiled livechart in 0.15s
2024.01.30 12:07:53 INFO  compiling livechart (1 scala source)
2024.01.30 12:07:53 INFO  time: compiled livechart in 0.2s
Jan. 30, 2024 12:08:31 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 16496
2024.01.30 12:09:43 INFO  compiling livechart (1 scala source)
Jan. 30, 2024 12:09:43 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 16686
2024.01.30 12:09:43 INFO  time: compiled livechart in 0.16s
2024.01.30 12:09:43 INFO  compiling livechart (1 scala source)
2024.01.30 12:09:43 INFO  time: compiled livechart in 0.15s
2024.01.30 12:09:45 INFO  compiling livechart (1 scala source)
2024.01.30 12:09:45 INFO  time: compiled livechart in 0.17s
2024.01.30 12:09:46 INFO  compiling livechart (1 scala source)
2024.01.30 12:09:46 INFO  time: compiled livechart in 0.13s
2024.01.30 12:09:48 WARN  Using indexes to guess the definition of TableCell
2024.01.30 12:09:53 INFO  compiling livechart (1 scala source)
2024.01.30 12:09:53 INFO  time: compiled livechart in 0.54s
2024.01.30 12:10:56 INFO  compiling livechart (1 scala source)
2024.01.30 12:10:56 INFO  time: compiled livechart in 0.19s
2024.01.30 12:11:17 INFO  compiling livechart (1 scala source)
2024.01.30 12:11:17 INFO  time: compiled livechart in 0.17s
2024.01.30 12:12:43 INFO  compiling livechart (1 scala source)
2024.01.30 12:12:43 INFO  time: compiled livechart in 0.2s
Exception in thread "pool-37-thread-6" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.30 12:13:08 INFO  compiling livechart (1 scala source)
2024.01.30 12:13:08 INFO  time: compiled livechart in 0.32s
Jan. 30, 2024 12:13:43 P.M. scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\.reports\metals-full\2024-01-30\r_compiler-error_(livechart)_12-13-43-508.md
Jan. 30, 2024 12:13:43 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 17185
2024.01.30 12:13:55 INFO  compiling livechart (1 scala source)
2024.01.30 12:13:55 INFO  time: compiled livechart in 0.31s
Jan. 30, 2024 12:45:45 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 17486
2024.01.30 12:46:04 INFO  compiling livechart (1 scala source)
2024.01.30 12:46:04 INFO  time: compiled livechart in 0.4s
2024.01.30 12:46:09 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala:13: error: [dialect scala3] case classes must have a parameter list; try 'case class Patient()' or 'case object Patient'
case class Patient extends Model(
                   ^
2024.01.30 12:46:10 INFO  compiling livechart (1 scala source)
2024.01.30 12:46:10 INFO  time: compiled livechart in 0.8s
2024.01.30 12:46:19 INFO  compiling livechart (1 scala source)
2024.01.30 12:46:19 INFO  time: compiled livechart in 0.18s
2024.01.30 12:46:58 INFO  compiling livechart (1 scala source)
2024.01.30 12:46:58 INFO  time: compiled livechart in 0.44s
2024.01.30 12:46:58 INFO  compiling livechart (6 scala sources)
2024.01.30 12:46:59 WARN  there was 1 deprecation warning; re-run with -deprecation for details
2024.01.30 12:46:59 INFO  time: compiled livechart in 1.06s
2024.01.30 12:54:12 INFO  compiling livechart (1 scala source)
2024.01.30 12:54:12 INFO  time: compiled livechart in 0.51s
Exception in thread "pool-37-thread-7" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.30 12:54:17 INFO  compiling livechart (1 scala source)
2024.01.30 12:54:17 INFO  time: compiled livechart in 0.33s
2024.01.30 12:54:17 INFO  compiling livechart (2 scala sources)
2024.01.30 12:54:17 INFO  time: compiled livechart in 0.59s
2024.01.30 12:54:21 INFO  compiling livechart (1 scala source)
2024.01.30 12:54:21 INFO  time: compiled livechart in 0.36s
2024.01.30 12:54:21 INFO  compiling livechart (2 scala sources)
2024.01.30 12:54:21 INFO  time: compiled livechart in 0.5s
2024.01.30 12:54:26 INFO  compiling livechart (2 scala sources)
2024.01.30 12:54:26 INFO  time: compiled livechart in 0.37s
Jan. 30, 2024 12:56:03 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 18070
Jan. 30, 2024 12:56:22 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 18106
2024.01.30 12:57:00 INFO  compiling livechart (1 scala source)
2024.01.30 12:57:00 INFO  time: compiled livechart in 0.15s
2024.01.30 12:57:00 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
Exception in thread "pool-37-thread-8" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Jan. 30, 2024 12:57:13 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 18308
2024.01.30 12:57:14 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:15 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:16 INFO  compiling livechart (1 scala source)
2024.01.30 12:57:16 INFO  time: compiled livechart in 0.17s
2024.01.30 12:57:16 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:18 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:18 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:18 WARN  Using indexes to guess the definition of decodePatientList
2024.01.30 12:57:25 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:25 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:25 WARN  Using indexes to guess the definition of decodePatientList
2024.01.30 12:57:25 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:25 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:25 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:25 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:25 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:25 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:25 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:25 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:35 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:36 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:37 INFO  compiling livechart (1 scala source)
2024.01.30 12:57:37 INFO  time: compiled livechart in 0.2s
2024.01.30 12:57:38 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
Exception in thread "pool-37-thread-9" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.30 12:57:44 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:46 INFO  compiling livechart (1 scala source)
2024.01.30 12:57:46 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:46 INFO  time: compiled livechart in 0.23s
2024.01.30 12:57:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:54 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:54 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:54 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:54 INFO  compiling livechart (1 scala source)
2024.01.30 12:57:54 INFO  time: compiled livechart in 0.24s
2024.01.30 12:57:59 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:59 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
Jan. 30, 2024 12:57:59 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 18445
2024.01.30 12:57:59 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:59 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
Exception in thread "pool-37-thread-10" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.30 12:57:59 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:59 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
Exception in thread "pool-37-thread-11" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.30 12:57:59 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:59 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
Exception in thread "pool-37-thread-12" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.30 12:57:59 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:59 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:59 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:59 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
Jan. 30, 2024 12:57:59 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 18451
2024.01.30 12:57:59 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:59 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
Exception in thread "pool-37-thread-13" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.30 12:57:59 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:59 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:57:59 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:58:00 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:58:01 INFO  compiling livechart (1 scala source)
2024.01.30 12:58:01 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:58:02 INFO  time: compiled livechart in 1.14s
2024.01.30 12:58:12 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 12:58:12 INFO  compiling livechart (1 scala source)
2024.01.30 12:58:12 INFO  time: compiled livechart in 0.43s
2024.01.30 12:58:41 INFO  compiling livechart (1 scala source)
2024.01.30 12:58:41 INFO  time: compiled livechart in 0.45s
2024.01.30 12:59:41 INFO  compiling livechart (1 scala source)
2024.01.30 12:59:42 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala
2024.01.30 12:59:41 INFO  time: compiled livechart in 0.35s
2024.01.30 13:01:19 INFO  compiling livechart (1 scala source)
2024.01.30 13:01:19 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 13:01:19 INFO  time: compiled livechart in 0.43s
2024.01.30 13:02:36 INFO  compiling livechart (1 scala source)
2024.01.30 13:02:36 INFO  time: compiled livechart in 0.34s
2024.01.30 13:03:02 INFO  compiling livechart (1 scala source)
2024.01.30 13:03:02 INFO  time: compiled livechart in 0.43s
2024.01.30 13:03:07 WARN  Using indexes to guess the definition of getData
Jan. 30, 2024 1:03:08 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 18995
2024.01.30 13:03:15 INFO  compiling livechart (1 scala source)
2024.01.30 13:03:16 INFO  time: compiled livechart in 1.11s
2024.01.30 13:03:26 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 13:03:44 INFO  compiling livechart (1 scala source)
2024.01.30 13:03:44 INFO  time: compiled livechart in 0.24s
2024.01.30 13:03:44 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 13:03:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 13:03:51 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 13:03:51 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 13:03:51 INFO  compiling livechart (1 scala source)
2024.01.30 13:03:52 INFO  time: compiled livechart in 1.03s
2024.01.30 13:03:58 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 13:03:58 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 13:03:58 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 13:03:58 INFO  compiling livechart (1 scala source)
2024.01.30 13:04:00 INFO  time: compiled livechart in 1.03s
2024.01.30 13:04:02 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 13:04:02 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 13:04:24 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 13:04:24 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 13:04:25 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 13:04:44 INFO  compiling livechart (1 scala source)
2024.01.30 13:04:44 INFO  time: compiled livechart in 0.29s
2024.01.30 13:04:44 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 13:04:47 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 13:04:47 INFO  compiling livechart (1 scala source)
2024.01.30 13:04:47 INFO  time: compiled livechart in 0.22s
2024.01.30 13:04:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 13:04:55 INFO  compiling livechart (1 scala source)
2024.01.30 13:04:55 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 13:04:56 INFO  time: compiled livechart in 1.01s
Jan. 30, 2024 1:05:03 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 19244
2024.01.30 13:05:05 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 13:05:05 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 13:05:05 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 13:05:06 INFO  compiling livechart (1 scala source)
2024.01.30 13:05:06 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 13:05:06 INFO  time: compiled livechart in 0.42s
2024.01.30 13:05:28 INFO  compiling livechart (1 scala source)
2024.01.30 13:05:28 INFO  time: compiled livechart in 0.53s
2024.01.30 13:05:38 INFO  compiling livechart (1 scala source)
2024.01.30 13:05:38 INFO  time: compiled livechart in 0.43s
2024.01.30 13:05:52 INFO  compiling livechart (1 scala source)
2024.01.30 13:05:52 INFO  time: compiled livechart in 0.43s
2024.01.30 13:06:10 INFO  compiling livechart (1 scala source)
2024.01.30 13:06:10 INFO  time: compiled livechart in 0.94s
2024.01.30 13:06:28 INFO  compiling livechart (1 scala source)
2024.01.30 13:06:28 INFO  time: compiled livechart in 0.99s
2024.01.30 13:06:29 INFO  compiling livechart (1 scala source)
2024.01.30 13:06:29 INFO  time: compiled livechart in 0.96s
2024.01.30 13:06:43 INFO  compiling livechart (1 scala source)
Jan. 30, 2024 1:06:43 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 19560
2024.01.30 13:06:44 INFO  time: compiled livechart in 1s
2024.01.30 13:07:04 INFO  compiling livechart (1 scala source)
2024.01.30 13:07:04 INFO  time: compiled livechart in 0.3s
2024.01.30 13:07:09 INFO  compiling livechart (1 scala source)
2024.01.30 13:07:10 INFO  time: compiled livechart in 1.09s
2024.01.30 13:07:13 INFO  compiling livechart (1 scala source)
2024.01.30 13:07:13 INFO  time: compiled livechart in 0.53s
2024.01.30 13:07:44 INFO  compiling livechart (1 scala source)
2024.01.30 13:07:44 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 13:07:44 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableBody.scala
2024.01.30 13:07:44 INFO  time: compiled livechart in 0.52s
2024.01.30 13:07:47 INFO  compiling livechart (1 scala source)
2024.01.30 13:07:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 13:07:47 INFO  time: compiled livechart in 0.47s
2024.01.30 13:07:50 INFO  compiling livechart (1 scala source)
2024.01.30 13:07:50 INFO  time: compiled livechart in 0.47s
2024.01.30 14:01:47 INFO  compiling livechart (1 scala source)
2024.01.30 14:01:47 INFO  time: compiled livechart in 0.58s
2024.01.30 14:01:55 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\components\table\TableHeader.scala:52: error: [dialect scala3] identifier expected but . found
                .map(header => {
                ^
2024.01.30 14:01:55 INFO  compiling livechart (1 scala source)
2024.01.30 14:01:55 INFO  time: compiled livechart in 0.19s
2024.01.30 14:01:58 INFO  compiling livechart (1 scala source)
2024.01.30 14:01:58 INFO  time: compiled livechart in 0.61s
Jan. 30, 2024 2:02:12 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 20023
2024.01.30 14:02:48 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala:46: error: [dialect scala3] identifier or `_' expected
      "Unit Number",
      ^
2024.01.30 14:02:48 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 14:02:48 INFO  compiling livechart (1 scala source)
2024.01.30 14:02:48 INFO  time: compiled livechart in 0.24s
2024.01.30 14:02:52 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 14:02:52 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 14:02:53 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 14:02:54 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 14:02:56 INFO  compiling livechart (1 scala source)
2024.01.30 14:02:57 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 14:02:56 INFO  time: compiled livechart in 0.46s
Jan. 30, 2024 2:03:51 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 20387
Jan. 30, 2024 2:03:51 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 20389
Jan. 30, 2024 2:03:51 P.M. scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\.reports\metals-full\2024-01-30\r_compiler-error_(livechart)_14-03-51-890.md
Jan. 30, 2024 2:03:51 P.M. scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\.reports\metals-full\2024-01-30\r_compiler-error_(livechart)_14-03-51-989.md
Jan. 30, 2024 2:03:53 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 20424
Jan. 30, 2024 2:03:53 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 20433
Jan. 30, 2024 2:03:54 P.M. scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\.reports\metals-full\2024-01-30\r_compiler-error_(livechart)_14-03-54-155.md
Jan. 30, 2024 2:03:56 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 20466
Jan. 30, 2024 2:03:56 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 20468
Jan. 30, 2024 2:03:56 P.M. scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\.reports\metals-full\2024-01-30\r_compiler-error_(livechart)_14-03-56-847.md
Jan. 30, 2024 2:03:59 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 20501
Jan. 30, 2024 2:03:59 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 20509
Jan. 30, 2024 2:04:01 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 20540
Jan. 30, 2024 2:04:01 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 20547
Jan. 30, 2024 2:04:04 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 20577
Jan. 30, 2024 2:04:04 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 20585
Jan. 30, 2024 2:04:08 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 20646
Jan. 30, 2024 2:04:08 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 20648
2024.01.30 14:04:10 INFO  compiling livechart (1 scala source)
2024.01.30 14:04:10 INFO  time: compiled livechart in 0.83s
2024.01.30 14:04:23 INFO  compiling livechart (1 scala source)
2024.01.30 14:04:23 INFO  time: compiled livechart in 0.8s
Jan. 30, 2024 2:04:35 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 20733
2024.01.30 14:04:35 WARN  Using indexes to guess the definition of render
2024.01.30 14:04:35 WARN  Using indexes to guess the definition of render
2024.01.30 14:04:37 WARN  Using indexes to guess the definition of render
2024.01.30 14:04:39 INFO  compiling livechart (1 scala source)
2024.01.30 14:04:39 INFO  time: compiled livechart in 0.39s
Jan. 30, 2024 2:05:31 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 20848
Jan. 30, 2024 2:05:31 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 20852
Jan. 30, 2024 2:05:31 P.M. scala.meta.internal.pc.CompilerAccess handleError
SEVERE: A severe compiler error occurred, full details of the error can be found in the error report C:\Users\yashb\Documents\vscode-laminar-vite-extension\.metals\.reports\metals-full\2024-01-30\r_compiler-error_(livechart)_14-05-31-992.md
2024.01.30 14:05:33 INFO  compiling livechart (1 scala source)
2024.01.30 14:05:33 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\types\Patient.scala
2024.01.30 14:05:33 INFO  time: compiled livechart in 0.32s
2024.01.30 14:06:12 INFO  compiling livechart (1 scala source)
2024.01.30 14:06:12 INFO  time: compiled livechart in 0.41s
2024.01.30 14:07:14 INFO  compiling livechart (1 scala source)
2024.01.30 14:07:14 INFO  time: compiled livechart in 0.4s
2024.01.30 14:07:17 INFO  compiling livechart (1 scala source)
2024.01.30 14:07:17 INFO  time: compiled livechart in 0.44s
2024.01.30 14:07:29 ERROR scalafmt: C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\utilities\fakeData.scala:45: error: [dialect scala3] end of file expected but } found
}
^
2024.01.30 14:07:29 INFO  compiling livechart (1 scala source)
2024.01.30 14:07:29 INFO  time: compiled livechart in 0.14s
2024.01.30 14:07:32 INFO  compiling livechart (1 scala source)
2024.01.30 14:07:32 WARN  there was 1 deprecation warning; re-run with -deprecation for details
2024.01.30 14:07:32 INFO  time: compiled livechart in 0.19s
Jan. 30, 2024 2:08:17 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 21223
2024.01.30 14:08:17 INFO  compiling livechart (1 scala source)
2024.01.30 14:08:17 INFO  time: compiled livechart in 0.43s
2024.01.30 14:08:33 INFO  compiling livechart (1 scala source)
2024.01.30 14:08:34 INFO  time: compiled livechart in 1.03s
Exception in thread "pool-37-thread-14" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.30 14:08:37 INFO  compiling livechart (1 scala source)
2024.01.30 14:08:38 INFO  time: compiled livechart in 1.06s
2024.01.30 14:08:50 INFO  compiling livechart (1 scala source)
Exception in thread "pool-37-thread-15" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.30 14:08:50 INFO  time: compiled livechart in 0.94s
2024.01.30 14:08:50 INFO  compiling livechart (1 scala source)
2024.01.30 14:08:52 INFO  time: compiled livechart in 0.96s
2024.01.30 14:08:53 INFO  compiling livechart (2 scala sources)
2024.01.30 14:08:55 INFO  time: compiled livechart in 1.32s
2024.01.30 14:08:55 INFO  compiling livechart (2 scala sources)
2024.01.30 14:08:55 INFO  time: compiled livechart in 0.94s
2024.01.30 14:08:56 INFO  compiling livechart (2 scala sources)
2024.01.30 14:08:56 INFO  time: compiled livechart in 0.93s
2024.01.30 14:09:00 INFO  compiling livechart (2 scala sources)
2024.01.30 14:09:00 INFO  time: compiled livechart in 0.98s
Jan. 30, 2024 2:09:13 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 21451
2024.01.30 14:09:15 INFO  compiling livechart (2 scala sources)
2024.01.30 14:09:15 INFO  time: compiled livechart in 0.44s
2024.01.30 14:09:44 INFO  compiling livechart (1 scala source)
2024.01.30 14:09:44 INFO  time: compiled livechart in 0.34s
2024.01.30 14:09:56 INFO  compiling livechart (1 scala source)
2024.01.30 14:09:56 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 14:09:56 INFO  time: compiled livechart in 0.35s
2024.01.30 14:09:56 INFO  compiling livechart (7 scala sources)
2024.01.30 14:09:56 INFO  time: compiled livechart in 0.31s
Exception in thread "pool-37-thread-16" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.30 14:10:02 INFO  compiling livechart (2 scala sources)
2024.01.30 14:10:02 INFO  time: compiled livechart in 0.5s
2024.01.30 14:10:02 INFO  compiling livechart (6 scala sources)
2024.01.30 14:10:02 INFO  time: compiled livechart in 0.28s
2024.01.30 14:10:13 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\utilities\fakeData.scala
2024.01.30 14:10:13 INFO  compiling livechart (3 scala sources)
2024.01.30 14:10:13 INFO  time: compiled livechart in 0.27s
2024.01.30 14:10:18 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\utilities\fakeData.scala
2024.01.30 14:10:20 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\utilities\fakeData.scala
2024.01.30 14:10:32 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\utilities\fakeData.scala
2024.01.30 14:10:33 INFO  compiling livechart (3 scala sources)
2024.01.30 14:10:33 WARN  there was 1 deprecation warning; re-run with -deprecation for details
2024.01.30 14:10:33 INFO  time: compiled livechart in 0.46s
2024.01.30 14:10:33 INFO  compiling livechart (6 scala sources)
2024.01.30 14:10:33 INFO  time: compiled livechart in 0.28s
2024.01.30 14:10:35 INFO  compiling livechart (3 scala sources)
2024.01.30 14:10:35 WARN  there was 1 deprecation warning; re-run with -deprecation for details
2024.01.30 14:10:35 INFO  time: compiled livechart in 0.46s
2024.01.30 14:10:35 INFO  compiling livechart (6 scala sources)
2024.01.30 14:10:35 INFO  time: compiled livechart in 0.24s
2024.01.30 14:10:48 INFO  compiling livechart (3 scala sources)
2024.01.30 14:10:48 WARN  there was 1 deprecation warning; re-run with -deprecation for details
2024.01.30 14:10:48 INFO  time: compiled livechart in 0.54s
2024.01.30 14:10:48 INFO  compiling livechart (6 scala sources)
2024.01.30 14:10:48 INFO  time: compiled livechart in 0.26s
2024.01.30 14:10:48 INFO  compiling livechart (8 scala sources)
2024.01.30 14:10:49 INFO  time: compiled livechart in 0.31s
2024.01.30 14:11:02 INFO  compiling livechart (8 scala sources)
2024.01.30 14:11:02 INFO  time: compiled livechart in 0.28s
2024.01.30 14:11:03 INFO  compiling livechart (8 scala sources)
2024.01.30 14:11:03 INFO  time: compiled livechart in 0.32s
2024.01.30 14:11:13 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\model\TableModel.scala
2024.01.30 14:11:24 INFO  compiling livechart (8 scala sources)
2024.01.30 14:11:24 WARN  there was 1 deprecation warning; re-run with -deprecation for details
2024.01.30 14:11:24 INFO  time: compiled livechart in 0.63s
Exception in thread "pool-37-thread-17" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.30 14:11:49 INFO  Deduplicating compilation of livechart from bsp client 'Metals 1.2.0' (since 3h 6m 46.38s)
Jan. 30, 2024 2:11:49 P.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 21793
2024.01.30 14:11:49 INFO  compiling livechart (1 scala source)
2024.01.30 14:11:49 INFO  compiling livechart (1 scala source)
2024.01.30 14:11:49 INFO  time: compiled livechart in 0.16s
2024.01.30 14:11:51 INFO  compiling livechart (1 scala source)
2024.01.30 14:11:51 INFO  time: compiled livechart in 0.31s
2024.01.30 14:11:51 INFO  compiling livechart (2 scala sources)
2024.01.30 14:11:51 INFO  time: compiled livechart in 0.18s
2024.01.30 14:11:58 INFO  compiling livechart (2 scala sources)
2024.01.30 14:11:58 WARN  there was 1 deprecation warning; re-run with -deprecation for details
2024.01.30 14:11:58 INFO  time: compiled livechart in 0.33s
2024.01.30 14:12:13 INFO  compiling livechart (1 scala source)
2024.01.30 14:12:13 INFO  time: compiled livechart in 0.32s
2024.01.30 14:12:13 INFO  compiling livechart (2 scala sources)
2024.01.30 14:12:13 INFO  time: compiled livechart in 0.44s
Exception in thread "pool-37-thread-18" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Exception in thread "pool-37-thread-19" java.lang.InterruptedException
	at scala.meta.internal.metals.FutureCancelToken.checkCanceled(FutureCancelToken.scala:29)
	at scala.meta.internal.pc.CompilerAccess.onCompilerJobQueue$$anonfun$1(CompilerAccess.scala:230)
	at scala.meta.internal.pc.CompilerJobQueue$Job.run(CompilerJobQueue.scala:152)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024.01.30 14:13:09 INFO  compiling livechart (1 scala source)
2024.01.30 14:13:09 INFO  time: compiled livechart in 0.17s
2024.01.30 14:13:10 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.30 14:13:10 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.30 14:13:10 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.30 14:13:10 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.30 14:13:10 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.30 14:13:10 WARN  Could not load snapshot text for C:\Users\yashb\Documents\vscode-laminar-vite-extension\webview-ui\src\main\scala\livechart\LiveChart.scala
2024.01.30 14:13:13 INFO  compiling livechart (1 scala source)
2024.01.30 14:13:13 INFO  time: compiled livechart in 0.17s
2024.01.30 14:13:13 INFO  compiling livechart (2 scala sources)
2024.01.30 14:13:13 INFO  time: compiled livechart in 0.15s
2024.01.30 14:13:18 INFO  compiling livechart (2 scala sources)
2024.01.30 14:13:18 INFO  time: compiled livechart in 0.2s
2024.01.30 14:13:26 INFO  compiling livechart (3 scala sources)
2024.01.30 14:13:26 INFO  time: compiled livechart in 0.41s
2024.01.30 14:13:26 INFO  compiling livechart (2 scala sources)
2024.01.30 14:13:26 INFO  time: compiled livechart in 0.44s
